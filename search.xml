<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Qt4和Qt5的信号和槽的使用差异</title>
      <link href="posts/4b6d9382/"/>
      <url>posts/4b6d9382/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>Qt4</code> 和 <code>Qt5</code> 的信号和槽的连接 <code>connect</code> 与断开 <code>disconnect</code> 区别</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210629231342.png" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="信号和槽的-connect"><a href="#信号和槽的-connect" class="headerlink" title="信号和槽的 connect"></a>信号和槽的 connect</h2><h3 id="Qt4-方式-宏"><a href="#Qt4-方式-宏" class="headerlink" title="Qt4 方式: 宏"></a>Qt4 方式: 宏</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Qt4: 宏</span><span class="token comment">/*式1*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">,</span> Qt<span class="token operator">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token operator">::</span>AutoConnection<span class="token punctuation">)</span><span class="token comment">/*式2*/</span>         QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">,</span> Qt<span class="token operator">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token operator">::</span>AutoConnection<span class="token punctuation">)</span> <span class="token keyword">const</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="Qt5-方式-函数指针"><a href="#Qt5-方式-函数指针" class="headerlink" title="Qt5 方式: 函数指针"></a>Qt5 方式: 函数指针</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Qt5: 函数指针</span><span class="token comment">/*式3*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> PointerToMemberFunction method<span class="token punctuation">,</span> Qt<span class="token operator">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token operator">::</span>AutoConnection<span class="token punctuation">)</span><span class="token comment">/*式4*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> Functor functor<span class="token punctuation">)</span>   <span class="token comment">/*式5*/</span>  <span class="token keyword">static</span> QMetaObject <span class="token operator">::</span> Connection <span class="token class-name">QObject</span> <span class="token operator">::</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span> sender， <span class="token keyword">const</span> QMetaMethod＆signal，<span class="token keyword">const</span> QObject <span class="token operator">*</span> receiver， <span class="token keyword">const</span> QMetaMethod＆ method，Qt <span class="token operator">::</span> ConnectionType type <span class="token operator">=</span> Qt <span class="token operator">::</span> AutoConnection）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="connect-第五个参数"><a href="#connect-第五个参数" class="headerlink" title="connect 第五个参数"></a>connect 第五个参数</h3><p>type：用于指明信号和槽的关联方式，它决定了信号是立即传送到一个槽还是在稍后时间排队等待传送。关联方式使用枚举 Qt::ConnectionType 进行描述，下表为其取值及意义</p><table><thead><tr><th>枚举</th><th>值</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Qt::AutoConnection</td><td>0</td><td><strong>（自动关联，默认值）。</strong>若接收者驻留在发射信号的线程中(即信号和槽在同一线程中)，则使用 Qt::DirectConnection，否则，使用 Qt::QueuedConnection。当信号发射时确定使用哪种关联类型。</td></tr><tr><td>Qt::DirectConnection</td><td>1</td><td>直接关联。当信号发射后，立即调用槽。在槽执行完之后，才会执行发射信号之后的代码(即 emit 关键字之后的代码)。该槽在信号线程中执行。</td></tr><tr><td>Qt::QueuedConnection</td><td>2</td><td>队列关联。<strong>当控制权返回到接收者线程的事件循环后，槽才会被调用</strong> ，也就是说 emit 关键字后面的代码将立即执行，槽将在稍后执行，该槽在接收者的线程中执行。</td></tr><tr><td>Qt::BlockingQueuedConnection</td><td>3</td><td>阻塞队列关联。和 Qt::QueuedConnection 一样，只是信号线程会一直阻塞，直到槽返回。如果接收者驻留在信号线程中，则不能使用此连接，否则应用程序将会死锁。</td></tr><tr><td>Qt::UniqueConnection</td><td>0x80</td><td>唯一关联。这是一个标志，可使用按位或与上述任何连接类型组合。当设置 Qt::UniqueConnection 时，则只有在不重复的情况下才会进行连接，如果已经存在重复连接(即，相同的信号指同一对象上的完全相同的槽)，则连接将失败，此时将返回无效的 QMetaObject::Connection</td></tr></tbody></table><br><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 式1</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 式2</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> mb<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 式3</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token operator">::</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token operator">::</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 式4</span>A ma<span class="token punctuation">;</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token operator">::</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token operator">::</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// void x(int i)是类 B 中定义的静态槽</span><span class="token comment">// 式5</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span><span class="token keyword">int</span> indexSig <span class="token operator">=</span> ma<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">indexOfSignal</span><span class="token punctuation">(</span><span class="token string">"clicked(bool)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> indexSlot <span class="token operator">=</span> mb<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">indexOfSlot</span><span class="token punctuation">(</span><span class="token string">"close()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> ma<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span>indexSig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> mb<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span>indexSlot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>补充：</strong></p><ul><li>形式 3 的槽函数可以不使用 <code>slots</code> 关键字声明，任意的成员函数都可以是槽函数。形式 1 的槽函数必须使用 <code>slots</code> 修饰</li><li>形式 1 的槽函数不受 <code>private</code> 的限制，也就是说即使槽是 <code>private</code> 的，仍可通过信号调用该槽函数，而形式 3 则在使用 <code>connect</code> 时就会发生错误。</li></ul><br><h2 id="信号和槽的-disconnect"><a href="#信号和槽的-disconnect" class="headerlink" title="信号和槽的 disconnect"></a>信号和槽的 disconnect</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*式1*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">)</span><span class="token comment">/*式2*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QMetaObject<span class="token operator">::</span>Connection <span class="token operator">&amp;</span>connection<span class="token punctuation">)</span><span class="token comment">/*式3*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject<span class="token operator">*</span>receiver<span class="token punctuation">,</span> PointerToMemberFunction method<span class="token punctuation">)</span><span class="token comment">/*式4*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> QMetaMethod <span class="token operator">&amp;</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject<span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> QMetaMethod <span class="token operator">&amp;</span>method<span class="token punctuation">)</span><span class="token comment">/*式5*/</span>         <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token comment">/*式6*/</span>         <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span>                                                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong></p><ul><li><p>形式 3 的槽函数可以不使用 slots 关键字声明，任意的成员函数都可以是槽函数。形式 1 的槽函数必须使用 slots 修饰</p></li><li><p>形式 1 的槽函数不受 private 的限制，也就是说即使槽是 private 的，仍可通过信号调用该槽函数，而形式 3 则在使用 connect 时就会发生错误。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPS 的缩写含义</title>
      <link href="posts/3564a0da/"/>
      <url>posts/3564a0da/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>WPS</code> 的这几个的含义缩写是？有时候会想一下，就如之始好奇 <code>DTK</code> 的含义一样；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/24b61ef9b2f671a2f8d0e0600aca8576.png" width="50%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>​    以前总以为一些耳熟能详的 LOGO 的含义是由特殊含义的缩写，不会被改变，但是现在这个认知在这次的培训中发生了转变；</p><p>WPS 最早的含义是 <strong>Word Processing System</strong> (文字处理系统）；而现在被赋予了新的含义 <strong>WorkSpace Platform Service</strong> 。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_5064(20210626-224838).JPG" width="50%"/ loading="lazy"><br><p>然后另一个是 DTK，比较早的含义是 <strong>Deepin Tool Kit</strong> ；现在也被赋予了新的含义 <strong>Development Tool Kit</strong> 。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210626224801.png" width="70%"/ loading="lazy"><br><p>​        时间在流逝，一切都在发展变化，大家也都为其带来了新的寓意和寄托。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上班两年干了些啥？该思考人生</title>
      <link href="posts/f5f1bb34/"/>
      <url>posts/f5f1bb34/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  第一次上班，第一份工作，工作了两年，回想一下这两年我都干了些啥？学到了一些啥？以及思考一下以后我想干啥？略困惑，需要思考下人生</p><p><strong>1. 我是谁？</strong></p><p><strong>2. 我想做什么？</strong></p><p><strong>3. 我在做什么？</strong></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/065fb0ef38cb2a733ec131e239889c2b.gif" width="60%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="缘分"><a href="#缘分" class="headerlink" title="缘分"></a>缘分</h3><p>​        七月份的武汉，酷暑难耐，刚出象牙塔，手持简历，四处奔走。可能第一次的记忆都会比较深刻？那是一次愉快的面试，依稀记得面试房间空调很凉快，面试官的手指修长且很白，长相清秀，看着比我大一两载，过程很聊得来，有一种所学前面有所相似，很开心，就这样巧合进到 <code>Deepin</code> （武汉深之度）了。</p><br><h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>​        入职第一天，老大即是面试官 zccrs，意外的惊喜。初次接触商业代码，但是却没有什么文档，甚是辛苦大佬搬个小板凳，坐在我旁边，手把手教我，刚开始一周代码都是他写的帮我提交的，于是提交了；老大也是大佬，却很是主动和热情（如同夏日的一丝凉风，带来记忆中的凉爽）；一同进来的几个上小伙伴，也都互相一起学习，纷纷想自己所会的部分主动教予他们，互相学习，氛围很棒，也很舒适。</p><p>​        当第一眼看到 <code>Deepin v15</code> 时候，甚至惊艳，界面竟然如此美观，尤其是磨砂、透明、任务栏、右侧控制中心、全屏启动器、以及锁屏样式，就是惊艳至极。<strong>很多美好的事物可能就是初次看到，然后以感觉惊艳以至记忆深刻吧。</strong> 这里好好夸夸我们大设计师 shule1987  老师，且还可以安装 <code>QQ</code> 和 微信等（当时来消息盯着这个任务栏摇头晃脑看了好久），甚至很多其他软件都可以直接在应用商店中安装；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Untitled.gif" width="50%"/ loading="lazy"><p>​            </p><p>​            之前在校只浅浅用过 Ubuntu，未深入接触过 Linux 其它发行版，也未曾听说过 Deepin，后来才知原来在此领域早已经有名气。<br>​            <strong>番外：</strong> 工作一个月后，恰好回答过一篇知乎，无意成了首答 <a href="https://www.zhihu.com/question/344339517/answer/817025546">zhihu.com</a> ，</p><br><h3 id="完成-List"><a href="#完成-List" class="headerlink" title="完成 List"></a>完成 List</h3><h4 id="工作的收获"><a href="#工作的收获" class="headerlink" title="工作的收获"></a>工作的收获</h4><p>已经完成 List：</p><ol><li><p>✅  维护和开发 DTK 库</p></li><li><p>✅  实现社区用户渴望的小功能</p></li><li><p>✅  维护和更新仓库对外部开源事宜</p></li><li><p>✅  额外参与开源社区和 GitHub 项目</p></li><li><p>✅  开发自己的小软件：网速插件、截图等</p></li><li><p>✅  软件商家到 Deepin 社区商店、Spark Store</p></li><li><p>✅  推进和打通外部贡献者给内部贡献代码的渠道</p></li><li><p>✅  在 BBS 和 TG 上为国际用户解决困惑</p></li><li><p>✅  搭建和完善 DTK 官网文档</p></li><li><p>✅  主持演讲 “技术分享会”</p></li><li><p>✅  技术文章收到了稿费</p></li><li><p>✅  个人 Qt / C++ 系列文章完善</p></li><li><p>✅  纂写专利底稿，且是专利的第一作者是自己名字</p></li><li><p>✅  和群友划水、吹牛（这个也算）</p></li></ol><br><p>​        本职工作大致分为两个阶段，前期维护和开发 DTK 这个核心库，是 Deepin / UOS 全家桶软件的核心基石；对 Qt 的源码看的比较多、尤其是原生控件的绘画实现、和使用了解的比较多，深度专一发展。后期巧合下成了全职负责社区相关，极大地丰富了广度和各接触面，也满足了对于开源社区的在运作方式好奇心、开源协议相关的知识、接触开源这个圈子相关；也为后面推动、打通外部贡献者在 GitHub 直接提交贡献到内部代码审查平台上的渠道种下了种子。</p><p>​        恰好那会有用工具统计过，参与 <code>DTK</code> 核心库的开发与维护，大约贡献 <a href="https://github.com/linuxdeepin/qt5integration">qt5integration</a>  10% 的代码、以及百分之几的 <a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget</a> 的代码。当然现在现在这个比例随着规模在逐渐扩大，后面会越来越小，甚至略有后来者多多提交，有所期待。当熟悉写好了 Qt 的控件时候，就对社区用户的一些愿望，就有相帮他们实现。比如审美的个体差异：大圆角。既然大佬们没事时间，而我恰好又有空，那么就我来吧；后主导和开发 “圆角自定义”功能，在社区版 Deepin 上设置了 UI 修改开关、以及可用命令的方式。为了商业版也可以修改，我也给给留了一个可命令修改的方式，后面产品如果可以有想法的话。只需要去掉一行 if 代码即可；对于如何修改，则可以参考 <a href="https://xmuli.blog.csdn.net/article/details/109232878">此文</a>。</p><p>​        空闲的晚上，有开发两款网速插件，1️⃣一个简版 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a>  作为 DDE-DOCK 的插件实现，用的 DTK 开发，精简功能且单一，我用这就觉着挺好，也已经上架 Deepin 和星火商店。2️⃣再后来感觉希望能够支持其它桌面环境，甚至支持 Win 和 Mac，于是全部重构，重新设计，设计成了桌面悬浮模式和同时支持任务栏模式，开发了 <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a>  。最后时间时间空闲，越写越大，不可收拾，想通了不应该有万能的程序，功能过于复杂，容易吃力不讨好，且代码量指数级上升。随后精简和砍掉了冗余功能，做成了 Linux 下所有桌面都可通用的，哪位有空可以直接帮我打包到其他发行版中，可以直接过的。3️⃣另外还开发了一个小的本地截图软件 <a href="https://github.com/xmuli/ShotX">ShotX</a>，哈哈哈哈， logo 继承了 Deepin 的风格，找的某设计的小姐姐帮忙实现的，一直觉得挺好看的。最核心的截图功能（支持多屏）已经实现，基本功能实现了，只是没打包，后面有空再整🕊🕊🕊~~~ 咕咕咕咕。</p><p>​        投稿《UNIONTECH 源码 • 2期》，收到了人生的第一笔稿费，和印有自己文章的实体书。</p><p>为了降低后来者上手 <code>DTK</code> 的门槛，书写了一些文档和搭建了一些网站（此处感谢亦感谢部署中的小伙伴帮助）</p><ul><li><code>DTK</code> 的个人积累系列文章，也包含 Qt 控件的使用： <a href="https://github.com/xmuli/QtExamples">QtExamples</a> </li><li>搭建 <code>Deepin / DTK</code> 的官方文档：<a href="https://docs.deepin.org/">docs.deepin.org</a> </li><li>制作 DTK 的相关 PPT 和会议分享：<a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">《DTK 框架分享.pptx 》等</a> </li><li>分享会 DDE 如何移植到其他 Linux 发行版：<a href="https://ifmet.cn/posts/78cd25f3/">DDE移植Arch流程</a> </li><li>制作虚包 deepin-sdk 和，方便安装 DTK 的开发环境：</li><li>DTK 的中文 API 文档能在本地 Qt 助手直接无缝查看：<a href="https://ifmet.cn/posts/3f6b9501/">DTK 文档嵌入 Qt  Assistants</a></li></ul><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3572.JPG" width="100%"/ loading="lazy"><p>​        其中重点感谢帮助我搭建和推动过程的一些大佬们的协助，和热情的帮助，得以使得有些东西能够被顺利完成。</p><br><h4 id="技术的学习"><a href="#技术的学习" class="headerlink" title="技术的学习"></a>技术的学习</h4><p>已经完成 List：</p><ol><li>✅  CMake 的学习</li><li>✅  为 Qt 提交 PATH</li><li>✅  完善博客搭建和部署</li><li>✅  了解：Linux 的发行版区别、自由软件和免费软件、开源协议之间的关系</li><li>✅  了解：制作 <code>dde-dock</code> 的插件、安装配置文件（用户级和系统级）、国际化翻译的切换和处理</li><li>✅  学习： <code>Qt</code> 的控件绘画和使用；<code>Linux</code> 系统学习之 ❶基础编程 ❷系统编程 ❸网络编程</li><li>✅  体验：Mac、Window、Linux（UOS、Deepin、Ubuntu、Arch）之间反复横跳、体验各自的优缺点。</li></ol><p>​        嗷嗷~，记得一开始当时有重绘好些控件，Code View 时比较严格，且设计师要精确到像素（5K 🍎 🖥看，开发用的 1080 分辨率，唉，当时好想也用高分屏开发）；不过最后效果就是，普通屏开发，但在高分屏上看 DDE 依旧很清晰，奶思；要求严格是非常值得的。</p><br><h4 id="生活的体验"><a href="#生活的体验" class="headerlink" title="生活的体验"></a>生活的体验</h4><p>已经完成 List：</p><ol><li>✅  看书</li><li>✅  拿驾照</li><li>✅  烹饪炒菜</li><li>✅  美食探店：藕汤</li><li>✅  自替换 iPhone 电池</li><li>✅  补番少年时动漫和 TVB </li><li>✅  手游 CFM 苹果区等级同安卓</li><li>✅  购买 4K 27 寸显示器、MBP 13 、音响购买</li></ol><br><p>​        得益于公司的 965 的不加班，以及遇到很好的一个房东，能够每个月不足十分一的工资用来租房；且还有很多的时间，可以用来看一些哲学书籍📚（尤其当技术书籍看疲倦时），甚是思想甚是满足。驾照在在大学就考了科一、科三，后遇教练跳槽、再被开了的奇葩遭遇。后没时间，三年过期遇上疫情，被延期了半年，出乎意料外的幸运，重新拿钱单学一科二，赶在时间过期的前半个月，拿到驾照小本；考前练车被毕恭毕敬称之为董教练、遇科二共十八人全一把过，就称为老董🤣🤣，对于萌新第一次开车上路的感觉可以参见 <a href="https://xmuli.blog.csdn.net/article/details/115049769">此说说</a>。</p><p>​        人不挑食，可柑橘附近的饭菜一言难尽，于是逼得我自行买锅，点亮我的烹饪技能树，现如今家常小炒基本 OK，，氪氪氪，本是不想学这的，娜娜的无奈🤷🏻‍♀️，em，当然也有偶尔翻车的时候，含着泪，好吃好吃好吃。不知是离家许久了，还是思家了。尽然偶时会回忆小小时候奶奶煲的藕汤、发疯了到处探寻武汉的藕塘店，几乎武汉所有的藕汤店都去过了，清一色的粉藕，汤都是好喝；可我还是想找一家脆的藕汤、无它、喜欢罢了。也有朋友带我去各个大家的店铺去吃，初次去吃此烤肉时候，就一个感觉：爽~~ 这才是吃烤肉应该打开的方式。</p><p>​        第一次尝试做西餐，我的这个七分熟，咋样？ 然后炒菜凉菜和炒菜等都有尝试一番过。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_43942.JPG" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4395.JPG" width="45%"/ loading="lazy"></p><p>​        对于炒饭这种，我是很有好奇的，感觉我有时候可以炒的很好看。对于煎锅的使用，当然，有时候使用也会翻车成了下图的🥟，，大概是强行将煮饺尝试做煎饺，嗷呜~~~，没错，是哒，我当时就是炒鸡想吃煎饺。对于吃饭我向来是比较不挑食的，哪怕是朴素一餐也可以接受，但是倘若老婆饼里面没有老婆，哪则是不可的。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4397.JPG" width="45%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4401.JPG" width="48%"/ loading="lazy"></p><p>​        练车时候，手机🔋很快就没了，加上偶尔也会折腾下电子产品，想着自行拆机换一下新电池，就说干就干，心里还有点小预期，拆坏了就换 12，可看来是想让 8P 再战一年。另一方面，常用电脑，对于操作系统 Linux、Window、Mac 这三者之间用哪一个？总是反复横跳，喜欢它们各自的优点、爱不释手，但是各自的缺点又略有难以忍受，最后的解决方案是“小孩子才做选择题”，买了心心念念的 🍎 MBP 和 HUAWEI (Mate Book pr ) 只有这款支持 4 K，醉了醉了，也知道自己最适合的就是一个 27 寸的 4K 屏幕即可，使用最舒服的姿势。对于 PC 游戏一直不感兴趣、大概是小学时候去过了，长大了反而没兴趣？？？手游也只有一个 CFM 从内测玩到现在，腾讯的氪金游戏硬生生的完成了打卡得装备的游戏。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/1111223.gif" width="70%"/ loading="lazy"><br><h4 id="额外相遇"><a href="#额外相遇" class="headerlink" title="额外相遇"></a>额外相遇</h4><p>期间已遇到 List （见证）：</p><p>​        自我上班起，恰好经历（遇到）的如下：</p><ul><li>参与 Deepin V15 开发 V20 版本，UI 等样式全新大改版</li><li>更换 LOGO 为 UOS（后同时保持 Deepin ）</li><li>恢复断更新九个月的开源代码在 <a href="https://github.com/linuxdeepin">GitHub</a> 上（开心😄）</li><li>武汉深之度被融资，成立更大规模的公司统信软件</li><li>背后的某股票猛涨了 10 倍（虽然至今都没玩这东西，从我入职那天就开始涨，涨到了年底）</li><li>公司搬迁到更大的一个地方，更多的楼层</li><li>公司人数由 200 一年多涨到 2000+ 人规模</li><li>然后在全国各地开设置子公司，规模急速扩张</li></ul><br><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>​        遇到带我的架构老大（大佬 zzcrs），学习了很多技能和为人品质，很是感激。</p><p>​        遇到 Hualet ，得见原来总监大佬的温文尔雅和和善，也有多被照顾，很是感激。</p><p>​        遇到舒老师，原来设计大佬可以这么帅还有艺术感，生活的 volg 给人美感和温暖，很是感激。</p><p>​        遇到每天开心的竹子 ，主动亦热情，知识广度丰富带我接触更多，很是感激。        </p><p>​        遇到产品 megnni，性格可是我所缺少的那一面，既向往，也舒畅，很是感激。</p><p>​        遇到 WP 教会我生活，遇到 LQ 带我们去吃烤肉，遇到 CK 的认真负责，遇到 SJ 陪我聊天灌水，分享生活经历和人情，很是感激。</p><p>​        遇到还有很多很多的小伙伴和大佬们，每一笔都很珍贵，很珍惜，在此一并感谢。</p><br><h3 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h3><p>​        2021.04 初递交了离职报告，离开 “统信软件（亦 Deepin）”、，虽有不舍亦不后悔。来的匆匆，走的也匆匆。氛围很好的一家公司，也可以学习到很多知识，有很多的空闲时间去思考一些人生，想要去推进的事情，大佬也会很支持和提供资源，同事之间的氛围也很棒，设计的舒老师又帅又好说话、设计的妹子人美声甜，产品的大姐姐们也奶思，甚至还可以带薪撩拨测试的小妹子，大佬对于开源社区这方面也是很支持，亦是很适合新人推荐的，虽离开，但给予我一段很好的回忆。 也有想去完成一些它的事情，记录曾经的我的桌子布局，留以纪念这两年。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_2393%202.JPG" width="45%"/ loading="lazy">   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_1447%202.JPG" width="45%"/ loading="lazy"></p><br><h3 id="新相遇"><a href="#新相遇" class="headerlink" title="新相遇"></a>新相遇</h3><p>​        睡过一觉，又是新的一天，新的一天也是元气满满的一天，迎接今日份的新开始，认识新的朋友，新的经历，新的懵懂与无知，新的公司，新的进步，新的相遇。邂逅，<strong>看到本文也是缘分，若是想来我呆过这两家之一，均可帮忙内推这两家。</strong></p><p>​        再见，统信（Deepin），感谢相逢。</p><p>​        你好，金山，有幸能为 WPS 贡献代码。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4404.JPG" width="50%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> WPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上海之旅，再让键盘长几天草</title>
      <link href="posts/31c5b72/"/>
      <url>posts/31c5b72/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　出游，✈️✈️✈️，上海、迪士尼，芜湖~~</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526224520.png" width="80%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>​        上海作为大城市，心慕已久。前往，欣欣然，顺道前往迪士尼，见识一番。</p><br><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><h4 id="上海迪士尼"><a href="#上海迪士尼" class="headerlink" title="上海迪士尼"></a>上海迪士尼</h4><p>​        ✈️✈️✈️，芜湖~，看看窗外的☁️，到达，乘车车，到达上海迪士尼。丢书包与酒店，再乘坐专线车送到门口。</p><p>​        步入大门，就是一侧就是巨大唐老鸭在水里面游着，下意识的就是这个 <strong>冲鸭</strong>。入园，又是一道大门，还需行李安检，再往前行，数十步，又是就是下图的最后一道门，可以看到米奇的标志 LOGO；以及确认是真的到了迪士尼，往前一步，就是女生们心心念念的之地（哪个少女不怀 <del>着心思想去一次？</del>）。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526223852.png" width="60%"/ loading="lazy"><br><p>​        <font color=#FE7207  size=4 face="幼圆"><strong>迪士尼的城堡里面又是长什么样子呢？</strong></font> 也是自己好奇了很久的一个问题😄</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526235015.png" width="47%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3714.JPG" width="47%"/ loading="lazy"></p><br><p>​        <font color=#FE7207 size=4 face="幼圆"><strong>想到可能今日（2021.05.20）可能相遇但却不相识？</strong></font> </p><p>​        本次出来玩，是没看日期的，来了才突然发现，遇上了一个好日子 <code>5.20</code>；闲逛着，发现给送了一条消息，易烊千玺也来了，还联名这个五周年的迪士尼米奇，以及刚坐了的这个旋转木马🎠🎠🎠；是不是有擦肩而过过</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4461.JPG" width="50%"/ loading="lazy"><br><p>​        迪士尼的两大活动、以及自定活动各种景点，都需要自行去挖掘发现，去观看，以及去排队</p><p>​    1️⃣ 花车游行，可各种卡通动漫人物一起；看到此舞蹈，👸🏻公主抱，就是花车队伍的开始了，还有幸运观众坐车领队哦~</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526231705.png" width="43%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4463.GIF" width="57%"/ loading="lazy"> </p><p>​    2️⃣ 景区自行游玩，怎么能够不打卡各处，体验一下各个之间风格呢？又以及怎么能够不留几张图片呢？为了这些小可爱们；对了，推荐“加勒比海盗” 和 “飞越地平线” 这两项目，很是震撼。看了都想二刷，不过还是要排队，哪怕是快速通道一样</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4432.JPG" width="60%"/ loading="lazy"><p>​        3️⃣ 夜间大型烟花表演秀；烟花天空的绽放让人心醉，但却只是一瞬，但某平洋保险却能赞助好久，一直放好久的烟火；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526230255.png" width="80%"/ loading="lazy"><br><h4 id="上海城市"><a href="#上海城市" class="headerlink" title="上海城市"></a>上海城市</h4><p>✅  迪士尼</p><p>✅  豫园</p><p>✅  外滩</p><p>✅  南京路步行街</p><p>✅  上海自然博物馆</p><p>✅  思南公馆</p><p>✅  城隍喵（划，庙）</p><p>✅  启瓶器（环球金融）</p><p>✅  ,,,</p><p>去了城隍庙，发现月老和财神爷是隔壁家的关系，一炷香，许两个愿望，还行？合成一个实现也行：饿，饭饭，小富婆</p><blockquote><p>上香： 姻缘 + 财神  = 我的一个愿望</p></blockquote><p>至于外滩，一侧是钟楼（某银行）？另一侧则是江岸边，总有着很多的人，除了容易看到外国新娘👰🏻，还可以来学英语，真真的友人实景教学；登高楼，俯视整个陆家嘴以及黄浦江，上海夜景尽收眼底，灯火绚丽，向往；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4430.JPG" width="80%"/ loading="lazy"><br><h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>​        来一地方，自然需要品一方美食，上海作为大城市，有个熟悉的地道的上海人带我去尝尝本地菜，嘿嘿~。去了大茶壶的那个最老的店铺，特色生煎，各种口味仅此店才有，哈哈哈哈哈哈哈哈哈😁~~~，这就炒鸡开心了；然后还有着逸桂禾的阳春面，清淡，汤也好喝。想吃这种面很久了，今日得以一见。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4431.JPG" width="60%"/ loading="lazy"><p>​        再然后其也尝了尝其它地方的美食，咋感觉像是，感觉上海早餐以这种生煎、甜品之类的为多，菜系也多为偏甜。当然了，作为初来乍到的异地人，基本全部带有偏甜的，略有吃不习惯。晚上附近一个人找了家地道的川菜馆，阿西，阿西，阿西，当然还是无辣不欢🌶🌶🌶；特意点的中辣、中麻；夹了第一筷子🥢，放下了，然后喝了一口水。心情复杂，心情复杂，心情复杂，真的是心情复杂；</p><p>​        这是吃饭吃了很久的一次，一筷子一筷子的漫不经心。前天问了问撩拨了前台的两个小姐姐。</p><p>你是本地上海人嘛？</p><p>嗯嗯，是哒。</p><p>你觉得你们这们川菜够辣不？</p><p>不辣。</p><p>。。。。  </p><p>我不仅觉得不辣，不麻，甚是还有点甜。</p><p>随后仙女掩面一笑，动人心神。拎包，下班</p><br><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>​        “上海迪士尼酒店” 与 “玩具总动员酒店” 是最靠近上海迪士尼的两个酒店，都充满着可爱的动漫人物😊；入住后的酒店并非想象中的奢华，但细节却甚是干净，已有专门的小车车来接送去迪士尼的侧门，不用去像第一天那样去正门排队入园。</p><p>​        后几日，换了住宿之地，临江而望，东方明珠和环球金融中心即在眼前，略意外的是，感觉那塔没有开灯，或许是太早了，还没到点。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4426.JPG" width="50%"/ loading="lazy"><h3 id="再遇"><a href="#再遇" class="headerlink" title="再遇"></a>再遇</h3><p>​        🛫🛫🛫，回家，此番玩的尽心，品尝了一番甜系的上海菜；回家，继续吃吃习惯的菜品，无辣不欢，解解馋</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4453.GIF" width="80%"/ loading="lazy"><p><strong>后记：</strong>  千万不要像我一样一个人单独去迪士尼，还巧合是 5.20 这一天，还巧合是易烊千玺也去的一天。不然你会知道那些情侣请你帮她们拍照的时候，当看到你是一个人独行的时候，就很 🐶🐶🐶；后还遇到了单人通道，可惜那天也被关闭了，呜呜呜呜~~~；不像我，只能想，有个妹妹说，不像我，只会心疼一下哥哥。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
            <tag> 上海 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译 LNK1104 无法打开文件“ xxx.dll”</title>
      <link href="posts/f5f6f078/"/>
      <url>posts/f5f6f078/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　VS 2019 编译：LNK1104    无法打开文件“E:  xxx.dll”</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​        Win10 使用 VS 2019 编译 C++ 的大型项目，报错如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">严重性代码说明项目文件行禁止显示状态错误LNK1104无法打开文件“E:  xxx.dll”xxxxxxxx<span class="token punctuation">\</span>LINK<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>​        当前 <code>xxx.dll</code> 已经被其他应用程序占用，关掉对应进程（或软件）之后，再编译项目。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2019调试Qt5时QString显示为内存地址而非字符串</title>
      <link href="posts/f7939b53/"/>
      <url>posts/f7939b53/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>VS 2019</code> 调试 <code>Qt5</code> 时 QString  显示为内存地址而非字符串内容。不悦，解决之。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​        用的 Win10 20H2，本机只安装了 VS 2019，没安装 Qt 程序，使用的是 Qt 源码分支编译，以文件夹路径中来调用和使用。结果发现 VS 2019 调试 Qt5 时候，其中 QString 显示内存地址地址，而非字符串内容。</p><br><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>​        点击 <strong>“VS2019-扩展-联机”</strong> ，安装 <code>Qt Visual Studio Tools</code> 之后，重启 VS 即正常显示为文本内容。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210428202203.png" width="80%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10的20H2使用VS2019，拖曳窗口会崩溃</title>
      <link href="posts/f6612e2a/"/>
      <url>posts/f6612e2a/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　发现 Win10 的 20H2 的一个 BUG，使用 VS 2013、2015、2017 、2019 的窗口拖曳拆分、合并都会崩溃。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>重装系统 win10，使用最新 20H2 + VS 2019，结果发现拖曳 VS 窗口进行合并或拆分时候，放完成松手完成时候， VS 都会崩溃重启，甚是不爽。详细版本如下：</p><blockquote><p>// Win10 版本</p><p>版本    Windows 10 专业版        版本号    20H2<br>安装日期    ‎2021/‎4/‎16        操作系统内部版本    19042.804<br>体验    Windows Feature Experience Pack 120.2212.551.0</p><p>// VS 版本</p><p>Visual Studio Professional 2019  版本 16.4.12</p></blockquote><br><h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p><strong>我的电脑 Win10 无法更新系统，VS 2019 虽然可联网更新，但是升级之后，可能项目会编译不过（进退两难）。</strong></p><blockquote><p>无法连接到更新服务。我们将稍后再试，你也可以立即进行检查。如果问题仍然存在，请确保你已连接到 Internet。</p></blockquote><p>​        很蛋疼的一点是，某种原因，网管把所有电脑把 win10 自动更新的域名断了（一开始还以为是此版本的 BUG，尝试多种方案均链接网络失败）。后灵光一闪，猜是网管掐了。气死了，气死了，气死了，不过电脑不更新了，好像也挺爽。</p><br><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="将就解决方案"><a href="#将就解决方案" class="headerlink" title="将就解决方案"></a>将就解决方案</h4><p>又不是不能用，不拖曳窗口就行，不会弄那就这样将就用</p><br><h4 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h4><p>虽然拖曳窗口会崩溃，但可以鼠标右键 “新建垂直文档组”。也达到目的，不过不够优雅</p><br><h4 id="我的解决方案"><a href="#我的解决方案" class="headerlink" title="我的解决方案"></a>我的解决方案</h4><p>编辑 <code>%InstallRoot%\Common7\IDE\devenv.exe.config</code>  和 <code>%LocalAppData%\Microsoft\VisualStudio\16.0_xxx\devenv.exe.config</code> ，并在AppContextSwitchOverrides 元素的 value 属性的结尾上添加以下代码。（找不到就用 Everything 搜索，修改hi前记得先备份原文件）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span>Switch.System.Windows.Interop.MouseInput.OptOutOfMoveToChromedWindowFix<span class="token operator">=</span>true<span class="token punctuation">;</span>Switch.System.Windows.Interop.MouseInput.DoNotOptOutOfMoveToChromedWindowFix<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 VS 2019，拖曳窗口合并拆分，完美且不会崩溃。</p><br><h4 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h4><ul><li>对于 VS 2013、2015，只需要升级 win10 补丁即可，重启正常。</li><li>对于 2019 、只需升级 VS 到最新版本即可（<a href="https://developercommunity2.visualstudio.com/t/Unexpected-VS-crash-when-docking-or-spli/1323017">Microsoft  已修复</a>）。</li><li>对于 VS 2017，可以试试先升级系统，后升级 VS 。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三亚之旅，让键盘先长几天草</title>
      <link href="posts/3b6c071c/"/>
      <url>posts/3b6c071c/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　忽翻出了去三亚之旅的照片，一次美好的看海,玩水之旅行。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_8189.JPG" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>​        在一个地方呆久了，总会幻想着有一日去另一个山清水秀之地，畅游一番，看另一方山水、一方人情。迟迟未去的理由也许大概是 <strong>“我也曾想仗剑走天涯，奈何 BUG 太多而没去”</strong> 。此次有了机会和时间，得以出发，增加一点见识、看看山水、享受一下阳光、沙滩、大海、以及…👫🏻</p><br><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><p>​        还没来一个地方之前，就对她有着许些期待、一头小鹿四处跳跃在心中。先想着去哪里玩、玩些啥、然后乐呵的美滋滋遐想。</p><p>​        对于旅行，我更倾向于没有规划、走到哪里就玩到那哪里、随走随停，这才是我想的一种旅行。也毕竟一地的打卡景点之多，竟可能的全去，总有路上匆忙之感，丢了旅游的悠然与惬意。</p><p>​        在路上、也认识了一些新朋友，聊得投机，相约同行。且发现是一老司机（字面意），后租一车，想去哪里，我们就去哪里。芜湖~</p><p>​        刚到，就初缝套路深；先去一家路边小店买了一件椰树的游泳裤衩、拖鞋等。后半路遇其她商家、被告知成了肥羊了。略有小气，气不过，返回店家，怒气冲冲😤😤😤，后退还多余现金（多赚可忍，但卖数倍，就气不过了）。不过后面都基本正常，算是一个小插曲。</p><p>​        当然是先去海边拉，光着小脚丫，踩踩👣👣👣</p><br><p>​        记得，有去潜水🤿、去摸摸水底的🐟，给她们喂着一些鱼饲料，可能是来看她们的人多了，也不见怕人、但伸手去摸，依旧会快速的摇着尾部遁走；本以为喂饵的人会很多，不会怎么吃，可是实际发现还是依旧很贪吃，吃的一个快速和惬意；水底实际也是很浑浊的，仅勉强看清周围几十距离，周围漆黑，和📺的水底世界拍照，相差甚远了。</p><p>​        后面还去完了一些划水冲浪的项目，阿西，真的是天黑才停止。真的是摩托艇前面跑，溅起的浪花溅在脸上，感觉真的是又疼又闲又贵又刺激又好玩。</p><p>​        踩着海滩边的柔软细沙，光着脚，很舒服，旁边就是打着沙滩排球的俊男靓女。当然偶尔也会遇到有人趁你不注意，塞张小卡片到你手里。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210423223703.png" width="100%"/ loading="lazy"><br><p>​        最后还去了三亚购物，先去的 Apple 店铺看的，不过比较小，那会 🍎 12 店铺没有了，略扫兴、本有意换个手机的，那就再接着用一年，坐等 IPhone 13 香 <del>（王守义十三香提前加持）</del>。后路过卖🍺的，好可惜，滴酒不沾的我，只是看看，没啥兴趣。</p><p>​        最后，一个男生去逛彩妆店和护肤品店、又能有什么坏心思呢？只不过是去给某个💃送点小礼物罢了。出乎意料之外的是，本以为这里不会有什么男生，结果男生至少占了三成🤦‍♂️，看起来都是买护肤送老婆。赶紧问了下好友里的小姐妹们 ，送小礼物应该送啥、让给出谋划策。每家店铺队伍都还挺长的。只记最后拎着三个大袋子，有一个还袋子压破了；买完才知道，这些不能走托运，得提着上飞机，早知道就，，氪，氪，氪，氪，氪，，，一直到现在都觉着里面的女生买东西太夸张了，现在只记得一些：神仙水、SK-II、雅诗南黛、什么珂、韵、娜、婷、什么红（真的是让人上头）。印象深刻的就是，中文名和英文名我对不上、找个店铺都找了好久，哭晕。</p><br><p>​        后也去让老司机开车车，带我们去兜兜风，还可以看到一些漂亮大姐姐，后视镜的墨镜才发现，车车就不认识了，那会还没拿驾照也不认识。有意思来了，后来另一个车的小姐姐也过来了，好像还竞速了一段距离。优点意思。（老司机你开慢点）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3564.JPG" width="100%"/ loading="lazy"><br><h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>​        作为一个会经常在四处探店的人，寻找好吃的，怎么会放过此处的美味呢？首选就是海鲜，其次就是烧烤，哈哈哈哈哈哈，这东西，真的是出来了也还想吃。路途也遇一个大锅说带我去吃海鲜，知道了还有可以自行选购海鲜食材，店家来烧烤这种方式。哈哈哈哈哈哈哈哈😄😄，对于这个，做了功课的，找到一家叫什么小胡子的店铺，两家店面，在一条街上面对面开的，实际是一家，很值得一去，就是得先在远处停车好。里面海鲜都是活的，都让顾客自行挑选保证新鲜，一家店面选好之后，去另一家等待加工，坐等上菜即可。</p><p>​        记得点了皮皮虾，口感和一般皮皮虾不一般，咬下去的每一口都很清脆、味道中带点🌶感，还有海鲜的湿润、鲜味都尝的出来。还有<strong>清蒸石斑鱼</strong> ，这个真的吹爆它，清淡带着深海的感觉，肉质爽滑且鲜美，生动形象的形象，词穷，让人回味无穷。全场最佳，至今依稀记得其味道（可惜图片没找到了），不吃就错过了一个触动灵魂的美食，就可惜了。且。也有椰子饭，可能是饮食习惯的问题，不佳；还有海胆蒸鸡蛋，吃的没找到肉，问了下老板，说海胆就是壳子内壁薄薄的一层膜，我怀疑我是点了一个纯正的鸽子汤，海胆是啥味道完全没试出来，我都怀疑是没有吃到。。。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3552.JPG" width="100%"/ loading="lazy"><p>​        再后来就是吃了一些其它的店铺，记得点了数十份烤牡蛎，确实味道也好吃，不过感觉怎么价格和武汉差不多？？？然后还记得还去了一家东北菜馆，来了朋友推荐的锅包肉，吃吃喝喝，阔乐。然后走在路边会买一些椰子喝喝，感觉有点甜，遍地的🌴🌴🌴🌴🌴，在路两旁都是，然后有一种冒险岛的图感。</p><br><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>​        游玩一天，夜间自然要睡觉，深入沉睡灵魂，蓄力次日的游玩。这里的自助也是很好的，穿了一个睡袍就下吃火锅🍲、小吃等自助，品种很多。吃的饱饱的、要歇一会再能离开。</p><p>​        还有一个游池，水很清澈、可惜了，我游泳是个半瓢水。然后在面疯狂的拍打着浪花、上午的水都是蓝且透亮的、阳光照射，甚是好看；而下午又太阳，水的颜色会变得深蓝透遂一点，👀看到很漂亮</p><p>​        而依栏杆看海面，甚至心旷神怡，拍的比较喜欢一张图；睡觉的地方，楼层比较高，视线也看开阔，旁边还有一阳台，有数把高椅，可以躺着；室内的风格是偏一点复古，看起来也很不错。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3566.JPG" width="100%"/ loading="lazy"><br><h3 id="再遇"><a href="#再遇" class="headerlink" title="再遇"></a>再遇</h3><p>​        倘若下次有机会再去，一定要再去吃一下那家店，的那家的清蒸石斑鱼，，是哒，我又馋了，好想再吃一次。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
            <tag> 三亚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt 信号和槽原理分析</title>
      <link href="posts/a74983e0/"/>
      <url>posts/a74983e0/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>Qt</code> 的信号和槽原理分析：手写一个 moc 预编译器模拟生成 mo_xxx.cpp 过程</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　 最近手工模拟了 Qt 的信号和槽实现原理，用纯 C++ 实现来实现一个 connet 函数。我的 💻 环境为：  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>gcc/g++ 9.0</code> 📎 <code>gdb8.0</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"sig1()"</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">"slot1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>     Qt 的信号和槽解决了 GUI 开发过程中 “对象间通信和共享数据” 问题。属于 Qt 的一个独创解决思路。关于为啥不用 C++ 的标准智能指针或者其它库呢？？那时候 Boost 和 stl 都没诞生呢。所以代价就是通过 moc 预编译器来扩展 C++ 语法。</code></pre><p>​        模拟  object.h 通过 moc 生成 db_object.cpp 的过程中，要想实现如下的一个 connet 函数，很重要就是解决 <strong>“A 对象的 n 信号，映射关联到 B 对象的 m 槽函数”</strong> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="object-h"><a href="#object-h" class="headerlink" title="object.h"></a>object.h</h3><p>下图 的<code>object.h</code> 模拟 QObject 类；</p><ul><li>自定义 C++ 之外的关键字 <code>db_signals</code>、<code>db_slots</code>、<code>db_emit</code>；编译器不报错的？添加为宏预定义处理即可。</li><li><code>MetaObject</code> 对象模拟是元对象，用来在 <code>object</code> 中用来存储  <code>db_signals</code> 和  <code>db_slots</code> 标记下面的函数名；对于信号，只需要声明，则不需要定义（通过 moc 自动在db_object.cpp 中生成 ），但是槽函数则需要自己在其它函数中声明和定义</li><li><code>Connection</code> 是做作为 ConnectionMap 的 value 使用的。保存本对象所链接的对象和对应的槽函数</li><li><code>ConnectionMap</code> “对象 + 信号 ——–映射——&gt; 对象 + 槽” 在代码中存储表现形式。</li><li><code>ConnectionMapIt</code> 是 ConnectionMap 遍历的游标。</li><li><code>static MetaObject meta</code> 具体的元对象。</li><li><code>metacall</code> 通过槽的索引 ==&gt; 槽函数，然后调用</li><li><code>static void db_connet()</code> 静态函数设计，可在任何地方都可以使用，连接信号和槽函数</li><li><code>void testSignal()</code> 测试信号函数，看槽函数是否会成功被调用，即 emit signal( )</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">OBJECT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJECT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_signals</span> <span class="token expression"><span class="token keyword">protected</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_slots</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_emit</span></span><span class="token keyword">class</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">MetaObject</span>              <span class="token comment">// 元对象</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig_names<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot_names<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">active</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Connection</span><span class="token punctuation">&#123;</span>    Object <span class="token operator">*</span>recviver<span class="token punctuation">;</span>    <span class="token keyword">int</span> method<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span> ConnectionMap<span class="token punctuation">;</span><span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span><span class="token operator">::</span>iterator ConnectionMapIt<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> MetaObject meta<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">metacall</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db_signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    void sig2();</span><span class="token keyword">public</span> db_slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    void slot2();</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">MetaObject</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    ConnectionMap connectionsMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// OBJECT_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="object-cpp"><a href="#object-cpp" class="headerlink" title="object.cpp"></a>object.cpp</h3><p>object 类的实现细节</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>subStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str <span class="token operator">||</span> <span class="token operator">!</span>subStr <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sig_idx <span class="token operator">=</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span>sender<span class="token operator">-></span>meta<span class="token punctuation">.</span>sig_names<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slot_idx <span class="token operator">=</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span>receiver<span class="token operator">-></span>meta<span class="token punctuation">.</span>slot_names<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig_idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> slot_idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"signal or slot not found!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        Connection c <span class="token operator">=</span> <span class="token punctuation">&#123;</span>receiver<span class="token punctuation">,</span> slot_idx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        sender<span class="token operator">-></span>connectionsMap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span><span class="token punctuation">(</span>sig_idx<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// connectionsMap 私有成员</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    db_emit <span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过 sender 的信号 idx ==> 槽函数</span><span class="token keyword">void</span> <span class="token class-name">MetaObject</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pair<span class="token operator">&lt;</span>ConnectionMapIt<span class="token punctuation">,</span> ConnectionMapIt<span class="token operator">></span> ret<span class="token punctuation">;</span>    ret <span class="token operator">=</span> sender<span class="token operator">-></span>connectionsMap<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 寻找[idx,  )</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConnectionMapIt it <span class="token operator">=</span> ret<span class="token punctuation">.</span>first<span class="token punctuation">;</span> it <span class="token operator">!=</span> ret<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Connection c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>recviver<span class="token operator">-></span><span class="token function">metacall</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="db-object-cpp"><a href="#db-object-cpp" class="headerlink" title="db_object.cpp"></a>db_object.cpp</h3><p>  object 类通过 moc 生成 db_object.cpp，一些 moc 所执行的代码扩展在 db_object.cpp 里面。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span><span class="token comment">//db_object: 是由 moc 编译器 将 object.cpp 展开的内容(此处手写表示)</span><span class="token keyword">const</span> <span class="token keyword">char</span> sig_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"sig1()"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> slot_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"slot1()"</span><span class="token punctuation">;</span>MetaObject Object<span class="token operator">::</span>meta <span class="token operator">=</span> <span class="token punctuation">&#123;</span>sig_names<span class="token punctuation">,</span> slot_names<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">MetaObject</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------> this is slot1()"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 槽的索引==> 槽函数</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">metacall</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 目的：自行构造 moc 编译器，手动将 object.h --> db_bject.cpp (宏 和 moc 编译器处理的部分)</span><span class="token comment">// 时间：2021-03-26</span><span class="token comment">// 下载：https://github.com/xmuli/QtExamples</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Object <span class="token operator">*</span>obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object <span class="token operator">*</span>obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"sig1()"</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">"slot1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj1<span class="token operator">-></span><span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 终端输出打印：</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">this</span> is <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文参考 <a href="https://www.cnblogs.com/swarmbees/p/10816139.html">文一</a>、 <a href="https://blog.csdn.net/perfectguyipeng/article/details/78082360">文二</a> ，但实际发现其源码之间有几处错误，实际运行失败，参考思路重写，方便后来者学习，且本文还有改进之处，日后有空改进，修改点如下：</p><ul><li><code>findSignalIndex</code> 函数重写，使得能够识别信号和槽函数的重载函</li><li><code>db_connet</code> 在重构，支持宏方式（Qt4）和 函数指针（Qt5）方式；（当前为使用字符串作为参数）</li><li>构建 xxx_p.h，将成员变量都放在此文件中，加快项目的编译速度。</li></ul><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a> 【DbSigSlot】</p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次开车车</title>
      <link href="posts/cfc539c3/"/>
      <url>posts/cfc539c3/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　第一次开车车上路</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>​        年前拿到了拖延了三年多的驾照，最近有空试着上了一下路。刚开始找了一个五年老司机在副驾知道指导下</p><br><p>第一天：我柑橘已经开得好快了，已经到 40 Km/h 了，对着副驾五年老司机说</p><p>第二天：路上，暗想，怎么 70Km/h 这么慢</p><p>第三天：上高速了，偶尔有最高 110Km/h，但不知为何副驾多年老湿机要右手紧紧握住把手</p><p>第四天：贴了人生中第一张违停罚单，客服还说能够此处能停的！害，</p><br><p>​        路上听到最多的一句话就是小团团：看看我的大宝贝，你又走错路了!</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230711.png" width="25%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QtCreator 中自定义项目例子置于“欢迎-实例”中</title>
      <link href="posts/60489bc/"/>
      <url>posts/60489bc/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　将自定义的代码例子，放置到 <code>Qt Creaor</code> 中的 “欢迎-示例” 中，提供大家学习。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font>　</p></blockquote><br><h3 id="IDE-缺少示例"><a href="#IDE-缺少示例" class="headerlink" title="IDE 缺少示例"></a>IDE 缺少示例</h3><p>​        在 <code>UOS</code> 下，命令安装的 <code>Qt Creator</code> 打开 “欢迎 - 示例” 之后，显示为空，明显 <code>Qt</code> 自带的例子没了。解决方案如下。(<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>Qt Creator 4.8.2</code> )</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtbase5-examples qtbase5-doc-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>qtbase5-examples：</strong> 是 <code>Qt</code> 官方自带的源码例子，默认安装在 <code>/usr/lib/x86_64-linux-gnu/qt5/examples</code> 下。</li><li><strong>qtbase5-doc-html：</strong> 是在 <code>IDE</code> 中的 “欢迎 - 示例” 中，显示预览的小网页窗口，默认是安装在 <code>/usr/share/qt5/doc</code> 下。</li></ul><br><h3 id="自定义源码安装示例"><a href="#自定义源码安装示例" class="headerlink" title="自定义源码安装示例"></a>自定义源码安装示例</h3><p>​        目标是希望将 DTK 一些自带的例子，能够和官方例子一样，直接在 IDE 中打开和预览，进行编译和学习。帮助新手降低入门门槛。</p><p>​        将自己的源码 <a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample01/QtStyleEx">QtStyleEx</a> 下载本地，重命名为 qtmystyle，目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">└── qtmystyle    ├── main.cpp    ├── qtmystyle.pro    ├── widget.cpp    └── widget.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 qtmystyle 文件夹拷贝到 <code>/usr/lib/x86_64-linux-gnu/qt5/examples/widgets/desktop</code> 下，修改其目录下的 <code>desktop.pro</code> 文件，将 <code>qtmystyle</code> 加入进去。</p><p>再修改 <code>/usr/share/qt5/doc/qtwidgets/examples-manifest.xml</code> 文件，找到如下 Screenshot 的一段</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210429140408.png" width="100%"/ loading="lazy"><p>然后仿写一段放到起下面，重启 Qt Creator，再次打开，即可看到自定义的项目例子。效果图如下：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210312_150922.png" width="90%"/ loading="lazy"><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改 Doxygen 主题，生成 Qt 风格的文档</title>
      <link href="posts/af3370a3/"/>
      <url>posts/af3370a3/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　在 <a href="https://xmuli.blog.csdn.net/article/details/114580630">上一篇</a> 中，成功自定义 <code>.qch</code> 文档手册在 <code>Qt Assistants</code> 中查看。但 Doxygen 默认的模板美观度还需提升，<font color=#D0087E size=4 face="STFangsong">这里记录一下修改 doxygen 主题，生成 Qt 风格的的主题样式。</font></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-10 14-52.gif" width="90%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​        系统环境： <code>doxygen 1.8.13</code> &amp;&amp; <code>UOS v20</code> &amp;&amp; <code>Qt Assistants 5.11.3</code></p><br><h3 id="切换-doxygen-主题风格-例子"><a href="#切换-doxygen-主题风格-例子" class="headerlink" title="切换 doxygen 主题风格(例子)"></a>切换 doxygen 主题风格(例子)</h3><p>​        找到一个基于 <code>Qt4</code> 官方文档的样式：<a href="https://github.com/skozlovf/doxygen-qmi-style">doxygen-qmi-style</a> ，克隆之后，放在 <a href="https://github.com/xmuli/QtExamples/tree/master/CustomQch">CustomQch</a> 下，然后修改配置如下，实际例子可以参见：<a href="https://github.com/xmuli/QtExamples/blob/35d524ef6726d502d5da470c7a67270bd7484e2d/CustomQch/Doxyfile#L1166">L1166</a> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BRIEF_MEMBER_DESC <span class="token operator">=</span> NO                             <span class="token comment"># Project section</span>HTML_HEADER <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/header.html           <span class="token comment"># HTML section</span>HTML_FOOTER <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/footer.htmlHTML_STYLESHEET <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/qmi.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        再次执行 <code>doxygen</code> 生成一遍，本例子 CustomQch 文件夹新主题效果如下：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210309_165602.png" width="70%"/ loading="lazy"><br><h3 id="开源项目提交（实战）"><a href="#开源项目提交（实战）" class="headerlink" title="开源项目提交（实战）"></a>开源项目提交（实战）</h3><p>​        在实战中学习，将 <code>DTK</code> 的开发手册集成到本地机器的 <code>Qt Assistants</code> 中，修改皮肤样式的提交如下：</p><ol><li><a href="https://github.com/linuxdeepin/dtk/commit/77d8402878515ba2a59ac9782059fddf3e49a8ca"># 77d8402</a> ： 添加 <code>Qt</code> 风格文档主题</li><li><a href="https://github.com/linuxdeepin/dtk/commit/ab94ca8f79fe31768165740cd4c486605c99e5dc"># ab94ca8f</a> ：修改 <code>Doxygen</code> 配置文件，使用 <code>Qt</code> 文档主题</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################################################################################</span><span class="token comment">##  2020-03-10 配置 Doxygen 生成 html + latex + .qhp + .qch 四种格式（DTK 项目）   ##</span><span class="token comment">#################################################################################</span>PROJECT_NAME           <span class="token operator">=</span> <span class="token string">"Deepin Tool Kit"</span>  <span class="token comment"># 生成文档的名称</span>PROJECT_NUMBER         <span class="token operator">=</span> <span class="token number">2021.03</span>            <span class="token comment"># 项目文档的版本号码</span>PROJECT_BRIEF          <span class="token operator">=</span> <span class="token string">"Deepin Tool Kit is the toolkit used to built deepin style Apps"</span> <span class="token comment">#一行简短的描述</span>OUTPUT_DIRECTORY       <span class="token operator">=</span> ./doc              <span class="token comment"># 输出存放文档的路径 </span>OUTPUT_LANGUAGE        <span class="token operator">=</span> Chinese            <span class="token comment"># 生成文档为中/英文 English</span>BRIEF_MEMBER_DESC      <span class="token operator">=</span> YES                <span class="token comment"># 在 file 和 class 文档里面会有简短的描述</span>SHORT_NAMES            <span class="token operator">=</span> YES                <span class="token comment"># 生成更短的文件名</span>ALIASES                <span class="token operator">=</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\a">\a</span>nchor"</span>   <span class="token comment"># 略困惑的一个参数</span>ALIASES               <span class="token operator">+=</span> <span class="token assign-left variable">section1</span><span class="token operator">=</span><span class="token string">"\section"</span>ALIASES               <span class="token operator">+=</span> l<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\r">\r</span>ef <span class="token entity" title="\1">\1</span>"</span>ALIASES               <span class="token operator">+=</span> b<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\b">\b</span> <span class="token entity" title="\1">\1</span>"</span>ALIASES               <span class="token operator">+=</span> color<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"&lt;span style='border: 1px solid black; width:10px; height:10px; background-color:<span class="token entity" title="\1">\1</span>; display:inline-block;'>&lt;/span> <span class="token entity" title="\2">\2</span>"</span>ALIASES               <span class="token operator">+=</span> href<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"&lt;a href='<span class="token entity" title="\1">\1</span>'><span class="token entity" title="\2">\2</span>&lt;/a>"</span>EXTENSION_MAPPING      <span class="token operator">=</span> .h <span class="token operator">=</span>C++            <span class="token comment"># 覆盖或者扩展这个内置的语言映射</span>CPP_CLI_SUPPORT        <span class="token operator">=</span> YES                <span class="token comment"># 微软 C++/CLI 语言开启</span>CASE_SENSE_NAMES       <span class="token operator">=</span> YES                <span class="token comment"># No，只解析小写字母的文件; true 解析可以大写字母文件</span>INPUT                  <span class="token operator">=</span> ./dtkwidget/ <span class="token punctuation">\</span>     <span class="token comment"># 包含指定文件或者目录</span>                         ./dtkcore/ <span class="token punctuation">\</span>             ./dtkgui/ <span class="token punctuation">\</span>             ./qt5integration/             RECURSIVE              <span class="token operator">=</span> YES                <span class="token comment"># 文件递归,包括子文件也要输出为文档</span>EXCLUDE                <span class="token operator">=</span>  ./dtkcore/tool <span class="token punctuation">\</span>  <span class="token comment"># 不解析如下文件或者目录</span>                          ./dtkcore/tools <span class="token punctuation">\</span>                          ./dtkcore/tests <span class="token punctuation">\</span>                          ./dtkwidget/examples <span class="token punctuation">\</span>                          ./dtkwidget/src/widgets/privateEXCLUDE_SYMBOLS        <span class="token operator">=</span>                    <span class="token comment"># 排除一些文件, namespace, clas, fun 等</span>IMAGE_PATH             <span class="token operator">=</span> dtkwidget/doc/images <span class="token punctuation">\</span>   <span class="token comment"># 文档里面插入图片的存放路径</span>                         dtkcore/doc/images                         SOURCE_BROWSER         <span class="token operator">=</span> YES                 <span class="token comment"># true 文档和源码交叉引用</span>HTML_HEADER            <span class="token operator">=</span> ./doxygen-qmi-style/header.html    <span class="token comment"># doxygen 主题头部网页</span>HTML_FOOTER            <span class="token operator">=</span> ./doxygen-qmi-style/footer.html    <span class="token comment"># doxygen 主题底部网页</span>HTML_STYLESHEET        <span class="token operator">=</span> ./doxygen-qmi-style/qmi.css        <span class="token comment"># doxygen 主题网页样式表 CSS</span>HTML_TIMESTAMP         <span class="token operator">=</span> YES                <span class="token comment"># 生成的 html 底部页面生成的日期和时间</span>GENERATE_QHP           <span class="token operator">=</span> YES                <span class="token comment"># 使用命名空间、生成 .qch ，此必须开启</span>QCH_FILE               <span class="token operator">=</span> <span class="token punctuation">..</span>/dtk.qch         <span class="token comment"># 通过 html 生成的 qch 路径</span>QHP_NAMESPACE          <span class="token operator">=</span> <span class="token string">"com.deepin.dtk.5.4"</span>  <span class="token comment"># 命名空间要是唯一的，才能在 Qt 助手里面显示</span>QHP_CUST_FILTER_NAME   <span class="token operator">=</span> YES                <span class="token comment"># 指定一个自定义的过滤器添加</span>QHG_LOCATION           <span class="token operator">=</span> qhelpgenerator     <span class="token comment"># 使用 qhelpgenerator 工具将 qhp 转换为 qch</span>GENERATE_TREEVIEW      <span class="token operator">=</span> YES                <span class="token comment"># 使用树状的索引应生成结构来显示层次信息</span>GENERATE_LATEX         <span class="token operator">=</span> YES                <span class="token comment"># 输出 LaTeX 文件</span>MACRO_EXPANSION        <span class="token operator">=</span> YES                <span class="token comment"># 展开所有的宏名</span>   INCLUDE_PATH           <span class="token operator">=</span> dtkcore <span class="token punctuation">\</span>          <span class="token comment"># 预处器会处的文件夹</span>                         dtkwidget <span class="token punctuation">\</span>  dtkgui <span class="token punctuation">\</span>  qt5integration  PREDEFINED             <span class="token operator">=</span> <span class="token string">"DTK_NAMESPACE=Dtk"</span> <span class="token punctuation">\</span>                <span class="token comment"># 指定一个或多个宏名称</span>                         <span class="token string">"DTK_BEGIN_NAMESPACE=namespace Dtk &#123;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_END_NAMESPACE=&#125;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_USE_NAMESPACE=using namespace Dtk;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_NAMESPACE=Core"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_CORE_NAMESPACE=Dtk::Core"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_BEGIN_NAMESPACE=namespace Dtk &#123; namespace Core &#123;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_END_NAMESPACE=&#125;&#125;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_USE_NAMESPACE=using namespace Dtk::Core;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_NAMESPACE=Widget"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_WIDGET_NAMESPACE=Dtk::Widget"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_BEGIN_NAMESPACE=namespace Dtk &#123; namespace Widget &#123;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_END_NAMESPACE=&#125;&#125;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_USE_NAMESPACE=using namespace Dtk::Widget;"</span>                         EXPAND_AS_DEFINED      <span class="token operator">=</span> YES                 <span class="token comment"># 指定应扩展的宏名称列表</span>TAGFILES               <span class="token operator">=</span> tags/qtcore.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ <span class="token punctuation">\</span>  <span class="token comment"># 添加外部文档的位置</span>  tags/qtgui.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ <span class="token punctuation">\</span>  tags/qtwidgets.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/   DOT_PATH               <span class="token operator">=</span> /usr/local/bin      <span class="token comment"># 安装 graphviz，此路径确保可以找到 dot 工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>​        附，是真的少，这里推荐几个样式表，想要略佳的 <code>CSS</code> 样式表，最完美的大概率的得自己写鸭（逃跑，，，</p><ul><li><a href="https://github.com/Velron/doxygen-bootstrapped">doxygen-bootstrapped</a> ：效果见 <a href="https://biogearsengine.com/documentation/index.html">预览</a>  </li><li><a href="https://github.com/skozlovf/doxygen-qmi-style">doxygen-qmi-style</a> ：效果见 <a href="http://skozlovf.github.io/doxygen-qmi-style/libxmlpp/classxmlpp_1_1CommentNode.html">预览1</a>  和 <a href="http://skozlovf.github.io/doxygen-qmi-style/qwt/">预览2</a></li><li><a href="https://github.com/Tencent/rapidjson/tree/master/doc/misc">rapidjson</a> ：效果见 <a href="http://rapidjson.org/">预览</a> </li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  【CustomQch】</p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - Doxygen </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt 项目用 doxygen 生成 .qch，嵌入文档到 Assistants</title>
      <link href="posts/3f6b9501/"/>
      <url>posts/3f6b9501/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　想着，将项目 <code>API</code> 的文档，能够生成离线版嵌入 <code>Qt</code> 助手  那样就方便很多，或者直接在 <code>Qt Creator</code> 里面点击帮助查看。</p><p>​        本文讲述如何将 <code>Qt / C++</code> 代码函数注释，解析生成 <code>html</code> 网页，生成 <code>.qhp</code> 后转换为 <code>.qch</code>，然后注册到  <code>Qt Assistants</code>  里面查看。<font color=#D0087E size=4 face="STFangsong">附上集成 DTK 开发手册到 Qt Assistants 的操作。</font></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-03-09%2013-08.gif" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="集成-DTK-开发手册到-Qt-Assistants"><a href="#集成-DTK-开发手册到-Qt-Assistants" class="headerlink" title="集成 DTK 开发手册到 Qt Assistants"></a>集成 DTK 开发手册到 Qt Assistants</h3><p>​        哈哈哈哈哈哈哈哈，如何将 <code>DTK</code> 开发手册集成到 <code>Qt Assistants</code>，命名执行完成后，效果就是文章最上面的预览图，且已自动切换了新皮肤，也会是 <code>Qt</code> 风格的，感兴趣可参见 <a href="https://ifmet.cn/posts/af3370a3/">此文</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> doxygen graphviz                           <span class="token comment"># 安装准备软件</span><span class="token function">git</span> clone --recursive https://github.com/linuxdeepin/dtk.git --depth<span class="token operator">=</span><span class="token number">1</span> <span class="token comment"># 克隆代码</span><span class="token builtin class-name">cd</span> dtk                                                      <span class="token comment"># 进入项目文件夹</span>doxygen                                                     <span class="token comment"># 生成 html +  .qhp 和 .qch</span><span class="token function">sudo</span> <span class="token function">cp</span> doc/dtk.qch /usr/share/qt5/doc                      <span class="token comment"># 与 Qt 文档存放在一起</span>assistant -register /usr/share/qt5/doc/dtk.qch              <span class="token comment"># 注册集成到 Qt 助手</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>涉及到生成自定义离线文档，定制过程中用到 <code>qhp</code>，<code>qch</code>，<code>qhcp</code>，<code>qhc</code> 四种不同格式的文件：</p><table><thead><tr><th>中文</th><th>全称</th><th>后缀</th><th>含义</th></tr></thead><tbody><tr><td><a href="https://doc.qt.io/archives/qt-4.8/qthelpproject.html">Qt帮助项目</a></td><td>Qt Help Project</td><td>.qhp</td><td>帮助生成器的输入文件，包括目录、索引和对实际文档文件的引用(*.html)；它还为文档定义了一个独特的命名空间。</td></tr><tr><td>Qt压缩帮助</td><td>Qt Compressed Help</td><td>.qch</td><td>帮助生成器的输出文件。这个二进制文件包含了帮助项目文件中指定的所有信息，以及所有压缩的文档文件。</td></tr><tr><td><a href="https://doc.qt.io/archives/qt-4.8/qthelp-framework.html#qt-help-collection-project">Qt帮助收集项目</a></td><td>Qt Help Collection Project</td><td>.qhcp</td><td>帮助集合生成器的输入文件。它包含了应该包含在帮助集合中的压缩帮助文件的引用；它也可能包含了其他用于定制Qt助手的信息。</td></tr><tr><td>Qt帮助集合</td><td>Qt Help Collection</td><td>.qhc</td><td>帮助收集生成器的输出文件。这是QHelpEngine操作的文件。它包含对任何数量的压缩帮助文件的引用，以及附加信息，如自定义过滤器。</td></tr></tbody></table><br><p>大致分成如下两类：</p><ul><li><p><strong>qhp 通过 qhelpgenerator 生成  qch。</strong> qhp文件负责组织实际用到的帮助文件（通常为HTML 文件，即需要在Qt Assistant中浏览的文件），然后通过 qhelpgenerator 是命令生成压缩的qch文件。qch文件是Qt Assistant能够识别的文档最小单元，可以通过 Qt Assistant-&gt;编辑-&gt;首选项-&gt;文档标签页-&gt;添加/移除  操作来注册或者注销一个qch文件。也可以通过命令 “assistant -register doc.qch” 来注册qch文件。注册后，即可在Assistant界面中浏览帮助文档。</p></li><li><p><strong>qhcp 通过 qcollectiongenerator 生成 qhc。</strong> qhcp 其主要作用是将qch二进制文件组织成为一个collection，定制客户化的Assistant；而 qhc 则是通过 qcollectiongenerator 命令生成的二进制文件，启动 Assistant 时需要指定 collection 参数，即 qhc 文件。qhc 文件中是 qch 文件的集合，打开 Assistant 时，通过指定当前collection 即可注册多个帮助文档。</p></li></ul><br><h3 id="简洁流程"><a href="#简洁流程" class="headerlink" title="简洁流程"></a>简洁流程</h3><ol><li>对一个 <code>C++ / Qt</code> 项目添加 <code>API</code> 函数的注释，是 <code>doxygen</code> 风格</li><li>使用 <code>doxygen</code> 修改默认生成模板</li><li>解析得到 <code>html</code> 和 <code>.qhp</code> 的两类文件</li><li>运行 <code>qhelpgenerator</code> 将 <code>.qhp</code> 转换为 .<code>qch</code> 格式</li><li>注册 <code>.qch</code> 到 <code>Qt Assistants</code> ，然后打开观看效果</li></ol><br><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p>​        <code>doxygen 1.8.13</code> &amp;&amp; <code>UOS v20</code> &amp;&amp; <code>Qt Assistants 5.11.3</code></p><br><h4 id="书写注释"><a href="#书写注释" class="headerlink" title="书写注释"></a>书写注释</h4><p>​        对需要的项目，按照 <code>doxygen</code> 风格写入注释。doxygen 的用法可参考 <a href="https://xmuli.blog.csdn.net/article/details/102809157">此文</a> 。推荐如下风格</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \brief main 所有函数的入口 * \param argc 参数个数 * \param argv 参数地址（二维） * \return 程序运行状态 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    IfmetWindow w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="设置-doxygen-参数"><a href="#设置-doxygen-参数" class="headerlink" title="设置 doxygen 参数"></a>设置 doxygen 参数</h4><p>执行 <code>doxygen -g</code> 生成详细注释的 Doxyfile 文件，然后修改如下地方参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#---------------生成 .html 文件---------------</span>PROJECT_NAME           <span class="token operator">=</span> <span class="token string">"My CustomQch"</span>            <span class="token comment"># 生成文档的名称</span>PROJECT_NUMBER         <span class="token operator">=</span> <span class="token number">1.0</span>.0                     <span class="token comment"># 项目文档的版本号码</span>OUTPUT_DIRECTORY       <span class="token operator">=</span> ./doc                     <span class="token comment"># 输出存放文档的路径</span>OUTPUT_LANGUAGE        <span class="token operator">=</span> Chinese                   <span class="token comment"># 生成文档为中/英文 English</span>RECURSIVE              <span class="token operator">=</span> YES                       <span class="token comment"># 文件递归，包括子文件也要输出为文档</span>IMAGE_PATH             <span class="token operator">=</span> ./doc/images              <span class="token comment"># 文档里面插入图片的存放路径</span>DOT_PATH               <span class="token operator">=</span> /usr/local/bin            <span class="token comment"># 安装 graphviz ，在此可找到 dot</span><span class="token comment">#---------------生成 .qhp 文件---------------</span>SHORT_NAMES            <span class="token operator">=</span> YES                       <span class="token comment"># 生成更短的文件名</span>GENERATE_QHP           <span class="token operator">=</span> YES                       <span class="token comment"># 使用命名空间、生成 .qch ，此必须开启</span>QCH_FILE               <span class="token operator">=</span> ./doc/my_custom_qch.qch   <span class="token comment"># 通过 html 生成的 qch 路径</span>QHP_NAMESPACE          <span class="token operator">=</span> ifmet.cn                  <span class="token comment"># 命名空间要是唯一的，才能显示</span>QHP_CUST_FILTER_NAME   <span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:　如果没有把Qt bin的路径加到 path中, 则 QHG_LOCATION 需要指定 qhelpgenerator 的全路径</p><br><h4 id="生成-html-qhp"><a href="#生成-html-qhp" class="headerlink" title="生成 html + qhp"></a>生成 html + qhp</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen Doxyfile   <span class="token comment"># 简写为 doxygen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        执行上面命令生成 <code>.html</code> 网页和 <code>.qhp</code> 文件。若报生成 <code>dot</code>  转换 <code>png</code> 失败，则需要安装  <code>graphviz</code> 包，其安装路径为  <code>/usr/local/bin</code></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210308162516247.png" width="100%"/ loading="lazy"><p>一般会直接生成 <code>index.html</code> 、 <code>index.qhp</code>；如参数配置对了，会直接生成 <code>my_custom_qch.qch</code> 文件，若是没有，也可执行生成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  CustomQch <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  qhelpgenerator ./doc/html/index.qhp -o ./doc/index.qch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210308173339.png" width="70%"/ loading="lazy"><br><h4 id="注册-qch"><a href="#注册-qch" class="headerlink" title="注册 .qch"></a>注册 .qch</h4><p>注册执行成功会如下，点击查看如图。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  doc <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  assistant -register my_custom_qch.qchDocumentation successfully registered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/image-20210308165123417.png" width="90%"/ loading="lazy"><br><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://doc.qt.io/archives/qt-4.8/qthelp-framework.html">The Qt Help Framework</a></li><li><a href="http://shouce.jb51.net/qt-beginning/52.html">定制Qt帮助系统</a> </li><li><a href="https://www.geek-share.com/detail/2515064905.html">利用qt制作帮助文档</a></li><li><a href="https://stackoverflow.com/questions/7951776/sh-dot-command-not-found-doxygen-lion">sh: dot: command not found + doxygen + Lion</a> </li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  【CustomQch】，所有步骤直接查看对应 commit 的哈希即可。</p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - Doxygen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 部署 valine 评论的 leancloud 设置</title>
      <link href="posts/f8ca040f/"/>
      <url>posts/f8ca040f/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　很久之前，就是使用的 <code>valine</code> 的评论系统，实际是在 <code>leancloud</code> 平台进行部署的。也算是之前文章今发。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>一开始建议选择 <strong>国际版</strong>，后面绑定域名可以无需备案。点击 <code>存储</code> - <code>创建 Class</code>；名称为 Counter 后点击确认。</p><p>在 <code>设置</code> - <code>应用 Keys</code> 中记录对应的 <strong>AppID</strong> 、<strong>AppKey</strong>  即可；然后填写进 yun 主题的 .yml 文件 （ 实际是 <code>hexo/source/_data/yun.yml</code>，由 yun 主题约定的） ； 参见 <a href="https://hexo-theme-yun.vercel.app/guide/third-party-support.html#valine">yun - valine</a> 、<a href="https://valine.js.org/quickstart.html#%E8%8E%B7%E5%8F%96APP-ID-%E5%92%8C-APP-Key">valine.js.org</a>  配置说明</p><br><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>点击 <code>云引擎</code> -  <code>-WEB</code> - <code>部署</code> - <code>部署项目</code>  - <code>-o- Git部署</code>，点击 <code>配置 Git</code> 后，输入后，点击刷新。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/zhaojun1998/Valine-Admin.git   <span class="token comment"># 新版，推荐，邮件通知很棒</span>设置教程：https://github.com/zhaojun1998/Valine-Admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>PS: <del><code>https://github.com/DesertsP/Valine-Admin.git</code>  # 旧版，v1.4.0 后没有自带邮件功能，不推荐</del></p><p>再次进入到部署，如下图点击 <code>部署</code>， 略加等待，即可部署成功。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150154.png" width="80%"/ loading="lazy"><br><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>点击 <code>设置</code> - <code>域名绑定</code> - <code>绑定新域名</code>，选择如下，随后按照提示，去阿里云配置 DNS 解析。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150753.png" width="45%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150831.png" width="45%"/ loading="lazy"></p><p>随后等待即可成功。如果选取 自动 SSL 证书管理，第一次显示失败（我就遇到了），那么只需要再重新尝试配置一遍 DNS 解析，它也会成功。</p><br><h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><p>点击 <code>云引擎</code> -  <code>-WEB</code> - <code>设置</code> - <strong>添加</strong>， 添加一些如下变量， 可以用来自定义一些邮件通知、通知模板、消息回复等个性化的设置。 详细参考 <a href="https://deserts.io/valine-admin-document/">Valine Admin 配置手册</a> </p><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>Deserts</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://panjunwen.com/">https://panjunwen.com</a></td><td>[必填]首页地址</td></tr><tr><td><strong>SMTP_SERVICE</strong></td><td>QQ</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td></tr><tr><td>SMTP_USER</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td></tr><tr><td>SENDER_NAME</td><td>Deserts</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td>[建议]Web主机二级域名（云引擎域名），用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p><font color=#D0087E size=4 face="幼圆">然后点击重启部署，即可生效。</font> </p><br><h3 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h3><p>看到运行中，输入浏览器输入 <code>https://云引擎域名/sign-up</code> 对应我的就是 <code>https://valine.ifmet.cn/sign-up </code>，第一次登录输入是让注册管理员登录信息</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306154824.png" width="50%"/ loading="lazy"><p> 输入完成之后，它会自动跳转到  <code>https://云引擎域名</code> 网站让登录，输入用户名，刚才的密码，即可登录成功。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306154958.png" width="50%"/ loading="lazy"><br><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>​        免费的 leancloud 是会自动休眠的，这里设置一下。注意国际版使用UTC-0时间，注意与国内时间对应。我的配置如下：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306160110.png" width="90%"/ loading="lazy"><br><h3 id="邮件通知模板"><a href="#邮件通知模板" class="headerlink" title="邮件通知模板"></a>邮件通知模板</h3><p>在 云引擎里面，是可以修改自定义的参数的，从而修改邮件模板的样式。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 开启双线程解析部署到 GitHub + aliyun</title>
      <link href="posts/e5b4e435/"/>
      <url>posts/e5b4e435/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  本站 <a href="https://ifmet.cn/">ifmet.cn</a> 迁移一份到国内服务器后，分享一下我当前的博客运行设计方案实行，以及我如何利用 <code>GitHub</code> 的 <code>Action</code> 设置脚本，进行双解析：<code>阿里云服务器</code> + <code>GitHub Pages</code>。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306.png" width="90%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="部署原理"><a href="#部署原理" class="headerlink" title="部署原理"></a>部署原理</h3><p>​        当前博客的部署原理如上图，解决了之前在国内访问略慢的遗憾。现在这套方案，非常的满足我的个人所需。</p><p><strong>图解注释：</strong><br>本电脑 M：主力编程机器，也可以是任意一台设备<br>服务器 A：GitHub 仓库 xmuliMark，存放源文件（*.md），只使用 master 分支<br>服务器 B：GitHub 仓库 xmuli.github.io，存放解析后网页（*. html），使用 master 分支 (非默认分支)<br>服务器 C：国内阿里云的轻量级服务器，存放解析后网页（*. html），使用 master 分支</p><p><strong>优点如下：</strong></p><ul><li><font color=#D0087E size=4 face="幼圆">任意电脑写 <code>Markdown</code> 文章，然后推送到 A 仓库即可（不用配置关心环境）</font></li><li>不需本地解析，都是远程服务器解析，在部署到另外两台远程服务器</li><li>国内 IP 访问，解析到阿里云服务器</li><li>国外 IP 访问，解析到 <code>GitHub</code> 的服务器</li><li>仅一份源文件，两份部署后的解析文件，各自部署</li><li>源文件仅自己可访问，提高安全（将源文件与解析后的网页文件分开）</li><li>全程自己搭建，学习动手部署，甚是快乐</li><li>费用极低（阿里云服务器 + 域名费用）</li><li>自己的服务器又部署一个服务，感觉惬意</li></ul><br><h3 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h3><p><strong>关于如何部署，详细可以参考这两篇</strong></p><ul><li><a href="https://ifmet.cn/posts/5490ca44/">阿里云服务器部署 Hexo 博客</a> </li><li><a href="https://ifmet.cn/posts/70a6b02f/">阿里云服务器 nginx 上部署 SSL 证书实现 https 访问</a> </li></ul><p>再之前的，可以参考 <a href="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-hexo/">此系列</a> ，记录着我搭建博客的一些记录</p><br><h3 id="配置-GitHub-Action："><a href="#配置-GitHub-Action：" class="headerlink" title="配置 GitHub Action："></a>配置 GitHub Action：</h3><p>​        部署中的一个痛点：A 仓库存放 markdown 文件，然后可以利用 GitHub 的 Action 服务，自动解析为一份 html 网页文件，但是如何使用一个 .yml 部署到 阿里云服务器 + GitHub Pages 呢？</p><p>​        附上我比较优雅的解决方案，其中 A 仓库的 .yml 如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 工作流程的名称</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Deploy GitHub Page + Aliyun<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">20.04</span>        <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2.3.4          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js environment      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2.1.5      <span class="token key atrule">with</span><span class="token punctuation">:</span>         <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14.x"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo deploy      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">HEXO_DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HEXO_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>              <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$HEXO_DEPLOY_KEY" > ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com >> ~/.ssh/known_hosts        ssh-keyscan ifmet.cn >> ~/.ssh/known_hosts        git config --global user.name "xmuli"        git config --global user.email "xmulitech@gmail.com"        npm i -g hexo-cli        npm i        hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其中 <code>HEXO_DEPLOY_KEY</code> 是本地机器秘钥，也是 A 仓库中的 <strong>“Settings-secrets”</strong> ，而 C 服务器有着对应的公钥，且设置了免密登录，而其中末尾的 run: | 中则下面两行是关键，同时部署两个服务器的重点</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ssh<span class="token punctuation">-</span>keyscan github.com <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hostsssh<span class="token punctuation">-</span>keyscan ifmet.cn <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt 项目(Cmake)设置国际化支持</title>
      <link href="posts/9644ed82/"/>
      <url>posts/9644ed82/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　准备将我写的悬浮网速窗口上面支持国际化（多语言）；记录一下通过 <code>CMake</code> + <code>Qt</code> 来对项目设置国际化。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-05 17-58.gif" width="80%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong> 　<strong>💻</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>cmake 3.13.4</code> 📎 <code>gdb8.0</code> </p><br><h3 id="国际化原理"><a href="#国际化原理" class="headerlink" title="国际化原理"></a>国际化原理</h3><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/image-20210305165840537.png" width="90%"/ loading="lazy"><p>​        <code>Qt</code> 实现多语言的关键原理如图，先扫描所有的源码文件 <code>.cpp</code>、<code>.ui</code> 文件，找到被 <code>tr()</code> 包裹的字符串（多国语言混合也可），然后人使用到 <code>Qt5 Lingust</code> 程序来对每一个 <code>.ts</code> 文件进行翻译，再次编译生成所需的 <code>.qm</code> 文件。</p><br><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>​        因为要对自己的程序完成国际化，先在 <code>CMakeLists.txt</code> 添加如下代码，标明使用 <code>LinguistTools</code> 来生成 <code>*.ts</code> 文件</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>TS_FILES        ./translations/zh_CN.ts        ./translations/zh_TW.ts<span class="token punctuation">)</span><span class="token keyword">find_package</span><span class="token punctuation">(</span>Qt<span class="token punctuation">$&#123;</span><span class="token variable">QT_VERSION</span><span class="token punctuation">&#125;</span> COMPONENTS <span class="token punctuation">$&#123;</span>REQUIRED_LIBS<span class="token punctuation">&#125;</span> LinguistTools REQUIRED<span class="token punctuation">)</span><span class="token function">qt5_create_translation</span><span class="token punctuation">(</span>QM_FILES <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>TS_FILES<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        后对项目执行 <code>CMake</code>、编译后，会根据 <code>.cpp</code> 和 <code>.ui</code> 文件里面字符串扫描（字符串可以同时为几国语言混合，但必须使用 <code>tr()</code> 包裹）；  会在源码路径的 <code>./translations/</code> 下生成两个 <code>zh_CN.ts、zh_TW.ts</code> 文件；使用 <code>Qt5 Lingust</code> ，手工对源文件翻译本国语言保存。</p><br><p>​        再次编译一遍，在 <code>build-xxx</code> 文件夹中得到 <code>*.qm</code> 文件，一般而言，然后在源码里面加上如下，即完成。若是没生效的话，则可能没执行 <code>ui-&gt;retranslateUi(this);</code> 函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTranslator trans<span class="token punctuation">;</span>trans<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> <span class="token function">QLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".qm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">installTranslator</span><span class="token punctuation">(</span>m_trans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p>但实际其中最后一步要修改一下，结合实际项目，将多语言按钮写在 <code>QComboBox</code> 控件中；在其中添加</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QStringList listLang<span class="token punctuation">;</span>QStringList listData<span class="token punctuation">;</span>listLang <span class="token operator">&lt;&lt;</span> <span class="token string">"English"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"简体中文"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"繁體中文(台湾)"</span><span class="token punctuation">;</span>listData <span class="token operator">&lt;&lt;</span> <span class="token string">"es_US"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"zh_CN"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"zh_TW"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listLang<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    ui<span class="token operator">-></span>comboBoxLanguage<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>listLang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> listData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对该控件添加对应的槽函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">WinSetting</span><span class="token operator">::</span><span class="token function">onComboBoxLanguage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString <span class="token function">language</span><span class="token punctuation">(</span><span class="token string">"zh_CN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    language <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxLanguage<span class="token operator">-></span><span class="token function">itemData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> m_trans<span class="token operator">-></span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> language <span class="token operator">+</span> <span class="token string">".qm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"---------@1--->"</span> <span class="token operator">&lt;&lt;</span> language <span class="token operator">&lt;&lt;</span> ok<span class="token punctuation">;</span>    <span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">installTranslator</span><span class="token punctuation">(</span>m_trans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=#D0087E size=4 face="幼圆">其中每次运行 <code>installTranslator()</code> 的时候，都会触发 <code>QEvent::LanguageChange</code> 事件信号；故需要在事件过滤器中，添加对应的处理，响应更新界面更新文字。<strong>还要在该 QcomboBox 控件中安装此事件过滤器；</strong>  此时就已经完成了，可以不关闭程序切换多语言了。</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">WinSetting</span><span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>watched<span class="token punctuation">,</span> QEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>watched <span class="token operator">==</span> ui<span class="token operator">-></span>comboBoxLanguage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>LanguageChange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span><span class="token function">retranslateUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token class-name">QWidget</span><span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>watched<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>若在 <code>QtCreator</code> 中，点击 “清理”，会删除 <code>/translations</code> 下的所有 <code>.ts</code> 文件，再次编译后的生成是空的未翻译的 <code>.ts</code> 文件；坑坑坑！！！</p></li><li><p><font color=#FE7207  size=4 face="幼圆">一般使用设计器来设计的界面 UI，也就是程序源码中我们看到的 *.ui文件，在载入翻译器后，我们应该调用 ui-&gt;retranslateUi() ，这个函数实际上就是把 界面 控件的text重新载入一遍，可以在 ui_*.cpp  中看到该函数的实现。</font></p></li><li><p>当语言进行切换时，需要调用 <code>ui-&gt;retranslateUi(this);</code> 更新主窗口。 如果非主窗口，则这个 <code>installTranslator</code> 函数会触发<code>void changeEvent(QEvent *e)</code> 事件。</p><p>原因如下：系统调用完 <code>installTranslator</code> 函数之后，系统会自动给程序中所有的 <code>QWidget</code> 以及其子类发送  <code>QEvent::LanguageChange()</code> 信号，并告知<code>changeEvent</code>槽 <code>event</code> 产生。所以，在要切换语言的每个窗体中都要重写接受 <code>QEvent::LanguageChange()</code> 信号的 <code>changeEvent</code> 函数，从而实现了语言的动态切换。</p><p>注意：加载主程序与子插件程序翻译文件时的别名或者路径不要相同，否则子插件程序翻译有可能不生效。</p></li></ul><br><h3 id="项目提交"><a href="#项目提交" class="headerlink" title="项目提交"></a>项目提交</h3><p>在 <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 的实时网速程序中，实际提交代码可提供大家参考</p><ol><li>在 <code>Cmake</code> 添加调用 <code>LinguistTools</code> 的代码： <a href="https://github.com/xmuli/lfxNet/commit/948522d8bf0e4bfd90b6befa5b6f59f76561aac4">#948522d8b</a> </li><li>更新翻译 <code>.ts</code> 文件: <a href="https://github.com/xmuli/lfxNet/commit/9602aa3e365b0c43510b6812c4c5209c8f0f8ba1">#9602aa3e3</a> 和 <a href="https://github.com/xmuli/lfxNet/commit/4e659fe139ecc56ee8c2e449dac25ab3512baa19">#4e659fe13</a> </li><li>设置多语言切换： <a href="https://github.com/xmuli/lfxNet/commit/31b2561bd2de8bc036a1a836b267f4310d226e3e">#31b2561bd</a> </li></ol><br><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://shouce.jb51.net/qt-beginning/51.html">国际化</a> </li><li><a href="https://www.cnblogs.com/apocelipes/p/14355460.html">配置CLion管理Qt项目国际化支持</a> </li><li><a href="https://blog.csdn.net/hebbely/article/details/69388763">Qt 多国语言国际化</a> </li><li><a href="https://blog.csdn.net/u011857683/article/details/78042102">Qt多语言实现和动态切换（国际化）</a> </li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  </p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</title>
      <link href="posts/8b05b275/"/>
      <url>posts/8b05b275/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　在 <code>Mac</code> 上编译 <code>qt 5.15</code> 源码，<code>debug</code> 和 <code>release</code> 版本。感觉每一个学 <code>C++/Qt</code> 的人，大概都会早晚都会这么一个念头，去编译一下 Qt 源码，只是有去尝试或者没有尝试过罢了。本文提供一个详细的编译全程和原文翻译。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​        下载最新的 <code>Qt</code>  源码(5.15.2)来编译一下，编译一个 release 和 debug 的最新代码；当然，也可以只编译所有源码其中的一些子模块；或者直接下载子模块代码；和再编译一下 QtCreator ；源码官方的<a href="https://download.qt.io/official_releases/qt/">下载地址</a> 。<br>​        这里将 qt-everywhere 和 qtbase 的源码都编译一下；且分别编译一下</p><p>首先可以参考对应的官方编译说明：</p><ul><li>英文原文： <a href="https://ifmet.cn/posts/59cc7a9d/">HOW TO BUILD QT5（5.15）</a> </li><li>中文译文：<a href="https://ifmet.cn/posts/df7f9a4d/">如何构建 QT5（5.15）</a> </li><li>再结合本篇文章实践，实际过程和其原文略有差异，文章标注注意点。</li></ul><br><p><strong><a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz">README</a> 上说：</strong></p><ul><li><p>Perl 5.8或更高版本</p></li><li><p>Python 2.7或更高版本</p></li><li><p>支持C++11标准的C++编译器</p></li></ul><br><p><strong>实际本机环境：</strong> <code>MacOS 10.14.6</code> 📎 <code>Command_Line_Tools_for_Xcode_11.3.1</code> 📎 <code>Perl v5.32.1</code> 📎<code>Python 3.9.2</code> 📎 <code>支持 c++11 标准</code> </p><p><strong>处理器：</strong> 2.3 GHz 四核 Intel Core i5 （后面提供编译耗时参考）</p><br><h2 id="编译-QtEveryWhere-源码"><a href="#编译-QtEveryWhere-源码" class="headerlink" title="编译 QtEveryWhere 源码"></a>编译 QtEveryWhere 源码</h2><h3 id="编译-Release-版本"><a href="#编译-Release-版本" class="headerlink" title="编译 Release 版本"></a>编译 Release 版本</h3><p>下载 qt 全部源码： <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf qt-everywhere-src-5.15.2.tar.xz<span class="token builtin class-name">cd</span> qt-everywhere-src-5.15.2./configure -prefix ~/Qt/qteverywhere5.15.2 -release -opensource -nomake tests<span class="token function">make</span> -j8                                   <span class="token comment"># 耗时 52 min</span><span class="token function">make</span> <span class="token function">install</span>                               <span class="token comment"># 安装到 ~/Qt/qteverywhere5.15.2 下，共 689.7 MB </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color=#D0087E size=4 face="幼圆"><strong>注意：</strong></font> </p><p>执行 <code>./configure</code> 脚本时（第 3 行）： <code>~/Qt/qteverywhere5.15.2</code> 为执行 <code>make install</code> 的安装路径；然后执行命令脚本，生成的临时文件都在 <code>.obj/release/</code> 下</p><p><strong>若是编译 <code>release</code> 版本加  <code> -nomake example</code>会失败，应去掉；若是编译 <code>debug</code> 版本可加  <code> -nomake example</code>，可顺利编译成功；</strong> ，遇到如下选择，按下 y 后回车；确认使用开源许可证即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Type <span class="token string">'L'</span> to view the GNU Lesser General Public License version <span class="token number">3</span> <span class="token punctuation">(</span>LGPLv3<span class="token punctuation">)</span>.Type <span class="token string">'G'</span> to view the GNU General Public License version <span class="token number">2</span> <span class="token punctuation">(</span>GPLv2<span class="token punctuation">)</span>.Type <span class="token string">'y'</span> to accept this license offer.Type <span class="token string">'n'</span> to decline this license offer. Do you accept the terms of either license? y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>执行 <code>make -j8</code> 时候，看到如下，即表示编译成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Developer/CommandLineTools/usr/bin/clang++ -stdlib<span class="token operator">=</span>libc++ -headerpad_max_install_names  -arch x86_64 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -mmacosx-version-min<span class="token operator">=</span><span class="token number">10.13</span> -Wl,-rpath,@executable_path/<span class="token punctuation">..</span>/Frameworks -Wl,-rpath,@loader_path/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib -o minibrowser.app/Contents/MacOS/minibrowser .obj/main.o .obj/qrc_qml.o   -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtdeclarative/lib -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtwebview/lib -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtbase/lib -framework QtQuick -framework QtWebView -framework QtGui -framework AppKit -framework Metal -framework QtQmlModels -framework QtQml -framework QtNetwork -framework QtCore -framework DiskArbitration -framework IOKit -framework OpenGL -framework AGL <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="验证-Qt-编译成功"><a href="#验证-Qt-编译成功" class="headerlink" title="验证 Qt 编译成功"></a>验证 Qt 编译成功</h3><p>下载 mac 版本的 <a href="https://download.qt.io/official_releases/qtcreator/4.14/4.14.0/qt-creator-opensource-mac-x86_64-4.14.0.dmg">qtcreator4.14.0</a> ，安装后打开。选中 <strong>“首选项-Kits-Qt Versions”</strong> ，将我们安装好的路径拷贝进去，保存 OK；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_160844.png" width="90%"/ loading="lazy"><br>然后切换到 **“首选项-Kits-Kits”** ，选中 Desktop 64bit 那一个，然后在其中 Qt version 中下拉，选取我们刚才的设置的 Qt 版本，保存；<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_160925.png" width="90%"/ loading="lazy"><br>再创建一个默认的 test 空的 qwidget 空测试项目，其中编译套件选中我们刚才所选；<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_161021.png" width="70%"/ loading="lazy"><br><p>点击 IDE 的编译，运行，即可成功</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_161107.png" width="100%"/ loading="lazy"><br><h2 id="编译-QtBase-源码"><a href="#编译-QtBase-源码" class="headerlink" title="编译 QtBase 源码"></a>编译 <code>QtBase</code> 源码</h2><h3 id="编译-Release-版本-1"><a href="#编译-Release-版本-1" class="headerlink" title="编译 Release 版本"></a>编译 Release 版本</h3><p>下载 qtbase 源码：<a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz">qtbase-everywhere-src-5.15.2.tar.xz</a> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf qtbase-everywhere-src-5.15.2.tar.xz<span class="token builtin class-name">cd</span> qtbase-everywhere-src-5.15.2/./configure -prefix ~/Qt/qtbase5.15.2 -release -opensource -nomake tests<span class="token function">make</span> -j8                                        <span class="token comment"># 14:44</span><span class="token function">make</span> installs                                   <span class="token comment"># 安装到 ~/Qt/qtbase5.15.2 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PS：</strong> 第三行中：</p><p>编译成功，查看到 <code>~/Qt/qtbase5.15.2</code>  有很多新文件夹；</p><br><h3 id="编译-Debug-版本"><a href="#编译-Debug-版本" class="headerlink" title="编译 Debug 版本"></a>编译 Debug 版本</h3><blockquote><p>ERROR: debug-only framework builds are not supported. Configure with -no-framework if you want a pure debug build.</p></blockquote><p>由于上面提示，framework 模块不支持 debug 模式，故编译命名改为如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf qtbase-everywhere-src-5.15.2.tar.xz<span class="token builtin class-name">cd</span> qtbase-everywhere-src-5.15.2./configure -prefix ~/Qt/qtbase5.15.2.debug -debug -opensource -nomake tests -nomake examples -no-framework<span class="token function">make</span> -j8                                   <span class="token comment"># 耗时约 8 min </span><span class="token function">make</span> <span class="token function">install</span>                               <span class="token comment"># 安装到 ~/Qt/qtbase5.15.2.debug 下，共 159.8 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译成功，查看到 <code>~/Qt/qtbase5.15.2.debug</code>  有很多新文件夹，欲想验证 qtbase 编译成功否，可参考如上。</p><br><h2 id="截图成功"><a href="#截图成功" class="headerlink" title="截图成功"></a>截图成功</h2><p>很棒，编译的几个版本全部都过了，来一张全家福纪念一下；后面会再重新编译一下 Qt Creator 的源码；虽然上面两个有⚠️符号，但是一样可以编译项目通过</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222172355.png" width="60%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210301110418.png" width="100%"/ loading="lazy"><br><h2 id="若遇报错注意："><a href="#若遇报错注意：" class="headerlink" title="若遇报错注意："></a>若遇报错注意：</h2><p>若遇报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -debug-and-release</span>clang: error: no such <span class="token function">file</span> or directory: <span class="token string">'/Users/xmuli/project/qt-build/qtbase-everywhere-src-5.15.2/lib/libqtpcre2_debug.a'</span>make<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib/QtCore.framework/QtCore_debug<span class="token punctuation">]</span> Error <span class="token number">1</span>make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>debug-release-install<span class="token punctuation">]</span> Error <span class="token number">2</span>make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>sub-corelib-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>make: *** <span class="token punctuation">[</span>sub-src-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span><span class="token comment"># -release</span>clang: **error:** no such <span class="token function">file</span> or directory: <span class="token string">'/Users/xmuli/project/qt-build/qtbase-everywhere-src-5.15.2/lib/libqtpcre2.a'</span>make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib/QtCore.framework/QtCore<span class="token punctuation">]</span> Error <span class="token number">1</span>make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>sub-corelib-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>make: *** <span class="token punctuation">[</span>sub-src-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因:</strong>  执行了<code>make install -j8</code> ，一边编译，一边安装，造成了依赖关系顺序的问题，就会报错如上</p><p>make -j4 qt-everywhere 需要 1h 30 min，博主亲测；建议买个好的 CPU，人生时间不应浪费在等待上，莫要如我</p><br><h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何构建 QT5（5.15）</title>
      <link href="posts/df7f9a4d/"/>
      <url>posts/df7f9a4d/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 本文是 <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 中的 <code>README</code> 的中文版本翻译（自译），其英文原文可见：<a href="https://ifmet.cn/posts/59cc7a9d/">HOW TO BUILD QT5</a>。然后根据此中步骤，成功在 Mac Mojave 中成功编译和运行，其中具体的实战编译参考原文：<a href="https://ifmet.cn/posts/8b05b275/">在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</a> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 id="如何构建QT5"><a href="#如何构建QT5" class="headerlink" title="如何构建QT5"></a>如何构建QT5</h1><h1 id="简介"><a href="#简介" class="headerlink" title=" 简介"></a> 简介</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="   系统要求"></a>   系统要求</h2><pre><code>- Perl 5.8或更高版本- Python 2.7或更高版本- 支持C++11标准的C++编译器 对于其他平台的具体要求。 请参阅 &quot;设置您的机器 &quot;部分。 http://wiki.qt.io/Get_The_Source</code></pre><h2 id="许可证："><a href="#许可证：" class="headerlink" title="   许可证："></a>   许可证：</h2><pre><code>Opensource users:    &lt;license&gt;        = -opensourceCommercial users:    &lt;license&gt;        = -commercial</code></pre><h2 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="   Linux, Mac:"></a>   Linux, Mac:</h2><pre><code>cd &lt;path&gt;/&lt;source_package&gt; ./configure -prefix $PWD/qtbase &lt;license&gt; -nomake tests make -j 4</code></pre><h2 id="Windows"><a href="#Windows" class="headerlink" title="   Windows:"></a>   Windows:</h2><pre><code> 打开一个命令提示符。 确认路径中是否有以下工具。 * 支持的编译器（Visual Studio 2012或更新版本。    MinGW-builds gcc 4.9或更高版本) * Perl 5.12或更高版本[http://www.activestate.com/activeperl/] * Python 2.7或更高版本[http://www.activestate.com/activepython/] * Ruby 1.9.3或更高版本[http://rubyinstaller.org/] cd &lt;path&gt;\&lt;source_package&gt; configure -prefix %CD%\qtbase &lt;license&gt; -nomake tests nmake // jom // mingw32-make 为了加速使用MSVC的qmake的引导，可能需要通过 &quot;-make-tool jom &quot;在configure命令行。如果你不使用jom。 在CL环境变量中添加&quot;/MP &quot;是个好主意。</code></pre><p> 更多细节请见下文。</p><h1 id="Build"><a href="#Build" class="headerlink" title=" Build!"></a> Build!</h1><p> 使用典型的 “configure; make “构建过程。</p><p> 一些相关的配置选项(参见configure -help)。</p><p> -release 编译并连接Qt，同时关闭调试功能。<br> -debug 编译并连接Qt，同时开启调试功能。<br> -nomake tests 禁用测试以加快编译速度。<br> -nomake examples 禁用例子以加快编译速度。<br> -confirm-license 自动确认LGPL 2.1授权。</p><p> 例子为发布版构建。<br> (根据你的系统调整”-jN “参数)</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4</p><p> 开发者构建的例子。<br> (启用更多的自动测试，构建调试版的库，…)</p><p>   ./configure -developer-build <license><br>   make -j4</p><p> 请参阅`./configure -help’的输出，了解各种选项的文档。<br> 配置。</p><p> 上面的例子将构建任何已被启用的Qt5模块，并通过<br> 构建系统中的默认值。</p><p> 可以通过以下方式来构建选定的模块及其依赖关系。<br> `make module-<foo>‘。 例如，只建立qtdeclarative。<br> 以及它所依赖的模块。</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4 module-qtdeclarative</p><p> 如果你只对Qt5的一个子集感兴趣，这可以节省很多时间。</p><h1 id="提示"><a href="#提示" class="headerlink" title=" 提示"></a> 提示</h1><p> 子模块仓库qtrepotools包含了一些有用的脚本，这些脚本用于<br> 开发者和发布工程师。考虑添加qtrepotools/bin<br> 到你的PATH环境变量来访问它们。</p><p> qtrepotools中的qt5_tool有一些更多的功能，可能会让你感兴趣。<br> 试试`qt5_tool –help’。</p><h1 id="从-git-构建-Qt5"><a href="#从-git-构建-Qt5" class="headerlink" title=" 从 git 构建 Qt5"></a> 从 git 构建 Qt5</h1><p> 参见<a href="http://wiki.qt.io/Building_Qt_5_from_Git">http://wiki.qt.io/Building_Qt_5_from_Git</a> 和 README.git<br> 更多信息。<br> 参见<a href="http://wiki.qt.io/Qt_5%EF%BC%8C%E4%BA%86%E8%A7%A3%E5%8F%82%E8%80%83%E5%B9%B3%E5%8F%B0%E3%80%82">http://wiki.qt.io/Qt_5，了解参考平台。</a></p><h1 id="文件资料"><a href="#文件资料" class="headerlink" title=" 文件资料"></a> 文件资料</h1><p> 在配置和编译Qt后，可以通过运行下面的命令来构建文档。<br> “make docs”.</p><p> 在建立了文档之后，你需要用以下方法安装它。<br> 命令。</p><pre><code>make install_docs</code></pre><p> 文档的安装路径设置为$QT_INSTALL_DOCS。<br> 运行 “qmake -query “将列出QT_INSTALL_DOCS的值。</p><p> 关于Qt 5的文档信息位于qtbase/doc/README<br> 或在以下网页：<a href="http://wiki.qt.io/Qt5DocumentationProject">http://wiki.qt.io/Qt5DocumentationProject</a></p><p> 注：构建文档只在桌面平台上测试。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HOW TO BUILD QT5（5.15）</title>
      <link href="posts/59cc7a9d/"/>
      <url>posts/59cc7a9d/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　本文是 <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 解压后的英文原文的 <code>README</code> 译文，其中文译文可见：<a href="https://ifmet.cn/posts/df7f9a4d/">如何构建 QT5（5.15）</a>。然后根据此中步骤，成功在 <code>Mac Mojave</code> 中成功编译和运行，其中具体的实战编译参考原文：<a href="https://ifmet.cn/posts/8b05b275/">在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</a> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 id="HOW-TO-BUILD-QT5"><a href="#HOW-TO-BUILD-QT5" class="headerlink" title="HOW TO BUILD QT5"></a>HOW TO BUILD QT5</h1><h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title=" Synopsis"></a> Synopsis</h1><h2 id="System-requirements"><a href="#System-requirements" class="headerlink" title="   System requirements"></a>   System requirements</h2><pre><code>- Perl 5.8 or later- Python 2.7 or later- C++ compiler supporting the C++11 standard For other platform specific requirements, please see section &quot;Setting up your machine&quot; on: http://wiki.qt.io/Get_The_Source</code></pre><h2 id="Licensing"><a href="#Licensing" class="headerlink" title="   Licensing:"></a>   Licensing:</h2><pre><code>Opensource users:    &lt;license&gt;        = -opensourceCommercial users:    &lt;license&gt;        = -commercial</code></pre><h2 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="   Linux, Mac:"></a>   Linux, Mac:</h2><pre><code> cd &lt;path&gt;/&lt;source_package&gt; ./configure -prefix $PWD/qtbase &lt;license&gt; -nomake tests make -j 4</code></pre><h2 id="Windows"><a href="#Windows" class="headerlink" title="   Windows:"></a>   Windows:</h2><pre><code> Open a command prompt. Ensure that the following tools can be found in the path: * Supported compiler (Visual Studio 2012 or later,    MinGW-builds gcc 4.9 or later) * Perl version 5.12 or later   [http://www.activestate.com/activeperl/] * Python version 2.7 or later  [http://www.activestate.com/activepython/] * Ruby version 1.9.3 or later  [http://rubyinstaller.org/] cd &lt;path&gt;\&lt;source_package&gt; configure -prefix %CD%\qtbase &lt;license&gt; -nomake tests nmake // jom // mingw32-make To accelerate the bootstrap of qmake with MSVC, it may be useful to pass &quot;-make-tool jom&quot; on the configure command line. If you do not use jom, adding &quot;/MP&quot; to the CL environment variable is a good idea.</code></pre><p> More details follow.</p><h1 id="Build"><a href="#Build" class="headerlink" title=" Build!"></a> Build!</h1><p> A typical `configure; make’ build process is used.</p><p> Some relevant configure options (see configure -help):</p><p> -release              Compile and link Qt with debugging turned off.<br> -debug                Compile and link Qt with debugging turned on.<br> -nomake tests         Disable building of tests to speed up compilation<br> -nomake examples      Disable building of examples to speed up compilation<br> -confirm-license      Automatically acknowledge the LGPL 2.1 license.</p><p> Example for a release build:<br> (adjust the `-jN’ parameter as appropriate for your system)</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4</p><p> Example for a developer build:<br> (enables more autotests, builds debug version of libraries, …)</p><p>   ./configure -developer-build <license><br>   make -j4</p><p> See output of `./configure -help’ for documentation on various options to<br> configure.</p><p> The above examples will build whatever Qt5 modules have been enabled by<br> default in the build system.</p><p> It is possible to build selected modules with their dependencies by doing<br> a `make module-<foo>‘.  For example, to build only qtdeclarative,<br> and the modules it depends on:</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4 module-qtdeclarative</p><p> This can save a lot of time if you are only interested in a subset of Qt5.</p><h1 id="Hints"><a href="#Hints" class="headerlink" title=" Hints"></a> Hints</h1><p> The submodule repository qtrepotools contains useful scripts for<br> developers and release engineers. Consider adding qtrepotools/bin<br> to your PATH environment variable to access them.</p><p> The qt5_tool in qtrepotools has some more features which may be of interest.<br> Try `qt5_tool –help’.</p><h1 id="Building-Qt5-from-git"><a href="#Building-Qt5-from-git" class="headerlink" title=" Building Qt5 from git"></a> Building Qt5 from git</h1><p> See <a href="http://wiki.qt.io/Building_Qt_5_from_Git">http://wiki.qt.io/Building_Qt_5_from_Git</a> and README.git<br> for more information.<br> See <a href="http://wiki.qt.io/Qt_5">http://wiki.qt.io/Qt_5</a> for the reference platforms.</p><h1 id="Documentation"><a href="#Documentation" class="headerlink" title=" Documentation"></a> Documentation</h1><p> After configuring and compiling Qt, building the documentation is possible by running<br> “make docs”.</p><p> After having built the documentation, you need to install it with the following<br> command:</p><pre><code>make install_docs</code></pre><p> The documentation is installed in the path set to $QT_INSTALL_DOCS.<br> Running “qmake -query” will list the value of QT_INSTALL_DOCS.</p><p> Information about Qt 5’s documentation is located in qtbase/doc/README<br> or in the following page: <a href="http://wiki.qt.io/Qt5DocumentationProject">http://wiki.qt.io/Qt5DocumentationProject</a></p><p> Note: Building the documentation is only tested on desktop platforms.</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器 nginx 上部署 SSL 证书实现 https 访问</title>
      <link href="posts/70a6b02f/"/>
      <url>posts/70a6b02f/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　上一篇在远程服务器上部署了 <code>Hexo</code> 之后，这是其后续一篇，设置部署 <code>https</code> 证书（<code>SSL</code>），记录申请证书、配置相关 <code>nginx</code> 服务，其远程服务器为 <code>Ubuntu 20.04</code>。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>自己的阿里云主机相关环境：</p><ul><li><code>Ubuntu 20.04 focal </code>  </li><li><code>Kernel: x86_64 Linux 5.4.0-47-generic</code></li><li><code>nginx version: nginx/1.18.0 (Ubuntu)</code> </li></ul><br><h2 id="申请-SSL"><a href="#申请-SSL" class="headerlink" title="申请 SSL"></a>申请 SSL</h2><p>​    一年前，在阿里云申请过一次免费的 ssl ：<a href="https://blog.csdn.net/qq_33154343/article/details/104727225">刚买的域名怎么绑定自己博客？再白嫖一年的SSL，使用https访问博客</a> ，但是每次最长时间仅一年，顿感入口隐藏只深；</p><p>​    现在再次需要申请阿里云免费 ssl，发现入口比之前更深了，方法也比之前复杂多了；<del>是互相在比下限嘛</del> 。</p><br><p>登录阿里云，左侧选择 <strong>“SSL 证书-证书资源包”</strong> 里面购买免费的 ssl 证书资源包，一年最多 20 个，每个时间依旧一年；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223_174815.png" width="90%"/ loading="lazy"><p>​    点击证书申请，在 <strong>“状态”</strong> 一栏    按照如下步骤，依次填写对应的，其中设置解析记录选择自动即可：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223210828.png" width="100%"/ loading="lazy"><p>当到最后一步骤（此时 <strong>“状态”</strong>  一栏也会变成“已签发”）。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223202950.png" width="25%"/ loading="lazy"><p>​    点击下载对应的 nginx 的证书，下载后解压会得到两个文件 <code>5222721_ifmet.cn.key</code> 和 <code>5222721_ifmet.cn.pem</code> 文件；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223_174830.png" width="60%"/ loading="lazy"><br><h2 id="部署-SSL"><a href="#部署-SSL" class="headerlink" title="部署 SSL"></a>部署 SSL</h2><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><p>​    通过 scp 将上面证书的的两个文件上传到远程服务器的家目录下；然后登陆到远程服务器，<font color=#FF0000  size=4 face="幼圆">将证书文件移动到 <code>/usr/share/nginx/cert</code> 路径下，注意不是 <code>/etc/nginx/nginx.conf</code> 路径</font>；直接 scp 到此目标路径下，会报权限拒绝，故此周转一下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> 5222721_ifmet.cn.* xmuli@20.21.1.11:~/  <span class="token comment"># 上传文件</span>登陆到远程服务器，创建好 cert/文件夹<span class="token function">sudo</span> <span class="token function">mv</span> 5222721_ifmet.cn.* /usr/share/nginx/cert/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>修改 nginx 配置文件，修改之前先记得备份</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup<span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到如下地方，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Default server configuration</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将其修改为：将原先的一个 server 拆分为两个 server；<code>listen 80</code> 表示 http 协议，访问会 return ；强制改为跳转为 https: 协议访问（<code>listen 443</code>）；不然就会可同时访问 http 和 https 两个，而默认浏览器输入 <code>ifmet.cn</code> 顶级域名，默认是选择 http 这个，会有警告小锁提示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Default server configuration</span>server <span class="token punctuation">&#123;</span>        listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span>        server_name ifmet.cn www.ifmet.cn<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>        <span class="token comment"># SSL configuration</span>        <span class="token comment">#</span>        listen <span class="token number">443</span> ssl default_server<span class="token punctuation">;</span>        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:443 ssl default_server<span class="token punctuation">;</span>        ssl_certificate      /usr/share/nginx/cert/5222721_ifmet.cn.pem<span class="token punctuation">;</span>        ssl_certificate_key  /usr/share/nginx/cert/5222721_ifmet.cn.key<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="检测配置-nginx-成功"><a href="#检测配置-nginx-成功" class="headerlink" title="检测配置 nginx 成功"></a>检测配置 nginx 成功</h3><p>执行命令，检测配置 nginx 知否正确，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置成功也会输出如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is oknginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token builtin class-name">test</span> is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>重启服务器后（也可重启服务器），</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="访问成功"><a href="#访问成功" class="headerlink" title="访问成功"></a>访问成功</h3><p>再次在 <code>chrome</code> 中输入域名；即可看到安装的小锁，开启 https 访问成功。</p><br><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>若是遇到中途遇到页面访问报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">400</span> Bad RequestThe plain HTTP request was sent to HTTPS portnginx/1.18.0 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则通常是将配置下面两行的时候，多加了一行 <code>ssl on;</code>，将其删掉、或注释掉、或者改写为  <code>ssl off;</code> 即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssl on<span class="token punctuation">;</span>ssl_certificate      /usr/share/nginx/cert/5222721_ifmet.cn.pem<span class="token punctuation">;</span>ssl_certificate_key  /usr/share/nginx/cert/5222721_ifmet.cn.key<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/mangrandi/article/details/80427863">阿里云+Ubuntu+nginx+https的证书申请与配置</a> </li><li><a href="https://blog.csdn.net/henryhu712/article/details/85217371">Ubuntu 下配置 Nginx 服务器的 SSL 证书</a> </li><li><a href="https://blog.csdn.net/palmer_kai/article/details/89668053">nginx 配置 http, https可以同时访问（报错： The plain HTTP request was sent to HTTPS port）</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>又是一年春好色（辛丑年）</title>
      <link href="posts/2d307b31/"/>
      <url>posts/2d307b31/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　辛丑年正月初二，又是一年春好色。记烟花夜空绽放，美丽而又美好。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>​        </p><p>​        年初二，沐浴阳光☀️，待午晌后，酒足饭饱；宾客来者，姐夫周者有兴致，相约垂钓，另一人，同附和，携吾共赴河边，垂钓或渔网之🎣🎣🎣。</p><br><p>​        乃驱车，路至一小路转角，遇一车，车窗互视，是二叔亲姐，惠姐姐，也幼时疼爱我者，高兴，简聊之。后至二叔家，询其幼子：“钓竿何在？” ， 曰：“不知”。遂与之，房间共寻之，不得，返。继而电话询二叔，知鱼竿所置之处，复返；再遇惠姐姐与其良人；与其详聊生活、工作等之境况，甚欢。同时继而寻竿，取之，返程。</p><br><p>​        左持一篓，右握一鱼竿，余者有携渔网、铁铲、饵等。一起大步，欣欣然往；至于河边，见河面，两侧浑水，水草浮生，中间清澈，有甚多鱼排队缓慢游之；亦见数条红尾鲤鱼，体型较大。亦有鲫鱼纹丝不动，亦不惧人，身旁偶有泡泡上浮。二人手执杆垂钓，一人渔网之。静待良久，不上钩，遂挪另一古桥，再次垂钓之。看水波涟漪、水面映日，波光粼粼，微风清徐，惬意舒适，悠哉自然。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210213232842.png" width="50%"/ loading="lazy"><br><p>​        良久，天渐黑，起鱼竿返家。鱼篓空空来，亦空空而反。门口闲聊，一小儿童，吾侄儿，见吾等归来，童言无忌望向二叔：“爸爸，鱼呢？”。其妻、姑姑、奶奶、爷爷、叔叔等，一顿，皆哄堂大笑，玩笑再起：“钓鱼，鱼呢？”。甚至开心，一起等皆感其乐一堂。</p><br><p>​        恰逢另两幼侄游玩归家，带饮料、小吃和烟花、爆竹🧨🧨🧨等。恰好，心有一大胆想法，点一炷香，与两幼侄共归其垂钓处。途中，一侄点燃其爆竹，扔之于菜地，硝烟起，一大坑（记载于此，便日后可忆）；至于古桥，爆竹扔于鱼儿出没处，见鱼腹大白，疑晕，不久摇摇尾巴，惊吓逃遁之。后与一起点燃，爆竹声声入耳，响彻云霄，心有一惊，亦同时开心至极。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210213233714.png" width="50%"/ loading="lazy"><br><p>​        毕，归家。餐后，再次闲聊八卦等消遣。后提议共放烟花共欣赏，一群大小孩，皆一起点燃绽放烟火。有多个置于地面，有各手持一杆，约定共点燃之，拍照片、volg 等留作回忆。间隙，母亲言：“姐弟皆一家人，即使皆放烟火，也都是左手叉腰，微斜身体，右手持冲天烟火，期间言辞姿势等也相差无几，当真是快乐。”   年就是家人的团聚， 与平日难得一见的亲人等，团聚一堂，吃瓜果零食，共吃一桌佳肴菜，谈一年变化，互道牵挂于担心，彼此之间互相祝福，共同期待来的一年更好。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210213-231258.gif" width="50%"/ loading="lazy"><br><p>​        记辛丑年正月初二夜，共赏烟花美景，虽易逝，但美好留于回忆不易逝；书写初三，忽感今天亦是情人节，顺祝你们祝新年梦想成真，所有有情人：愿年年岁岁永相依，朝朝暮暮心相携，柔情似水，佳期如梦。</p><br><p><strong>望两姓联姻，一堂缔约，良缘永结，匹配同称；</strong></p><p><strong>便看此日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽；</strong></p><p><strong>谨以白头之约，书向鸿签，终好将红叶之盟，载明鸳谱。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新年 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器部署 Hexo 博客</title>
      <link href="posts/5490ca44/"/>
      <url>posts/5490ca44/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>简  述：</strong> 在阿里云服务器 <code>Ubuntu 20.04</code> 上部署 <code>Hexo</code> 博客。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​        初，将 <code>hexo</code> 部署在 <code>GitHub</code>，因访问较慢；不久，改成 <code>hexo</code> 部署在 <code>GitHub + Coding</code> 双线程解析，实测 <code>coding</code> 是韩国的服务器，访问加速不明显（现在好像升级了，没继续了解）；数月后，今改成 <code>阿里云 + GitHub</code> 解析国内外访问，用上我心爱的小服务器（偕臧自家用，豆腐店）。</p><br><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h3><p>​        阿里云购买 <strong>“轻量应用服务器”</strong> ，安装 <code>Ubuntu 20.04</code>；面板左侧点击 <strong>“服务器运维-远程连接”</strong> ，设置 root 密码后重启电脑生效，在本机使用 <code>ssh + root@20.21.01.11</code> 登录 （此假设我购买的阿里云服务器公网<code>IP</code> 为 <code>20.21.01.11</code>，寓意新年）。</p><br><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>创建新用户 <code>xmuli</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser xmuli<span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers<span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到如下 <code>root    ALL=(ALL:ALL) ALL</code> 后，在其下面添加一行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli   <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL:ALL<span class="token punctuation">)</span> ALL  <span class="token comment"># xmuli 替换为自己用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取 <code>root</code> 权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> xmuli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="切换新用户"><a href="#切换新用户" class="headerlink" title="切换新用户"></a>切换新用户</h3><p>切换为新建的用户后（<strong>后面都是此用户和其 <code>~</code> 目录下工作</strong> ），安装一些常用软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> xmuli<span class="token builtin class-name">cd</span> ~<span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token function">git</span> <span class="token function">htop</span> screenfetch <span class="token function">curl</span> <span class="token function">wget</span> <span class="token comment"># zsh 暂没安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 <code>SSH</code></h3><p>创建 <code>~/.ssh</code> 和 <code>authorized_keys</code> 文件，赋予权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.ssh<span class="token function">vim</span> ~/.ssh/authorized_keys  <span class="token comment"># authorized_keys 名字不能变</span><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/authorized_keys <span class="token function">chmod</span> <span class="token number">700</span> ~/.ssh/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后切回本机，将 <code>cat ~/.ssh/id_rsa.pub</code> 的结果复制到 远程服务器的<code>~/.ssh/authorized_keys</code>里面；在本地测试，验证 <code>ssh</code> 无密码登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -v xmuli@20.21.01.11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 <code>Git</code></h3><p>创建 <code>Git</code> 裸库 <code>blog.git</code>，和工作目录 <code>blog</code>（存放解析后 <code>html</code> 文件）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">mkdir</span> blog<span class="token function">git</span> init --bare blog.git<span class="token function">vim</span> blog.git/hooks/post-receive  <span class="token comment"># 创建新文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>里面 <code>post-receive</code> 添加 <code>hook</code> 钩子，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#！/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/xmuli/blog --git-dir<span class="token operator">=</span>/home/xmuli/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加运行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若执行 <code>git clone xmuli@20.21.01.11:/home/xmuli/blog.git</code> 可下载云服务器该 git 仓库</p><br><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 <code>nginx</code></h3><p>安装  <code>nginx</code> 和修改对应配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># include snippets/snakeoil.conf;</span>root /var/www/html<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>替换为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># include snippets/snakeoil.conf;</span>root /home/xmuli/blog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行 <code>service nginx status</code>  查看 nginx 状态，其默认状态是运行中（服务开始了） + 开机自启 （<strong>若是没有，需要执行此状态</strong> ）；命令可参考 <a href="https://juejin.cn/post/6844904000769245191">【译】你必需知道的10个 Nginx 常用命令</a> 。</p><p>若此刻直接访问云服务器的公网 IP 会显示 nginx 欢迎界面，因为此时 <code>/home/xmuli/blog</code> 文件夹为空，没有任何 html 文件。</p><br><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置:"></a>本地配置:</h2><h3 id="创建-hexo-文件夹"><a href="#创建-hexo-文件夹" class="headerlink" title="创建 hexo 文件夹"></a>创建 <code>hexo</code> 文件夹</h3><p>本地创建一个测试的 <code>hexoBlog</code> 的博客文件夹，用来最小化验证部署正确。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~hexo init hexoBlog                       <span class="token comment"># 创建和初始化 hexoBlog 文件夹</span>cnpm <span class="token function">install</span>                             <span class="token comment"># 安装插件</span>cnpm <span class="token function">install</span> hexo-deployer-git --save    <span class="token comment"># hexo d 部署插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>hexoBlog</code> 根目录下的配置文件 <code>_config.yml</code> ，末尾修改为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>deploy:  type: <span class="token function">git</span>  repo: xmuli@20.21.01.11:/home/xmuli/blog.git  branch: master                             message: <span class="token string">'站点更新:&#123;&#123;now("YYYY-MM-DD HH:mm:ss")&#125;&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="部署到远程服务器"><a href="#部署到远程服务器" class="headerlink" title="部署到远程服务器"></a>部署到远程服务器</h3><p>在本机中 <code>~/hexoBlog</code> 路径下，执行部署</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean   <span class="token comment"># 清理</span>hexo g       <span class="token comment"># 生成 html 文件</span>hexo s       <span class="token comment"># 在本机浏览器预览效果</span>hexo d       <span class="token comment"># 部署，会自动将生成的 html 文件， push 到阿里云服务器的 /home/xmuli/blog 文件夹中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后<strong>重启阿里云服务器后，浏览器输入服务器公网 <code>IP</code></strong> ，即可网页看到解析后的部署网页 “Hello World”。</p><p>最后替换为自己的真实博客文件夹的 <code>_config.yml</code> 文件末尾处替换为如上，重新执行 <code>hexo d</code> 部署即可成功；可以生成一个快照哦~，以防万一</p><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhengyujie.github.io/2019/08/17/%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/">Hexo博客部署到阿里云服务器</a> </li><li><a href="https://www.jianshu.com/p/e1ccd49b4e5d">Hexo部署在阿里云服务器上</a> </li><li><a href="http://blog.zhangkexuan.cn/2020/10/25/hexo-aliyun/#%E5%88%9D%E5%A7%8B%E5%8C%96git%E4%BB%93%E5%BA%93%EF%BC%8C%E4%BD%9C%E4%B8%BAhexo%E9%83%A8%E7%BD%B2-deploy-%E7%9A%84%E8%BF%9C%E7%AB%AFgit%E4%BB%93%E5%BA%93">hexo搭建在阿里云服务器上(Ubuntu 20.04)</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重装 Mac 系统后的安装软件和个人配置[个人习惯]</title>
      <link href="posts/8150f35d/"/>
      <url>posts/8150f35d/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　每次重装 <code>MacOS</code> 后，自用安装软件清单。</p><span id="more"></span><p>[TOC]</p><br><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ul><li><p>必须</p><p><a href="https://github.com/yanue/V2rayU/releases">V2rayU</a>、<a href="https://github.com/aonez/Keka/releases">Keka 压缩解压</a>、<a href="https://xclient.info/s/bettersnaptool.html">BetterSnapTool  四个窗口</a>、 <code>istat menus 6.4.0 官网 + 秘钥</code>、<a href="http://www.sdifen.com/xee353.html">Xee³ 3.5.3</a> 、<a href="https://github.com/MonitorControl/MonitorControl/releases">MonitorControl 外接显示器亮度和声音调节</a> 、</p></li></ul><ul><li><p>编程</p><p><a href="https://developer.apple.com/download/more/">Command_Line_Tools_for_Xcode_11.3.1</a>、<a href="https://download.qt.io/archive/qt/">QtCreator</a>、<a href="https://www.jetbrains.com/clion/download/#section=mac">CLion</a></p><p><a href="https://zh.snipaste.com/">snipaste 截图</a>、<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>、<a href="https://typora.io/">Typora</a>、<a href="https://github.com/coteditor/CotEditor/releases">CotEditor_3.9.7</a>、<a href="https://www.cockos.com/licecap/">LICEcap GIF 截图</a> <code>Beyond Compare 文件对比</code>、 </p></li><li><p>娱乐</p><p><a href="https://im.qq.com/macqq/">QQ</a> 、<a href="https://music.163.com/#/download">网易云音乐</a> 、<a href="https://mac.weixin.qq.com/">WeChat</a>  、<a href="https://pinyin.sogou.com/mac/">搜狗输入法</a> 、<a href="https://github.com/iina/iina/releases">IINA 播放器</a> 、<a href="https://desktop.telegram.org/">Telegram (tsetup.2.5.1)</a>  、<a href="https://pan.baidu.com/download?from=header#pan">百度网盘</a> 、 <code>CleanMyMac-TNT破解</code> </p></li></ul><ul><li><p>工作</p><p><a href="https://work.weixin.qq.com/#indexDownload">企业微信</a> </p></li></ul><br><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmuli/xmuliPicpicxxxxxxxxxxxxxxx  // 不显示<span class="token number">2021</span>/https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic<span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$url</span>"</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">"50%"</span>/<span class="token operator">></span>http://127.0.0.1:1087<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="istat-menus-6-4-0"><a href="#istat-menus-6-4-0" class="headerlink" title="istat menus 6.4.0"></a>istat menus 6.4.0</h3><pre class="line-numbers language-none"><code class="language-none">istat menus 6.4.0 软件激活密钥邮箱：982092332@qq.comSN: GAWAE-FCWQ3-P8NYB-C7GF7-NEDRT-Q5DTB-MFZG6-6NEQC-CRMUD-8MZ2K-66SRB-SU8EW-EDLZ9-TGH3S-8SGA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="Telegram-中文语言"><a href="#Telegram-中文语言" class="headerlink" title="Telegram 中文语言"></a>Telegram 中文语言</h3><pre class="line-numbers language-none"><code class="language-none">• 简体中文(聪聪):&lt;tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhcncc&gt;• 简体中文(@zh_CN 版):&lt;tg:&#x2F;&#x2F;setlanguage?lang&#x3D;classic-zh-cn&gt;• 简体中文(langCN):&lt;tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zhlangcn&gt;• 简体中文(瓜体):&lt;tg:&#x2F;&#x2F;setlanguage?lang&#x3D;duang-zh-cn&gt;• 繁体中文(香港):&lt;tg:&#x2F;&#x2F;setlanguage?lang&#x3D;zh-hant-raw&gt;• 繁体中文(台湾):&lt;tg:&#x2F;&#x2F;setlanguage?lang&#x3D;taiwan&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="GitHub-加载图片丢失解决方案"><a href="#GitHub-加载图片丢失解决方案" class="headerlink" title="GitHub 加载图片丢失解决方案"></a>GitHub 加载图片丢失解决方案</h3><p>修改 <code>hosts</code> 文件所在目录（<a href="https://xmuli.tech/posts/edb355c4/">链接</a> ）：</p><ul><li><strong>[win:]</strong> <code>C:\Winows\System32\drivers\etc\hosts</code></li><li><strong>[Mac:]</strong> <code>/etc/hosts</code></li><li><strong>[Linux:]</strong> <code>/etc/hosts</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GitHub Start </span><span class="token number">140.82</span>.114.4 github.com <span class="token number">140.82</span>.114.3 gist.github.com <span class="token number">185.199</span>.108.153 assets-cdn.github.com<span class="token number">185.199</span>.109.153 assets-cdn.github.com <span class="token number">185.199</span>.110.153 assets-cdn.github.com <span class="token number">185.199</span>.111.153 assets-cdn.github.com <span class="token number">199.232</span>.68.133 raw.githubusercontent.com <span class="token number">199.232</span>.68.133 gist.githubusercontent.com <span class="token number">199.232</span>.68.133 cloud.githubusercontent.com <span class="token number">199.232</span>.68.133 camo.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars0.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars1.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars2.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars3.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars4.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars5.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars6.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars7.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars8.githubusercontent.com <span class="token comment"># GitHub End</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a><code>Homebrew</code></h3><blockquote><p>官网：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a> </p></blockquote><p>执行： <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code> ；</p><p>如果安装太慢，直接使用现成的国内镜像源，执行下面的命令，选1(亲测速度最快)，且自动换成国内的源<br>执行 <code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</code> </p><p>常用软件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">zsh</span> <span class="token function">git</span> <span class="token function">vim</span> screenfetch <span class="token function">curl</span> <span class="token function">wget</span> gitg treebrew <span class="token function">install</span> --cask visual-studio-code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a><code>zsh</code></h3><blockquote><p>官网：<a href="https://github.com/ohmyzsh/ohmyzsh">https://github.com/ohmyzsh/ohmyzsh</a> </p></blockquote><p>执行： 如下命令，若是失败，直接下载和运行此可执行文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc  <span class="token comment">#拷贝模板</span><span class="token function">vim</span> ~/.zshrc                                           <span class="token comment">#修改主题为 ZSH_THEME="cloud “</span>chsh -s /bin/zsh                                       <span class="token comment">#从bash切换到zsh</span>chsh -s /bin/bash                                      <span class="token comment">#从zsh切换到bash</span><span class="token comment">#------------------------------------------------------------</span><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:./node_modules/.bin"</span>                       <span class="token comment"># 可以在 .zshrc 后面添加如下</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HOMEBREW_BOTTLE_DOMAIN</span><span class="token operator">=</span>https://mirrors.ustc.edu.cn/homebrew-bottles<span class="token builtin class-name">export</span> <span class="token assign-left variable">GPG_TTY</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">tty</span><span class="token variable">)</span></span>                                  <span class="token comment"># delete 删除键正常工作</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">tree</span><span class="token operator">=</span><span class="token string">'tree -CN'</span>                                  <span class="token comment">#设置 tree 显示中文且带有颜色</span><span class="token builtin class-name">set</span> number                                             <span class="token comment">#设置行号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><code>Git</code></h3><blockquote><p>官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span class="token function">git</span> config --global user.name <span class="token string">"xmuli"</span><span class="token function">git</span> config --global user.email <span class="token string">"xmulitech@gmail.com"</span>ssh-keygen -t rsa -C <span class="token string">"xmulitech@gmail.com"</span>              <span class="token comment"># 生成密钥</span><span class="token function">cat</span> ~/.ssh/id_rsa.pub  <span class="token comment"># 显示公钥</span><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span>                <span class="token comment"># gitBash 路径显示为中文数字</span><span class="token function">git</span> config --global --list                              <span class="token comment"># 查看 git 配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="Git-代理"><a href="#Git-代理" class="headerlink" title="Git 代理"></a><code>Git</code> 代理</h3><blockquote><p>参考： <a href="https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1">git 设置代理 - github</a> </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ---------------------------一、HTTP 形式---------------------------</span><span class="token function">git</span> config --global http.proxy <span class="token string">"http://127.0.0.1:1087"</span>      <span class="token comment"># 走 HTTP 代理</span><span class="token function">git</span> config --global https.proxy <span class="token string">"http://127.0.0.1:1087"</span><span class="token function">git</span> config --global http.proxy <span class="token string">"socks5://127.0.0.1:1080"</span>    <span class="token comment"># 走 socks5 代理</span><span class="token function">git</span> config --global https.proxy <span class="token string">"socks5://127.0.0.1:1080"</span><span class="token function">git</span> config --global --unset http.proxy                      <span class="token comment"># 取消设置</span><span class="token function">git</span> config --global --unset https.proxy<span class="token comment"># ---------------------------二、SSH 形式---------------------------</span>修改 <span class="token variable"><span class="token variable">`</span>~/.ssh/config<span class="token variable">`</span></span> 文件（不存在则新建）：<span class="token comment"># 必须是 github.com</span>Host github.com   HostName github.com   User <span class="token function">git</span>   <span class="token comment"># 走 HTTP 代理</span>   <span class="token comment"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=8080</span>   <span class="token comment"># 走 socks5 代理（如 Shadowsocks）</span>   <span class="token comment"># ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a><code>vim</code></h3><blockquote><p>one 主题：<a href="https://github.com/rakr/vim-one/">https://github.com/rakr/vim-one/</a> </p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">下载 one.vim 文件 <span class="token comment"># https://github.com/rakr/vim-one/tree/master/colors 为下载网址</span><span class="token function">mkdir</span> ~/.vim/colors/  <span class="token comment"># 没有该文件夹就创建</span><span class="token function">sudo</span> <span class="token function">cp</span> ./one.vim ~/.vim/colors/ <span class="token comment"># 复制到 vim 主题下</span><span class="token function">vim</span> ~/.vimrc <span class="token comment"># 修改 vim 配置文件，没有就创建；在 ~/.vimrc 加入如下三行代码后保存退出。「使用 one 主题的 dark 风格，且按下 delete 按键会删除字符」</span>colorscheme one<span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>dark<span class="token builtin class-name">set</span> <span class="token assign-left variable">backspace</span><span class="token operator">=</span><span class="token number">2</span>----------------------------安装后提示----------------------------You may want to <span class="token function">add</span> this to your <span class="token environment constant">PATH</span><span class="token builtin class-name">.</span>ruby is keg-only, <span class="token function">which</span> means it was not symlinked into /usr/local,because macOS already provides this software and installing another version <span class="token keyword">in</span>parallel can cause all kinds of trouble.If you need to have ruby first <span class="token keyword">in</span> your <span class="token environment constant">PATH</span>, run:  <span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/usr/local/opt/ruby/bin:<span class="token environment constant">$PATH</span>"'</span> <span class="token operator">>></span> /Users/xmuli/.bash_profileFor compilers to <span class="token function">find</span> ruby you may need to set:  <span class="token builtin class-name">export</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/usr/local/opt/ruby/lib"</span>  <span class="token builtin class-name">export</span> <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/usr/local/opt/ruby/include"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a><code>nvm</code></h3><blockquote><p>官网：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> nvm 常用命令● nvm <span class="token function">install</span> stable  安装最新稳定版 node● nvm <span class="token function">install</span> <span class="token operator">&lt;</span>version<span class="token operator">></span>  安装指定版本，如：安装v4.4.0，nvm <span class="token function">install</span> v4.4.0● nvm uninstall <span class="token operator">&lt;</span>version<span class="token operator">></span>  删除已安装的指定版本，语法与install类似● nvm use <span class="token operator">&lt;</span>version<span class="token operator">></span>  切换使用指定的版本node● nvm <span class="token function">ls</span>  列出所有安装的版本● nvm <span class="token builtin class-name">alias</span> default <span class="token operator">&lt;</span>version<span class="token operator">></span>  如： nvm <span class="token builtin class-name">alias</span> default v11.1.0● nvm ls-remote <span class="token comment">## 列出所以远程服务器的版本（官方node version list）</span>● nvm current <span class="token comment">## 显示当前的版本</span>----------------------------安装后提示----------------------------nvm via Homebrew is unsupported by them and you should check anyproblems against the standard nvm <span class="token function">install</span> method prior to reporting.You should create NVM<span class="token string">'s working directory if it doesn'</span>t exist:  <span class="token function">mkdir</span> ~/.nvmAdd the following to /Users/xmuli/.bash_profile or your desired shellconfiguration file:  <span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>  <span class="token punctuation">[</span> -s <span class="token string">"/usr/local/opt/nvm/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> <span class="token string">"/usr/local/opt/nvm/nvm.sh"</span>  <span class="token comment"># This loads nvm</span>  <span class="token punctuation">[</span> -s <span class="token string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> <span class="token string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span>  <span class="token comment"># This loads nvm bash_completion</span>You can <span class="token builtin class-name">set</span> <span class="token variable">$NVM_DIR</span> to any location, but leaving it unchanged from/usr/local/opt/nvm will destroy any nvm-installed Node installationsupon upgrade/reinstall.Type <span class="token variable"><span class="token variable">`</span>nvm <span class="token builtin class-name">help</span><span class="token variable">`</span></span> <span class="token keyword">for</span> further information.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a><code>cnpm</code></h3><blockquote><p>官网：<a href="https://developer.aliyun.com/mirror/NPM">https://developer.aliyun.com/mirror/NPM</a> </p></blockquote><p>执行：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> ；（<strong>PS：</strong> 不加 <code>sudo</code> 运行 ）</p><br><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><code>Hexo</code></h3><blockquote><p>官网： <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></blockquote><p><font color=#D0087E size=4 face="幼圆"><strong>前提：</strong></font>  前面已经安装了 node.js + 替换淘宝源 cnpm。执行： <code>npm install -g hexo-cli</code> ；（<strong>PS：</strong> 不加 <code>sudo</code> 运行 ）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># HomeBrew</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HOMEBREW_BOTTLE_DOMAIN</span><span class="token operator">=</span>https://mirrors.ustc.edu.cn/homebrew-bottles<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/local/bin:<span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/usr/local/sbin:<span class="token environment constant">$PATH</span>"</span><span class="token comment"># HomeBrew END</span><span class="token comment"># nvm  提示配置 2021-02-09</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span>  <span class="token punctuation">[</span> -s <span class="token string">"/usr/local/opt/nvm/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> <span class="token string">"/usr/local/opt/nvm/nvm.sh"</span>  <span class="token comment"># This loads nvm</span>  <span class="token punctuation">[</span> -s <span class="token string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> <span class="token string">"/usr/local/opt/nvm/etc/bash_completion.d/nvm"</span>  <span class="token comment"># This loads nvm bash_completion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deepin 任务栏网速插件推荐 lfxNet (重构 lfxSpeed)</title>
      <link href="posts/164f4705/"/>
      <url>posts/164f4705/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　之前写过一个版本 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a> 的 <code>dde-dock</code> 插件，用来实时现实网速插件；现重构为 <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 项目，修复之前的许多缺陷，和添加功能。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-02-02%2013-28.gif" width="60%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-02-02%2013-31.gif" width="35%"/ loading="lazy"></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><br><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>​        <code>lfxNet</code> 是一款轻量、快速的实时显示系统资源信息的应用程序。<code>lfxMonitorNet</code>  是 <code>lfxspeed</code> 的重构版本，属于 <code>dde-dock</code> 的网速插件，也是前者的子项目。</p><br><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><blockquote><p><font size="4" color="#ff5500"><strong>Deepin / UOS 下的最佳网速插件推荐</strong> <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 。</font></p></blockquote><p>​         当我写上这句之初，老脸微微一红；用过其它几款网速插件，发觉都不支持 dde-dock 是垂直模式的状态，不过瑕不掩瑜，也都有各自的精彩之处；在此提供大家多一个选择，适合自己才是最好的。</p><br><p>​        之前在论坛发帖： <a href="https://bbs.deepin.org/zh/post/206895">祝贺 DDUC 十周年，献礼一份：Dock 网速插件</a>，收获很多交流于快乐。于是将上次写的网速插件 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a> ，彻底重构了一下为 <a href="https://github.com/xmuli/lfxNet">lfxNet</a> ，修复许多缺陷，添加很多新功能；</p><p><font size="4" color="red"> <strong>本次最重要的就是支持 Dock 在左右两侧的时候，也能够支持显示(实用为主)。</strong></font><img src="https://bbs.deepin.org/assets/image/raccoon/blush.gif" alt="img" loading="lazy"><img src="https://bbs.deepin.org/assets/image/raccoon/blush.gif" alt="img" loading="lazy"><img src="https://bbs.deepin.org/assets/image/raccoon/blush.gif" alt="img" loading="lazy"> ，可算是找到了一个比较好的解决方案。也制作为 <code>deb</code> 安装包格式，可自行双击后下载安装。</p><br><h3 id="支持功能"><a href="#支持功能" class="headerlink" title="支持功能"></a>支持功能</h3><ul><li>高分屏显示</li><li>用户自定义配置</li><li><font size="3" color="#55aaff">为系统所有用户安装</font></li><li>显示的前缀内容和颜色</li><li>显示的标签内容和颜色</li><li>更改显示字体和字体大小</li><li><font size="3" color="#55aaff"><strong>适配 <code>dock</code> 的模式（支持水平和垂直）</strong> </font></li><li>自动切换单位（默认智能）</li><li>调整网络速率精确度</li><li>调整刷新时间间隔</li><li>显示额外显示的悬浮信息</li><li><font size="3" color="#55aaff"> 左键单击显示的动作（可单击打开 “系统监视器”）</font></li><li>配置数据导出（可系统路径 | 用户路径）</li><li><code>CPU</code>、内存、的利用率；流量的使用预警</li><li>应用的主题样式（浅色和暗色模式）</li><li>更改系统所自带的所有风格选择</li></ul><p>，，，，其它更多功能（写漏了那就是小彩蛋）</p><img src="https://storage.deepin.org/thread/202102021433299289_lfxMonitorNet.png" width="100%"/ loading="lazy"><br><h3 id="重构心得"><a href="#重构心得" class="headerlink" title="重构心得"></a>重构心得</h3><p>​        相比于<a href="https://github.com/xmuli/lfxspeed">旧版</a> 的简版网速插件，新版插件多了很多功能，且还有功能已经实现，但是未在界面显示出来（或已经实现大半）；以为重构是一件很容易的事情，毕竟之前核心部分已经有书写过一遍。</p><p>​        经过这次重构之后，发现很多不足。但是这些不足都是最初我意料之外的一些因素；比如 Linux 下多用安装；重写 CMake 的语法；打包分发； UI 逻辑和数据之间的传递；预期用户交互功能、和开发者自己想要开发的功能；边写边修正，很多功能都想加，越写越大，越来越复杂，似乎遗忘了最初的插件本身功能，小而简洁；<del>缺乏好看的 UI 设计图（缺设计师，捂脸），最后实现效果和我预期的效果，有差异（忽略此）</del>；大多数是之前以为的一小部分事情，实际去完成它们后，才发现开发只是整个过程中的一小部分（开发竟然是我自己，打包也是）。</p><p>​        另外没有真正的跨平台，即使有，也都是每一个平台下的逐个去实现；也遇到以为很容易的功能，实际很复杂和难以简单的跨平台；对于 Qt 有了跟进一步的认识，也有其不足。</p><br><h3 id="后期计划"><a href="#后期计划" class="headerlink" title="后期计划"></a>后期计划</h3><p>​        后面空闲计划，将 <code>lfxlfxNet</code> 写成 Linux 下通用的网速悬浮窗；吸取网速插件的经验，对功能的实现，只保留必须的功能；简洁才是初心，功能的堆砌可能并不怎么棒；记得 “二八原则”，那么就只去实现那 “二” 等的功能。然后 <code>lfxMonitorNet</code> 使用 DTK 来写，且去掉一些可能没人使用的功能。沟通协调 <code>dock</code> 提供一些 API 接口，有些地方本该有 Dock 提供插件，此处自行补丁跳过，按道理不应该如此。先等待一下用户体验和建议之类的反馈</p><p>​        看在使用过过程中，还有哪些细节没有注意到，若是感觉比较好，会在下一个版本中修正优化。</p><br><h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p>在重构过程中，也获得很多思路解惑、用户交互的探讨交流，<a href="https://github.com/justforlxz">流年匆忙</a> 、<a href="https://github.com/zccrs">zccrs</a> 、wangpeng，<a href="https://github.com/juteman">juteman</a> 等也有给了很多建议，在此表示感谢。也有朋友们的其它的协助，都在此谢过</p><br><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>欢迎来 <a href="https://github.com/xmuli/lfxNet/issues">此处</a> 反馈缺陷、提供建议、参与贡献；或者在论坛帖子 <a href="https://bbs.deepin.org/zh/post/213210">https://bbs.deepin.org/zh/post/213210</a>  下盖楼也行 。</p><ul><li><p>项目地址：<a href="https://github.com/xmuli/lfxNet">lfxNet</a> </p></li><li><p>安装包下载：<a href="https://github.com/xmuli/lfxNet">releases</a> </p></li></ul><br><p>你的 <code>star</code> 和 <code>fork</code> 是对我最大的支持。也欢迎学习这个系列的 <a href="https://xmuli.blog.csdn.net/article/details/QT/DTK"><code>QT/DTK</code></a> 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin 愿望墙：社区插件等需求调研结果</title>
      <link href="posts/8bad87dd/"/>
      <url>posts/8bad87dd/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　社区或独立开发者，欲开发一些插件或小功能等，但一时之间没想到合适的方向，可参考此作为方向，作为个人学习或者练手编程。<font size="3" color="#FF0000">既是个人兴趣，也是他人所需，妙哉。</font> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="详细调研"><a href="#详细调研" class="headerlink" title="详细调研"></a>详细调研</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前拜托大佬调研过一些有社区希望上哪些功能，此处放出来，也可以作为社区开发者一个参考，如果感兴趣的话，可以考虑个人开发一些小轮子，<font size="3" color="#FF0000">即使已经有的，或许你可以开发一个更棒的。然后可在<a href="https://docs.deepin.org/pages/d318e7/#%E6%8A%95%E7%A8%BF%E4%BD%9C%E5%93%81">官方文档</a>投稿、论坛发帖等，一起分享。</font></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20210105163355.png" width="70%"/ loading="lazy"><br><h3 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h3><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201130151859.png" width="40%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201130151328.png" width="50%"/ loading="lazy"></p><p>对于这些数据， 有些还是比较意外的，有的是在情理之中，从国内社区和国际社区， 得到数据的综合来看，其中需求最大的 <code>Topbar</code> 和 动态壁纸 ，Hash 值的校验，文件对比，发送到…， 而对于网速、天气、CPU 温度、快捷设置</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201130152757.png" width="100%"/ loading="lazy"><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://bbs.deepin.org/post/204108#mod=viewthread&tid=204108&page=1&extra=">【DTK之开发文档调研】统计你希望官方输出的DTK文档</a> </li><li><a href="https://bbs.deepin.org/post/204104#mod=viewthread&tid=204104&page=1&extra=">【DTK之桌面插件调研】你希望官方支持的桌面插件</a></li><li><a href="https://bbs.deepin.org/post/204106#mod=viewthread&tid=204106&page=1&extra=">【DTK之文管插件调研】统计希望支持的文管插件</a></li><li><a href="https://bbs.deepin.org/post/204107#mod=viewthread&tid=204107&page=1&extra=">【DTK之任务栏插件调研】统计希望支持的任务栏插件</a></li><li>等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin、DTK 文档参考资料集合</title>
      <link href="posts/e7de542e/"/>
      <url>posts/e7de542e/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　整理收集 <code>DTK</code> 相关资料。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="DTK-文档集合"><a href="#DTK-文档集合" class="headerlink" title="DTK 文档集合"></a>DTK 文档集合</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li><a href="https://linuxdeepin.github.io/dtk/">DTK API 文档</a>：<code>DTK</code> 的 <code>API</code> 接口中文说明，自动同步更新</li><li><a href="http://linuxdeepin.github.io/docs">Deepin 社区文档</a>：核心为 <code>DTK</code> 团队的文档积累，社区爱好者的作品展示、技术交流</li><li><a href="https://github.com/xmuli/QtExamples">QtExamples</a>：个人积累，参考第五章节，为 <code>DTK</code> 的源码架构一些理解和实战</li><li><a href="https://github.com/linuxdeepin/developer-center/wiki">Deepin Wiki</a>： <code>Deepin</code> 在 <code>GitHub</code> 上某些仓库都有写 <code>Wiki</code>。虽零碎，但有惊喜</li><li><a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">DTK 相关 PPT</a> ：《DTK 框架分享.pptx》 《DTK 框架介绍、优势对比.pptx》</li></ul><br><h3 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h3><ul><li><a href="https://www.deepin.org/zh/">Deepin 官网</a>：<code>Deepin</code> 的官网</li><li><a href="https://bbs.deepin.org/">Deepin 论坛</a>：<code>Deepin</code> 中文与国际论坛，用户使用的交流地</li><li><a href="https://distrowatch.com/table.php?distribution=deepin">Distrowatch</a>： <code>Deepin</code> 在 <code>Distrowatch</code> 中的排名和详细介绍（国际排行）</li><li><a href="https://t.me/deepin">https://t.me/deepin</a>：Deepin 在 telegram 上的最大群组（英文）</li><li><a href="https://t.me/deepin_cn">https://t.me/deepin_cn</a>：Deepin 在 telegram 上的群组（中文）</li></ul><br><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><a href="https://github.com/linuxdeepin">linuxdeepin</a>： <code>Deepin</code> 在 <code>GitHub</code> 上开源仓库，仓库和内网开发仓库实时同步</li><li><a href="https://github.com/linuxdeepin/package-tag/tree/master/packages-tag-version">package-tag</a>： <code>Deepin</code> 每次发布版本的，都会统计在此 [完善中]</li><li><a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">DTK Resources</a>：DTK 相关资料，会存放在此，后续会更新</li></ul><br><h3 id="内网交流："><a href="#内网交流：" class="headerlink" title="内网交流："></a>内网交流：</h3><p>具体链接可内网自查。</p><ul><li>内部博客： <code>UOS/Deepin</code> 全体的技术人员的博客交流地，各种技术大佬分享知识</li><li>内部 WiKi：不仅是知识的宝藏库，多来这里搜搜，总会有意想不到的惊喜</li></ul><br>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> DTK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin / UOS 中配置 DTK 开发环境</title>
      <link href="posts/d614bfcf/"/>
      <url>posts/d614bfcf/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<font color=#D0087E size=4 face="幼圆"><strong>一句命令来配置 DTK 开发环境。</strong></font>  <strong>注：</strong>  <code>deepin-sdk</code> 和 <code>qtcreator-template-dtk</code> 这两个包默认是在社区版本外网源里面有的，若没有可加源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> https://community-packages.deepin.com/deepin/ apricot main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 官方推荐</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> deepin-sdk qtcreator-template-dtk qtcreator cmake  g++<span class="token comment"># 个人习惯</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator cmake  g++ <span class="token function">git</span> deepin-sdk qtcreator-template-dtk gammaray flameshot com.notepadqq.notepadqq tree gitg debhelper devscripts dh-make build-essential<span class="token comment"># qt5-default 选择合适路径后执行；其默认安装本路径 qt 源码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简版教程"><a href="#简版教程" class="headerlink" title="简版教程"></a>简版教程</h2><p>更新 2021-02-22，新的 Deepin 系统，配置 dtk 编程相关环境，一个命令即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> deepin-sdk qtcreator-template-dtk qtcreator cmake  g++<span class="token comment"># PS：</span>libdtk<span class="token punctuation">&#123;</span>core,widget,gui<span class="token punctuation">&#125;</span>-dev 等价于 deepin-sdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拆分说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DTK 开发环境：qt5-default qtcreator cmake  g++ <span class="token function">git</span> libdtk<span class="token punctuation">&#123;</span>core,widget,gui<span class="token punctuation">&#125;</span>-dev 常用软件：gammaray flameshot com.notepadqq.notepadqq tree gitg自行打包：debhelper devscripts dh-make build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在官网下载 <code>uniontechos-desktop-20-professional-1030-fix_amd64</code>  镜像（或找测试小仙女们要一个最新的），常规装系统后，顺利进入到桌面；</p><br><h2 id="开启开发者模式"><a href="#开启开发者模式" class="headerlink" title="开启开发者模式"></a>开启开发者模式</h2><p>进入 <code>控制中心-通用-开发者模式-进入开发者模式</code>，激活开发者模式成功后，重启系统；</p><img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231152215.png" width="60%"/ loading="lazy"><br><h2 id="配置DTK-开发环境"><a href="#配置DTK-开发环境" class="headerlink" title="配置DTK 开发环境"></a>配置DTK 开发环境</h2><p><font size="4" color="#FF0000"> 将第二行的 <code>deb-src</code> 的注释解开，更新源（若使用内网源，下载某些软件失败，记得换源）</font>，最后外网镜像默认自带的源如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Generated by deepin-installer</span>deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> https://professional-packages.chinauos.com/desktop-professional eagle main contrib non-freedeb-src <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> https://professional-packages.chinauos.com/desktop-professional eagle main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p>看了一下，默认 <code>gcc</code> = 4.8.3，无 <code>g++</code> 、无 <code>cmake</code>、无 <code>git</code>；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新源</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token comment"># C++ 开发环境配置好了</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-default qtcreator cmake  g++ <span class="token function">git</span> <span class="token comment"># DTK 开发环境配置好了</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev libdtkgui-dev libdtkcore-dev <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="验证-C-开发环境-配置是否成功："><a href="#验证-C-开发环境-配置是否成功：" class="headerlink" title="验证 C++ 开发环境 配置是否成功："></a>验证 C++ 开发环境 配置是否成功：</h3><ul><li><p>开 <code>QtCreator</code> ，创建一个空的 <code>Qt</code> 空项目，执行运行，发现 <strong>C++ 开发环境</strong>  配置成功。</p> <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231172208.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="验证-DTK-开发环境-配置是否成功："><a href="#验证-DTK-开发环境-配置是否成功：" class="headerlink" title="验证 DTK 开发环境 配置是否成功："></a>验证 DTK 开发环境 配置是否成功：</h3><ul><li><p>执行 <code>git clone https://github.com/linuxdeepin/dtkcore.git</code>， 下载源码</p></li><li><p>进入文件夹 <code>dtkcore</code>， 执行 <code>sudo apt build-dep dtkcore</code> 生成依赖</p></li><li><p>执行 <code>sudo apt policy libdtkcore5</code>，看到<strong>本机显示</strong>  <code>libdtkcore5 为 5.4.0</code></p></li><li><p>执行 <code>git  checkout 5.4.0</code> 切换分支</p></li><li><p>用 <code>QtCreator</code> 打开 <code>dtkwidget.pro</code>， 点击编译运行，为 <strong>DTK 开发环境</strong>  配置成功。</p> <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231172007.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="验证其它项目"><a href="#验证其它项目" class="headerlink" title="验证其它项目"></a>验证其它项目</h3><p>如验证 <code>dtkwidget</code> 开发项目，因为其依赖于 <code>dtkcore</code> 和 <code>dtkgui</code>，所以推荐配置其对应的 <code>tag</code> 这三者是一致的（一般来说，都是各自最新也不会有什么问题，向下兼容很稳定了）。</p><p>且<code>dtkwidget</code> 若是运行在虚拟机，若是内存仅 2G，会编译失败；调整为 &gt;= 4G 即可；<font size="4" color="#FF0000"><strong>若是其它项目生成项目依赖，也都是如此。</strong> </font></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> build-dep 项目名  <span class="token comment"># 生成项目依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如 <code>dtkwidget</code> 运行后：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20210105155933.png" width="70%"/ loading="lazy"><br><h2 id="命令配置更新"><a href="#命令配置更新" class="headerlink" title="命令配置更新"></a>命令配置更新</h2><p><code>deepin-sdk</code>： 虚包，相当于安装 libdtkwidget-dev libdtkgui-dev libdtkcore-dev </p><p><code>qtcreator-template-dtk</code>： 是一个 QtCreator 的插件；可以直接在 IDE 中创建 DTK 的 应用程序项目（简便和检测 dtk 的开发环境是否安装成功），效果如下</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/企业微信截图_16137284925039.png" width="70%"/ loading="lazy"><br><h2 id="个人习惯"><a href="#个人习惯" class="headerlink" title="个人习惯"></a>个人习惯</h2><p>附上个人习惯的开发环境，可自行决定：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 商店里面安装讯飞输入法、typora、wps（或官网里面的）</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gammaray flameshot com.notepadqq.notepadqq tree gitg<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token builtin class-name">source</span> qt5-default    // qt源码包，此会安装在当前所处目录下，建议更换目录再执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时安装 <code>dde-dock</code> 网速插件:   <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 或  <a href="https://github.com/xmuli/lfxspeed">lfxspeed</a> 。</p><br><p><strong>附：</strong></p><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/106510975">重装uos/deepin v20后必安装软件(个人习惯)</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/103733327">安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</a></li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> DTK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qv2ray 检测到 DDE 环境，提示弹窗：Deepin 设置代理错误</title>
      <link href="posts/60b2fbd8/"/>
      <url>posts/60b2fbd8/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　使用 <code>Deepin</code> + <code>QV2ray</code> 的用户，有遇到如下提示弹窗；这里说一下事情的始末发展。</p><img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201231102321.png" width="60%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>印象中让人深刻的一句话～</p> <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201201095203.png" width="80%"/ loading="lazy"><p>本篇是来兑现之前的承诺，虽然 <strong>咕～咕～咕～</strong> 了很久， 但是一天没回复，睡觉始终心有不安。感觉心里有什么在牵挂这一样，，，</p> <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201130155610.png" width="80%"/ loading="lazy"><p><strong>本篇仅是个人观点，说明此缺陷为何一直延期很久才解决。无意代表 <code>Deepin</code> 官方；</strong></p><br><p>也有考虑过是否将本篇其发布出来，犹豫甚久；若是同事或者领导看到了，若是不高兴了， 万一被咔嚓，，，，，，</p><p>若有，会略有失望；一份工作，也仅是生活的一抹重笔；</p><p>若无，说明我没看错，（至少我的直属领导和我认识大领导，和周围比较亲近的人，他们是很友好且心善的、非求生欲，实话实说））（也是我留下来 在 <code>Deepin</code> 的一个重要原因）。</p><p>此文落笔时，没想那么多，也没考虑那么多；也不准备想那么多，也不想考虑太多～～</p><p><strong>同样，本篇既不是洗白、或者黑某个事物或者个人，单单称述一件事情的发展过程罢了。帮助各知晓。</strong>  </p><p><font size="4" color="#FF6EC7"> <strong>文中的语气，仅标表明说当时那一刻瞬间感觉，过后就忘了，没有忧愁的我，，，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈，，，，</strong> </font> （网络是有记忆的，发表容易日后埋雷。已记不清有多久没在公众网络上，发表个人观点了。但今天想了一下，将保存好的草稿略加修改，将其发布于 <code>2020</code> 年的年末一天。）</p><br><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>Deepin可能自作聪明，为你设置了错误的 HTTPS_PROXY 和 FTP_PROXY 环境变量。</p><p>原来正确的 http:// 可能被错误地替换为 https:// 和 ftp://，导致这个问题。</p><p>Qv2ray 很遗憾无法帮你改回来。若因此遇到问题，请勿指责吾等。  </p></blockquote><p>对于 <code>Deepin / UOS</code> 、<code>Arch + DDE</code> 、 <code>manjaro + DDE</code> 等的用户，且同时是 <code>Qvray</code> 的用户，都有遇到过此如下此 “提示” 弹窗。有让很多使用者和开发者比较困惑，这里回复一下为啥很久，此 <code>Bug</code> 才被修复，顺带向上延伸一下。</p><img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/dog.gif" width="24%"/ loading="lazy"><br><h3 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h3><p>为了方便描述，这里按照记忆中的时间线描述下，时间大致差不多～；</p><p>此前是 <strong>Deepin v15</strong>  版本，暂略</p><br><p>资本下场 <code>2019-07</code> 左右，着手开发 V20 版本，大招人，全速开发迭代新功能、新特性</p><br><p>到约 <code>2020-01</code> V20 版本基本定型，开始重点提升质量，打磨细节，修改 BUG</p><br><p><code>2020-02 下旬</code> 疫情封城和过年双临，开始远程办公，研发进度略缓</p><br><p><code>2020-03 下旬</code> ，通知再次组织开源仓库，因为中间 9 个月没有怎么更新代码，可能都忙晕（我也是后来才知道，原来 <code>Deepin</code> 版本居然是实时开源的，顿时震惊和狂喜）；自荐和 <a href="https://www.blumia.net/">blumia</a> 大佬一起负责对外开源事宜。手工核对开源仓库的初始表，然后让老大和老大的老大双确认下。再手工每个仓库设置同步，于是就这样 <code>Deepin</code> 的仓库，再次回复大更新，后面就一直是保持了实时更新的。</p><br><p><code>2020-04-15</code> 在 <a href="https://bbs.deepin.org/user/48640">jingle</a> 催更新下，出了 <code>deepin v20 Beta</code> 版本，若再跳票一直不出，社区估计会被口水淹没。</p><br><p><code>2020-05-10</code>，提了此 issues： <a href="https://github.com/linuxdeepin/go-lib/issues/15">#15</a>，但社区之前一直都是大佬们兼职负责，没人专门负责，空了一段时间；当我第一次遇到此弹窗的时候（en，我也是这两者的用户），没在意，顺手关闭提示，以为只是一个小的 bug， 以为按照现有流程，过几天就会被修复，且没有感觉有影响到我使用（开启/关闭全局代理解决的， 虽然缺失优雅）。</p><p><br> <code>2020-06-30</code> 快一个月快过去，此还未被修复，也仍未被后端所重视，然后 <a href="https://github.com/DuckSoft">DuckSoft</a>  做了一个提交 <a href="https://github.com/linuxdeepin/go-lib/commit/cbd8ac9a8afccbbc6d4c0cc5bae50f4621434de9">cbd8ac9a8a</a>  ，助其合并，我和他都以为就 <code>ok</code> 了。但是，，就有了文章后半部分</p><br><p><code>2020-08-27</code> ，又过很久，还有人反馈问题，且每次打开后来反复提示，emmmm。这都是赤条条的明示了！！！在黑 <code>Deepin</code> 嘛！！！不过也确实，我都感觉不好意思了， 居然能够被拖近 4 个月之久。。。醉了醉了醉了</p><p>抽空去看看这是啥原因？跑去翻了下当时的记录，发现此贡献 提交到了 <code>develop</code> 分支（当时都没注意），而由于策略，这是是搁置无用的分支，只有提交到 默认分支  <code>uos / maste</code>r 分支才会有效。氪！！！</p><p>知道问题后， 再麻烦人家重新提交、 岂不是尴尬，，，，， 不好意思了，老脸一红。欲自己修复，做好事不留名，可后端不懂，找到后端大佬，让研发大佬协助一下，研发做了提交到 <code>master</code> 分支 <a href="https://github.com/linuxdeepin/go-lib/commit/f3021d13975a4ad8e8e3c857f2631580d395c874">f3021d13</a> ， <code>tag</code> 为 <code>5.5.0.1</code> 觉着这下应该稳妥了。后面慢慢跟新一番即可，终于可以安逸一会了，后面应该不会再黑 Deepin 了吧（单指去掉改提示框，不过Deepin 这件事确实做的不够好，被人家疯狂暗示，也是无可厚非～， 似乎没有什么不妥）。</p><p>然后遇到准备一周后 <code>09-11</code>发社区版本的更新，但是当时的很多包的<code>tag</code> 号都定了，但是 <code>go-lib</code> 项目  <code>tag</code> 偏低，按照当前的跟新速度，用户想得到这个修复，估计得 2021 年初去了。。。。（很是惶恐，害怕，这 TMD 后面必须跳跃版本解决，或者改变现有策略）</p><p>然后想了下，能不能直接将  <code>go-lib</code> 项目色升级到最新的 <code>tag</code>，那样用户就可以早点用上了；商讨的结果，就是不能升级。</p><p><strong>原因如下：</strong></p><p><strong>① <code>go-lib</code> 项目是一个很重要的基本包，然后过多重要的核心包也都依赖它；</strong></p><p><strong>②此项目的独特殊和机制，不能像普通软件一样，只是更新一下动态库升级得到此修复。</strong></p><p>③<strong>发布时间已经预定了，来不及更改了；且即使升级，也需要对应的软件包全部升级才行，测试小姐姐前面的测试也都白费了，且需要重新测试一轮，可能当场就狗头不保。文案内容也都要全部重新写，运营在论坛宣传也都跳票了。</strong> 想一下，都觉得寒毛爆炸。被磨刀霍霍～～</p><p>这是第一次感觉到心累的感觉、也是第一次感觉到牵一发而动全身。什么叫做被迫，只好让社区用户再次等待，， 嗷～ 嗷～ 嗷～ ，虽然理解，但我还是有张图要说</p><img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201204212011.png" width="30%"/ loading="lazy"><br><p><code>2020-09-17</code> 时候， 决定更换策略，社区版本不应该跑在专业版后面太多；也完全可以跑到最前面，让社区用户体验新特性新功能，和反馈新的缺陷。然后直接按照当时最新的专业版所有 tag，全部照着来一遍，此时心里美滋滋的，第一反应就是将 <code>go-lib</code> 项目打 tag  到 <code>5.6.0.2</code>， 真的是可开心了。想着他们终于可以用上此修复了了。且这此打包我主要负责，可以一下将很多包直接推送到到最好的兼容版本。</p><p>预料之中在 <code>2020-10-23</code>， 在内测的 <code>1030</code> 版本中，已经验证了此 bug 被解决，且该弹窗提示也在 新的 <code>Qv2ray</code> 里面被移除了 <a href="https://github.com/Qv2ray/Qv2ray/pull/1050">#1050</a> ，互相都很开心。后面收电报等公告 thanks了，甚是开心。</p> <img src="https://raw.githubusercontent.com/xmuli/xmuliPic/pic/2020/20201201094848.png" width="80%"/ loading="lazy"><br><p><font size="4" color="#FF0000"><strong>然意料之外发生了</strong></font>，在 <code>2020-11-13</code>  周五时候，因为 <strong>“应用代理开启后 无法打开应用商店” ** （BUG 号：53612） ，然后研发小组长、研发、测试、产品经理、项目经理建群讨论，且急于下班之前集成版本，</strong>优先级也比较高，** 时间也比较短，给出的 <strong>临时解决方案是：由于设计缺陷，只能先修改回去，后面代理这一块在下一阶段需要重新设计</strong>。 改回去的提交 <a href="https://github.com/linuxdeepin/go-lib/commit/a1b16c48f33f500ad8c36d4218f24380e9a04102">a1b16c48</a> 呜呼载～，<font size="3" color="#FF0000"><strong>前面的修改都是白费了，心疼又心痛！！！</strong></font>  <font size="3" color="#00A0FF"><strong><del>都是想要做事，都想将其做好，若是深究的话，感觉没有任何一个人有做错什么，有的只是事情的轻重缓急之分。</del></strong></font></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210302094709.png" width="30%"/ loading="lazy"><br><p><code>2020-11-26</code>时候，已经看到后端大佬开始设计新的代理方案了；感觉此问题被解决又要被搁置延期很久，且一个新的设计方案到实现，到通过测试，完全替换，估计有需要很久。也估计后面这个弹窗过不久，又会再次出现。娜娜无奈～ 大概还是不够十分的重视此缺陷吧。心疼，</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201201131910.png" width="30%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210301110418.png" width="50%"/ loading="lazy"><br><p><code>2020-12-04</code> 后面有空或有新的发展再更新；</p><p>中间问过了几次进度，看起来没有那么快，可能是重新设计会比较麻烦？？ 不是很懂，心疼抱抱～</p><br><p><code>2020-12-31</code>，果然，看到被再次打开了，被爆破了。看来至少没能够在元旦之前被解决。</p><p>持续更新。。。。等待（准备后面有系统学下网络相关知识）</p><br><p><code>2021-03-22</code>，最终还是竹子大佬给修复了 <a href="https://github.com/linuxdeepin/go-lib/pull/28">#28</a>，鸡冻٩(๑&gt;◡&lt;๑)۶，完结🎉🎉🎉。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin 开发任务栏网速插件 lfxSpeed</title>
      <link href="posts/c225b552/"/>
      <url>posts/c225b552/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　在 <code>DDE</code> 桌面环境中开发 <code>dde-dock 插件</code> 项目实战： 网速插件 <code>lfxSpeed</code>；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Peek%202020-12-04%2015-19.gif" width="50%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p> ———–2020-02-03 更新——————-<br>现在更推荐新版网速插件：<a href="https://github.com/xmuli/lfxNet">lfxNet</a>， 文章描述：<a href="https://xmuli.blog.csdn.net/article/details/113573870">Deepin 任务栏网速插件推荐 lfxNet (重构 lfxSpeed)</a></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因 <code>DDE</code>  属实漂亮，使用美观舒适，作为 <code>Deepin</code> 爱好者，习惯于在其它系统上有一个任务栏网速插件，但此 <code>Deepin v20 / UOS v20</code>上没有，于是便有了这个项目。适用于 <code>DDE</code> 的 <code>Linux</code> 发行版。</p><br><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><strong>已实现功能：</strong></p><ul><li>实时显示网速、CPU 、内存使用率</li><li>自定义网速精确度</li><li>自定义修改标签</li><li>自定义刷新时间</li><li>显示或隐藏某一信息栏</li><li>网速单位显示模式三种</li><li>浅色 / 暗色 主题模式</li></ul><p><strong>项目预览图：</strong></p><p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201204203142.png" width="50%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201204152635.png" width="35%"/ loading="lazy"></p><br><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>开发环境 <strong>💻：</strong>  <code>uos20</code> 📎 <code>Qt 5.11.3</code> 📎  <code>dde-dock = 5.2.0.24</code> 📎  <code>&quot;1.2.2&quot; 版本</code>；安装开发包，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libdtkwidget-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> dde-dock-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载 <a href="https://github.com/xmuli/lfxspeed">源码</a> 后，进入项目根目录，进行编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> buildcmake <span class="token punctuation">..</span><span class="token function">make</span> -j16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>会生成一个 <code>liblfxSpeed.so</code> 共享库，在其路径下执行如下命令，若希望看到效果，需要执行 <code>killall dde-dock</code> 、<code>dde-dock</code> 后生效；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> liblfxSpeed.so /usr/lib/dde-dock/plugins     <span class="token comment"># 安装</span><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/lib/dde-dock/plugins/liblfxSpeed.so <span class="token comment">#  卸载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h3><p>项目最后生成一个动态库，原理是 <code>dde-dock</code> 使用了 <code>Qt5</code> 的插件机制，在运行时候加载动态库。</p><p>有一篇 <code>Deepin</code> 官方出的教程，是隐藏 <code>dde-dock </code>项目之中 <a href="https://github.com/linuxdeepin/dde-dock/blob/master/plugins/plugin-guide/plugins-developer-guide.md">plugins-developer-guide</a> 感觉成了一个小彩蛋；这篇文章对插件接口写的很详细，也有一个自带的小例子，讲解的很清晰；</p><p><strong>主要工作就是，继承如下两个类：</strong></p><ul><li><a href="https://github.com/linuxdeepin/dde-dock/blob/master/interfaces/pluginproxyinterface.h">pluginproxyinterface.h</a> ：可以主动去调用 dde-dock 的接口，用来管理 插件 的管理类</li><li><a href="https://github.com/linuxdeepin/dde-dock/blob/master/interfaces/pluginsiteminterface.h">pluginsiteminterface.h</a> ：被动的被 dock 调用</li></ul><p>而自己新写的插件类，是必须同时继承两个类的：如 <code>class SpeedPlugin : public QObject, public PluginsItemInterface</code> 。实现一个最简单的插件类，重写下面前六个函数即可；若加更多功能，再重其它函数即可</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 插件必须重写函数</span><span class="token keyword">virtual</span> <span class="token keyword">const</span> QString <span class="token function">pluginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>PluginProxyInterface <span class="token operator">*</span>proxyInter<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> QWidget <span class="token operator">*</span><span class="token function">itemWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token comment">// 插件禁用和启用相关的接口</span><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">pluginIsAllowDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">pluginIsDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">pluginStateSwitched</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token comment">// 额外的功能：预览、右键菜单、悬浮显示</span><span class="token keyword">virtual</span> <span class="token keyword">const</span> QString <span class="token function">pluginDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> <span class="token keyword">const</span> QString <span class="token function">itemContextMenu</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">invokedMenuItem</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">,</span> <span class="token keyword">const</span> QString <span class="token operator">&amp;</span>menuId<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">bool</span> checked<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">virtual</span> QWidget <span class="token operator">*</span><span class="token function">itemTipsWidget</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>itemKey<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token comment">// 更多其它...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="lfxSpeed-原理"><a href="#lfxSpeed-原理" class="headerlink" title="lfxSpeed 原理"></a>lfxSpeed 原理</h3><p>基本思路为 获取 <code>/proc</code> 文件，然后通过计算，转换单位等，只显示自己想要的结果；然后将其显示在控件布局之中，最后将整个控件显示在任务栏上（返回其对象的指针给 dock）；<strong>下面讲解如何从 <code>Linux</code> 通过 <code>/proc</code> 获取系统网速、CPU、Memory和运行时间等信息。</strong></p><br><h2 id="获取系统参数"><a href="#获取系统参数" class="headerlink" title="获取系统参数"></a>获取系统参数</h2><h3 id="proc-介绍"><a href="#proc-介绍" class="headerlink" title="/proc 介绍"></a><code>/proc</code> 介绍</h3><p>Linux系统上的/proc目录是一种文件系统，即proc文件系统。与其它常见的文件系统不同的是，/proc是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，用户可以通过这些文件查看有关系统硬件及当前正在运行进程的信息，甚至可以通过更改其中某些文件来改变内核的运行状态。</p><p>基于/proc文件系统如上所述的特殊性，其内的文件也常被称作虚拟文件，并具有一些独特的特点。例如，其中有些文件虽然使用查看命令查看时会返回大量信息，但文件本身的大小却会显示为0字节。此外，这些特殊文件中大多数文件的时间及日期属性通常为当前系统时间和日期，这跟它们随时会被刷新（存储于RAM中）有关。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 更多文件的获取，可以参考 https://zh.m.wikipedia.org/zh-cn/Procfs</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_UPTIME</span>    <span class="token string">"/proc/uptime"</span>      <span class="token comment">// "系统启动" 和 "系统空闲" 的时间</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_CPU</span>       <span class="token string">"/proc/stat"</span>        <span class="token comment">// "CPU" 使用率 的状态</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_MEM</span>       <span class="token string">"/proc/meminfo"</span>     <span class="token comment">// "内存" 和 "交换空间" 的状态</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_NET</span>       <span class="token string">"/proc/net/dev"</span>     <span class="token comment">// "网速" 下载和上传 的状态</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROC_PATH_DISK</span>      <span class="token string">"/proc/diskstats"</span>   <span class="token comment">// "磁盘" 读取和写入 的状态</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="获取网速"><a href="#获取网速" class="headerlink" title="获取网速"></a>获取网速</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><p>网络相关的数据，从 <code>/proc/net/dev</code>  文件获取：读取此文件进行计算即可<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20201117165447548.png" width="100%"/ loading="lazy"></p><p>这个文件每一行的详细含义如下：<strong>face: 接口</strong> </p><p>​    ————————————-【接收】————————————-</p><ol><li><p><code>bytes:</code> 接口接收的数据的总字节数</p></li><li><p><code>packets:</code> 接口接收的数据包总数</p></li><li><p><code>errs:</code> 由设备驱动程序检测到接收错误的总数</p></li><li><p><code>drop:</code> 设备驱动程序丢弃的数据包总数</p></li><li><p><code>fifo:</code> FIFO缓冲区错误的数量</p></li><li><p><code>frame:</code> 分组帧错误的数量</p></li><li><p><code>compressed:</code> 设备驱动程序接收的压缩数据包数</p></li><li><p><code>multicast:</code> 设备驱动程序发送或接收的多播帧数</p><p>————————————-【传送】————————————-</p></li><li><p><code>bytes:</code>  接口发送的数据的总字节数</p></li><li><p><code>packets:</code> 接口发送的数据包总数</p></li><li><p><code>errs:</code> 由设备驱动程序检测到的发送错误的总数</p></li><li><p><code>drop:</code> 同上</p></li><li><p><code>fifo:</code> 同上</p></li><li><p><code>colls:</code> 接口上检测到的冲突数</p></li><li><p><code>carrier:</code> 由设备驱动程序检测到的载波损耗的数量</p></li><li><p><code>compressed:</code> 设备驱动程序发送的压缩数据包数</p></li></ol><p>需要注意的,，此处只是获取的为<strong>接口接收的数据的总字节数</strong> ，要获取实时速率，还得用起差值除以单位时间，才是网速。 <strong>其单位默认是字节</strong>。</p><br><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>此文件是<strong>某一时刻的</strong>，本机所有接收和发送的<strong>数据包总量</strong> ，其分别对应每一行的第 1 列、第 9 列 （byte 一列）；（注：第 0 列是前面的英文字符串）</p><p>将每一行的的第 2 列累加，为此时可总的接收数据包（下载）；将每一行的的第 10 列加，为此时总的发送数据包（上传）；然后将两次时刻之差 除以时间间隔，就得到单位时间网速；</p><br><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><del>这里使用 <code>QRegExp(&quot;\\s&#123;1,&#125;&quot;)</code> 来分割，莫名会得到第一个切割为 <code>“”</code> 的字符串，所以对应的第 1和 9 列都要顺延加 1。</del> 此问题已经由 <a href="https://github.com/xmuli/lfxSpeed/pull/5">#5</a> 修复</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \brief SpeedInfo::netRate 获取网某一时刻的网络总的数据包量 * \param[out] netUpload 网络上传数据量 * \param[out] netUpload 网络下载数据量 */</span><span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token operator">::</span><span class="token function">netRate</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">&amp;</span>netDown<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>netUpload<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_NET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 在读取时，把行尾结束符修改为 '\n'； 在写入时，把行尾结束符修改为本地系统换行风格，比如Windows文本换行是 "\r\n"</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\"/proc/net/dev\" don't open!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> down <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> upload <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    line  <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    line  <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 匹配任意 大于等于1个的 空白字符</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            down <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            upload <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        netDown <span class="token operator">+=</span> down<span class="token punctuation">;</span>        netUpload <span class="token operator">+=</span> upload<span class="token punctuation">;</span>        line  <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>还需要将字节可以智能转换为对应的单位和对应的数值 的函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \brief SpeedInfo::autoRateUnits 自动显示单位 * \param[in] speed 传入的网速(无单位) * \param[out] unit 智能调节后的网速的单位 * \param sensitive 速率单位的大小写模式 * \return 自能调节单位后的速率 */</span><span class="token keyword">double</span> <span class="token class-name">SpeedInfo</span><span class="token operator">::</span><span class="token function">autoRateUnits</span><span class="token punctuation">(</span><span class="token keyword">long</span> speed<span class="token punctuation">,</span> SpeedInfo<span class="token operator">::</span>RateUnit <span class="token operator">&amp;</span>unit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* 自动判断合适的速率单位,默认传进来的是 Byte     * bit    0 ~ 7 位 (不到 1 字节)     * Byte   1    ~ 2^10  Byte     * KB     2^10 ~ 2^20  Byte     * MB     2^20 ~ 2^30  Byte     * GB     2^30 ~ 2^40  Byte     * TB     2^40 ~ 2^50  Byte     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">!=</span> SpeedInfo<span class="token operator">::</span>RateByte<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"请先将单位转为字节(byte)后再传参"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> sp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unit <span class="token operator">=</span> SpeedInfo<span class="token operator">::</span>RateByte<span class="token punctuation">;</span>        sp <span class="token operator">=</span> speed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unit <span class="token operator">=</span> SpeedInfo<span class="token operator">::</span>RateKb<span class="token punctuation">;</span>        sp <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unit <span class="token operator">=</span> SpeedInfo<span class="token operator">::</span>RateMb<span class="token punctuation">;</span>        sp <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unit <span class="token operator">=</span> SpeedInfo<span class="token operator">::</span>RateGb<span class="token punctuation">;</span>        sp <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> speed <span class="token operator">&amp;&amp;</span> speed <span class="token operator">&lt;</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unit <span class="token operator">=</span> SpeedInfo<span class="token operator">::</span>RateTb<span class="token punctuation">;</span>        sp <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>speed <span class="token operator">/</span> <span class="token function">qPow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        unit <span class="token operator">=</span> SpeedInfo<span class="token operator">::</span>RateUnknow<span class="token punctuation">;</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"本设备网络速率单位传输超过 TB, 或者低于 0 Byte."</span><span class="token punctuation">;</span>        sp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="获取CPU"><a href="#获取CPU" class="headerlink" title="获取CPU"></a>获取CPU</h3><h4 id="读取文件-1"><a href="#读取文件-1" class="headerlink" title="读取文件"></a>读取文件</h4><p><code>CPU</code> 相关的数据，从 <code>/proc/stat</code>  文件获取：读取此文件进行计算即可</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201202110836.png" width="100%"/ loading="lazy"><p><strong>这个文件上面每一列表的详细含义如下:</strong></p><ol><li><code>user:</code> 用户态时间（一般/高优先级，仅统计nice&lt;=0）</li><li><code>nice:</code> 用户态时间（低优先级，nice&gt;0）</li><li><code>system:</code>  内核态时间</li><li><code>idle:</code> 空闲时间（ 不包含IO等待时间） </li><li><code>iowait:</code>  I/O等待时间 （ 硬盘IO等待时间） </li><li><code>irq:</code> 硬中断 </li><li><code>softirq:</code>  软中断</li><li><code>steal:</code>  被盗时间（虚拟化环境中运行其他操作系统上花费的时间（since Linux 2.6.11））</li><li><code>guest:</code>  来宾时间（操作系统运行虚拟CPU花费的时间（since Linux 2.6.24））</li><li><code>guest_nice:</code> nice 来宾时间（ 运行一个带nice值的guest花费的时间（since Linux 2.6.33））</li></ol><br><p><strong>最后的几个数值含义：</strong></p><ol><li><code>intr：</code> 系统启动以来的所有interrupts的次数情况（有冗余信息）；这行给出中断的信息，第一个为自系统启动以来，发生的所有的中断的次数。然后每个数对应一个特定的中断自系统启动以来所发生的次数。</li><li><code>ctxt:</code>  自系统启动以来CPU发生的上下文交换的次数</li><li><code>btime：</code> 启动时长(单位:秒)，从Epoch(即1970零时)开始到系统启动所经过的时长，每次启动会改变。</li><li><code>processes</code>：自系统启动以来所创建的任务的个数目。当短时间该值特别大，系统可能出现异常</li><li><code>procs_running：</code> 当前运行队列的任务的数目</li><li><code>procs_blocked：</code> 当前被阻塞的任务的数目</li><li><code>softirq:</code>  此行显示所有CPU的softirq总数, 第一列是所有软件和每个软件的总数, 后面的列是特定softirq的总数</li></ol><p><strong>其单位为 <code>jiffies</code>；其中 <code>1 jiffies = 0.01s = 10ms</code></strong></p><br><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>和我们相关暂时只关心第一行，每次读取，依旧<strong>是某一时刻状态</strong> ，CPU 总量 cpuAll 为第一行所有列之和，空闲量 cpuFree 为第一行的第 4 列。将 <code>（cpuAll - cpuFree） / cpuAll</code> 就是此时刻的 CPU 使用率。</p><p>而 <code>(((cpuAll - old_cpuAll) - (cpuFree - old_cpuFree)) * 100.0 / (cpuAll - old_cpuAll)</code> 则是CPU 在<strong>某一单位时间段</strong> 的 CPU 使用率。</p><br><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>获取某一时刻 CPU 的总量和空闲量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \brief SpeedInfo::cpuRate 获取某一次 CPU 的使用情况 * \param[out] cpuAll 总 cpu 使用量 * \param[out] cpuFree 空闲 cpu 的使用量 */</span><span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token operator">::</span><span class="token function">cpuRate</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">&amp;</span>cpuAll<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>cpuFree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cpuAll <span class="token operator">=</span> cpuFree <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_CPU<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> v <span class="token operator">!=</span> list<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span>            cpuAll <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>        cpuFree <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="获取内存"><a href="#获取内存" class="headerlink" title="获取内存"></a>获取内存</h3><h4 id="读取文件-2"><a href="#读取文件-2" class="headerlink" title="读取文件"></a>读取文件</h4><p><code>Memory</code> 相关的数据，从 <code>/proc/meminfo</code>  文件获取：读取此文件进行计算即可</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201202132456.png" width="40%"/ loading="lazy"> <p>此文件的详细解释：</p><ol><li><p><code>MemTotal:</code> 所有内存(RAM)大小,减去一些预留空间和内核的大小。</p></li><li><p><code>MemFree:</code> 完全没有用到的物理内存，lowFree+highFree</p></li><li><p><code>MemAvailable:</code> 在不使用交换空间的情况下，启动一个新的应用最大可用内存的大小，计算方式：MemFree+Active(file)+Inactive(file)-(watermark+min(watermark,Active(file)+Inactive(file)/2))</p></li><li><p><code>Buffers:</code> 块设备所占用的缓存页，包括：直接读写块设备以及文件系统元数据(metadata)，比如superblock使用的缓存页。</p></li><li><p><code>Cached:</code> 表示普通文件数据所占用的缓存页。</p></li><li><p><code>SwapCached:</code> swap cache中包含的是被确定要swapping换页，但是尚未写入物理交换区的匿名内存页。那些匿名内存页，比如用户进程malloc申请的内存页是没有关联任何文件的，如果发生swapping换页，这类内存会被写入到交换区。</p></li><li><p><code>Active:</code> active包含active anon和active file</p></li><li><p><code>Inactive:</code> inactive包含inactive anon和inactive file</p></li><li><p><code>Active(anon):</code> anonymous pages（匿名页），用户进程的内存页分为两种：与文件关联的内存页(比如程序文件,数据文件对应的内存页)和与内存无关的内存页（比如进程的堆栈，用malloc申请的内存），前者称为file pages或mapped pages,后者称为匿名页。</p></li><li><p><code>Inactive(anon):</code> 见上</p></li><li><p><code>Active(file):</code> 见上</p></li><li><p><code>Inactive(file):</code> 见上</p></li><li><p><code>SwapTotal:</code> 可用的swap空间的总的大小(swap分区在物理内存不够的情况下，把硬盘空间的一部分释放出来，以供当前程序使用)</p></li><li><p><code>SwapFree:</code> 当前剩余的swap的大小</p></li><li><p><code>Dirty:</code> 需要写入磁盘的内存去的大小<code>Writeback:</code> 正在被写回的内存区的大小<code>AnonPages:</code> 未映射页的内存的大小<code>Mapped:</code> 设备和文件等映射的大小</p></li><li><p><code>Slab:</code> 内核数据结构slab的大小</p></li><li><p><code>SReclaimable:</code> 可回收的slab的大小</p></li><li><p><code>SUnreclaim:</code> 不可回收的slab的大小</p></li><li><p><code>PageTables:</code> 管理内存页页面的大小</p></li><li><p><code>NFS_Unstable:</code> 不稳定页表的大小</p></li><li><p><code>VmallocTotal:</code> Vmalloc内存区的大小</p></li><li><p><code>VmallocUsed:</code> 已用Vmalloc内存区的大小</p></li><li><p><code>VmallocChunk:</code> vmalloc区可用的连续最大快的大小</p></li></ol><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>此为某一时刻系统的内存和交换空间使用情况的截图；</p><p><strong>对于内存：</strong> 内存总量 memoryAll 为 MemTotal 的数值，空闲内存 memoryFree 为 MemAvailable 的数值，使用中的内存为 memoryUse 为 （MemTotal - MemAvailable）；</p><p><strong>对于交换空间：</strong> 交换空间总量 swapAll 为 SwapTotal 数值，空闲交换空间 swapFree 为 SwapFree 数值，使用中的交换控件量为 swapUse 为 （SwapTotal -  SwapFree） 数值；</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>获取某一时刻内存核交换空间的使用情况，但是这里所有单位都是 字节；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \brief SpeedInfo::memoryRate 获取 “内存” 和 “交换空间” 的某一时刻的使用情况 * \param memory 内存使用量 * \param memoryAll 内存总量 * \param swap 交换空间使用量 * \param swapAll 交换空间总量 */</span><span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token operator">::</span><span class="token function">memoryRate</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">&amp;</span>memory<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>memoryAll<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>swap<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">&amp;</span>swapAll<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    memory <span class="token operator">=</span> memoryAll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    swap <span class="token operator">=</span> swapAll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> buff<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    memoryAll <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    memory <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> buff<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    swapAll <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    swap <span class="token operator">=</span> buff<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">-</span> buff<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="获取系统运行时间"><a href="#获取系统运行时间" class="headerlink" title="获取系统运行时间"></a>获取系统运行时间</h3><h4 id="读取文件-3"><a href="#读取文件-3" class="headerlink" title="读取文件"></a>读取文件</h4><p>想在预览里面显示系统开机到现在的运行时间。读取文件为 <code>/proc/uptime</code> ，</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201202140839.png" width="40%"/ loading="lazy"> <p>文件一共的两列表含义为：</p><ol><li>系统启动到现在的时间（以秒为单位）</li><li>系统空闲的时间（以秒为单位）</li></ol><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p>将第一个参数获取获取，然后将这个数值转换为  <strong>“ x 天， hh:MM:ss”</strong>  的格式，这是我想显示的格式。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>获取系统开始到现在的运行时间，单位为 秒；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">SpeedInfo</span><span class="token operator">::</span><span class="token function">uptime</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>run<span class="token punctuation">,</span> <span class="token keyword">double</span> <span class="token operator">&amp;</span>idle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    idle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>PROC_PATH_UPTIME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\"/proc/uptime\" don't open!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString line <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QStringList list <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s&#123;1,&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        run <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idle <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里本以为个很容易有现成的 <code>QDateTime</code> 之类的，直接将 秒 转换为想要的时间格式，试了一圈，发现没有，有一个很接近，但是以 1970 零时为开始的，也不符合预期。娜娜的无奈，还是自己动手写吧～</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString <span class="token class-name">SpeedInfo</span><span class="token operator">::</span><span class="token function">autoTimeUnits</span><span class="token punctuation">(</span><span class="token keyword">double</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token function">qFloor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ss <span class="token operator">=</span> time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MM <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">%</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hh <span class="token operator">=</span> <span class="token punctuation">(</span>time <span class="token operator">%</span> <span class="token number">86400</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3600</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dd <span class="token operator">=</span> time <span class="token operator">/</span> <span class="token number">86400</span><span class="token punctuation">;</span>    QString runTime <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"系统已运行: %1天, %2:%3:%4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>MM<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QLatin1Char</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> runTime<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="任务栏-1-2-2-的缺陷"><a href="#任务栏-1-2-2-的缺陷" class="headerlink" title="任务栏 1.2.2 的缺陷"></a>任务栏 <code>1.2.2</code> 的缺陷</h2><p>开发过程中，又遇到一些如下 dde-dock 的一些 bug：</p><ol><li><p><strong>插件真实大小只有 图标范围</strong></p><p>这里指的是，无论插件在 dock 布局上，显示有多大，但实际大小都只有如下中间的一个图标大小，右键非红色区域没有响应；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201204195032.png" width="30%"/ loading="lazy"></li><li><p><strong>叫非 <code>datetime</code> 的插件显示都会被压缩</strong></p><p>如果返回的插件名称为非 <code>datetime</code>， 且任务栏高度过低的时候，会出现内容上下被遮盖，显示不全。原因分析参见 <a href="https://github.com/linuxdeepin/dde-dock/issues/321">#321</a> （基于 <code>1.2.2</code>）；另外在 <a href="https://github.com/linuxdeepin/dde-dock/commit/9188fff15bdac20edbd14290bb1e44c1bcef28b5">9188fff1</a> 已经修复（基于 <code>1.2.3</code> ）。补丁暂只提交到 uos 分支，当前开发分支暂时未升级。</p></li><li><p><strong>修改布局不会自动刷新</strong></p><p>当我调整的插件布局时候，好像不会<strong>立刻</strong> 通知到 dock 重新布局，也没有信号重新通知任务栏。也有可能室友，但是我没有找到？？？或如果有更好的解决方案，可以分享一波？？？临时的解决方案是，①将布局大小写死 ②手动刷新（卸载此插件后立刻重新加载此插件）。</p></li></ol><br><h2 id="更新-2020-12-28"><a href="#更新-2020-12-28" class="headerlink" title="更新 2020-12-28"></a>更新 2020-12-28</h2><p><a href="https://github.com/xmuli/lfxSpeed">此项目 </a>不再维护；但基于其思路和新的实现目标，源码将会重新设计实现，一个功能更加强大的网速插件，也会提供对应的库便于其它开发者二次开发，新的项目在 <a href="https://github.com/xmuli/lfxNet">lfxNet</a>  ，芜湖～ </p><br><h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><ul><li>GitHub: <a href="https://github.com/xmuli/lfxspeed">lfxspeed</a> </li><li>Deepin Store 深度商店  |  Spark Store 星火商店</li></ul><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul><li><a href="https://github.com/linuxdeepin/dde-dock/blob/master/plugins/plugin-guide/plugins-developer-guide.md">plugins-developer-guide</a></li><li><a href="https://www.jianshu.com/p/deb0ed35c1c2">深度系统监视器原理剖析</a> </li><li><a href="http://gityuan.com/2017/08/12/proc_stat/">/proc/stat解析</a></li><li><a href="http://smilejay.com/2012/05/proc_uptime/">/PROC/UPTIME详解</a></li><li><a href="https://www.cnblogs.com/liushui-sky/p/9236007.html">Linux平台Cpu使用率的计算</a></li><li><a href="https://github.com/sonichy/CMDU_DDE_DOCK">CMDU_DDE_DOCK</a></li><li><a href="https://github.com/v-svg/dde-dock-netspeed">dde-dock-netspeed</a></li><li><a href="https://github.com/zhongyang219/TrafficMonitor">TrafficMonitor</a></li><li><a href="https://stackoverflow.com/questions/3521678/what-are-meanings-of-fields-in-proc-net-dev">What are meanings of fields in /proc/net/dev?</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux or Mac 安装 gitbook 3.2.3 失败解决方案</title>
      <link href="posts/d7327716/"/>
      <url>posts/d7327716/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　欲用 <code>gitbook</code> 来开启人生第一本书，结果安装、使用时候卡住了。。。这里记录一下；没想新的版本里面有坑。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p>本文初发于 <strong>偕臧</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>， 同步转载于此。</p></blockquote><br><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在 <code>Linux</code> 和 <code>Mac</code> 版本上，用  <code>GitBook 3.2.3</code> 版本， 只能对应使用 <code>Node = v10.23.0</code>  LTS 版本；使用 v12 、V14 版本会失败。 我在 <code>UOS20</code> 和 <code>Mac 10.14.6</code> 上面都逐一尝试过了。</p><br><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>依次按照如下顺序安装：</p><ol><li>nvm ：用来安装、管理切换 nodejs 的版本</li><li>nodejs：运行所需要的环境</li><li>npm: 用来安装 gitbook-cli（自动安装最佳 gitbook 版本）</li><li>cnpm: 换源，使用 cnpm 替代 npm。</li><li>使用 gitbook 命令，预览和发布到 gitbook.com / github page</li></ol><p>在 Linux 和 Mac 上做了如下尝试的。</p><br><h2 id="Linux-安装-gitbook"><a href="#Linux-安装-gitbook" class="headerlink" title="Linux 安装 gitbook"></a>Linux 安装 gitbook</h2><h3 id="Node-v14-15-1"><a href="#Node-v14-15-1" class="headerlink" title="Node  v14.15.1"></a>Node  v14.15.1</h3><p>执行 <code>gitbook init</code> 会报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  book  gitbook initInstalling GitBook <span class="token number">3.2</span>.3/home/xmuli/.config/nvm/versions/node/v14.15.1/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> cb.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span>                 ^TypeError: cb.apply is not a <span class="token keyword">function</span>    at /home/xmuli/.config/nvm/versions/node/v14.15.1/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287:18    at FSReqCallback.oncomplete <span class="token punctuation">(</span>fs.js:184:5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="Node-v12-20-0"><a href="#Node-v12-20-0" class="headerlink" title="Node = v12.20.0"></a>Node = v12.20.0</h3><p>执行 <code>gitbook init</code> 或者 <code>gitbook serve</code> 中一步会报错如同 <code>Node v14.15.1</code> 。</p><br><h3 id="Node-v10-23"><a href="#Node-v10-23" class="headerlink" title="Node = v10.23"></a>Node = v10.23</h3><p>执行 <code>gitbook init</code> 成功，执行 <code>gitbook serve</code> 成功，可以使用；</p><p>虽然会卡很久（此时已经替换了 npm为淘宝源，采用的 cnpm 安装 gitbook），但是最后会成功。</p><br><h2 id="Mac-安装-gitbook-尝试-node-版本"><a href="#Mac-安装-gitbook-尝试-node-版本" class="headerlink" title="Mac 安装 gitbook (尝试 node 版本)"></a>Mac 安装 gitbook (尝试 node 版本)</h2><p>如下都是安装 <code>gitbook 3.2.3</code> 版本尝试执行   <code>gitbook init</code>  或 <code>git serve</code> 看是否会报错；</p><h3 id="Node-v14-15-1-1"><a href="#Node-v14-15-1-1" class="headerlink" title="Node v14.15.1"></a>Node v14.15.1</h3><p>执行 <code>gitbook init</code> 会报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TypeError <span class="token punctuation">[</span>ERR_INVALID_ARG_TYPE<span class="token punctuation">]</span>: The <span class="token string">"data"</span> argument must be of <span class="token builtin class-name">type</span> string or an instance of Buffer, TypedArray, or DataView. Received an instance of Promise<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="Node-v12-20-0-1"><a href="#Node-v12-20-0-1" class="headerlink" title="Node v12.20.0"></a>Node v12.20.0</h3><p>执行 <code>gitbook init</code> 成功，执行 <code>gitbook serve</code> 会报错如下；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Live reload server started on port: <span class="token number">35729</span>Press CTRL+C to quit <span class="token punctuation">..</span>./Users/xmuli/.nvm/versions/node/v12.20.0/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287      <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> cb.apply<span class="token punctuation">(</span>this, arguments<span class="token punctuation">)</span>                 ^TypeError: cb.apply is not a <span class="token keyword">function</span>    at /Users/xmuli/.nvm/versions/node/v12.20.0/lib/node_modules/gitbook-cli/node_modules/_npm@5.1.0@npm/node_modules/graceful-fs/polyfills.js:287:18    at FSReqCallback.oncomplete <span class="token punctuation">(</span>fs.js:169:5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="Node-v10-23-0"><a href="#Node-v10-23-0" class="headerlink" title="Node v10.23.0"></a>Node v10.23.0</h3><p>执行 <code>gitbook init</code> 成功，执行 <code>gitbook serve</code> 成功，可以使用；</p><br><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="Gitbook-serve-报错"><a href="#Gitbook-serve-报错" class="headerlink" title="Gitbook serve 报错"></a>Gitbook serve 报错</h3><p>后来在 Linux 中 使用 <code>gitbook 3.2.3</code>  + <code>nodejs=v10.23.0</code> 成功；当执行 <code>gitbook serve</code> 时候，报错如下（但是在 Mac 中却没有此问题）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: ENOENT: no such <span class="token function">file</span> or directory, <span class="token function">stat</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong></p><p>这是 <code>gitbook 3.2.3</code> 的一个 bug；找到 <code>~\.gitbook\versions\3.2.3\lib\output\website\copyPluginAssets.js</code> 路径，</p><p>将所有的 <code>confirm :true</code> 都替换为 <code>confirm :false</code>；成功</p><br><h3 id="尝试降低-升级-gitbook"><a href="#尝试降低-升级-gitbook" class="headerlink" title="尝试降低/升级 gitbook"></a>尝试降低/升级 gitbook</h3><p>想着坚持使用 <code>Node v14.15.1</code> 版本； 更改为尝试 使用低版本的 gitbook，也试了高版本的 预览版本，但是执行 <code>gitbook fetch x.x.x</code> 时候会失败。此方式放弃。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Bash 在win10 显示中文为数字的解决方案</title>
      <link href="posts/5945906/"/>
      <url>posts/5945906/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　将所有的软件和资料，全部从 Mac 迁移到 Win 的时候，发现了 <code>git bash</code> 出现了乱码，按照网上只有解决方案、但是没有原理解释的博文一通乱试，无果。于是决定自己自己弄清楚原理，在自己尝试去解决。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h2><p>在 <code>win10 2004</code> 上使用 <code>Git bash  2.28.0-64-bit</code>, 显示中文乱码，都显示为数字。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201108232751.png" width="70%"/ loading="lazy"><br><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>执行如下， </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global core.quotepath <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用是路径不以八进制显示（即是允许中文显示路径），此选项默认在 gitbash 是默认开启的。</p><p>详细参见 <a href="https://git-scm.com/docs/git-config">git doc</a>： </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201108233905.png" width="70%"/ loading="lazy"><br><p><strong>重启软件之后</strong> ，若是出现如下古文形式的乱码，那么则是使用错误的编码规则读取导致；</p><p>原因是：文件名是以 utf-8 形式保存的，当时是以 gbk 的编码读取导致的。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201108234446.png" width="70%"/ loading="lazy"> <br><p>再此如下进行设置：将本地字符集设置为 UTF-8 形式即可；</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201108234642.png" width="50%"/ loading="lazy"><br><p><strong>重启软件之后</strong> ，一般都是会正确显示中文的。 若依旧还是显示这种古文码，且重启系统之后，依旧无效（没错，我就遇到了）；果断卸载这个版本给的 git ，重新去官网下载一个新的版本（<code>Git 2.28.0-64-bit</code> 是有毒）， 然后再执行如上的两个步骤即可。即可成功</p> <br><h2 id="运行成功："><a href="#运行成功：" class="headerlink" title="运行成功："></a>运行成功：</h2><p>最后正确显示中文路径：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201108234115.png" width="70%"/ loading="lazy"> <br><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>对于本次乱码的详细历史，和解决方案，可以参考这篇： <a href="https://xmuli.blog.csdn.net/article/details/109567352">乱码原因产生和解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Windows </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱码原因产生和解决方案</title>
      <link href="posts/aaa00ace/"/>
      <url>posts/aaa00ace/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<strong>“乱码”</strong> ， 应该是很多人都遇到过的问题。以前总是网上简单搜一下、然后设置一下，然后重启生效，就没有去管了。 对其乱码原理有一些模糊，但是实则是不知道，因为我给其 ta 人解释清楚。直到这次再次遇到了乱码的问题，再一遍的查阅资料之后，，，后面直接解决了。 弄清楚原理之后，就感觉很多写博客都很累赘，但是又没有写清楚。遂自己动手来一篇，希望可以达到言简意赅。</p><blockquote><p>以后博客会写的尽量精简，，，</p></blockquote><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="故事背景："><a href="#故事背景：" class="headerlink" title="故事背景："></a>故事背景：</h2><p>将所有的软件和资料，全部从 Mac 迁移到 Win 的时候，发现了 <code>git bash</code> 出现了乱码，按照网上只有解决方案、但是没有原理解释的博文一通乱试，无果。于是决定自己自己弄清楚原理，然后自己成功的解决了： <a href="https://xmuli.blog.csdn.net/article/details/109567337">Git Bash 在win10 显示中文为数字的解决方案</a></p><br><h2 id="乱码原因："><a href="#乱码原因：" class="headerlink" title="乱码原因："></a>乱码原因：</h2><h3 id="用一个小例子开头："><a href="#用一个小例子开头：" class="headerlink" title="用一个小例子开头："></a>用一个小例子开头：</h3><p>乱码产生的原因，用一个具体的例子解释下： 再文本编辑器中，随手写下一段话，然后按照每 4 个字节大小保存一个字符，将其翻译为 4 * 8 位 个 0 / 1 二进制，保存到内存里面，当按下“保存”的是时候，这一串二进制就存在了硬盘里面； 但在另外一个电脑中打开这个文本文件， 然后将这一串二进制从硬盘读取、加载到内存，然后按照每 3 字节的顺序，将其翻译为对应的字符，最后发现出现全文都是乱码。</p><p>这个例子，感觉可以比较的理解乱码原因（虽然不全面、不正确、但是却可以以点破面，便于理解乱码的原因）。</p><br><h3 id="乱码历史原因："><a href="#乱码历史原因：" class="headerlink" title="乱码历史原因："></a>乱码历史原因：</h3><blockquote><p>Linux： 一些皆文件</p></blockquote><p>这句话，对于整个计算机来说，都是一样的，所有的文件类型（文本信息、照片、音乐、视频等）都只是 0/1 的二进制段。而将这一段纯 01010101…. 的二进制翻译为人可以看得懂的字符串信息，就叫解码；将人能看得懂的字符串保存为纯二进制，按照某种关系，这就是编码后保存。</p><br><p>计算机最开始只有少数的字母和符号，将其按照一张表格，将每一个字母或者符号找到一个对应的数字，然后以二进制段的形式保存（这个二进制段的长度暂定于 一个字节长度，恰好 128 个），这个映射关系被称为 <code>ASCII 编码</code>。后来随着其他各国的本地语言加入，就扩展这个映射表，前面的128 个 “字母或符号”，还是按照一个字节的长度，还是这个顺序。然后从 129 开始，就按照本国的语言，创建“某汉字”对应“某数字”，然后“某数字”保存到 x 字节中；其他国家也是这样，不过是将 “某汉字” 替换为“某拉丁文”、“某西欧文”等。然后这个 x 字节，随着时间的多次改版，也由2 –&gt; 3 –&gt; 4 –&gt; 2~~4 个字节长度。</p><blockquote><p>中国大陆常用编码：简体中文， <code>GBK</code></p><p>台湾常用：繁体中文，  <code>BIG5</code>  （是指代当时台湾五个著名的中文厂商的名称：大千、倚天、國喬、零壹、精業）</p></blockquote><br><p>这个问题只是解决了本国语言和英文。当时面对另外一个场景，就傻眼了：一篇文献中，同时要引用中文、西欧文、拉丁文、小语种的文字呢？？？ 于是在 20 世纪  80 年代末，大家坐在一起，决定讨论下这个事情，于是 Unicode 统一码联盟成立。 于 1991.10 发布了 Unicode 1.0, 到了 2012.1.31，发布到了 Unicode  6.1。</p><p>需要注意的是：</p><ul><li><p>Unicode 是「字符集」，字符集：为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point）；</p></li><li><p>UTF-8 是「编码规则」, 编码规则：将「码位」转换为字节序列的规则（编码/解码 可以理解为 加密/解密 的过程）；</p></li></ul><br><p>在 Unicode 尚未成熟的年代， Windows是使用各个国家的多 字节编码，来支持每个国家的语言的。 在 巨硬的 WinNT 发布之后，所有的 API 改用了 UTF-16 编码方式。</p><br><blockquote><p>Unicode 编码开始只有65536个字符空间。</p><p>UCS-2： 恒定用 2 字节表示所有字符。</p><p>UCS-4（或UTF-32）： 恒定用 4 字节表示所有字符</p><p>UTF-16：  当Unicode字符超过65536之后，参考「多字节编码」，通过双字节扩展四 字节的方式表示所有字符</p><p>UTF-8：  每一个字符按规则编码 为1～4任一字节组合。中文通常为3字节长。 </p><p>UTF-8 + bom： 和 UTF-8 的去区别就是，文件开头有 U+FEFF；</p></blockquote><br><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>感觉就是一句话，用什么 [编码规则] 保存为何种形式的二进制段，就用同样的[编码规则]来读取。自然就不会出现乱码了。</p><br><h2 id="字符保存等价形式："><a href="#字符保存等价形式：" class="headerlink" title="字符保存等价形式："></a>字符保存等价形式：</h2><p>当然，自己也可以测试一下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 因此以下几行等价（以 UTF-8编码保存 C++源文件）：</span><span class="token keyword">const</span> <span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"最喜欢C++了！"</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\xe6\x9c\x80\xe5\x96\x9c\xe6\xac\xa2\x43\x2b\x2b\xe4\xba\x86\xef\xbc\x81"</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">char</span> s3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x00</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>参考：</strong></p><ul><li><a href="https://xmuli.blog.csdn.net/article/details/109565311">位（bit）、字节(Byte)、MB(兆位)之间的换算关系</a></li><li><a href="https://www.cnblogs.com/flyingeagle/articles/9825302.html">UTF-8与UTF-8 BOM</a></li><li><a href="https://www.youtube.com/watch?v=t9nKPJDITNw">中文乱码形成的原因</a></li><li>《从此乱码是路人.pdf  平芜泫  2012 年 09 月》 </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/99617767">输出乱码原因：古文码、口字码、符号码、问号码、棍拷码</a></li><li><a href="https://www.zhihu.com/question/23374078">Unicode 和 UTF-8 有什么区别？</a></li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位（bit）、字节(Byte)、MB(兆位)之间的换算关系</title>
      <link href="posts/41b8f9c5/"/>
      <url>posts/41b8f9c5/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　位（bit）、字节(Byte)、MB(兆位)之间的换算关系</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">B是Byte的缩写，B就是Byte，也就是字节（Byte）；b是bit的缩写，b就是bit，也就是比特位（bit）。B与b不同，注意区分，KB是千字节，Kb是千比特位。<span class="token number">1</span>MB（兆字节） <span class="token operator">=</span> <span class="token number">1024</span>KB（千字节）<span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token function">B</span><span class="token punctuation">(</span>字节<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1048576</span><span class="token function">B</span><span class="token punctuation">(</span>字节<span class="token punctuation">)</span>；<span class="token number">8</span>bit（比特位）<span class="token operator">=</span> <span class="token number">1</span>Byte（字节）；<span class="token number">1024</span>Byte（字节）<span class="token operator">=</span> <span class="token number">1</span><span class="token function">KB</span><span class="token punctuation">(</span>千字节<span class="token punctuation">)</span>；<span class="token number">1024</span>KB（千字节）<span class="token operator">=</span> <span class="token number">1</span>MB（兆字节）<span class="token punctuation">;</span><span class="token number">1024</span>MB <span class="token operator">=</span> <span class="token number">1</span>GB<span class="token punctuation">;</span><span class="token number">1024</span>GB <span class="token operator">=</span> <span class="token number">1</span>TB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deepin Custom Modify Window Corner Rounding Size</title>
      <link href="posts/3757693a/"/>
      <url>posts/3757693a/</url>
      
        <content type="html"><![CDATA[<p><strong>Summary:</strong> Community version of <code>Deepin</code>‘s `Big Round Corners’ Official version of <strong>Small, Medium, Extra Large</strong> is here! . All windows have and taskbar has got <strong>right, small rounded, large rounded (0px, 8px, 18px)</strong>. Attached is a detailed tutorial on how to modify the tutorial steps, and how to modify the rounded corners at any angle.</p><iframe width="560" height="315" src="https://www.youtube.com/embed/qDfvKgq1JP0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p>Translated from the original： <a href="ifmet.cn/posts/cd317ccc/">Deepin 自定义修改窗口圆角大小</a></p></blockquote><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface."></a>Preface.</h2><p>Some people want to stick to the big rounded corners, while others want to adjust the small rounded corners and right corners; personal experiences and living environment are different, so the citrus is different, so they have their own perspectives on the idea, and can appreciate each other!</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022150848.png" width="25%"/ loading="lazy"><p>The scope of <code>DDE</code> rounding modification is:  **all main window rounding + Dock rounding + Menu rounding  **.</p><p>This modification only involves the community <code>Deepin</code> has this feature (belongs to the community customization feature, is also a certain text and the community’s heart love ~ ).</p><p><code>UOS</code> version is not enabled by default, of course, if you want to experience it, you can also change the size of the rounded corners by command (these kinds of features, for the time being, are out of the planning. I’m also afraid of being hammered by <code>UOS</code>‘s product managers and developers, and then reported as a <code>bug</code> single by the test ladies).</p><blockquote><p>Because <code>Deepin</code> and <code>UOS</code> are actually two different forms of a product.</p></blockquote><br><h2 id="Copywriting"><a href="#Copywriting" class="headerlink" title="Copywriting:"></a>Copywriting:</h2><ul><li><strong>Chinese text:</strong> <code>window rounded corner&#39;, </code>small’, <code>medium&#39;, </code>large’</li><li><strong>English text :</strong> <code>Rounded Corner</code>, <code>small</code>, <code>medium</code>, <code>large</code>  </li></ul><p>Large rounded corners (system original style): window = 18px; Medium rounded corners: window = 8px; Small rounded corners: window = 0px; For the internal (button, item background, etc.) rounded corners size, no change. </p><p>Well, this is also the design from the design department (she is beautiful too).</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/eb07e579-973e-4a08-aab8-0f8e120dccfc.png" width="25%"/ loading="lazy"><br><h2 id="Modify-rounded-corner-window-ideas"><a href="#Modify-rounded-corner-window-ideas" class="headerlink" title="Modify rounded corner window ideas."></a>Modify rounded corner window ideas.</h2><blockquote><ol><li>First <code>fork&#39; the official repository to your own repository. To compile the project&#39;s dependencies, run </code>sudo apt build-dep dtkgui<code>, or go to the project root and run </code>dpkg-checkbuilddeps` ;</li><li>Modify the code and commit it in the format (important)</li><li>After the test meets expectations, the code is submitted and awaits merging.</li></ol></blockquote><p>How this is achieved, modifying the place will involve designing three items in total.</p><ul><li><a href="https://github.com/linuxdeepin/dtkgui">dtkgui</a>: Modify the basic rounded corner values and add an interface.</li><li><a href="https://github.com/linuxdeepin/dde-control-center">ddde-control-center</a>: add control to change the rounded corner value of the software, international translation.</li><li><a href="https://github.com/linuxdeepin/dde-dock">ddde-dock</a>: Also change the rounded corner size of the dock in the taskbar in fashion mode.</li></ul><br><h3 id="Modify-dtkgui-code"><a href="#Modify-dtkgui-code" class="headerlink" title="Modify dtkgui code."></a>Modify dtkgui code.</h3><p>Add the corresponding interface first; make sure <code>winID</code> is created (otherwise a default window will be created), and then modify the value of the attribute, otherwise the dock will be grayed out, and the right-click menu will become opaque, which is a serious bug. Submit this modification with the following code.</p><p><strong>Change code commit:</strong> </p><blockquote><ol><li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/a3b9836b83f92e308b2af58c148350471119690b">commit  a3b9836b</a>                // Add Modify Rounded Interface</p></li><li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/de1f742edefee47963515acf63721ffb53193a8b">commit de1f742e</a>                 // Fix default display as right angle.</p></li><li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/6ae8f77d42beea9e026444f29944cc06d298b3e6">commit 6ae8f77d</a>                 // Fix ToolTip’s rounded corners as 18px unsightly accidental bug</p></li><li><p><a href="https://github.com/linuxdeepin/dtkgui/commit/ea60f6b0bb40cad111548a8374060f06473f66b1">commit ea60f6b0</a>                 // Optimization code </p></li></ol></blockquote><br><p>After running, replace the new header file and the resulting binary with the system to see the effect</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/lib/x86_64-linux-gnu/libdtkgui.so.5.2.2☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">cp</span> ~/project/build-dtkgui-unknown-Debug/src/libdtkgui.so.5.2.2 /usr/lib/x86_64-linux-gnu/☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  <span class="token function">sudo</span> <span class="token function">cp</span> src/dplatformtheme.h /usr/include/libdtk-5.2.2/DGui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="Modify-de-control-center-code"><a href="#Modify-de-control-center-code" class="headerlink" title="Modify de-control-center code."></a>Modify de-control-center code.</h3><p><strong>Modify code to submit:</strong></p><blockquote><ol><li><a href="https://github.com/linuxdeepin/dde-control-center/commit/a37aae159ab5fb0b8c4cbb8189e81e8ac81f0f43">commit a37aae15</a> // add controls Modify the value of the large round angle</li><li><a href="https://github.com/linuxdeepin/dde-control-center/commit/b9926d9795cb39d9298d22c295eed90dd437fe11">commit b9926d97</a> // Add the right application. International translation</li><li><a href="https://github.com/linuxdeepin/dde-control-center/commit/a6ea6be6927efede1ee3b7aac7265adcb62c21a9">commit a6ea6be6</a> // fix layout Errors cause other controls to be compressed</li></ol></blockquote><p>Run it directly to see if there are any real-time effects.</p><br><h3 id="Modify-dode-dock-code"><a href="#Modify-dode-dock-code" class="headerlink" title="Modify dode-dock code."></a>Modify dode-dock code.</h3><p><strong>Change code commit:</strong></p><blockquote><ol><li><a href="https://github.com/linuxdeepin/dde-dock/commit/89cf36abf18a5a0283db739a5b3cd053b1e011f1">commit 89cf36ab</a> // Dock taskbar modifying large rounded corners.</li><li><a href="https://github.com/linuxdeepin/dde-dock/commit/63953ef5d05a7320ac3bd2d952602038d6b1fb48">commit 63953ef5</a> // Fix after logging out of reboot, dock The default display is right angle. </li></ol></blockquote><p>To run the compile and see the effect, you need to download the <code>dconf-editor</code> software, search for <code>watchdog</code>, and disable the <code>dde-dock</code> button, so that you can run the dock generated by the code instead of always displaying the system’s own taskbar dock.</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201020202526.png" width="50%"/ loading="lazy"><br><h3 id="Post-optimization"><a href="#Post-optimization" class="headerlink" title="Post-optimization."></a>Post-optimization.</h3><p>Suddenly, a defect was reported by the upstairs test lady.</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/407bef0d-99f4-412e-a10b-7cd0729351b2.gif" width="40%"/ loading="lazy"><p>Since we only set this value in front end, every time we “logout, restart, turn off effects and then turn them back on”, we lose the value <code>&quot;DTK/windowRadius&quot; QVariant(int, 8)</code>, which results in big rounded corners.</p><p>In the next stage, an assignment will be added to this value in a back-end piece to fix this flaw.</p><br><h2 id="Customize-the-fillet-size"><a href="#Customize-the-fillet-size" class="headerlink" title="Customize the fillet size."></a>Customize the fillet size.</h2><h3 id="Mode-1"><a href="#Mode-1" class="headerlink" title="Mode 1."></a>Mode 1.</h3><p>Changes to “Control Center - Personalization - Rounded Window “** (available only for <code>Deepin</code>) via Interface Adjustment. Only right angle<code> (0px</code>), small rounded corner (<code>8px</code>), and large rounded corner (18px) are adjustable.</p><p><br> ** Adjustable in three levels.</p><h3 id="Mode-2"><a href="#Mode-2" class="headerlink" title="Mode 2."></a>Mode 2.</h3><p>Execute the command by commanding Terminal Adjustment, where the specific parameter <code>8</code> can be replaced with any number of angles, and takes effect for both <code>Deepin</code> and <code>UOS</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Manual adjustment of terminal values "DTK/windowRadius" QVariant(int, 8)</span>/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings --set <span class="token string">"DTK/WindowRadius"</span> -i <span class="token number">8</span>  // Rounding value setting/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings    // View Fillet Values<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>PS: If there is no such program running in this path, you need to execute the： <code>sudo apt install libdtkgui5-bin</code></p></blockquote><br><h2 id="End-result"><a href="#End-result" class="headerlink" title="End result."></a>End result.</h2><p>No picture. No picture. Say a  🔨： </p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022145645.png" width="20%"/ loading="lazy"><p>Let’s start with the final realization.</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211555.png" width="90%"/ loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211629.png" width="90%"/ loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211822.png" width="90%"/ loading="lazy"><br><p>#Breakdown summary~.</p><p>This time the function is very small, but it is the community users have always wanted the function, submit a lot this time. The first is to be tested by the test lady, the second is to adhere to a commit to do only one thing. Third, to participate in the community to contribute to the partners, a submission demonstration, showing how to submit from <code>github</code> <code>pr</code> and then be merged into the main code flow. Fourthly, share your own details and happiness.</p><p>For any piece of software, I personally feel that it should be to uphold the ** “people-oriented “** point of view. ** a product should have temperature **, in some details of the place with the care of the user, rather than knowledge of a cold device. Not a little emotion, although the need to be able to use, but do not use the discarded, and then never thought of. Life is short, have to do a little interesting things. Always do my best to add a thought in it. I’m not sure how much I’ll be able to do.</p><br><h2 id="Participate-together-in-contributing-to"><a href="#Participate-together-in-contributing-to" class="headerlink" title="Participate together in contributing to."></a>Participate together in contributing to.</h2><p>If you are interested, you can also add some new features to it and merge it directly into the upstream Deepin mainline code. The source code can be downloaded directly from <a href="https://github.com/linuxdeepin">linuxdeepin</a> and is synchronized with the intranet code in real time. For DTK, in addition to the source code comments, you can also read the <a href="https://linuxdeepin.github.io/dtk/">DTK API</a> web page (currently updated daily). If you want more people to experience the effect of your code, just submit <code>pr</code> and remember to refer to this <a href="https://github.com/linuxdeepin/developer-center/wiki/">Commit Submission Specification</a> for submission specifications. Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83) Oh. See you next~~.</p><br><p><strong>If you want to be merged quickly, attach some suggestions:</strong></p><ol><li>for porting to other distributions, bug fixes, such contributions pr are easy and fast to merge;</li><li>for some community customization features, it is recommended to set them to take effect only on community Deepin, and to disable them by default on UOS to speed up the merge process. 3. for some new features and functions, if they are needed in the UOS version or are in the planning stage, it is recommended to set them to take effect only on community Deepin;</li><li>for some new features and functions, if they are required by the UOS version or are in the planning stage, they can also be merged quickly; 4. for individuals and from the community, it is recommended to set it to work only on community Deepin;</li><li>for individuals and rounds from the community, it is also easy to merge, with communication that the community is looking forward to it (less strict rules and processes than the commercial line). 5;</li><li>to test as fully and completely as possible before submitting.</li><li><strong>Be sure to pay attention to the <a href="https://github.com/linuxdeepin/developer-center/wiki/Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83">Commit Submission Specification</a>;</strong></li><li>you can communicate in the community bbs forum or github to remind the</li></ol><p>In addition, the following interface classes [dsysinfo.h](<a href="https://github.com/linuxdeepin/dtkcore/blob/523a51ab69e97b5fd8c906cb83ed3049888f680d/src/">https://github.com/linuxdeepin/dtkcore/blob/523a51ab69e97b5fd8c906cb83ed3049888f680d/src/</a> dsysinfo.h), and write a detailed tutorial sometime, distinguishing between the various versions of the system.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString <span class="token class-name">DSysInfo</span><span class="token operator">::</span><span class="token function">uosEditionName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QLocale <span class="token operator">&amp;</span>locale<span class="token punctuation">)</span> <span class="token comment">// Get the version name, for example, "Professional"/"Home"/"Community"....</span><span class="token keyword">enum</span> <span class="token class-name">UosEdition</span> <span class="token punctuation">&#123;</span>    UosEditionUnknown<span class="token punctuation">,</span>    UosProfessional<span class="token punctuation">,</span>  <span class="token comment">//专业版</span>    UosHome<span class="token punctuation">,</span>         <span class="token comment">//个人版</span>    UosCommunity<span class="token punctuation">,</span>    <span class="token comment">//社区版</span>    UosMilitary<span class="token punctuation">,</span>    UosEnterprise<span class="token punctuation">,</span>    UosEnterpriseC<span class="token punctuation">,</span>    UosEuler<span class="token punctuation">,</span>        <span class="token comment">// 欧拉版</span>    UosMilitaryS<span class="token punctuation">,</span>    <span class="token comment">// for Server</span>    UosEditionCount <span class="token comment">// must at last</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">// The following interface is not recommended, as it will be removed later.</span>    <span class="token keyword">enum</span> <span class="token class-name">ProductType</span> <span class="token punctuation">&#123;</span>        UnknownType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        Deepin<span class="token punctuation">,</span>        ArchLinux<span class="token punctuation">,</span>        CentOS<span class="token punctuation">,</span>        Debian<span class="token punctuation">,</span>        Fedora<span class="token punctuation">,</span>        LinuxMint<span class="token punctuation">,</span>        Manjaro<span class="token punctuation">,</span>        openSUSE<span class="token punctuation">,</span>        SailfishOS<span class="token punctuation">,</span>        Ubuntu<span class="token punctuation">,</span>        Uos    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">DeepinType</span> <span class="token punctuation">&#123;</span>        UnknownDeepin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        DeepinDesktop<span class="token punctuation">,</span>        DeepinProfessional<span class="token punctuation">,</span>        DeepinServer<span class="token punctuation">,</span>        DeepinPersonal    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="Updated-2020-11-16"><a href="#Updated-2020-11-16" class="headerlink" title="Updated: 2020-11-16"></a>Updated: 2020-11-16</h2><p>However, due to various factors such as release schedule, expected release strategy, overall rush, allowing time for testing, and coordinating with other project developers and working together, it is not possible to schedule the fixes immediately once they are applied and see the effect.</p><p>Fix the bug that the default transparency module is compressed due to a layout error in <strong>Control Center and Modify Window with Rounded Corners</strong>:</p><ul><li>This part of the fix involves front-end support:<ul><li><code>dde-control-center</code>: [a6ea6be6](<a href="https://github.com/linuxdeepin/dde-control-center/commit/">https://github.com/linuxdeepin/dde-control-center/commit/</a> a6ea6be6927efede1ee3b7aac7265adcb62c21a9)</li></ul></li></ul><br><p>Fix <strong>after logging out/restarting, the right corner of the taskbar and active window becomes rounded and the state cannot be saved.</strong> </p><ul><li>This part of the change concerns backend support:<ul><li><code>dde-daemon</code> : <a href="https://github.com/linuxdeepin/dde-daemon/commit/a6fee1b90fad7bf3a5414a241c90266bc2275322">a6fee1b9</a></li><li><code>startdde</code> : <a href="https://github.com/linuxdeepin/startdde/commit/f7b62e85d599e0c87734d2f4365b3fd15dd49cee">f7b62e85</a> </li><li><code>deepin-desktop-schemas</code>:  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/73b992dae8984675a3d93c96c200dd5baf31fe88">73b992da</a>，  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/9b448b22823d8d2fa051f792f161fd5c3eaa89af">9b448b22</a> </li></ul></li><li>This part of the revision concerns front-end support:<ul><li><code>dde-control-center</code>: <a href="https://github.com/linuxdeepin/dde-control-center/commit/e523a87f80726dff196bccb78bbe5b1c2b0366ad">e523a87f</a> </li></ul></li></ul><br><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h2><p>The method is to modify the value of a <code>dtkgui</code> item, then regenerate the corresponding binary and replace it in the system directory; although it works for the time being, it is not standardized, and it will fail after reboot or logout. It doesn’t feel so simple and elegant;** </p><p>I’m just saying it’s working. Who’s to say they haven’t done it yet? The enthusiastic techies who can’t wait to get started will have to find a way to make it work, and we’ll see what we can achieve first.</p><p><strong>But as a formal change,</strong> it must not be treated in the same way, it has to conform to a dtk style, user-friendly, functional and product design planning must not conflict, interface changes must be standardized, and the interface must be kept backward compatible.</p><p> <br>It is important that the interface is standardized and kept backwards compatible.</p><p>I thought I was modifying a simple feature, but it would end up involving so many items I didn’t expect: <code>dde-daemon</code>, <code>startdde</code>, <code>deepin-desktop-schemas</code>, <code>dde-control-center</code>, <code>dtkgui</code>, `dde-dock There are a total of 6 of them, many of them are very important core base libraries, if you modify them, it will affect many other projects, so it is more careful and cautious to modify them. But I’m happy to add this feature to the community at last. <br>It’s a good thing that we have a lot of people working on this;</p><br><h3 id="Series-Address"><a href="#Series-Address" class="headerlink" title="Series Address."></a>Series Address.</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>Welcome to the <code>star</code> and <code>fork</code> series of QT / DTK learnings, with a table of contents for learning the ins and outs.</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UOS </tag>
            
            <tag> Deepin </tag>
            
            <tag> DTK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin 自定义修改窗口圆角大小</title>
      <link href="posts/cd317ccc/"/>
      <url>posts/cd317ccc/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 社区版本 <code>Deepin</code>  的<code>大圆角</code> 官方版本的 <strong>“小杯”、“中杯”、“超大杯”</strong> 来了。所有窗口有和任务栏有了 <strong>直角、小圆角、大圆角 （0px、8px、 18px）</strong>。附上详细修改教程步骤，和如何修改任意角度的圆角。</p><iframe width="760" height="427" src="//player.bilibili.com/player.html?aid=245084838&bvid=BV1jv411C7oW&cid=247386263&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p>翻译的英文版本： <a href="ifmet.cn/posts/3757693a/">Deepin Custom Modify Window Corner Rounding Size</a></p></blockquote><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>对于 <code>DDE</code> 一直以来的大圆角 <code>18px</code>，社区有着不同审美，有人希望坚持大圆角、有人希望调整小圆角、和直角；个人经历和生活环境不同，柑橘也不一样，所以有着各自不同角度的看待想法，能够互相欣赏即可</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022150848.png" width="25%"/ loading="lazy"><p><code>DDE</code> 的圆角修改范围为： **所有主窗口的圆角 + Dock 圆角 + Menu 圆角 ** 。</p><p>本次修改只涉及社区 <code>Deepin</code> 拥有此功能（属于社区定制功能，也是某文和社区心心恋恋的~ ）。</p><p><code>UOS</code> 版本默认不开启，当然，你想体验的话，也可通过命令来修改圆角大小 （此类功能，暂时都属于规定的计划之外。 也害怕被 <code>UOS</code> 的产品经理、开发们锤、然后被测试小姐姐报 <code>bug</code> 单）。</p><blockquote><p>因 <code>Deepin</code> 和 <code>UOS</code> 实际是一个产品的两种不同形态。</p></blockquote><br><h2 id="文案设计"><a href="#文案设计" class="headerlink" title="文案设计:"></a>文案设计:</h2><ul><li><strong>中文文案:</strong>  <code>窗口圆角</code>， <code>小</code>， <code>中</code>， <code>大</code></li><li><strong>English 文案 :</strong>  <code>Rounded Corner</code>， <code>small</code>，  <code>medium</code>，  <code>large</code>  </li></ul><p>大圆角（系统原本样式）：窗口 = 18px；   中圆角：窗口 = 8px；    小圆角：窗口 = 0px；    对于 内部（按钮、item背景等）的圆角大小， 不做修改。 </p><p>嗯嗯 ，，也是来自设计部的小姐姐（人也美）给的设计图，由于篇幅，就不上图了（<del>我说的是设计图</del>）， 确实很棒，，，</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/eb07e579-973e-4a08-aab8-0f8e120dccfc.png" width="25%"/ loading="lazy"><br><h2 id="修改圆角窗口思路："><a href="#修改圆角窗口思路：" class="headerlink" title="修改圆角窗口思路："></a>修改圆角窗口思路：</h2><blockquote><ol><li>先 <code>fork</code> 官网仓库到自己的仓库；</li><li>编译项目的依赖， 执行 <code>sudo apt build-dep dtkgui</code>  ，或者去项目根目录下， 执行 <code>dpkg-checkbuilddeps</code> ；</li><li>修改代码， 按照格式提交（很重要）</li><li>测试达到预期后后、提交代码，等待合并</li></ol></blockquote><p>如何实现，修改地方一共要设计三个项目：</p><ul><li><a href="https://github.com/linuxdeepin/dtkgui">dtkgui</a> ：修改基础的圆角数值、添加接口</li><li><a href="https://github.com/linuxdeepin/dde-control-center">dde-control-center</a> ：添加控件修改软件的圆角数值，国际化翻译</li><li><a href="https://github.com/linuxdeepin/dde-dock">dde-dock</a> ：同时修改任务栏 dock 的在“时尚模式”下的圆角大小数值</li></ul><br><h3 id="修改-dtkgui-代码："><a href="#修改-dtkgui-代码：" class="headerlink" title="修改 dtkgui 代码："></a>修改 dtkgui 代码：</h3><p>先添加对应的接口；要确 <code>winID</code> 被创建后（不然会被创建一个默认的窗口），再修改 属性的数值， 否则 dock 会变灰，右键菜单等都会变成不透明的严重 bug。 本次修改提交，代码如下。</p><p><strong>修改代码提交:</strong></p><blockquote><ol><li><a href="https://github.com/linuxdeepin/dtkgui/commit/a3b9836b83f92e308b2af58c148350471119690b">commit  a3b9836b</a>                        // 添加修改圆角接口</li><li><a href="https://github.com/linuxdeepin/dtkgui/commit/de1f742edefee47963515acf63721ffb53193a8b">commit  de1f742e</a>                         // 修复默显示为直角角</li><li> <a href="https://github.com/linuxdeepin/dtkgui/commit/6ae8f77d42beea9e026444f29944cc06d298b3e6">commit  6ae8f77d</a>                        // 修复 ToolTip 的圆角为 18px 的不美观的意外 bug</li><li><a href="https://github.com/linuxdeepin/dtkgui/commit/ea60f6b0bb40cad111548a8374060f06473f66b1">commit  ea60f6b0</a>                        // 优化代码 </li></ol></blockquote><br><p>运行之后，将新的头文件和生成的二进制，替换进系统，查看效果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/lib/x86_64-linux-gnu/libdtkgui.so.5.2.2☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡ <span class="token function">sudo</span> <span class="token function">cp</span> ~/project/build-dtkgui-unknown-Debug/src/libdtkgui.so.5.2.2 /usr/lib/x86_64-linux-gnu/☁  dtkgui <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  <span class="token function">sudo</span> <span class="token function">cp</span> src/dplatformtheme.h /usr/include/libdtk-5.2.2/DGui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="修改-dde-control-center-代码："><a href="#修改-dde-control-center-代码：" class="headerlink" title="修改 dde-control-center 代码："></a>修改 dde-control-center 代码：</h3><p><strong>修改代码提交:</strong></p><blockquote><ol><li>   <a href="https://github.com/linuxdeepin/dde-control-center/commit/a37aae159ab5fb0b8c4cbb8189e81e8ac81f0f43">commit  a37aae15</a>                           // 添加控件修改大圆角度的数值</li><li>   <a href="https://github.com/linuxdeepin/dde-control-center/commit/b9926d9795cb39d9298d22c295eed90dd437fe11">commit  b9926d97</a>                          // 添加对的应国际化翻译</li><li>   <a href="https://github.com/linuxdeepin/dde-control-center/commit/a6ea6be6927efede1ee3b7aac7265adcb62c21a9">commit  a6ea6be6</a>                          // 修复布局错误导致其他控件的被压缩显示</li></ol></blockquote><p>直接运行，查看是否有实时效果。</p><br><h3 id="修改-dde-dock-代码："><a href="#修改-dde-dock-代码：" class="headerlink" title="修改 dde-dock 代码："></a>修改 dde-dock 代码：</h3><p><strong>修改代码提交:</strong></p><blockquote><ol><li><a href="https://github.com/linuxdeepin/dde-dock/commit/89cf36abf18a5a0283db739a5b3cd053b1e011f1">commit  89cf36ab</a>                              // Dock 任务栏修改大圆角</li><li><a href="https://github.com/linuxdeepin/dde-dock/commit/63953ef5d05a7320ac3bd2d952602038d6b1fb48">commit  63953ef5</a>                              // 修复 注销重启后，dock 默认显示为直角 </li></ol></blockquote><p>运行编译下想要看下效果，需要先下载 <code>dconf-editor</code> 软件， 搜寻 看门狗 <code>watchdog</code>， 然后关闭 <code>dde-dock</code> 的按钮，这样就可以运行代码生成的 dock 而非一直显示系统本身的任务栏 dock。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201020202526.png" width="50%"/ loading="lazy"><br><h3 id="后期优化："><a href="#后期优化：" class="headerlink" title="后期优化："></a>后期优化：</h3><p>突然，被楼上测试小姐姐报告了一个缺陷，</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/407bef0d-99f4-412e-a10b-7cd0729351b2.gif" width="40%"/ loading="lazy"><p>由于只在前端做了此值的设置， 所以每次 “注销 、重启、关闭特效后再开启”， 都会导致此值 <code>&quot;DTK/windowRadius&quot; QVariant(int, 8)</code> 的丢失，从而导致都会显示为大圆角。</p><p>下一阶段，会在后端一块给此添加赋值，修复此缺陷。</p><br><h2 id="自定义设置圆角大小："><a href="#自定义设置圆角大小：" class="headerlink" title="自定义设置圆角大小："></a>自定义设置圆角大小：</h2><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><p>通过界面调整 <strong>“控制中心 - 个性化- 圆角窗口“</strong>  的修改（仅对 <code>Deepin</code> 有效）。只有 直角<code>(0px</code>)、小圆角（<code>8px</code>） 、和 大圆角(18px) 三档可调。</p><br><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><p>通过命令终端调整，执行命令：其中具体的参数 <code>8</code> 可以替换为任意数字的角度，且对 <code>Deepin</code> 和 <code>UOS</code> 都生效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 终端手动调整数值 "DTK/windowRadius" QVariant(int， 8)</span>/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings --set <span class="token string">"DTK/WindowRadius"</span> -i <span class="token number">8</span>  // 设定圆角数值/usr/lib/x86_64-linux-gnu/libdtk-5.2.2/DGui/bin/deepin-gui-settings    // 查看圆角数值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>PS： 若是此路径下没有此运行程序，则需要执行： <code>sudo apt install libdtkgui5-bin</code></p></blockquote><br><h2 id="最终效果："><a href="#最终效果：" class="headerlink" title="最终效果："></a>最终效果：</h2><p>没图，没图说个🔨： </p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201022145645.png" width="30%"/ loading="lazy"><p>赶紧先放一下最终的实现效果：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211555.png" width="90%"/ loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211629.png" width="90%"/ loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/截图录屏_dde-desktop_20201015211822.png" width="90%"/ loading="lazy"><br><h2 id="碎碎念总结-："><a href="#碎碎念总结-：" class="headerlink" title="碎碎念总结~："></a>碎碎念总结~：</h2><p>本次功能很小，但却是社区用户的一直想要的功能，提交很多此次。一是被测试小姐姐测出来的，二是秉持一个提交只干一件事情。三是给想参与社区贡献的小伙伴，一个提交示范，展示如何从 <code>github</code> 提交 <code>pr</code> 然后被合并到 主干代码的流程。四是分享自己的细节和快乐。</p><p>对于任意的一个软件，个人觉得都应该是秉持 <strong>”以人为本“</strong>  的观点。<strong>一个产品应该有温度的</strong> ，在一些细节的地方有着对用户的细心呵护，而不知识一个冷冰冰的设备。没得一点感情，虽然需要时候能用，但是不用后就丢弃，以后再也想不起。 人生短暂，得做一点有意思的事情。始终尽我所能，为其添加一份心意在里面。也感谢过程中指点的思路的大佬们。</p><br><h2 id="一起参与贡献："><a href="#一起参与贡献：" class="headerlink" title="一起参与贡献："></a>一起参与贡献：</h2><p>若是感兴趣，你也可以添加一些新功能在里面，直接合入上游的 Deepin 主线代码中。源码直接在 <a href="https://github.com/linuxdeepin">linuxdeepin</a> 中下载，是实时和 内网代码同步的。关于DTK 的除了看源码注释，还可以看 <a href="https://linuxdeepin.github.io/dtk/">DTK API</a> 网页说明（目前每日更新）。然后 <code>fork</code> 后，自己修改自己玩，若是想要让更多的人体验你的代码效果，直接提交 <code>pr</code> ，记得 提交规范参考这个 <a href="https://github.com/linuxdeepin/developer-center/wiki/Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83">Commit提交规范</a> 哦。下一篇再见~~</p><br><p><strong>若是希望能够快速被合并，附上一些建议：</strong></p><ol><li>对于在其他发行版移植、一些缺陷 Bug 修复的，此类贡献 pr 都是很容易被合并的且快速的；</li><li>对于一些社区的自定义功能，建议设置为只在社区 Deepin 上生效，且在 UOS 上默认生效是不生效关闭的，能够加快被被合并的速度；</li><li>对于一些新功能和特性，若是 UOS 版本刚好需要，或者在规划中，也能够被快速合并；</li><li>对于个人和来自社区的轮子，沟通下，也是很容易被合并的，社区都是很期待的（没有商业线那么严格的规范和流程）；</li><li>尽可能的充分测试完整再提交；</li><li><strong>一定要注意  <a href="https://github.com/linuxdeepin/developer-center/wiki/Commit%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83">Commit提交规范</a> ；</strong></li><li>可以在社区 bbs 论坛或者 github 进行沟通，提醒</li></ol><p>另外，对于系统版本的区分，可以推荐使用如下接口的类 <a href="https://github.com/linuxdeepin/dtkcore/blob/523a51ab69e97b5fd8c906cb83ed3049888f680d/src/dsysinfo.h">dsysinfo.h</a> ， 有空再写一个详细的教程，区分系统的各个版本。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString <span class="token class-name">DSysInfo</span><span class="token operator">::</span><span class="token function">uosEditionName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QLocale <span class="token operator">&amp;</span>locale<span class="token punctuation">)</span> <span class="token comment">// 获取版本名称，比如英文的话返回"Professional"/"Home"/"Community"...</span><span class="token keyword">enum</span> <span class="token class-name">UosEdition</span> <span class="token punctuation">&#123;</span>    UosEditionUnknown<span class="token punctuation">,</span>    UosProfessional<span class="token punctuation">,</span>  <span class="token comment">//专业版</span>    UosHome<span class="token punctuation">,</span>   <span class="token comment">//个人版</span>    UosCommunity<span class="token punctuation">,</span>    <span class="token comment">//社区版</span>    UosMilitary<span class="token punctuation">,</span>    UosEnterprise<span class="token punctuation">,</span>    UosEnterpriseC<span class="token punctuation">,</span>    UosEuler<span class="token punctuation">,</span>    <span class="token comment">// 欧拉版</span>    UosMilitaryS<span class="token punctuation">,</span> <span class="token comment">// for Server</span>    UosEditionCount <span class="token comment">// must at last</span><span class="token punctuation">&#125;</span>；<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">// 不推荐使用下面的接口，后面此接口会被移除的。</span>    <span class="token keyword">enum</span> <span class="token class-name">ProductType</span> <span class="token punctuation">&#123;</span>        UnknownType <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        Deepin<span class="token punctuation">,</span>        ArchLinux<span class="token punctuation">,</span>        CentOS<span class="token punctuation">,</span>        Debian<span class="token punctuation">,</span>        Fedora<span class="token punctuation">,</span>        LinuxMint<span class="token punctuation">,</span>        Manjaro<span class="token punctuation">,</span>        openSUSE<span class="token punctuation">,</span>        SailfishOS<span class="token punctuation">,</span>        Ubuntu<span class="token punctuation">,</span>        Uos    <span class="token punctuation">&#125;</span>；    <span class="token keyword">enum</span> <span class="token class-name">DeepinType</span> <span class="token punctuation">&#123;</span>        UnknownDeepin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        DeepinDesktop<span class="token punctuation">,</span>        DeepinProfessional<span class="token punctuation">,</span>        DeepinServer<span class="token punctuation">,</span>        DeepinPersonal    <span class="token punctuation">&#125;</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="更新-2020-11-16"><a href="#更新-2020-11-16" class="headerlink" title="更新: 2020-11-16"></a>更新: 2020-11-16</h2><p>以下修改早已经早已经完成， 不过由于发布版本时间的安排， 预计的发布策略， 整体的赶进度， 给测试预留时间， 和协调其它项目的开发者沟通，一起合作等等多方面因素， 导致不能一被修复就立马安排上，看到作用.</p><p>修复 <strong>控制中心， 添加圆角修改窗口的布局错误，导致默认透明度模块被压缩了的 Bug</strong>:</p><ul><li>本部分修改涉及到前端支持:<ul><li><code>dde-control-center</code>: <a href="https://github.com/linuxdeepin/dde-control-center/commit/a6ea6be6927efede1ee3b7aac7265adcb62c21a9">a6ea6be6</a></li></ul></li></ul><br><p>修复 <strong>注销/重启后，任务栏和活动窗口直角就成圆角了，状态不能够保存的 bug；</strong></p><ul><li>本部分修改涉及到后端支持:<ul><li><code>dde-daemon</code> : <a href="https://github.com/linuxdeepin/dde-daemon/commit/a6fee1b90fad7bf3a5414a241c90266bc2275322">a6fee1b9</a></li><li><code>startdde</code> : <a href="https://github.com/linuxdeepin/startdde/commit/f7b62e85d599e0c87734d2f4365b3fd15dd49cee">f7b62e85</a> </li><li><code>deepin-desktop-schemas</code>:  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/73b992dae8984675a3d93c96c200dd5baf31fe88">73b992da</a>，  <a href="https://github.com/linuxdeepin/deepin-desktop-schemas/commit/9b448b22823d8d2fa051f792f161fd5c3eaa89af">9b448b22</a></li></ul></li><li>本部分修改涉及到前端支持:<ul><li><code>dde-control-center</code>: <a href="https://github.com/linuxdeepin/dde-control-center/commit/e523a87f80726dff196bccb78bbe5b1c2b0366ad">e523a87f</a></li></ul></li></ul><br><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>修改一个定义窗口圆角，在社区中早已经有人给出相应的教程，方法是修改一个 <code>dtkgui</code> 项目数值，然后重新生成对应的二进制后替换到系统目录中；虽然暂时可行，但是会有不规范，和重启或者注销之后， 失效的问题， 方法比较简单且粗犷和有效， 且替换方式复杂， <strong>感觉不是那么的简洁和优雅；</strong> </p><p>只是说能用，谁说官方迟迟未进行此功能呢? 迫不及待的热情技术者们， 就只好自己动手先来探探路， 搞一个可用方式， 先完成可达到的预期再说， 舒坦了~；</p><p><strong>但作为正式的修改，</strong>  肯定不能同样的对待， 得符合一个dtk 的风格， 方便用户， 功能上和产品设计的规划不能冲突， 接口的修改要规范， 且要保持接口向下兼容.</p><br><p>本以为是修改一个简单功能， 但是会最后会牵涉到如此多的项目， 是我没有想到的: <code>dde-daemon</code>、<code>startdde</code> 、<code>deepin-desktop-schemas</code>、<code>dde-control-center</code>、<code>dtkgui</code>、 <code>dde-dock</code> 全程一共有 6 个，且其中好几个都是很重要的核心基础库，修改的话， 会对其他很多项目都有影响，所以修改的时候比较慎重和小心。 不过最后算是给社区加上了这个功能，还是很开心的。 Happy~;</p><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UOS </tag>
            
            <tag> Deepin </tag>
            
            <tag> DTK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MateBoook x pro 2020 升级 1T 固态</title>
      <link href="posts/14c67397/"/>
      <url>posts/14c67397/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　将 <code>MateBoook x pro 2020</code> 替换为 1T 固态。对于刚买的新笔记本，昨晚上到货， 今天早上就将其拆机，将 512 G 固态升级为 1T ；顺便想看看是无风扇还是有风扇扇热。附上拆机图解。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image26.jpg" width="80%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>刚买的 <code>MateBoook x pro 2020</code> ，其配置是 <code>i5-10210U</code> + <code>16G</code> 内存 + <code>512G</code> SSD，本欲直接买 i7 十代的 CPU，但是做了一下功课，都是 U 开头，且 i7 十代只比 i5 十代 提升 10%，但是价格要贵💰 1000  ，而 固态的话直接购买 1T 的，相比 512G 的话，会额外消耗 💰 3000 元。<strong>属于那种可以买，但是没有必要</strong> 系列。 自己花钱买一个 1T 的 SSD （买的西部数据的，最后稳了）替换上即可，不贵还能动手看看。</p><br><p>也是目前拆机记录，到手 12 h 不到，就被拆开了。 </p><br><h2 id="开封："><a href="#开封：" class="headerlink" title="开封："></a>开封：</h2><p>先拆机保佑🙏： </p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image00.jpg" width="80%"/ loading="lazy"><br><h2 id="拆笔记本后盖："><a href="#拆笔记本后盖：" class="headerlink" title="拆笔记本后盖："></a>拆笔记本后盖：</h2><p>去下螺丝，使用撬片，然后发现中间区域一直很紧，扯不开，猜测只是双面胶粘住了，实际发现只有一个卡扣，所以可以放心大力出奇迹。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008231939.png" width="80%"/ loading="lazy"><br><p>拆开后盖，不可以此处直接拆卸螺丝，抽出 ssd， 应为它有黏胶贴在扇热上。看到一些视频有说，它是 2020 机型是无风扇、被动扇热，我不信，觉得应该作不了这么强，打开果然还是有风扇的，（本想做功课的，结果网上都是同样一篇的营销，浪费时间看广告，还都是错误的，机型和文章或者视频 都不符合，全靠标题 🙄🙄，氪）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008232236.png" width="80%"/ loading="lazy"><br><p>将扇热铜管拆开，可以看到内部结构。换上自购的 1T 固态（HUAWEI 官网写理论最大支持 1T。没有尝试 2T，也暂无需求，不过我猜测实际也是支持的）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008232442.png" width="80%"/ loading="lazy"><br><h2 id="扇热模块："><a href="#扇热模块：" class="headerlink" title="扇热模块："></a>扇热模块：</h2><p>对于  <code>MateBoook x pro 2020</code> 机型的扇热能力，在这里也放上图，实际体验，感觉还行。毕竟还有小风扇， <code>十代 CPU</code> 好像也是可以是智能调频的。应该也还行</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008233906.png" width="80%"/ loading="lazy"><br><h2 id="重装系统："><a href="#重装系统：" class="headerlink" title="重装系统："></a>重装系统：</h2><p>插上早已经准备好的 PE U盘，先不合盖，看能否顺利重装系统。HUAWEI 笔记本进入 bios 是 F2。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008233216.png" width="80%"/ loading="lazy"><br><p>要格式化一下新的 SSD，才能够被 PE 系统识别。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20201008233437.png" width="80%"/ loading="lazy"><br><h2 id="成功："><a href="#成功：" class="headerlink" title="成功："></a>成功：</h2><p>然后就是常见的创建分区表、分区、格式化、重装系统等步骤，就不再展开。成功，然后组装好后盖板。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image01.jpg" width="80%"/ loading="lazy"><br><h2 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h2><p>顺带出一个 原装 的 512G 的 SSD，用不着了，，价格合适，可以带走，联系方式博客左侧任选，其详细参数如下：512 GB 的 M2.0 接口， NVMe PCIe 协议的固态硬盘</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/Image0111.jpg" width="70%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拆机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高分屏、分辨率、DPI、PPI，及 Qt 处理高分屏</title>
      <link href="posts/359aeda5/"/>
      <url>posts/359aeda5/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　高分屏、<code>DPI</code>、<code>PPI</code>、屏幕分辨率的一些基本知识，以及使用 <code>Qt</code> 处理高分屏的一些方法集合归纳。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="屏幕分辨率和DPI-："><a href="#屏幕分辨率和DPI-：" class="headerlink" title="屏幕分辨率和DPI ："></a>屏幕分辨率和DPI ：</h2><p><strong>英寸：</strong> inch，复数：inches；缩写为in或″，或 <strong>英吋</strong>，简作 <strong>吋</strong>。1 英寸 = 2.54 厘米（cm）= 25.4 毫米（mm）。</p><p><strong>像素：</strong> pixel 或 pel，为影像显示的基本单位，可看作一个点或方块（不是距离单位）。每个像素有自己的RGB值，单位面积的像素越多，则表示其分辨率越高。</p><p><strong>PPI:</strong>   每英寸的像素个数（此处一英寸为对角线长度、且说的是像素密度）。由 <strong>分辨率</strong> 中X或Y轴的数字除以该轴的长度(英寸)，可得该轴的像素每英寸密度。</p><p><strong>DPI：</strong> 每英寸的点个数（此处一英寸为对角线长度、且说的是打印点密度）。</p><blockquote><p>PPI 通常使用于计算机屏幕，DPI 通常使用于打印机；但是这两者之间通常被混用，需要在具体的上下文去理解其含义。</p></blockquote><hr><p><strong>屏幕尺寸：</strong> 指的是一个电子设备的屏幕对角线的长度。</p><p><strong>分辨率：</strong> 是指宽度上和高度上最多能显示的物理像素点个数（说的是块屏幕的像素尺寸）。</p><p><strong>点距：</strong> 像素与像素之间的距离，点距和屏幕尺寸决定了分辨率大小</p><p><strong>设备像素(又称为物理像素)：</strong> 指设备能控制显示的最小物理单位，意指显示器上一个个的点。从屏幕在工厂生产出的那天起，它上面设备像素点就固定不变了，和屏幕尺寸大小有关，单位 pt。</p><p><strong>设备独立像素(也叫密度无关像素或逻辑像素)：</strong> 可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，这个点是没有固定大小的，越小越清晰，然后由相关系统转换为物理像素。</p><p><strong>css像素(也叫虚拟像素)：</strong> 指的是 CSS 样式代码中使用的逻辑像素，在 CSS 规范中，长度单位可以分为两类，绝对(absolute)单位以及相对(relative)单位。px 是一个相对单位，相对的是设备像素(device pixel)。</p><p><strong>设备像素比（devicePixelRatio）：</strong> 设备像素比 = 设备像素 / 设备独立像素。(在Retina屏的iphone上，DPR为2，1个css像素相当于2个物理像素)</p><ul><li>普通密度桌面显示屏的 devicePixelRatio=1</li><li>高密度桌面显示屏(Mac Retina)的 devicePixelRatio=2</li><li>主流手机显示屏的 devicePixelRatio=2或3</li></ul><hr><p><strong>视网膜显示屏  ==  Retina显示屏</strong></p><p><strong>高PPI(硬件) + HiDPI渲染(软件) = 更细腻的显示效果(retina)</strong></p><br><h2 id="Qt-的解决方案："><a href="#Qt-的解决方案：" class="headerlink" title="Qt 的解决方案："></a>Qt 的解决方案：</h2><p>整理中，等待更新，，，</p><br><p><strong>参考：</strong></p><ul><li> <a href="https://www.zhihu.com/question/40506180/answer/164301075">逻辑分辨率和物理分辨率到底是什么呀？ - PeterZ的回答 - 知乎</a></li><li> <a href="https://www.cnblogs.com/swarmbees/p/12004594.html">Qt之高DPI显示器(一) - 解决方案整理</a></li><li> <a href="https://www.jianshu.com/p/5cf1f9be264b">分辨率，PPi,DPI,DPR,物理像素，逻辑像素区别</a></li><li> <a href="https://juejin.im/entry/6844903520081018894">前端不止：Retina屏幕下两倍图</a></li><li> <a href="https://zhuanlan.zhihu.com/p/20684620">有关retina和HiDPI那点事</a></li><li> <a href="https://www.zhihu.com/question/20515881/answer/54799111">对于 Retina Display 有哪些误解？ - mysqto的回答 - 知乎</a></li><li> <a href="https://blog.csdn.net/hyongilfmmm/article/details/83233589">Qt 2D绘图(5)：绘制图像基础</a></li><li> <a href="https://blog.csdn.net/qq_40925722/article/details/88373436">C++ Qt 高分屏处理心得_超哥的博客-CSDN博客</a></li><li> <a href="https://blog.csdn.net/u014597198/article/details/86149979">(52条消息)Qt on Mac 开发之 Qt在Retina屏幕上的那些问题_沙师弟专栏-CSDN博客</a></li><li> <a href="https://blog.csdn.net/weixin_42132304/article/details/104667560">QT控件字体根据系统缩放比例(DPI)自适应_weixin_42132304的博客-CSDN博客</a></li><li> <a href="https://doc.qt.io/qt-5/highdpi.html">高DPI显示| Qt 5.15</a></li><li> <a href="https://fantab01.com/articles/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E3%80%81%E9%80%BB%E8%BE%91%E5%83%8F%E7%B4%A0%E4%B8%8Eppi%E3%80%81dpi/">物理像素、逻辑像素与PPI、DPI – fantab01的博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> DPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTK 每日自动更新其 API 文档</title>
      <link href="posts/e01ab44/"/>
      <url>posts/e01ab44/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 记录一下如何更新 <code>DTK</code> 的 <code>API</code> 的 <a href="https://linuxdeepin.github.io/dtk/">文档手册</a> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="楔子："><a href="#楔子：" class="headerlink" title="楔子："></a>楔子：</h2><p>时间流逝、却总是询问相同的问题：<code>DTK</code> 有没有帮助手册文档？ 于是就顺手扔了一个其 <code>API</code> 的<a href="https://linuxdeepin.github.io/dtk/">网址</a>；但是 7/7 那天(2020 year)，手动更新了一次（恩，它上上次更新停留在2019-06）。</p><br><h2 id="记录："><a href="#记录：" class="headerlink" title="记录："></a>记录：</h2><p>要生成 DTK 的 API 手册， 下载 <a href="https://github.com/linuxdeepin/dtk">dtk</a> 的 <strong>master</strong> 分支源码， 然后整了年久失修的 <a href="https://github.com/linuxdeepin/dtk/blob/master/.gitmodules">.gitmodules</a> 和  <a href="https://github.com/linuxdeepin/dtk/blob/master/Makefile">Makefile</a> 文件。改写后的脚本，会自动重新拉一下 <code>dtkwidget</code>、<code>dtkcore</code>、<code>dtkgui</code>、<code>qt5integration</code> 源码，通过 <code>Dexygen</code> 生成一份 HTML 网页， 然后推送到 <strong>gh-pages</strong> 分支即可；</p><br><h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><p><strong>现在 <code>DTK</code> 的 <code>API</code> 手册已经设置为每天自动更新一遍了；</strong>  当然，你也可以自己下载 <a href="https://github.com/linuxdeepin/dtk">dtk</a>  仓库 <code>master</code> 源码， 执 <code>make</code> 和 <code>push</code> 即可。<code>Dexygen</code> 生成的 <code>HTML</code> 离线文件都在 docs 文件夹下。<br><br></p><p><strong><a href="https://linuxdeepin.github.io/dtk/">API 接口 文档 </a></strong></p><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200923165951.png" width="100%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Doxygen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> DTK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DTK 基础教程：自定义控件规范</title>
      <link href="posts/525116e/"/>
      <url>posts/525116e/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>DTK</code> 基础知识，尤其使用 <code>DTK</code> 开发应用软件或者参与维护 <code>DTK</code> 库，此都是一个良好的入门级别的知识；且本文档着重讲解 <strong>“DTK自定义控件”</strong> 的规范。 此处为一个搬运，为了易于搜索和自己做一个记录，收录进自己目录中。</p><blockquote><p>给 DTK 库加了一个基础知识性的 <a href="https://github.com/linuxdeepin/qt5integration/wiki/DTK-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B">WiKi</a>，里面有一些 DTK 绘画基础知识、绘画原理流程、自定义控件规范、图标的使用。 其由 <a href="https://github.com/zccrs">zccrs</a> 所编写。</p></blockquote><br><span id="more"></span><p>[TOC]</p><br><h2 id="QStyle"><a href="#QStyle" class="headerlink" title="QStyle"></a>QStyle</h2><p>阅读此文档需要点此先熟悉以下类：</p><ul><li><a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a></li><li><a href="https://doc.qt.io/qt-5/qstyleoption.html">QStyleOption</a></li><li><a href="https://doc.qt.io/qt-5/qstylepainter.html">QStylePainter</a></li><li><a href="https://doc.qt.io/qt-5/qpalette.html">QPalette</a></li></ul><br><h2 id="DTK-Style"><a href="#DTK-Style" class="headerlink" title="DTK Style"></a>DTK Style</h2><p>DTK Style插件的实现可以划分为两部分：</p><ul><li>Qt 库的内置控件</li><li>DTK 自定义控件</li></ul><p>本文档着重讲解“DTK自定义控件”的规范。DTK Widget 模块跟控件样式相关的主要有三个类：</p><ul><li><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyle.h">DStyle</a></li><li><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyleoption.h">DStyleOption</a></li><li><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyleoption.h">DPalette</a></li></ul><br><h5 id="DStyle"><a href="#DStyle" class="headerlink" title="DStyle"></a>DStyle</h5><p>DStyle 继承于 QCommonStyle，在基类（QStyle）的基础上添加了一些枚举值以及绘制、加工类的函数。Qt 所有内置控件均在 paintEvent 中使用 QStyle 中提供的各种 drawXXX 接口进行绘制，另外，QStyle 中定义了大量的枚举类型，如 QStyle::PrimitiveElement、QStyle::ControlElement、QStyle::SubControl 等，这些枚举类型用于控件的绘制、布局、标志位等抽象接口的定义中。QStyle 满足了 Qt 原生控件自定义风格的需求，同理，DStyle 需要在此基础上满足 DTK 控件自定义风格的需求。</p><br><h5 id="DStyleOption"><a href="#DStyleOption" class="headerlink" title="DStyleOption"></a>DStyleOption</h5><p>用于扩展 QStyleOption。如 DStyleOptionButton 需要对 QStyleOptionButton 就行扩展，它需要同时继承 DStyleOption 和 QStyleOptionButton。</p><br><h5 id="DPalette"><a href="#DPalette" class="headerlink" title="DPalette"></a>DPalette</h5><p>控件的行为虽然不同，但是它们的配色有很多共同的地方，在 Qt 的 GUI 模块中，QPalette 类负责管理所有通用型颜色。每一个 QWidget 对象都有对应的 QPalette，当没有使用 QWidget::setPalette 指定控件使用的调色板时，其将跟随 QApplicatioin::palette。</p><p>QPalette 中定义了两个枚举类型：</p><ul><li>ColorGroup 颜色的分组，包含：Disabled、Active（Normal）、Inactive 三个值</li><li>ColorRole  颜色的类型，包含：Background、Base、Foreground 等一系列值</li></ul><p>我们可以把 ColorRole 定义的颜色理解为 c++ 中的基本数据类型（int double等），则控件的设计类似于 c++ 类的设计，一个是封装基本数据类型定义一个类，另一个则是通过对基础颜色的组合创建一个控件。</p><p>QPalette 包含十几种常用的颜色，能满足 Qt 所有内置控件的绘制需要。但是 DTK 控件的设计在配色上更加的丰富，QPalette::ColorRole 中定义的基本颜色无法满足需求，因此在 dtkwidget 库中定义了 DPalette 类，并且添加了 DPalette::ColorType 的枚举类型，用于为 DTK 控件添加基本色的定义。<br><br></p><h2 id="QStyle-和-QPalette-的关系"><a href="#QStyle-和-QPalette-的关系" class="headerlink" title="QStyle 和 QPalette 的关系"></a>QStyle 和 QPalette 的关系</h2><p>QApplication 会在初始化阶段（当使用 QApplication::setStyle 后也会执行以下步骤）调用 QStyle::standardPalette 获取一个标准的 QPalette 对象，这个对象在各个控件的 paintEvent 中被初始化给 QStyleOption （用于存储绘制控件所需要的所有数据），之后在 QStyle 绘制控件时则从 QStyleOption::palette 中获取定义的各种颜色值。对于 QApplication、QStyleOptin、QWidget 而言，它们只识别 QPalette，因此，DPalette 的初始化目前是放置在 QStyle::polish(QApplication*) 中，由 DPalette 自己管理 QApplication 和 QWidget 对象所对应的 DPalette 数据，在 style 插件的实现中则通过 DPalette::get 静态函数获取调色板对象。 </p><br><h2 id="DTK-控件设计"><a href="#DTK-控件设计" class="headerlink" title="DTK 控件设计"></a>DTK 控件设计</h2><p>在 DDEV20 的设计中，有以下几个特点。首先先看一张图</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200911155018.png" width="100%"/ loading="lazy"><p>每个控件分为五个状态：</p><ul><li>Normal</li><li>Hover</li><li>Pressed</li><li>Disabled</li><li>Focus</li></ul><p>于此相关的是，主窗口层面还分为 Active 和 Inactive 状态，也就是窗口是否被激活的状态。窗口的状态可以和控件状态相互叠加，因此，叠加后的控件状态共有十种组合。不过，在控件中其实不用过于关心窗口的状态，窗口 Active 时控件都是默认样式，Inactive 时则把所有颜色的不透明度降低 40%。同理 Disabled 状态则把所有颜色的不透明度降低 60%。因此，除去这两个特殊状态后，控件中还剩余 Normal Hover Pressed Focus 四个状态需要关心。</p><br><h5 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h5><p>控件默认状态，使用 DPalette 的 Normal 组中各个 ColorRole/ColorType 的定义即可。</p><h4 id="Hover"><a href="#Hover" class="headerlink" title="Hover"></a>Hover</h4><p>控件的 hover 状态可以由 normal 状态经过颜色变换（调色：如提供颜色亮度等），可使用 DStyle::generatedBrush 获取加工后的颜色值。DStyle 定义了 StyleState 用于指定需要加工的目标颜色类型，默认 Normal 可以不进行任何加工。</p><h4 id="Pressed"><a href="#Pressed" class="headerlink" title="Pressed"></a>Pressed</h4><p>和 Hover 状态一样，也是由 normal 状态经过颜色变换得到。</p><br><h2 id="代码流程描述"><a href="#代码流程描述" class="headerlink" title="代码流程描述"></a>代码流程描述</h2><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200911155413.png" width="80%"/ loading="lazy"><br><h2 id="字号使用规范"><a href="#字号使用规范" class="headerlink" title="字号使用规范"></a>字号使用规范</h2><p><a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dstyleoption.h#L156">DFontManager</a></p><p>字号分为十个等级，T1-T10，默认为 T6 级别，当系统中字号大小改变时，所有级别基于默认级别进行同值增减。例如，T6 当前对应的字号为 16px，在控制中心将字号调整为 20px 后，T1-T10 的字号都将增加 4px。所有的控件设计中均不可直接指定字号大小，如果需要对特定的 QWidget 对象设置字号等级，可以使用 DFontSizeManager::bind 接口绑定到对应的级别。</p><br><h2 id="如何实现一个全新的控件"><a href="#如何实现一个全新的控件" class="headerlink" title="如何实现一个全新的控件"></a>如何实现一个全新的控件</h2><p>首先为此控件添加需要的枚举值，如 <a href="https://gitlab.deepin.io/dde-v20/dtkwidget/blob/master/src/widgets/dsuggestbutton.h">DSuggestButton</a>，QStyle 中已经包含了 QStyle::CE_PushButton 的定义，这部分不用再进行扩展，查看 QStyleOptionButton，它在 ButtonFeatures 中定义了按钮的一些特性，因此我们需要继承 QStyleOptionButton 进行扩展。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DStyleOptionButton</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QStyleOptionButton</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">DStyleOption</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">enum</span> <span class="token class-name">ButtonFeature</span> <span class="token punctuation">&#123;</span>        SuggestButton <span class="token operator">=</span> <span class="token punctuation">(</span>CommandLinkButton <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        WarningButton <span class="token operator">=</span> <span class="token punctuation">(</span>SuggestButton <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是 DStyleOptionButton 的代码实现，添加了两个枚举值 SuggestButton、WarningButton。在 DSuggestButton 的 paintEvent 中将使用这些新加的值绘制自定义的按钮。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">DSuggestButton</span><span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    QStylePainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DStyleOptionButton option<span class="token punctuation">;</span>    option<span class="token punctuation">.</span>features <span class="token operator">|=</span> <span class="token class-name">DStyleOptionButton</span><span class="token operator">::</span><span class="token function">ButtonFeatures</span><span class="token punctuation">(</span>DStyleOptionButton<span class="token operator">::</span>SuggestButton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initStyleOption</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    option<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>CE_PushButton<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终，对 QStylePainter::drawControl 的调用将变为对 QStyle::drawControl 的调用。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">XXX</span><span class="token operator">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CE_PushButton<span class="token operator">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        QStyleOptionButton <span class="token operator">*</span>opt_button <span class="token operator">=</span> static_case<span class="token operator">&lt;</span>QStyleOptionButton<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>opt_button<span class="token operator">-></span>features<span class="token punctuation">.</span><span class="token function">testFlag</span><span class="token punctuation">(</span>DStyleOptionButton<span class="token operator">::</span>SuggestButton<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// draw suggest button</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样即完成了对 DSuggestButton 的绘制。</p><br><h2 id="如何自绘控件"><a href="#如何自绘控件" class="headerlink" title="如何自绘控件"></a>如何自绘控件</h2><p>有些控件在 Qt 以及 DTK 库中均不存在，在应用程序的开发中需要自己绘制实现，如控制中心个性化模块中的颜色选择控件：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200911155239.png" width="70%"/ loading="lazy"><p>paintEvent 代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QPainter <span class="token function">pa</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QStyleOption opt<span class="token punctuation">;</span>    opt<span class="token punctuation">.</span><span class="token function">initFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> borderWidth <span class="token operator">=</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token operator">::</span>PM_FocusBorderWidth<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> borderSpacing <span class="token operator">=</span> <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token operator">::</span>PM_FocusBorderSpacing<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> QMargins <span class="token function">margins</span><span class="token punctuation">(</span>borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">,</span> borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">,</span> borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">,</span> borderWidth <span class="token operator">+</span> borderSpacing<span class="token punctuation">)</span><span class="token punctuation">;</span>        pa<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">marginRemoved</span><span class="token punctuation">(</span>margins<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充颜色背景</span>    pa<span class="token punctuation">.</span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">QPen</span><span class="token punctuation">(</span>borderWidth<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>palette<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置边框的宽度和颜色</span>    pa<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制选中的边框</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从例子中可以看出，所有和颜色相关的数据均从 QPalette 中读取，所有和大小相关的数据均从 style 对应的接口中读取。</p><br><h2 id="如何自定义控件的一些参数"><a href="#如何自定义控件的一些参数" class="headerlink" title="如何自定义控件的一些参数"></a>如何自定义控件的一些参数</h2><p>如更改文本颜色：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLabel <span class="token function">label</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPalette pa <span class="token operator">=</span> label<span class="token punctuation">.</span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pa<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Text<span class="token punctuation">,</span> Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>label<span class="token punctuation">.</span><span class="token function">setPalette</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="如何添加图标"><a href="#如何添加图标" class="headerlink" title="如何添加图标"></a>如何添加图标</h2><p>一个完整的应用程序主题需要关注的不仅仅是控件的样式，有时，程序中对图标的使用也需要区分深色还是浅色。在 Qt 库中，查找和使用图标都可以通过 QIcon 完成，为了方便图标自动跟随程序主题，DDE 桌面环境在 Qt platform theme 主题插件中添加了一个内置的图标主题，路径为：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]&quot;</code>，其中，<code>light</code>和<code>dark</code>子目录为可选，它们分别为应用程序提供亮色和暗色图标的存储，如果图标本身为通用型（在任何主题下都可使用），则图标文件直接放置到<code>&quot;qrc:/icons/deepin/builtin&quot;</code>目录即可。</p><p>图标分为三种类型：</p><ul><li>TextType 纯文本性图标，其颜色会跟随画笔的前景色变化（和文字颜色保持一致）。文件放置路径：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]/texts&quot;</code></li><li>ActionType 动作型图标，其颜色会在其 Mode 改变时跟随画笔前景色（Normal模式图标颜色不会发生变化）。文件放置路径：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]/actions&quot;</code></li><li>IconType 图标型图标，其颜色在任何模式下都不会变化。文件放置路径：<code>&quot;qrc:/icons/deepin/builtin/[light/dark]/icons&quot;</code></li></ul><p>图标名称规范：</p><p>名称前面需要添加能标示当前程序的前缀，例如<code>控制中心</code>的图标文件 dcc_xxx_32px.svg（设计大小为32）每一个都会有 “dcc_” 的前缀，其后跟图标s名称（图标名称单词间使用 “_” 符号链接，且全部使用小写字母），再接着，”_32px” 为图标大小标识，标识此图标默认大小，最后的 “.svg” 为图标文件后缀名。</p><p>后记：</p><p>qrc 表示是一个 Qt 资源文件，此文件需要应用程序中自行创建。”/icons/deepin/builtin” 为路径的固定前缀，随后的目录则为三种类型主题对应的目录。”actions” 为图标的类型目录，目前支持 “texts”、”actions” 和 “icons” 三种类型，”texts” 和 “actions” 目录用于放置一些工具性图标（一般都比较小，且颜色单一），”icons” 则用于放置一些颜色丰富的图标。</p><p>添加图标文件后，在程序中只需要使用 QIcon::fromTheme(“dcc_xxx”) 即可获取当前主题对应的图标对象，”dcc_xxx” 为图标文件名称，<code>不包含图标大小标识和文件后缀名！</code></p><br><h4 id="此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！"><a href="#此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！" class="headerlink" title="此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！"></a>此规范仅用于约定应用程序中图标的存储和使用，其它图片资源不可使用此规范！</h4><h4 id="icon-demo-zip-示例程序"><a href="#icon-demo-zip-示例程序" class="headerlink" title="icon_demo.zip #示例程序"></a><a href="uploads/407ea902dae4be5564567aae12e25d0d/icon_demo.zip">icon_demo.zip</a> #示例程序</h4><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> DTK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对 GNU/Linux 介绍、ArchLinux社区氛围、DDE移植Arch流程</title>
      <link href="posts/78cd25f3/"/>
      <url>posts/78cd25f3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言简述："><a href="#前言简述：" class="headerlink" title="前言简述："></a>前言简述：</h1><p><strong>简述：</strong> 本文普及一些 <code>GNU / Linux</code> 的常见名词和背后的背后故事；简单介绍 <code>ArchLinux</code> 所处的地位和社区氛围，以及为备受程序员推崇的原因；和 <code>DDE</code> 是如何移植其他发行版（eg：Arch）上的。</p><p><strong>前半段</strong> 主要涉及是 GNU / Linux 的历史，解释一些十分常见的但少有仔细思考缩写单词含义，和其背后的历史小故事，普及一些开源只是和理念，以及简单阐述为何很多人要选择开源活动？做这件事情的动机和意义是什么？以及能够收获到什么？</p><p><strong>中间半段</strong> 主要介绍 ArchLinux 这个具有特色的发行版以及其社区氛围；</p><p><strong>最后一段</strong> 主要介绍 DDE 是如何移植到 ArchLinux上的，并且举例两例子。</p><p>本文字数比较多，建议按照拆开的三段脉络来看，或可以只关注你感兴趣的一部分：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200902121036.png" width="60%"/ loading="lazy"><br><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 id="对于-GNU-Linux-的一点理解："><a href="#对于-GNU-Linux-的一点理解：" class="headerlink" title="对于 GNU/Linux 的一点理解："></a>对于 GNU/Linux 的一点理解：</h1><h2 id="对于-GNU-Linux-的认知："><a href="#对于-GNU-Linux-的认知：" class="headerlink" title="对于 GNU/Linux 的认知："></a>对于 GNU/Linux 的认知：</h2><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901100559.png" width="20%"/ loading="lazy"><p>​        这个 <code>GNU / Linux</code> 一看很容易，二看会深思。这里附上个人看法，或续大家看法不一样，欢迎探讨思考。</p><p>先看对于下面的单词的理解「来自 GNU 官网介绍」：</p><p><strong>GNU工程：</strong> 是要开发<em>一个完全自由的类似Unix的系统</em> ：GNU （GNU’s Not Unix! 的首字母递归缩写—这是对Unix的技术思想致敬的一种方法，同 时表达GNU有所不同）。其基本目标和一贯目标是提供一个和Unix兼容的100% <a href="http://www.gnu.org/philosophy/free-sw.html">自由软件</a>的操作系统。</p><p><strong>GNU操作系统：</strong> 是一款使用 <a href="http://www.gnu.org/software/hurd/hurd.html">Hurd</a> 内核，且同时附带有很多自由软件包的<strong>操作系统</strong> 。但 Hurd 缺少一些重要功能，因此未被广泛使用； GNU 软件包包括以用户为导向的应用程序、实用程序、工具、应用库、甚至游戏，一个操作系统能够为其用户提供的所有程序。比较出名的有 C 编译器 gcc、文本编辑器、图形库等。<strong>其所有提供的软件都是自由软件。</strong></p><p><strong>Linux(内核)：</strong> 是由 Linus Torvalds 完成的 Linux <strong>系统内核</strong>。</p><p><strong>GNU/Linux 操作系统：</strong> 等价于一个被改动的 GNU 系统(未使用 Hurd 内核) + Linux内核。</p><blockquote><p>现在最流行的 Linux 发行版，实际上是使用的是一个<strong>“被改动的 GNU 系统(未使用 Hurd 内核) + Linux内核“</strong> ，然鹅，由于许多用户的混淆，现在此发行版本被简称为 <strong>Linux 操作系统</strong> ，更简的称呼版本为 <strong>Linux</strong> ；但是其实名称应该是 <strong>GNU/Linux 操作系统</strong>。</p></blockquote><br><h2 id="自由软件："><a href="#自由软件：" class="headerlink" title="自由软件："></a>自由软件：</h2><p><a href="http://www.gnu.org/philosophy/free-sw.html">自由软件</a>意味着<strong>用户可以自由地运行，拷贝，分发，学习，修改并改进该软件</strong>。  只和自由有关，和价格无关。“自由软件”尊重用户的自由，并且尊重整个社区。</p><p>实际上，自由软件的官方定义一直在微调，可以自行查看<a href="http://www.gnu.org/philosophy/free-sw.html#History">历史修改</a>；</p><blockquote><p><strong>如果一个软件是自由软件，那么它必须为用户提供以下四项基本自由：</strong></p></blockquote><ul><li>自由度0：无论用户出于何种目的，必须可以按照用户意愿，自由地运行该软件。</li><li>自由度1：用户可以自由地学习并修改该软件，以此来帮助用户完成用户自己的计算。作为前提，用户必须可以访问到该软件的源代码。</li><li>自由度2：用户可以自由地分发该软件的拷贝，这样就可以助人。</li><li>自由度3：用户可以自由地分发该软件修改后的拷贝。借此，用户可以把改进后的软件分享给整个社区令他人也从中受益。作为前提，用户必须可以访问到该软件的源代码。</li></ul><br><h2 id="自由与非自由软件的分类："><a href="#自由与非自由软件的分类：" class="headerlink" title="自由与非自由软件的分类："></a>自由与非自由软件的分类：</h2><p>自由软件就表示免费软件吗？可以不负责任的白嫖吗？使用它们应该付出什么代价不？ <strong>自由软件（Free Software）不等价于 免费软件（Freeware）；</strong> 但是通常来说，自由软件在使用的同时，一定会获取对应的源码，且大部分软件都是免费的，但是也能做到有偿使用。广泛的来说，这里的软件都是可以免费白嫖的，人们通常也不需要付出代价；对应使用这些软件的时候，这个软件的开发人员们也不会承担任何的责任（设想一下，一个上亿的合同签订，使用某开源软件 / 自由软件来书写此文档，突然崩溃，照成合同签订延期，啊，，，那这，，，想要扯皮，，，难道谁能够保证自己软件不出 bug ？）</p><p><strong>自由软件：</strong> 简单理解，大部分都是免费软件，但是也可以有偿收费，但是必须提供源代码。</p><p><strong>非自由软件：</strong> 简单理解，该软件的使用、分发、或者修改，都是被禁止的，或者说需要获取授权许可才可以这些操作。</p><p><strong>开源软件：</strong> 通常被表示为自由软件一类软件，但实际上两者差别很大，如只有极少的开源软件不是自由软件。</p><p><strong>专有软件（私有软件）：</strong> 简单理解，是非自由软件的同义词，但是其中一些软件是被允许非商业性的修改和再分发。</p><p><strong>免费软件：</strong> 没有官方的明确定义，但它通常被用于指代那些允许再分发但禁止修改（并且其源代码不可获得）的软件包。其不等于自由软件。</p><p><strong>共享软件：</strong> 若是想要使用其软件的副本，只需支付少许的费用就可以获取副本使用许可，且大多数都是源码不可获取。</p><p><strong>私人软件：</strong> 为某一群指定用户开发的软件。用户保存和使用他们，且不会以源代码和二进制方式对公众发布。</p><p><strong>商业软件：</strong> 私人软件不等价与商业软件。大部分商业软件都是专有软件，但是也有商业化的自由软件，也有非商业化的专有软件。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901132527.png" width="50%"/ loading="lazy"><p>上面只是我们比较关心和经常看到的一些软件的说法和定义，实际上，还有很多其他种类的软件：公有领域软件、Copyleft 软件、非 copyleft 的自由软件、使用包容型许可证的软件、使用 GPL 许可的软件、GNU 操作系统、GNU 程序、GNU 软件、FSF 拥有版权的 GNU 软件等，关于他们详细的，可以参考 <a href="http://www.gnu.org/philosophy/categories.html">自由与非自由软件的分类</a>。</p><br><h2 id="GNU-Linux-个人感想："><a href="#GNU-Linux-个人感想：" class="headerlink" title="GNU / Linux 个人感想："></a>GNU / Linux 个人感想：</h2><p>对于前辈们从事于 GNU / Linux 开发，为我们提供开放的源码，可以使得我们自由的、免费的和方便的学习软件编程、和可以了解 Linux 操作系统的构建们和运行原理。对于想要彻替代闭源软件的，感觉他们就是用爱发电，并且还一直发电了很多年，靠着自己的兴趣支撑，邀请着其他志同道合的开源者们，一起做着斗争，希望有一天，所有人所有方面和学科，都能够使用自由操作系统和自由软件。个人感觉这是一个崇高且仍重而道远的理想；<strong>他们有着自己的原则、想法、不为金钱为驱动力，只是去用实际行动，为了宣扬自己的理念和去实践开源文化和社区发展。做这样一件事，感觉他们纯粹且自由的人，是真正热爱生活和热爱生命、热爱贡献的、做着纯粹的兴趣的事情。</strong> 谁又不喜欢做一些自己想做的事情呢？何况其意义深远～～</p><br><hr><br><h1 id="对于-Arch-Linux-的一点理解："><a href="#对于-Arch-Linux-的一点理解：" class="headerlink" title="对于 Arch Linux 的一点理解："></a>对于 Arch Linux 的一点理解：</h1><h2 id="楔子："><a href="#楔子：" class="headerlink" title="楔子："></a>楔子：</h2><p>​        <strong>GNU / Linux 发行版、由于开源理念、任何人都可以按照自己想法来修改</strong>，加上时间的积累，所以产生了诸多的发行版~；他们有着各自的理念，常见的一种表现形式为，各自为战，而在根本问题上，又能保持协调统一，基调来看，属于百花争鸣；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901170413.png" width="100%"/ loading="lazy"><br><h2 id="ArchLinux-是什么？"><a href="#ArchLinux-是什么？" class="headerlink" title="ArchLinux 是什么？"></a>ArchLinux 是什么？</h2><p><code>ArchLinux</code> 是<strong>一款独立的 Linux 发行版</strong> ，既不是继承于 Debian 系，也不是继承于 Red Hat 系、也没有继承于Slackware 系。想不到吧？和我们比较熟悉的 Ubuntu、Fedora、CentOS、UOS、Deepin 没有上下游关系。（当听到有人问它是继承于哪一个？当时我很震惊，，，Arch，，，）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901151814.png" width="20%"/ loading="lazy"><p>在下图来看，它是处于箭头所在位置，下方的的是它的下游：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200901163234.png" width="90%"/ loading="lazy"><br><h2 id="ArchLinux-历史："><a href="#ArchLinux-历史：" class="headerlink" title="ArchLinux 历史："></a>ArchLinux 历史：</h2><p><strong>早期：</strong> 加拿大程序员和吉他师 Judd Vinet 从 2001 年早期开始开发 Arch Linux，并在2002年3月11日正式发行0.1版。</p><p><strong>中期：</strong> <a href="https://wiki.archlinux.org/index.php/File:Archstats2002-2011.png">这个</a>图表见证了Arch Linux 社区的稳步扩大. 而且从早期开始，Arch 就树立起了 <a href="http://www.osnews.com/story/4827">开放、友好和社区互助的形象</a>。</p><p><strong>ArchWiki 的诞生：</strong> 2005年7月8日，用 MediaWiki 搭建的 ArchWiki <a href="https://wiki.archlinux.org/index.php/ArchWiki:About_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">开始运行</a>。</p><p><strong>A. Griffin 时代：</strong> 2007下半年，Judd Vinet 退出了Arch的开发，并<a href="https://bbs.archlinux.org/viewtopic.php?id=38024">把统治权交给美国程序员 Aaron Griffin</a>, 也就是 Phrakture，目前他依然是 Arch 开发者。</p><p><strong>Arch 安装脚本：</strong> 2012 年 7 月的 Arch Linux 安装介质中 <a href="https://www.archlinux.org/news/install-media-20120715-released/">弃用了</a> 基于菜单的 <em>Arch 安装框架</em>(AIF)，改为使用<em>Arch 安装脚本</em> (<a href="https://www.archlinux.org/packages/?name=arch-install-scripts">arch-install-scripts</a>)。</p><p><strong>Systemd 时代：</strong> 2012 到 2013 年间 Arch 用 Systemd 替换了 System V init </p><p><strong>抛弃 i686 支持：</strong> 鉴于在开发者和社区中 i686 架构的使用程度逐渐式微，<a href="https://www.archlinux.org/news/the-end-of-i686-support/">i686支持已经于2017年11月底被抛弃</a> 。</p><p><strong>项目的领导角色和选举：</strong> 2020 年初，Arch 开始用新的流程选择未来的领袖，详情记载在 <a href="https://wiki.archlinux.org/index.php/DeveloperWiki:Project_Leader">DeveloperWiki:Project Leader</a>。Aaron Griffin 决定不再担任项目领导，Arch 通过选举方式正式确认 Levente Polyak 为新的领导，结果记录在 <a href="https://www.archlinux.org/news/the-future-of-the-arch-linux-project-leader/">这里</a>。</p><br><h2 id="ArchLinux-理念："><a href="#ArchLinux-理念：" class="headerlink" title="ArchLinux 理念："></a>ArchLinux 理念：</h2><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200902101549.png" width="60%"/ loading="lazy"><p><strong>Keep It Simple, Stupid （保持简单，且一目了然）</strong>；</p><h3 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h3><p>Arch Linux 将简洁定义为：<strong>避免任何不必要的添加、修改和复杂增加</strong>。它提供的软件都来自原始开发者(<a href="https://en.wikipedia.org/wiki/Upstream_(software_development)">上游</a>)，仅进行和发行版(下游)相关的最小修改。</p><ul><li>不包含上游不愿意接受的补丁。绝大部分 Arch 下游补丁都已经被上游接受，下一个正式版本里会包含。</li><li>配置文件也是来自上游，仅包含发行版必须的调整，比如特殊的文件系统路径变动。Arch 不会在安装一个软件包后就自动启动服务。</li><li>软件包通常都和一个上游项目直接对应。仅在极少数情况下才会拆分软件包。</li><li>官方不支持图形化配置界面，建议用户使用命令行或文本编辑器修改设置。</li></ul><h3 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h3><p>Arch尽全力保持软件处于最新的稳定版本，只要不出现系统软件包破损，都尽量用最新版本。Arch采用<a href="https://en.wikipedia.org/wiki/Rolling_release">滚动升级</a>策略，安装之后可以持续升级。</p><p>Arch向<a href="https://wiki.archlinux.org/index.php/GNU_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">GNU</a>/Linux用户提供了许多新特性，包括<a href="https://wiki.archlinux.org/index.php/Systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">systemd</a>初始化系统、现代的<a href="https://wiki.archlinux.org/index.php/File_systems_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">文件系统</a>、LVM2/EVMS、软件磁盘阵列（软RAID）、udev支持、initcpio（附带mkinitcpio）以及最新的内核。</p><h3 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h3><p>Arch 注重实用性，避免意识形态之争。最终的设计决策都是由开发者的共识决定。开发者依赖基于事实的技术分析和讨论，避免政治因素，不会被流行观点左右。</p><p>Arch Linux 的仓库中包含大量的软件包和编译脚本。用户可以按照需要进行自由选择。仓库中既提供了开源、自由的软件，也提供了闭源软件。<strong>实用性大于意识形态</strong>.</p><h3 id="以用户为中心"><a href="#以用户为中心" class="headerlink" title="以用户为中心"></a>以用户为中心</h3><p>许多 Linux 发行版都试图变得更“用户友好”，Arch Linux 则一直是，永远会是“以用户为中心”。此发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。Arch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。</p><p>Arch 鼓励每一个用户 <a href="https://wiki.archlinux.org/index.php/Getting_involved_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">参与</a> 和贡献，报告和帮助修复 <a href="https://bugs.archlinux.org/">bugs</a>，提供软件包补丁和参加核心 <a href="https://projects.archlinux.org/">项目</a>：Arch 开发者都是志愿者，通过持续的贡献成为团队的一员。<em>Archers</em> 可以自行贡献软件包到 <a href="https://wiki.archlinux.org/index.php/Arch_User_Repository_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">Arch 用户仓库</a>, 提升 <a href="https://wiki.archlinux.org/index.php/Main_page_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">ArchWiki 文档质量</a>, 在 <a href="https://bbs.archlinux.org/">论坛</a>, <a href="https://mailman.archlinux.org/mailman/listinfo/">邮件列表</a>, <a href="https://wiki.archlinux.org/index.php/IRC_channels_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">IRC</a> 中给其它用户提供技术支持. Arch Linux 是全球很多用户的选择，已经有很多<a href="https://wiki.archlinux.org/index.php/International_communities">国际社区</a>提供帮助和文档翻译。</p><br><h2 id="ArchLinux-用户："><a href="#ArchLinux-用户：" class="headerlink" title="ArchLinux 用户："></a>ArchLinux 用户：</h2><p>​        由于各发行版的理念不一样，而意识决定行为，使得最终的产物和受到欢迎程度也大不相同；与商业版对应的社区版本、通常都会建立自己的 <strong>社区</strong>，会在普通用户、爱好者、贡献者和开发者之间，构建一个沟通桥梁。</p><p>​        对于各个社区版本的 Linux 来说；一种是面对普通小白用户的（大部分的 Debian系 发行版）；另外一种是面对有一定编程基础的爱好者（Red Hat系和一些其它包管理系）；两者通常会给出不一样水平层次反馈，更加惊喜的是，后者有时候还是直接帮助我们将 bug 修复好～，为发行版添砖加瓦。而这大多数是由与单纯的爱好和热情，没有利益所得，纯粹的用爱发电～；<strong>通常来说，Archlinux 的用户群体主要是有一定基础的编程的贡献者</strong>， 也有一部分被安利过来的尝鲜小白~</p><p>​        其中 <code>ArchLinux</code> 发行版，凭借优秀和独特的理念，吸引了很多的爱好者（且对贡献者极其友好）。因为其是完全由用户和社区来决定的发行版中，且整个系统极其精简、采用滚动更新， 这对于爱好开源文化的程序员来说， 是有着比较崇高的地位，且其有着<del>良好</del>极其优秀的和多语言的 <a href="https://wiki.archlinux.org/index.php/Arch_Linux">WiKi</a> 文档。通常其文章属于短小精悍，可以让我们更加自由的理解计算机底层的原理。</p><br><h2 id="ArchLinux-群组："><a href="#ArchLinux-群组：" class="headerlink" title="ArchLinux 群组："></a>ArchLinux 群组：</h2><p>ArchLinux 发行版，其走向完全又社区来确定，在用户群体中，挑选出受信任用户（TU），来进行一些帮助管理，和决定，对于有争议之处，就采取集体线上开会，然后投票来通过某一项事物的决定；社区的构成，部分由如下构成：</p><ul><li><p><a href="https://bbs.archlinux.org/">Arch Linux 官方论坛</a> ： 「官方、英文」论坛交流区域</p></li><li><p><a href="http://bbs.archlinuxcn.org/">Arch Linux 中文论坛</a> ： 「非官方、中文」论坛交流区域，不仅是新手之地，还可遇到十年多的老 Arch 热心用户帮</p></li><li><p><a href="irc://freenode/archlinux-cn">中文 IRC 频道 #archlinux-cn</a> ： 一个古老的全球性的匿名聊天室</p></li><li><p><a href="https://wiki.archlinux.org/">ArchLinux 的WiKi</a> ： Arch 的百科全书，通常更新及时，且支持常见语言版本，必备工具（<a href="https://wiki.archlinux.org/index.php/ArchWiki:About_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%97%A9%E6%9C%9F%E5%8E%86%E5%8F%B2">wiki介绍</a>）。</p></li><li><p><a href="https://aur.archlinux.org/">ArchLinux 的 Aur 仓库</a> ： AUR 包是用户自己产生的内容，然后上传包的仓库，其中极大的丰富国内一些常用 win 软件的移植，但记得使用它们造成的后果得自负，没有任何人需要为其负责~</p></li><li><p><a href="https://t.me/archlinuxcn_group">#archlinux-cn</a> ： Tg 的 Arch 群组，只聊 Arch 的问题和解决方案「中文」</p></li><li><p><a href="https://t.me/archlinuxcn">Arch Linux</a> ： Tg 的频道，跟进 Arch Linux 日常踩坑预警，翻译官方新闻， testing 测试预警等</p></li><li><p><a href="https://t.me/archlinuxcn_offtopic">#archlinux-cn-offtopic</a> ：Tg 的 Arch Linux 相关人员的日常讨论群</p></li><li><p><a href="https://fars.ee/~readme.html">其他更多群组</a> ： 其他更多群组，和交流群的指引</p></li></ul><br><h2 id="ArchLinux-社区文化："><a href="#ArchLinux-社区文化：" class="headerlink" title="ArchLinux 社区文化："></a>ArchLinux 社区文化：</h2><p>​        <strong>一开始就筛选精准用户</strong> ，从开始安装 <code>ArchLinux</code> 系统开始，步骤就比一些带有 <code>GUI</code> 程序安装器的软件要繁琐的多，且全程命令行安装（现在还必须有网络），当然，初次安装该系统，会让很多人感觉困难，在安装系统中，就可以过滤掉一些“伪用户”，从而确保后面留下的都是精准和有动手能力的群体用户。且 Arch 有自己的想法，其并不以吸引尽可能多的用户为目的，只是安安心心的做好自己的事情，凡事都自己动手，丰衣足食。</p><p>​        <strong>软件仓库是丰富且更新迅速的</strong>，且除了官方的 <code>community</code> 仓库，里面已经包含常用和已经检测过的软件报另外还有 AUR 仓库 <code>archlinuxcn</code>，都是用户可以自定义自己上传任何内容的软件包，且不用对其负任何责任。还有</p><p>​        <strong>各种管理包和工具等，都是尽可能最新的版本</strong>， </p><p>​        <strong>经常更新的 WiKi</strong>  帮助手册，和对应的多语言版本，通常也更新比较及时，当然，引文版本的永远是最新最全的；</p><p>​        <strong>良好的社区交流氛围、Archer 都懂技术的热心者</strong> ，无论是在哪里的社区交流~，都会很舒适和得到你想答案</p><p>​        <strong>Arch 发行版完全由社区用户群、UT 和开发者来决定其发展和走向，不会受到商业版本的干扰进程。</strong></p><p>​        <strong><code>ArchLinux</code> 发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。Arch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。</strong></p><br><h1 id="DDE与Arch-的关系："><a href="#DDE与Arch-的关系：" class="headerlink" title="DDE与Arch 的关系："></a>DDE与Arch 的关系：</h1><h2 id="DDE-移植-Arch-流程："><a href="#DDE-移植-Arch-流程：" class="headerlink" title="DDE 移植 Arch 流程："></a>DDE 移植 Arch 流程：</h2><p>​        这里讲述一下 DDE 移植到 ArchLinux 的简单步骤，交代下背景，DDE 主要是在 UOS V20 + Qt 5.11.3 上开发出来的，而 Arch 上的 Qt 永远都是最新的，已经到 5.15.0 了，直接编译经常会遇到失败的情况，需要补充相应的头文件的等～</p><ol><li>在  <a href="https://github.com/linuxdeepin">github</a>  仓库中，选取所需要的仓库</li><li>选取其最新的 <a href="https://github.com/linuxdeepin/dtkwidget/tags">tag</a> 编号的代码，clone 到本地 ArchLinux 机器上面</li><li>在最新的环境中 Qt 5.15.x 中进行编译<ol><li>若没有问题，则进行 第 5 步骤</li><li>若有问题，则修改源码，直到编译通过；将修改部分的代码，以补丁 path 的形式提交到 github，等待合并进入 github 仓库，然后此部分被打补丁到下一个 tag 中</li></ol></li><li>找一个打包者，准备进行打包~</li><li>其编写 <a href="https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">PKGBUILD</a> 脚本 （包含 ArchLinux 在构建软件包时所需要的信息的 shell 脚本）</li><li>执行 <code>makepkg</code> ，生成 <code>*.pkg.tar.zst</code> 包，其可以被 <code>pacman -U 本地包</code> 直接进行安装 </li><li>进行测试，上面都没有问题之后，就推送到 ArchLinux 的 服务器上面，提供所有人下载</li></ol><br><h2 id="细节："><a href="#细节：" class="headerlink" title="细节："></a>细节：</h2><p>​        其中，比较耗费时间的地方就是，编写 PKGBUILD 脚本，和在 Arch 上面进行测试~；这里将该脚本描述一下，在本机中，可以复制 <code>/usr/share/pacman/PKGBUILD.proto</code> 作为<a href="https://git.archlinux.org/pacman.git/plain/proto/PKGBUILD.proto">副本</a>，重命名为 PKGBUILD 编写该脚本。</p><br><h2 id="附两个实例："><a href="#附两个实例：" class="headerlink" title="附两个实例："></a>附两个实例：</h2><p><strong>第一个：</strong></p><p>一个 DDE 仓库的自己的实际例子：<a href="https://github.com/archlinux/svntogit-community/blob/packages/deepin-qt5integration/trunk/PKGBUILD">deepin-qt5integration</a>：若是不理解，可以自行参看下一个带注释的例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Maintainer: Felix Yan &lt;felixonmars@archlinux.org></span><span class="token assign-left variable">pkgname</span><span class="token operator">=</span>deepin-qt5integration<span class="token assign-left variable">pkgver</span><span class="token operator">=</span><span class="token number">5.1</span>.0.5<span class="token assign-left variable">pkgrel</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">pkgdesc</span><span class="token operator">=</span><span class="token string">'Qt platform theme integration plugins for DDE'</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'x86_64'</span><span class="token punctuation">)</span><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"https://github.com/linuxdeepin/qt5integration"</span><span class="token assign-left variable">license</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GPL3'</span><span class="token punctuation">)</span><span class="token assign-left variable">depends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'dtkwidget'</span> <span class="token string">'libqtxdg'</span> <span class="token string">'deepin-qt5platform-plugins'</span><span class="token punctuation">)</span><span class="token assign-left variable">makedepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'xcb-util-renderutil'</span> <span class="token string">'deepin-file-manager'</span><span class="token punctuation">)</span><span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'deepin'</span><span class="token punctuation">)</span><span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$pkgname</span>-<span class="token variable">$pkgver</span>.tar.gz::https://github.com/linuxdeepin/qt5integration/archive/<span class="token variable">$pkgver</span>.tar.gz"</span><span class="token punctuation">)</span><span class="token assign-left variable">sha512sums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'f161836d2429d232e5c20fbb99da584ad8cb46e418c5cf419b639fa53004c6aa67ab2596f63bbeee49d9dd9445e34ac73a03baa24320488577c5265d88412953'</span><span class="token punctuation">)</span><span class="token function-name function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> qt5integration-<span class="token variable">$pkgver</span>  qmake-qt5 <span class="token assign-left variable">PREFIX</span><span class="token operator">=</span>/usr  <span class="token function">make</span><span class="token punctuation">&#125;</span><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token builtin class-name">cd</span> qt5integration-<span class="token variable">$pkgver</span>  <span class="token function">make</span> <span class="token assign-left variable">INSTALL_ROOT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$pkgdir</span>"</span> <span class="token function">install</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>第二个：</strong></p><p>​        此为个人实际项目的编写的 <a href="https://github.com/xmuli/chinessChess/blob/archlinux/PKGBUILD">PKGBUILD</a> 脚本例子，源码在 master 分支， 构建脚本在 archliux 分支，编译运行成功的结果在 <a href="https://github.com/xmuli/chinessChess/blob/archlinux/run_success.log">日志</a> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># This is an example PKGBUILD file. Use this as a start to creating your own,</span><span class="token comment"># and remove these comments. For more information, see 'man PKGBUILD'.</span><span class="token comment"># NOTE: Please fill out the license field for your package! If it is unknown,</span><span class="token comment"># then please put 'unknown'.</span><span class="token comment"># Maintainer: xmuli &lt;xmulitech@gmail.com>     # 包的维护者</span><span class="token assign-left variable">pkgname</span><span class="token operator">=</span>chinesschess                          <span class="token comment"># 包的名称（由小写字母 @ . _ + - 构成）</span><span class="token assign-left variable">_pkgname</span><span class="token operator">=</span>chinessChess                         <span class="token comment"># 自己添加的变量 （因 pkgname 要求全小写，而仓库源码中有大写）</span><span class="token assign-left variable">_pkgname2</span><span class="token operator">=</span>ChineseChess                        <span class="token comment"># 自己添加的变量 （最后项目生成的文件名）</span><span class="token assign-left variable">pkgver</span><span class="token operator">=</span><span class="token number">5.6</span>.0                                  <span class="token comment"># 包的版本号 （不可有连字符 -）</span><span class="token assign-left variable">pkgrel</span><span class="token operator">=</span><span class="token number">1</span>                                      <span class="token comment"># 包的发布号码</span><span class="token assign-left variable">epoch</span><span class="token operator">=</span>                                        <span class="token comment"># 用于强制升级软件包 （一般不允许使用）</span><span class="token assign-left variable">pkgdesc</span><span class="token operator">=</span><span class="token string">"Network battle game written in Qt (available on LAN)"</span>  <span class="token comment"># 软件包的详细描述</span><span class="token assign-left variable">arch</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'x86_64'</span><span class="token punctuation">)</span>                               <span class="token comment"># 包所能够生成并且使用的架构的序列</span><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"https://github.com/xmuli/chinessChess"</span>   <span class="token comment"># 包的官网</span><span class="token assign-left variable">license</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GPL3'</span><span class="token punctuation">)</span>                              <span class="token comment"># 采用的许可证</span><span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token comment"># 软件包所在的包组</span><span class="token assign-left variable">depends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 软件包的生成和运行时，必须先行安装的软件列表</span><span class="token assign-left variable">makedepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment"># 仅在软件生成时，需要的软件包列表</span><span class="token assign-left variable">checkdepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment"># 运行测试组件时需要，而运行时不需要的包列表</span><span class="token assign-left variable">optdepends</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment"># 可选的软件包（可看作本软件的插件）</span><span class="token assign-left variable">provides</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                   <span class="token comment"># 说明当前包提供的功能 （若使用，则需加上替代版本号）</span><span class="token assign-left variable">conflicts</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># 与当前软件包发生冲突的包 与功能的列表</span><span class="token assign-left variable">replaces</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                   <span class="token comment"># 会因安装当前包而取代的过时的包的列表</span><span class="token assign-left variable">backup</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                     <span class="token comment"># 当包被升级或卸载时，应当备份的文件（的路径）序列</span><span class="token assign-left variable">options</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 允许重载 makepkg 的部分 （在 /etc/makepkg.conf 中）</span><span class="token assign-left variable">install</span><span class="token operator">=</span>                                      <span class="token comment"># .install 脚本的名称 （值应和 pkgname 相同）</span><span class="token assign-left variable">changelog</span><span class="token operator">=</span>                                    <span class="token comment"># 软件包的更新日志的文件名</span><span class="token assign-left variable">source</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span>::https://github.com/xmuli/<span class="token variable">$_pkgname</span>/archive/v<span class="token variable">$pkgver</span>.tar.gz"</span><span class="token punctuation">)</span>  <span class="token comment"># 源码的下载地址</span><span class="token assign-left variable">noextract</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment"># 在 source 中列出，但不应该在运行 makepkg 时被解包的文件列表</span><span class="token assign-left variable">md5sums</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'5abae73968ea0104e99b816bf0b720fe'</span><span class="token punctuation">)</span>  <span class="token comment"># 完整性校验值</span><span class="token assign-left variable">validpgpkeys</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment"># PGP 指纹列表</span><span class="token function-name function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                   <span class="token comment"># 准备</span><span class="token builtin class-name">cd</span> <span class="token variable">$srcdir</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$srcdir</span><span class="token punctuation">&#125;</span><span class="token function-name function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                     <span class="token comment"># 构建</span><span class="token builtin class-name">cd</span> <span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span><span class="token function">mkdir</span> bin    <span class="token builtin class-name">cd</span> bin    qmake <span class="token punctuation">..</span>    <span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span> <span class="token punctuation">&#125;</span><span class="token function-name function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                     <span class="token comment"># 检查</span><span class="token builtin class-name">cd</span> <span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span><span class="token punctuation">&#125;</span><span class="token function-name function">package</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                   <span class="token comment"># 包</span><span class="token builtin class-name">cd</span> <span class="token variable">$_pkgname</span>-<span class="token variable">$pkgver</span><span class="token comment"># make install</span>    <span class="token builtin class-name">cd</span> bin/    ./<span class="token variable">$_pkgname2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h1><ul><li><p><a href="http://www.gnu.org/gnu/about-gnu.html">关于GNU操作系统</a></p></li><li><p><a href="http://www.gnu.org/gnu/gnu-history.html">GNU系统概览</a></p></li><li><p><a href="http://www.gnu.org/gnu/linux-and-gnu.html">Linux和GNU系统</a></p></li><li><p><a href="http://www.gnu.org/philosophy/free-sw.html">什么是自由软件？</a></p></li><li><p><a href="http://www.gnu.org/philosophy/categories.html">自由与非自由软件的分类</a></p></li><li><p><a href="http://www.gnu.org/gnu/gnu-linux-faq.html">Richard Stallman之GNU/Linux问答</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88">WiKi Linux发行版</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E6%AF%94%E8%BE%83">WiKi Linux发行版比较</a></p></li><li><p><a href="https://www.archlinux.org/">archlinux.org</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> DDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 升级教程</title>
      <link href="posts/cb1e6c4f/"/>
      <url>posts/cb1e6c4f/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 将电脑的 <code>hexo v4.2.1</code> 升级到 <code>hexo v5.1.1</code> 。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>事情起因，将博客的 yun 主题升级到 v1.0 版本之后，hexo clean &amp;&amp; hexo g -s 后，发现会强制将所有文章的文件的修改日期，在文章中显示，很明显，这是不对的。解决方案是：修改 hexo 工作目录下 <code>_config.yml</code> 中修改为 <code>updated_option: &quot;date&quot;</code> ，但是这个变量是只有 hexo v5.0 才支持，而我当前是 v4.2。</p><p><strong>详细：</strong>  <a href="https://github.com/YunYouJun/hexo-theme-yun/issues/60">#60</a></p><p>未升级之前，当前配置:</p><ul><li>hexo: 4.2.1</li><li>node: 12.18.3</li><li>Yun: 1.0</li></ul><br><h2 id="使用-淘宝源的-cnpm："><a href="#使用-淘宝源的-cnpm：" class="headerlink" title="使用 淘宝源的 cnpm："></a>使用 淘宝源的 cnpm：</h2><p>使用 cnpm 替换 npm（使用<a href="https://developer.aliyun.com/mirror/NPM">淘宝源</a>）：</p><blockquote><p>你可以使用我们定制的 <a href="https://github.com/cnpm/cnpm">cnpm</a> (gzip 压缩支持) 命令行工具代替默认的 <code>npm</code>:</p></blockquote><br><h2 id="升级-Hexo"><a href="#升级-Hexo" class="headerlink" title="升级 Hexo:"></a>升级 Hexo:</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用淘宝源的 cnpm 替换 npm</span><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm <span class="token function">install</span> -g cnpm                 <span class="token comment"># 升级 npm</span>cnpm cache clean -f                 <span class="token comment"># 清除 npm 缓存</span><span class="token operator">==</span><span class="token operator">=</span>更新 hexo: 进入 blog 目录，执行如下命令<span class="token operator">==</span><span class="token operator">=</span> <span class="token comment"># 更新 package.json 中的 hexo 及个插件版本</span>cnpm <span class="token function">install</span> -g npm-check           <span class="token comment"># 检查之前安装的插件，都有哪些是可以升级的 </span>cnpm <span class="token function">install</span> -g npm-upgrade         <span class="token comment"># 升级系统中的插件</span>npm-checknpm-upgrade<span class="token comment"># 更新 hexo 及所有插件</span>cnpm update<span class="token comment"># 确认 hexo 已经更新</span>hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>升级之后的版本：</strong></p><ul><li>Hexo: 5.1.1</li><li>Node: 12.18.3</li><li>Yun: 1.0</li></ul><p>之后再次正常推送，文章的“更新日期“”恢复之前的样子，成功达到预期。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 深入虚函数表</title>
      <link href="posts/138731f9/"/>
      <url>posts/138731f9/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　对于 <code>C++</code> 中的多次继承后，其中含有虚函数的时候，探究一下其中的虚函数表；以及其变量在内存中的分布情况。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>Win10 2004 </code> 📎 <code>VS2015 x86模式</code> </p><br><h3 id="虚函数表验证："><a href="#虚函数表验证：" class="headerlink" title="虚函数表验证："></a>虚函数表验证：</h3><p>对于任意的一个类，若是其中有虚函数 <code>virtual</code> 的话，就会有一个虚函数指针，负责其自己的虚函数表。代码就是最好的讲解，上代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// vtableptr.cpp : 定义控制台应用程序的入口点。</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::vfunc1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::vfunc2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::func1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A::func2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//private:</span><span class="token keyword">int</span> m_data1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token keyword">int</span> m_data2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::vfunc1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B::func2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//private:</span><span class="token keyword">int</span> m_data3 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">vfunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C::vfunc1()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C::func2()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">//private:</span><span class="token keyword">int</span> m_data4 <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>A a<span class="token punctuation">;</span>B b<span class="token punctuation">;</span>C c<span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后运行如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200805010044.png" width="50%"/ loading="lazy"><p>查看一下内存地址分析：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200804_235949.png" width="100%"/ loading="lazy"><p>将其用表格图形化分析一波，可以看到，对于重写的基类的虚函数的派生类，其维护的虚函数表，就是基类未被重写的虚函数地址加上自己的（已经重写）虚函数。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200805_002523.png" width="100%"/ loading="lazy"><br><h3 id="类中成员的空间位置："><a href="#类中成员的空间位置：" class="headerlink" title="类中成员的空间位置："></a>类中成员的空间位置：</h3><p>在来一个类，由下图份的内存位置分析可知，静态成员和静态变量、以及成员函数也是是单独放在其它地方的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">CTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_chData</span><span class="token punctuation">(</span>‘\<span class="token number">0</span>’<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">m_nData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">mem_fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">char</span> m_chData<span class="token punctuation">;</span>        <span class="token keyword">int</span> m_nData<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">char</span> s_chData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> CTest<span class="token operator">::</span>s_chData<span class="token operator">=</span>’\<span class="token number">0</span>’<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200805010235.png" width="80%"/ loading="lazy"><br><p>通过上面来两个例子，我觉着已经很清晰了，不再需要怎么说。而关于一个程序在内存中的布局，可以参考之前的一片文章 <a href="https://blog.csdn.net/qq_33154343/article/details/105029261">运行程序所分配的地址空间</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚函数表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux + DDE 安装教程</title>
      <link href="posts/4bf5e477/"/>
      <url>posts/4bf5e477/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong>　本博客主要对安装 <code>ArchLinux</code> 过程中的步骤的知识补充：告诉你教程里面的都是一些什么东西，和它们的一些入门理解；总的而言，侧重： <strong>是什么？</strong>  &amp;&amp;  <strong>怎么做？</strong>  &amp;&amp; <code>ArchLinux</code> + <code>DDE</code> (深度桌面环境) 的安装教程.</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200729_155032_10.jpg" width="90%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="写在前面："><a href="#写在前面：" class="headerlink" title="写在前面："></a>写在前面：</h2><p><code>ArchLinux</code> 久仰大名，一直都想安装试一下水，看 <code>WiKi</code> 教程有点一言难尽，对新手不是很友好（难道大家对新手的定义不一样？？？）看网上教程和 WiKi 都是需要耐心的，<code>ArchLnux</code> 的第一次安装是都要经过一些坑的。</p><br><h2 id="文章受众："><a href="#文章受众：" class="headerlink" title="文章受众："></a>文章受众：</h2><ul><li>想要安装 <code>ArchLinux</code> 的萌新，或者是第一次安装 <code>ArchLinux</code> 寻找教程的人</li><li>想了解安装过程中， 挂载 <code>mount</code>、<code>chroot</code> 、格式化、分区表等知识（知道是什么，和简单的怎么使用）</li><li>在 <code>ArchLinux</code> 中如何安装 <code>DDE</code> （深度桌面环境）的人</li><li>在虚拟机 <code>VMware</code> 或者实体机 安装 <code>ArchLinux</code> 的人</li><li>对我的文章感兴趣的人</li><li>与本文邂逅的你</li></ul><br><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>安装 <code>ArchLinux</code> 必须联网;</li><li><code>mount</code> 挂载是将 硬盘里分区 挂载到 <strong>live 环境</strong></li><li><code>chroot</code> 是在 <strong>live 环境</strong> 和 <strong>安装到磁盘的系统</strong> 之间切换</li><li>设置了分区表之后, 还需要格式化</li><li>没有网络,需要安装 <code>NetworkManager</code> 和 执行 <code>dhcpcd</code></li><li>安装 DDE 时候不需要 修改配置文件 <code>/etc/lightdm/lightdm.conf</code> 和 <code>.xinitrc</code></li><li>磁盘的分区表有两种方式 <code>uefi + gpt + efi</code> 或 <code>legacy + mbr</code> </li><li>安装启动器有三种情况：<code>grub(bios 启动)</code> 或 <code>grub + efibootmgr ==&gt; (EFI 启动)</code> 或 <code>额外安装一个 os-prober ==&gt; (多系统)</code></li></ul><br><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><h3 id="大概流程："><a href="#大概流程：" class="headerlink" title="大概流程："></a>大概流程：</h3><p>先来一个简单点的， 在 <code>VMware</code> 里面安装 <code>ArchLinux</code>， 其步骤顺序如下：</p><ol><li>清空一个 <strong>磁盘</strong></li><li>对 <strong>磁盘</strong> 设置 <strong>分区表</strong> </li><li>对 <strong>子分区</strong> 选择适合的  <strong>TYPE</strong>；</li><li>选用各自的 <strong>文件类型</strong> 格式化  <strong>子分区</strong> ；</li><li>下载 <code>archLinu_xxxxx.iso</code> 镜像</li><li>设置第一启动项</li><li>开机自动进入 <strong>live 环境</strong> </li><li>将 <strong>磁盘</strong> 挂载</li><li>换源</li><li>安装 <strong>基本包</strong>（含内核等）</li><li>配置 <code>fstab</code> 后，<code>chroot</code> 切换操作权</li><li>安装 <strong>必须软件包</strong>  ，设置 <code>Locale</code></li><li>设置 <code>root</code> 密码，和新建一个用户</li><li>安装 <code>Intel-ucode</code>（非 <code>Intel</code> CPU 跳过）</li><li>安装引导 <code>grub</code> </li><li>退出和重启系统</li><li>开启 <code>NetworkManager</code> 服务自动联网</li><li>安装桌面环境 <code>DDE</code></li><li>详细的个性化配置</li><li>享受 <code>ArchLinux</code> 的快乐</li></ol><br><h3 id="详细流程："><a href="#详细流程：" class="headerlink" title="详细流程："></a>详细流程：</h3><h4 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h4><p><code>win10 </code> 、<code>VMware 15 Pro</code>、<code>Intel(R) Core(TM) i5-10210U</code></p><br><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像:"></a>下载镜像:</h4><p>下载 <code>ArchLinux</code> <a href="https://www.archlinux.org/download/">官网</a> 的镜像点下载   <code>archlinux-2020.07.01-x86_64.iso</code> ，其内核是 <code>5.x</code> 版本</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730134551084.png" width="80%"/ loading="lazy"><br><h4 id="在-VMware-里面新建系统"><a href="#在-VMware-里面新建系统" class="headerlink" title="在 VMware 里面新建系统:"></a>在 <code>VMware</code> 里面新建系统:</h4><p><strong>注意如下三点：</strong></p><ul><li><p>选择自定义(高级)，因为 <code>VM</code> 对 <code>ArchLinux</code> 没有直接支持； 选择 <code>Linux(L)</code>   时候选择选用 <code>Linux 5.x</code> 的内核版本</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200730173637.png" width="40%"/ loading="lazy"></li><li><p>挂载 <code>ios</code> 镜像</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200730173716.png" width="50%"/ loading="lazy"></li><li><p>设置为 <code>EFI</code> 方式启动</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730133901341.png" width="50%"/ loading="lazy"></li></ul> <br><p>启动虚拟机，默认选择第一个：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730135432879.png" width="50%"/ loading="lazy"><br><p>等待一阵如下跳动</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730135447732.png" width="50%"/ loading="lazy"><br><p>进入到  <strong>live 环境</strong> （此是内存条里面，加载的刚才的 ios 镜像系统），<em>注意此时 root 用户是 红色</em><br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730135836279.png" width="30%"/ loading="lazy"></p><br><h4 id="检查磁盘状态-lsblk"><a href="#检查磁盘状态-lsblk" class="headerlink" title="检查磁盘状态 lsblk:"></a>检查磁盘状态 <code>lsblk</code>:</h4><p>查看磁盘状态 <code>lsblk</code>； 其中 <code>sda</code> 是我们清空一个硬盘（SSD | HDD | 只是已有系统中的硬盘中划分出来的一段 50G 空白区域）（后文统称 <strong>磁盘</strong>）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730140019922.png" width="40%"/ loading="lazy"><br><h4 id="选择分区表-cfdisk"><a href="#选择分区表-cfdisk" class="headerlink" title="选择分区表 cfdisk:"></a>选择分区表 <code>cfdisk</code>:</h4><p>对 <strong>磁盘</strong> 设置 <strong>分区表</strong>，使用 <code>cfdisk</code> ；</p><p>然后选择 分区表的方式，通常有两种：</p><ul><li><p><strong>uefi + gpt + efi：</strong> 推荐，比较适合 ssd 等大型新型磁盘 管理 </p></li><li><p><strong>legacy + mbr：</strong> 以前老式 win7 的机械硬盘管理方式</p><br></li></ul><p>这里我们选用 <code>uefi + gpt + efi</code> 方式，特点是磁盘必须至少分成两个分区，其中一个用来给 efi 使用；</p><p>输入  <code>cfdisk</code> 后，将系统分成两个分区，其中 EFI 分区只要 512 M 大小即可；</p> <br><h4 id="选择分区"><a href="#选择分区" class="headerlink" title="选择分区:"></a>选择分区:</h4><p>对已有分区表的一整块、未格式化的 <strong>磁盘</strong>，进行分区后得到2个 <strong>子分区</strong>，且对每一个 <strong>子分区</strong> 选择适合的  <strong>TYPE</strong>；</p><p>输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cfdisk</span><span class="token comment"># 选择底部 gpt ，回车</span><span class="token comment"># 选择 NEW ，回车，输入 512M，类型选择 EFI SYstem 格式</span><span class="token comment"># 选择 NEW ，回车，剩下的 49.5G，类型选择 默认 Linux filesystem 格式</span><span class="token comment"># 选择 Write ， 输入 yes，回车 表示写入保存</span><span class="token comment"># 选择 Quit ，推出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730140329031.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730140633080.png" width="50%"/ loading="lazy"><br><h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区:"></a>格式化分区:</h4><p>再对有各自的 <strong>TYPE</strong> 的 <strong>子分区</strong>  选用不同的 <strong>文件类型</strong> 来进行格式化；</p><pre class="line-numbers language-none"><code class="language-none">mkfs.fat -F32 &#x2F;dev&#x2F;sda1mkfs.ext4 &#x2F;dev&#x2F;sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730141453710.png" width="50%"/ loading="lazy"><br><h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区:"></a>挂载分区:</h4><p>挂载分区，这里是将 <strong>物理磁盘的实际分区</strong> 挂载到 <strong>live 环境</strong> 的 <strong>/mnt</strong> 目录下 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p /mnt/boot/EFI<span class="token function">mount</span> /dev/sda2 /mnt<span class="token function">mount</span> /dev/sda1 /mnt/boot/EFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h4 id="换国内Arch-的源"><a href="#换国内Arch-的源" class="headerlink" title="换国内Arch 的源:"></a>换国内<code>Arch</code> 的源:</h4><p>编辑 <code>/etc/pacman.d/mirrorlist</code>， 在文件的最顶端添加：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将下面源添加到 mirrorlist 的最顶部， 外国语和中科大的源</span>Server <span class="token operator">=</span> https://mirrors.bfsu.edu.cn/archlinux/<span class="token variable">$repo</span>/os/<span class="token variable">$arch</span>Server <span class="token operator">=</span> https://mirrors.ustc.edu.cn/archlinux/<span class="token variable">$repo</span>/os/<span class="token variable">$arch</span><span class="token comment"># 更新软件包缓存：</span><span class="token function">sudo</span> pacman -Syy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="安装基本包"><a href="#安装基本包" class="headerlink" title="安装基本包:"></a>安装基本包:</h4><p>必须联网下载过程;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacstrap /mnt base base-devel linux linux-firmware dhcpcd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="配置-Fstab"><a href="#配置-Fstab" class="headerlink" title="配置 Fstab:"></a>配置 Fstab:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成自动挂载分区的fstab文件，执行以下命令：</span>genfstab -L /mnt <span class="token operator">>></span> /mnt/etc/fstab<span class="token comment"># 输出生成的文件来检查是否正确</span><span class="token function">cat</span> /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是看到  <code>/dev/sda2</code> 挂载到 <code>/</code> ； <code>/dev/sda1</code> 挂载到 <code>/boot/EFI</code> ，则 OK</p><br><h4 id="执行-chroot"><a href="#执行-chroot" class="headerlink" title="执行 chroot :"></a>执行 chroot :</h4><p>执行 chroot 将系统的执行权限切换到已经安装好的硬盘系统里面（之前都是在 内存运行 的挂载 iso 的 live 环境 里面执行的），执行如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arch-chroot /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200730151933945.png" width="20%"/ loading="lazy"><br><h4 id="安装软件必须的软件包"><a href="#安装软件必须的软件包" class="headerlink" title="安装软件必须的软件包:"></a>安装软件必须的软件包:</h4><p><code>networkmanager</code> 自动联网的， 不安装的话，你就知道有多坑了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S <span class="token function">vim</span> dialog wpa_supplicant ntfs-3g networkmanager netctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="设置-Locale"><a href="#设置-Locale" class="headerlink" title="设置 Locale:"></a>设置 Locale:</h4><p>设置我们使用的语言选项，执行如下命令来编辑<code>/etc/locale.gen</code>文件；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/locale.gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件中找到<code>zh_CN.UTF-8 UTF-8</code>、 <code>en_US.UTF-8 UTF-8</code>这两行，去掉行首的 # 号，保存并退出。然后执 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">locale-gen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开（不存在时会创建）<code>/etc/locale.conf</code>文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/locale.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件的第一行加入以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存并退出。</p><br><h4 id="设置-root-密码"><a href="#设置-root-密码" class="headerlink" title="设置 root 密码:"></a>设置 root 密码:</h4><p>执行如下，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span><span class="token comment"># 输入两次相同的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h4 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户:"></a>创建新用户:</h4><p>执行如下命令，很坑的的一点，如果安装深度环境 DDE 的话，必须要新建用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">useradd</span> -m -G wheel -s /bin/bash <span class="token function">free</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-m：创建用户主目录（/home/[用户名]）</code></li><li><code>-G：用户要加入的附加组列表；此处</code>将用户加到<code>wheel</code>组中，之后可以给这个组执行<code>sudo</code>命令的权限</li><li><code>-s：</code>指定了用户默认登录shell的路径，此处设置为bash的路径``</li></ul><p>设置密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> <span class="token function">free</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入两次密码即可。提权， 修改 /etc/sudoers文件，删除wheel组前面的注释（#）即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## Uncomment to allow members of group wheel to execute any command</span>%wheel <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h4 id="安装-grub"><a href="#安装-grub" class="headerlink" title="安装 grub :"></a>安装 grub :</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># EFI 启动方式, 需安装 grub 和 efibootmgr</span>pacman -S grub efibootmgr<span class="token comment"># 然后，还需要将其安装到EFI分区当中：</span>grub-install --recheck /dev/   <span class="token comment"># 注意：此处的 /dev/sda 后没有数字</span><span class="token comment"># 生成一个grub的配置文件</span><span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统:"></a>重启系统:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span class="token function">umount</span> -R /mnt<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><BR><h4 id="启动网络服务"><a href="#启动网络服务" class="headerlink" title="启动网络服务,:"></a>启动网络服务,:</h4><p>执行以下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr  <span class="token comment"># 查看ip 是否获取正确</span>dhcpcd   <span class="token comment"># 自动开启网络</span><span class="token comment"># 设置网络工具开机自启</span>systemctl <span class="token builtin class-name">enable</span> NetworkManagersystemctl <span class="token builtin class-name">enable</span> dhcpcd<span class="token function">ping</span> baidu.com   <span class="token comment"># 检测是否有网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体:"></a>安装字体:</h4><p>不安装的后果就是, 所有的中文都是乱码 xx 符号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S wqy-microhei ttf-liberation ttf-dejavu ttf-roboto ttf-droid adobe-source-han-sans-otc-fonts adobe-source-han-serif-otc-fonts adobe-source-code-pro-fonts adobe-source-sans-pro-fonts adobe-source-serif-pro-fonts noto-fonts noto-fonts-extra noto-fonts-emoji ttf-fira-code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="安装-DDE-深度桌面环境"><a href="#安装-DDE-深度桌面环境" class="headerlink" title="安装 DDE 深度桌面环境:"></a>安装 DDE 深度桌面环境:</h4><p>安装 DDE 的深坑,是不需要修改配置文件的 <code>/etc/lightdm/lightdm.conf</code>；之前网上凡是能够查询到的, 教程都说要修改, <code>ArchLinux</code> 的 wiki也说要修改, 于是乎，问了问 deepin 的研发，这里面这一步，后面被某一个脚本给做了此操作。所以现在实际是不需要修改的。只需要安装下面 4 个包， 然后设置一个开机自启即可，其余的不用做。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman -S xorg xorg-server deepin deepin-extrasystemctl <span class="token builtin class-name">enable</span> lightdm  <span class="token comment"># 设置开机自启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>xorg:</code>  所有的桌面环境安装之前都必备的</p></li><li><p><code>deepin:</code>  所有基础组件</p></li><li><p><code>deepin-extra:</code>  一些额外的应用程序来提供一个更完整的桌面环境</p></li></ul><br><h4 id="重启系统-1"><a href="#重启系统-1" class="headerlink" title="重启系统:"></a>重启系统:</h4><p>重启系统,可以看到如下:</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/ArchLinux-2020-07-29-15-49-10.png" width="90%"/ loading="lazy"><br><h4 id="安装-VM-tools-可选"><a href="#安装-VM-tools-可选" class="headerlink" title="安装 VM-tools(可选)"></a>安装 VM-tools(可选)</h4><p>安装 VM-tools 有两个选择,一个是开源的 <code>Open-VM-Tools</code> , 一个是官方的 <code>VMware Tools</code>,  任选其一即可,若是实体机安装,则没有必要.</p><p><a href="%5Bhttps://wiki.archlinux.org/index.php/VMware_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Installing_Arch_as_a_guest_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Open-VM-Tools%5D(https://wiki.archlinux.org/index.php/VMware_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Installing_Arch_as_a_guest_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Open-VM-Tools)">VMware (简体中文)/Installing Arch as a guest (简体中文) </a></p><br><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><ul><li><a href="https://www.viseator.com/2017/05/17/arch_install/">以官方Wiki的方式安装ArchLinux</a> </li><li><a href="https://blog.yoitsu.moe/arch-linux/installing_arch_linux_for_complete_newbies.html">给 GNU/Linux 萌新的 Arch Linux 安装指南 rev.B</a></li><li><a href="https://www.cnblogs.com/freerqy/p/8502838.html">在VMWare上安装Arch Linux</a></li><li><a href="https://zhuanlan.zhihu.com/p/141067184">ArchLinux安装（Deepin v20桌面环境）</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> DDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客迁移新环境的详细配置[个人习惯]</title>
      <link href="posts/1858a637/"/>
      <url>posts/1858a637/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　在 <code>Mac</code> 重装的系统上，重新配置一遍 <code>hexo + yun</code> 的个人博客，这里记录一下 <strong>个人习惯</strong> 的一些 <code>yun</code> 主题的详细配置。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="文件夹详细配置："><a href="#文件夹详细配置：" class="headerlink" title="文件夹详细配置："></a>文件夹详细配置：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 node 和 hexo</span>brew search node              <span class="token comment"># 直接安装最新的 14.xx，会有警告，安装 12.xx 版本即可</span>brew <span class="token function">install</span> node@12          <span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/usr/local/opt/node@12/bin:<span class="token environment constant">$PATH</span>"'</span> <span class="token operator">>></span> ~/.zshrcnode -v                       <span class="token comment"># node -v 验证安装成功 (12.18.3 LTS)</span><span class="token builtin class-name">source</span> ~/.zshrc<span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token function">npm</span> <span class="token function">install</span> hexo             <span class="token comment"># hexo -v 验证安装成功</span><span class="token function">mkdir</span> xmuliMark  <span class="token comment"># 确保里面是空的，隐藏文件也没有</span>hexo init xmuliMark<span class="token builtin class-name">cd</span> xmuliMark<span class="token function">git</span> init<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:xmuli/xmuliMark.git  <span class="token comment"># git remote -v 验证设置成功</span><span class="token function">git</span> clone -b master https://github.com/YunYouJun/hexo-theme-yun themes/yun  <span class="token comment"># 后续升级使用 dev 分支</span><span class="token function">npm</span> <span class="token function">install</span> hexo-render-pug hexo-renderer-stylus<span class="token comment"># 配置 yun 主题细节</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-tag  <span class="token comment"># 安装标签 tags : hexo-generator-tag</span>hexo new page tags              <span class="token comment"># 生成之后替换 </span><span class="token comment"># ---------- 修改 source/tags/index.md 的 Front Matter ----------</span>---date: <span class="token number">2017</span>-10-09 <span class="token number">19</span>:11:58comments: <span class="token boolean">false</span>type: tags---<span class="token comment"># ---------- yun/_config.yml 设置如下 ----------</span>wordcloud:                      <span class="token comment"># 标签云（词云）</span>  enable: <span class="token boolean">true</span>  height: <span class="token number">350</span><span class="token comment"># 打赏二维码：替换文本即可 reward</span><span class="token comment"># 编辑链接：替换文本即可 post_edit</span><span class="token comment"># 运行时间：替换文本即可 live_time</span><span class="token comment"># 关闭留言跳转 GitHub Issues：替换文本即可 Comments</span><span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount      <span class="token comment"># 字数统计</span><span class="token comment"># ---------- yun/_config.yml 设置如下 ----------</span>wordcount:  enable: <span class="token boolean">true</span>  count: <span class="token boolean">true</span>  time: <span class="token boolean">true</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save     <span class="token comment"># 开启本地搜索</span><span class="token comment"># ---------- yun/_config.yml 设置如下 ----------</span>local_search:  enable: <span class="token boolean">true</span>  src: /js/search/local-search.js  <span class="token comment"># 谷歌广告：替换文本，不开启 Google Adsense </span><span class="token comment"># 谷歌搜索：替换文本即可 google_analytics</span><span class="token function">npm</span> <span class="token function">install</span> hexo-prism-plugin  <span class="token comment"># 代码高亮</span><span class="token comment"># ---------- 💘 需要新增 💘 hexo/_config.yml 设置如下 ----------</span>prism_plugin:  mode: preprocess <span class="token comment"># realtime/preprocess</span>  theme: default  line_number: <span class="token boolean">false</span> <span class="token comment"># default false</span>  <span class="token comment"># custom_css: "path/to/your/custom.css" # optional</span><span class="token comment"># 顺带关闭 hexo/_config.yml 自带的高亮  </span>highlight:  enable: <span class="token boolean">false</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save <span class="token comment"># RSS 安装</span><span class="token comment"># ---------- yun/_config.yml 设置如下 (但我没有修改) ----------</span>social:  - name: RSS    link: /atom.xml <span class="token comment"># config.feed.path</span>    icon: icon-rss-line    color: orange<span class="token function">npm</span> uninstall hexo-generator-index --save         <span class="token comment"># 文章置顶： 文章头部添加 top: true 即可</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top --save<span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save                   <span class="token comment"># 文章短链接</span><span class="token comment"># ---------- 💘 需要新增 💘 hexo/_config.yml 设置如下 ----------</span><span class="token comment"># URL</span><span class="token comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span>url: http://yoursite.comroot: /<span class="token comment"># permalink: :year/:month/:day/:title/  # 旧的注释掉</span><span class="token comment"># permalink_defaults:                   # 旧的注释掉</span>permalink: posts/:abbrlink/abbrlink:  alg: crc32 <span class="token comment">#support crc16(default) and crc32</span>  rep: hex <span class="token comment">#support dec(default) and hex</span>  drafts: <span class="token boolean">false</span> <span class="token comment">#(true)Process draft,(false)Do not process draft</span>  <span class="token comment"># Generate categories from directory-tree</span>  <span class="token comment"># depth: the max_depth of directory-tree you want to generate, should > 0</span>  auto_category:    enable: <span class="token boolean">false</span> <span class="token comment">#默认为 true， 手改改为 false</span>    depth:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="网页配置同步："><a href="#网页配置同步：" class="headerlink" title="网页配置同步："></a>网页配置同步：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save    <span class="token comment"># 自动部署 hexo d 命令报错 ERROR Deployer not found: git 的解决方案</span><span class="token comment"># 在 github 网页的 “settings-Secrets” 中，创建一个名为 HEXO_DEPLOY_KEY 的变量（下面脚本会用到），其值为本地机器的 git 私有秘钥( cat ~/.ssh/id_rsa 所输出的值)；  ==> 是私有秘钥，不是公有秘钥 &lt;==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>自动部署，在网页 <code>Action</code> 上创建文件 <strong>hexoDeploy.yml</strong> ：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Deploy Automatically<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest        <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Node.js envs      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo deploy      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">HEXO_DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HEXO_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$HEXO_DEPLOY_KEY" > ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com >> ~/.ssh/known_hosts        git config --global user.name "xmuli"        git config --global user.email "xmulitech@gmail.com"        npm i -g hexo-cli        npm i        hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++中sizeof()运算符的的深入理解</title>
      <link href="posts/29ffae87/"/>
      <url>posts/29ffae87/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　对 <code>C / C++</code> 中的 <code>sizeof()</code> 运算符的一些深入思考；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>昨晚看到一题，虽然可以轻易得到结果，但是突然深入思考一些，这是为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    str1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d, %d, %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a为10</span>    b <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在 qt creator 和 VS 2015 结果不一致</span>    c <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//c为9</span>    d <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"123456789"</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d, %d, %d, %d, %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考：</strong></p><p>这里的 <code>sizeof(&quot;Hello&quot;)</code>, <code>sizeof(str1)</code>, <code>sizeof(str2)</code>, <code>sizeof(p1)</code>, <code>sizeof(p2)</code> 打印出来的值是多少？</p><p>下面一列表的 <code>a</code>， <code>b</code>，  <code>c</code>，  <code>d</code>，  <code>sizeof(unsigned int)</code>， <code>sizeof(int)</code> 打印出来的值又是多少？</p><br><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><h4 id="理解分析："><a href="#理解分析：" class="headerlink" title="理解分析："></a>理解分析：</h4><p>在 <code>win 10 + VS2015</code> 的 <code>x86</code> 模式下，运行结果如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200719175356.png" width="30%" / loading="lazy"><p>我的理解如下：</p><p><strong>上一组的结果运行和分析如下:</strong></p><ol><li><p><code>sizeof(&quot;Hello&quot;)</code> 的值是 6， 等价于 <code>&quot;hello\0&quot;</code> 应在内存中占 6 个字节，且  <code>&quot;hello&quot;</code> 是 <code>char [6]</code> 类型（由截图可知），但为什么不是  <code>char *</code>  或  <code>const char *</code> 呢？那就不知道了，反正<strong>编译器的规则</strong> 就是这么定的；</p>   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200719172923.png" width="50%" / loading="lazy"><br></li><li><p><code>sizeof(str1)</code> 的值是 6， 等价于 <code>sizeof(char [6])</code> ，在内存中一共分配 1*6 个字节；下标里面的<code>[]</code> 中的 6 是根据赋值语句，编译器自己推算出来的；</p></li><li><p><code>sizeof(str2)</code> 的值是 100， 等价于  <code>sizeof(char [100])</code> ，在内存中一共分配 1*100 个字节；</p></li><li><p><code>sizeof(p1)</code> 的值是 4，等价于 <code>sizeof(char *)</code>，等价于 <code>sizeof(指针)</code></p></li><li><p><code>sizeof(p2)</code> 的值是 4，等价于 <code>sizeof(const char *)</code>，等价于 <code>sizeof(指针)</code></p></li></ol><br><p><strong>下一组的结果运行和分析如下:</strong></p><ol><li><p><code>a</code> 的值是 10， 等价于 <code>sizeof(char [10])</code> ，在内存中一共分配 1*10 个字节；</p></li><li><p><code>b</code> 的值在不同系统，不同编译器上，结果是不一样的(eg： mac10.14.6 + qtCretor5.12.8  &amp;&amp; win10 + vs2015)； 结果不一直的原因是 无法判定 <code>&quot;123456789&quot;+1</code> 到底应该是 <code>char [10] + int</code> 之后，应该是什么类型？只能够根据自己的编译器实际决定；且还有一中观点： 此行是在编译时刻就已经被替换为具体的数值了，然后这一行的代码也会被删除掉，更加不会被执行，所以其 sizeof 的副作用是不会实现的（如 <code>sizeof(++i）</code>其实只能够等价于 <code>sizeof(对象(变量 i )的类型)</code>，其运行时刻在计算其值是不存在的)</p><p>注意一点即可，有一个误区，以前的 类似于 <code> int x1 = 3 + &#39;b&#39;</code> 能够顺利进行隐式转换，是因为知道最后应该转换为 等式 的左侧 的 int 类型；而我们这里系统没有 左值，故无法知道转换为什么类型，所以出现如下截图，此上下文不支持；</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200719174254.png" width="50%" / loading="lazy"><br></li><li><p><code>c</code> 的值是 9，没有什么好讲的，该函数的实现，是遇到第一个 <code>&#39;\0&#39;</code> 就停止；</p></li><li><p><code>d</code> 的值是 8 ？（两个不同环境都是 8，有点费解），这个不明所以；查看源码 strlen() 的实现如下 <code>size_t     strlen(const char *__s);</code>，按照我的理解，应该是等价于 <code>d = strlen((const char *)(&quot;123456789&quot;+1))</code> 的，显示结果依旧为 8；这个结果为啥是 8， 有点费解，不过觉得没有探究的必要，也不是本文谈论的重点；此行多探究无意义，且这样写，有点 “无中生有”，“惹是生非”，“搞事情” 的感觉</p></li><li><p><code>sizeof(unsigned int)</code> 的值是 4，不用解释</p></li><li><p><code>sizeof(int)</code> 的值是 4，不用解释</p></li></ol><br><p><strong>下面是另外角度来思考此问题：</strong></p><h4 id="角度-1-："><a href="#角度-1-：" class="headerlink" title="[角度 1]："></a>[角度 1]：</h4><p><font color=#D0087E size=4 face="幼圆"> <code> sizeof()</code> 是 返回一个类型的在内存中说占的字节数。</font> 是属于 <em><strong>运算符</strong></em> ， 同为 运算符 的还有 <code>+</code> 、<code>-</code>、<code>*</code>、<code>/</code> 、<code>%</code> 等。而这个是在编译时候就被执行，而非运行时候执行，一开始就已经是计算机被知道的。</p><p>C 标准和实际上的 编译器 一开始就定义好了，在 32 位电脑中，<code>int</code> 占据 4 字节， <code>char</code> 占据 1 字节；</p><p>对于<strong>内置的基本数据类型</strong> 来说，下面是很容易理解，觉得一开始就被编译机在内存里面分配了这么多的变量： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 <span class="token number">4</span> 字节<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 <span class="token number">1</span> 字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>而 对于 <strong>复合数据类型</strong> 来求字节大小，其是需要根据 组合的基本数据类型 来给出实际的内存中所占的字节大小，比如自定义 类：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>自定类<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 字节对齐后的 字节<span class="token keyword">sizeof</span><span class="token punctuation">(</span>数组<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 符合类型的数组 字节<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 显示 <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> 字节  <span class="token comment">// 这样就容易理解了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h4 id="角度-2-："><a href="#角度-2-：" class="headerlink" title="[角度 2]："></a>[角度 2]：</h4><blockquote><p>  <sup>[p101]</sup>  类似于都是指代 《C++ primer 中文版  第5 版》一书的页码</p></blockquote><p>忽然发觉有点不简单， <code>str1</code> 是数组类型，属于<strong>复合类型</strong>  <sup>[p101]</sup>，表达式右侧 <code>&quot;Hello&quot;</code> 是什么类型（是 <code>char []</code> 、  <code>char *</code>  还是  <code>const char *</code>  呢？），其实也并不重要（虽然知道了是<code>char [6]</code>类型 ）；但是它一定是给 数组 <code>str1</code> 赋值的；且定义的赋值写法如此</p><br><h4 id="角度-3-："><a href="#角度-3-：" class="headerlink" title="[角度 3]："></a>[角度 3]：</h4><p>有人自己使用如下两个宏，来实现了该 <code>sizeof()</code> 的实现；注意的是，这是网友自己使用宏来实现的，而非 编译器 就是这样实现的，但是对于我的理解有所帮助；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//适用于非数组</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">_sizeof</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">//适用于数组</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">array_sizeof</span><span class="token expression"><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>size_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="角度-4-："><a href="#角度-4-：" class="headerlink" title="[角度 4]："></a>[角度 4]：</h4><p><code>sizeof</code> 运算符，实际上有两种使用方式，且书上明确有说 <strong><code>sizeof</code> 实际上并不会去计算其运算符对象的值</strong> <sup>[p139]</sup> ，<code>sizeof</code> 运算时候，也不会将数组成指针来处理；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>           <span class="token comment">// 返回             类型 在内存中所占的字节大小</span><span class="token keyword">sizeof</span> expression      <span class="token comment">// 返回 表达式结果的 类型 在内存中所占的字节大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 查漏补缺 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何给上游Qt提交Bug反馈和贡献代码PATH？</title>
      <link href="posts/6c51a934/"/>
      <url>posts/6c51a934/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　记录如何给上游的 QT 组织提 Bug （or Suggesstion），和给提交代码贡献 PATH（代码合并请求）的经验；给读者以参考；修改内容不重要，重要的熟悉如给 Qt 提交 Bug 反馈和 代码贡献 PATH；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="向-Qt-提交反馈-Bug："><a href="#向-Qt-提交反馈-Bug：" class="headerlink" title="向 Qt 提交反馈 Bug："></a>向 Qt 提交反馈 Bug：</h3><p>向上游的 Qt 组织反馈你所发现的 bug，或者是你想提的建议 Suggesstion；</p><br><p><strong>步骤流程：</strong></p><h4 id="注册-Qt-账号："><a href="#注册-Qt-账号：" class="headerlink" title="注册 Qt 账号："></a>注册 Qt 账号：</h4><p> 登录 <a href="https://login.qt.io/register">login.qt.io</a> 网站，注册一个属于你的 Qt 账号；</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707223151.png" width="50%" / loading="lazy"><br><h4 id="提交-Bug-前准备："><a href="#提交-Bug-前准备：" class="headerlink" title="提交 Bug 前准备："></a>提交 Bug 前准备：</h4><p>登录 <a href="https://bugreports.qt.io/secure/Dashboard.jspa">bugreports.qt.io</a> ，先在下面链接处的 Bug 库里面查询一下， 你想要提交的 bug （or Suggesstion）是否已经被人提了，若是重复，则不必再提；</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707224536.png" width="85%" / loading="lazy"><br><h4 id="创建-Bug-单："><a href="#创建-Bug-单：" class="headerlink" title="创建 Bug 单："></a>创建 Bug 单：</h4><p>若是之前没有人填写你想提的这个 Bug， 则可以放心的开始创建你的 Bug 单号了，点击上面的 <code>新建</code> 按钮，然后按照页面的提交，进行填写，其中带有 * 的为必填项；其中通常 默认为 <code>Qt (QTBUG)</code> 和 <code>Bug</code> ，若是 Linux 上面的平台，则可以选择为 <code>Linux/x11</code> ; 在然后就是下面的详细描述：越详细越好， 最好可以在下面的附件可以带上你写的能够复现的实例程序最佳；都完成之后，就可以点击有下家的 <code>新建</code> 按钮<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707232702.png" width="70%" / loading="lazy"></p><p>若是创建成功，则会在首页看到一个显示， 点击即可以看到这个 Bug 单号，注意它生成的一个 Bug 编号是很重要且唯一的；</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200707233144.png" width="70%" / loading="lazy"><br><h4 id="查看创建的-Bug-单"><a href="#查看创建的-Bug-单" class="headerlink" title="查看创建的 Bug 单"></a>查看创建的 Bug 单</h4><p>点击 <a href="https://bugreports.qt.io/browse/QTBUG-85477">QTBUG-85477</a> 进去，可以查看刚创建好的 Bug 单；沟通得知该问题的属于第三方的问题，的需要在<a href="https://github.com/glennrp/libpng">上游</a>去修改（后面已在上游提交 pr）；<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200709010256.png" width="90%" / loading="lazy"></p><br><h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p>可以修改该网站语言为中文；想不到吧！！！ 使用 Qt 的 Bug 反馈网站，居然是有语言这一栏的设置的 ，点击右上角的 <code>profile-Preferences- pen 图标</code> (<code>头像-个人信息- 参数配置-笔</code>)， 在弹出来的语言中选择 <code>中文（中国）</code>后，点击<code>更新</code>保存。</p><p>体验了一把，中文的翻译也不算很过关，可以勉强使用，随后使用 中文、English， 由你自己体验选择；还是推荐英文；</p><br><br><br><br><hr><br><br><br><br><h3 id="向-Qt-提交贡献-Code："><a href="#向-Qt-提交贡献-Code：" class="headerlink" title="向 Qt 提交贡献 Code："></a>向 Qt 提交贡献 Code：</h3><p>除了给 Qt 提交 Bug 或 Suggesstion，我们也可以依靠自己的动手能力，给 Qt 提交代码请求他们进行合并，从而帮助 Qt 的代码更加完善；</p><br><p><strong>提交步骤：</strong></p><h4 id="注册-Qt-账号：-1"><a href="#注册-Qt-账号：-1" class="headerlink" title="注册 Qt 账号："></a>注册 Qt 账号：</h4><p>注册一个 Qt（codereview） 的账号；</p><br><h4 id="登录-Code-Review："><a href="#登录-Code-Review：" class="headerlink" title="登录 Code Review："></a>登录 Code Review：</h4><p>登录 <a href="https://codereview.qt-project.org/dashboard/self">codereview.qt-project.org</a>  网站，这是 Qt 组织的官方“代码审核”平台（不同于 GitLab 和 GitHub），其主要功能是代码审查很是方便；</p><p>配置邮件：在 <code>Email</code> 中填写邮箱；</p><p>到个人信息中， 在 “Agreements-New Contributor Agreement” 中， 允许一个贡献协议。通常个人是提交<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200709005436.png" width="60%" / loading="lazy"></p><p><font color=#D0087E face="幼圆"><strong>注意：</strong>  邮箱是必填的，且要和后面提交的署名的邮箱是同一个邮箱；且若不签署此协议，是不能被 push 的， 也是不会被合并的。</font></p><br><h4 id="输入-ssh："><a href="#输入-ssh：" class="headerlink" title="输入 ssh："></a>输入 ssh：</h4><p>和 GitHub、 GitLab 这种相似，本机创建好自己的 git 账号后，在终端执行 <code>cat ~/.ssh/id_rsa.pub</code> 后将显示的公钥字符串，进行复制，点击网页的右上角的 <strong>“settings-SSHKeys-SSH keys”</strong> 页面，将其粘贴到里面，然后点击 <strong>“ADD NEW SSH KEY”</strong> 几可以创建成功</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708001558.png" width="70%" / loading="lazy"><p><font color=#D0087E face="幼圆"><strong>注意：</strong>  使用 commit 的时候，生成 git 的 user.name 必须和 user.email 中 @ 的前缀是一样的；且 <code>姓</code>和<code>名</code>必须是首字母大写，且 <code>姓</code>和<code>名</code>之间使用用空格隔开；否则可能是不被合并改代码的，或者修改的话也是很麻烦的； eg: <code>Xmuli Tech &lt;xmulitech@gmail.com&gt;</code></font><br><br></p><h4 id="下载仓库的代码"><a href="#下载仓库的代码" class="headerlink" title="下载仓库的代码"></a>下载仓库的代码</h4><p>点击主页的 <strong>“BROWSE-Repositiories”</strong>，然后在搜索栏 <strong>“Fileter：”</strong> 的右侧，输入你想要查找的仓库，eg：<code>qtbase</code>；<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708000059.png" width="100%" / loading="lazy"></p><p>然后点击该仓库链接， 可以看到，一共提供了三种下载方式：你也可以使用如下任意一种方式下载；但是由于某种神秘的原因，直接下载可能会很慢（有 434.7 M， 2020-07-08），哪怕是使用 TZ 依旧耗时很久，请耐心等待</p><ul><li><p>**[方式一] ANONYMOUS HTTP **</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone with commit-msg hook</span><span class="token function">git</span> clone <span class="token string">"https://codereview.qt-project.org/qt/qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cd <span class="token string">"qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> -p .git/hooks <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> -Lo <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg https://codereview.qt-project.org/tools/hooks/commit-msg<span class="token punctuation">;</span> <span class="token function">chmod</span> +x <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg<span class="token punctuation">)</span><span class="token comment"># Clone with commit-msg hook</span><span class="token function">git</span> clone <span class="token string">"https://codereview.qt-project.org/qt/qtbase"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br></li><li><p><strong>[方式二] HTTP</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone with commit-msg hook</span><span class="token function">git</span> clone <span class="token string">"https://xmuli@codereview.qt-project.org/a/qt/qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>cd <span class="token string">"qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> -p .git/hooks <span class="token operator">&amp;&amp;</span> <span class="token function">curl</span> -Lo <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg https://xmuli@codereview.qt-project.org/tools/hooks/commit-msg<span class="token punctuation">;</span> <span class="token function">chmod</span> +x <span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">`</span></span>/hooks/commit-msg<span class="token punctuation">)</span><span class="token comment"># Clone with commit-msg hook</span><span class="token function">git</span> clone <span class="token string">"https://xmuli@codereview.qt-project.org/a/qt/qtbase"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br></li><li><p><strong>[方式三] SSH</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Clone with commit-msg hook</span><span class="token function">git</span> clone <span class="token string">"ssh://xmuli@codereview.qt-project.org:29418/qt/qtbase"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">scp</span> -p -P <span class="token number">29418</span> xmuli@codereview.qt-project.org:hooks/commit-msg <span class="token string">"qtbase/.git/hooks/"</span><span class="token comment"># Clone</span><span class="token function">git</span> clone <span class="token string">"ssh://xmuli@codereview.qt-project.org:29418/qt/qtbase"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br></li></ul><blockquote><p>//附 qtbase[2020-07-08].rar 百度云盘备份<br>链接: <a href="https://pan.baidu.com/s/1gLPjqXL7vbRhp6oqGIeMlg">https://pan.baidu.com/s/1gLPjqXL7vbRhp6oqGIeMlg</a>  密码: knag</p></blockquote><br><h4 id="设置-git-hooks："><a href="#设置-git-hooks：" class="headerlink" title="设置 git hooks："></a>设置 git hooks：</h4><p>执行如下，配置的是 commit msg和commit hook，它能自动生成一个changeid，也就是将来标示你这个修改的id。后面若是需要修改的话，就使用 <code>git commit --amend</code> 来修改，避免 <code>Change-Id</code> 发生了改变，生成了一个新的提交；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">gitdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> rev-parse --git-dir<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token function">scp</span> -P <span class="token number">29418</span> codereview.qt-project.org:hooks/commit-msg <span class="token variable">$&#123;gitdir&#125;</span>/hooks/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h4 id="修改代码和-commit："><a href="#修改代码和-commit：" class="headerlink" title="修改代码和 commit："></a>修改代码和 commit：</h4><blockquote><p>若是在 Linux 上，下载源码包之后，执行 <code>sudo apt build-dep qtbase5-dev</code> 安装编译依赖；源码切换到 <code>dev</code> 分支， 进行代码修改后，进行 commit 提交信息；</p></blockquote><p>在本地， 现在本地修改好代码，</p><p>注意的的是，Qt 的提交规范是很严格的：一开始一句简短的描述，然后一行空行，再然后就是详细的描述；如果提交的 commit 不符合规范的话，机器人🤖是会指出来错误的；一直到你提交正确为止；</p><br><h4 id="提交贡献："><a href="#提交贡献：" class="headerlink" title="提交贡献："></a>提交贡献：</h4><p>当代码修改通过之后，且能够成功编译之后，且 commit 信息也正确的就可以准备提交了；且一般每个贡献代码是需要在提交信息结束的时候，将附带的 Qt-Bug 编号给带上去；</p><p>也可以参考官方的提交模板：<a href="https://code.qt.io/cgit/qt/qt5.git/tree/.commit-template">.commit-template</a> </p><p>附上一个他人提交的例子 <a href="https://codereview.qt-project.org/c/qt/qtbase/+/306765">qtbase/+/306765</a> 作为参考，摘录如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">Fix handling of Suzhou numbering systemThis only arises when the system locale tells us to use its zero asour zero digit<span class="token punctuation">,</span> since no CLDR locale uses it by default. Adapt anMS<span class="token punctuation">-</span>specific QLocale<span class="token punctuation">:</span><span class="token punctuation">:</span>system() test to use Suzhou numbering<span class="token punctuation">,</span> so as totest this.<span class="token key atrule">Fixes</span><span class="token punctuation">:</span> QTBUG<span class="token punctuation">-</span><span class="token number">85409</span><span class="token key atrule">Change-Id</span><span class="token punctuation">:</span> I343324bb563ee0e455dfe77d4825bf8c3082ca30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是第一次 commit， 执行 <code>git commit -a</code>，会显示你加上的信息和自动加上的 <code>Change-Id</code> 号作为本次记录：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200709003020.png" width="70%" / loading="lazy"><p><font color=#D0087E face="幼圆"><strong>注意：</strong>  不按照此规范写 commit 信息，也是不会被合并的</font></p><br><h4 id="推送贡献-PATH："><a href="#推送贡献-PATH：" class="headerlink" title="推送贡献 PATH："></a>推送贡献 PATH：</h4><p>执行 <code>git push origin HEAD:refs/for/dev</code> 将修改的文件进行推送到 <code>gerrit</code> 上，进行代码审查，这里推送可能需要等待的时间比较长：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708_205601.png" width="70%" / loading="lazy"><br><h4 id="添加审核"><a href="#添加审核" class="headerlink" title="添加审核:"></a>添加审核:</h4><p>查看本文件的修改者 <code>git log --pretty=oneline src/3rdparty/libpng/png.c</code> ，选取其中出现评率最高的人，添加即可；</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">f2ce5b9136882fb315cb524fd9037bc06bff7830 (HEAD <span class="token punctuation">-</span><span class="token punctuation">></span> dev) Add spaces around '/<span class="token important">*'</span> and '<span class="token important">*/'</span>2e8005765d6513c4743a939aea97c68427f6ab2c Update bundled libpng to version 1.6.375d8b01468e8bd752dad090aaef4ccf3a83a58a0d Update bundled libpng to version 1.6.360d7c049e4407bf0db8d1eca1ea248c6d6b739c8c Update bundled libpng to version 1.6.35b084837ffc34439710552cb6ed31054c60f6b2d4 Update bundled libpng to version 1.6.34e51dbda0677d9ff4419c9dc70e6209fae194ee02 Update bundled libpng to version 1.6.329369eca108cc509ed651c0dbab6fa54de83727fc Update bundled libpng to version 1.6.28714cb4020e12e078e8ba8c2c5493d138d515f46d Update bundled libpng to version 1.6.20ad5c768fc8b93e22201fb557561b2edd4fcdc26b Update bundled libpng to version 1.6.1968c137cc725ceadec68c455e0e3e365ecb00f2c1 Update bundled libpng to version 1.6.17<span class="token key atrule">1fa1ce36288e3e537e9e4db1cfa42b338b5b7e58 Upgrading libpng</span><span class="token punctuation">:</span> Adding clean copy of libpng 1.5.1038be0d13830efd2d98281c645c3a60afe05ffece Initial import from the monolithic Qt.(END)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加完成之后，等待即可：<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200708212111.png" width="90%" / loading="lazy"></p><p><font color=#D0087E face="幼圆"><strong>注意：</strong>  和常规的 gitlab、 github 不同，若是不指定审查者，那么该修改一万年也不会有机会被合并进去；必须在网页 gerrit 上指定几个该 commit 的审查者</font></p><br><h4 id="合并结果："><a href="#合并结果：" class="headerlink" title="合并结果："></a>合并结果：</h4><p>若是没有问题，则会被批准进入仓库；或者按照指导意见来修改，符合标准之后，依旧可以被合并；或许因为某些原因可能不被合并；好运~~</p><br><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>本次重在熟悉流程，为后面的为 Qt 提交贡献 Path 做准备；</p><p>本次提交 Bug 为 <a href="https://bugreports.qt.io/browse/QTBUG-85477">QTBUG-85477</a> 和 对应的修改 <a href="https://codereview.qt-project.org/c/qt/qtbase/+/307241">+307241</a> ；因为此修改实际为 Qt 的第三方库，需要从它的上游进行提交修改，而非此处的 qtbase 修改； 于是在对应的第三方的存储库 <a href="https://github.com/glennrp/libpng">glennrp/libpng</a> 补上了这个提交 <a href="https://github.com/glennrp/libpng/pulls">#337</a></p><br><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><p><a href="https://wiki.qt.io/Setting_up_Gerrit">Setting up Gerrit</a></p></li><li><p><a href="https://wiki.qt.io/Gerrit_Introduction">Gerrit_Introduction</a></p></li><li><p><a href="https://code.qt.io/cgit/qt/qt5.git/commit/.commit-template">qt-commit-template</a></p></li><li><p><a href="https://www.csslayer.info/wordpress/linux/qt-linux/contribute-patch-to-qt/">如何给 Qt 贡献 Patch</a></p></li><li><p><a href="https://bugreports.qt.io/browse/QTBUG-85477">QTBUG-85477</a> [本次实例]</p></li><li><p><a href="https://codereview.qt-project.org/c/qt/qtbase/+/307241">commit 307241</a> [本次实例]</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客CI自动部署网站[个人习惯]</title>
      <link href="posts/ec46a3f7/"/>
      <url>posts/ec46a3f7/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　前面有几次因为换了 Win 和 Mac 系统，且后面换过两次主题，都是想着把前面旧的切断，然后重新搭建；这里再次记录一下，用作备份，后面若是迁移，就有参考（这次涉及多 Action 自动化部署）， 应该是不在需要再在新的环境中部署的</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="部署环境："><a href="#部署环境：" class="headerlink" title="部署环境："></a>部署环境：</h3><p>　　<strong>💻：</strong> <code>MacOS 10.14.6 </code> 📎  <code>uos20 amd64</code> 📎 <code>win10 2004</code><br>　　在 Mac 和 Win 上面都有部署过静态博客的经验，其中 Mac 实际的坑会多一点。</p><br><h3 id="部署记录："><a href="#部署记录：" class="headerlink" title="部署记录："></a>部署记录：</h3><p>我的个人博客：现在是采用 <code>Hexo + github Page + github 图床 + PicGo + cdn + Action</code> 来完成自动化；</p><p>准备工作： 在本地机器上安装 <a href="https://nodejs.org/zh-cn/">nodejs</a> 和 <a href="https://hexo.io/zh-cn/">hexo</a> 这两个，使用 <code>--version</code> 确认安装成功；</p><p>　　注：其中 <code>xmuliMark</code> 为在 github 上创建的新的空的仓库，然后 <code>clone</code> 到本地机器的空文件夹；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 建站：</span>hexo init xmuliMark<span class="token builtin class-name">cd</span> xmuliMark<span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># 使用 yun 主题</span><span class="token function">git</span> clone -b master https://github.com/YunYouJun/hexo-theme-yun themes/yun<span class="token function">npm</span> <span class="token function">install</span> hexo-render-pug hexo-renderer-stylus将 yun 下的 .git 和 .github 文件夹 改名为 backup.git 、backup.github <span class="token comment"># 便于后面 yun 主题升级</span>个性化配置 yun 和 hexo 主题<span class="token comment"># hexo d 命令报错 ERROR Deployer not found: git 的解决方案</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span class="token comment"># 创建一个空的分支，设置为默认分支，避免提交之后被记录有贡献</span><span class="token function">git</span> checkout --orphan<span class="token operator">=</span>noContributions<span class="token function">git</span> <span class="token function">rm</span> -rf <span class="token builtin class-name">.</span><span class="token function">touch</span> README.md书写 README.md<span class="token function">git</span> push origin master  -f在 github 网页设置为默认分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　在书写 *.md 文章的仓库中，在 github 网页的 <strong>“settings-Secrets”</strong> 中，创建一个名为 <code>HEXO_DEPLOY_KEY</code> 的变量（下面脚本会用到），其值为本地机器的 git 私有秘钥( <code>cat ~/.ssh/id_rsa</code> 所输出的值)；</p><p>　　在 xxx/.github/workflows/hexoDeploy.yml (注：hexoDeploy 可以为任意名称)里面书写如下；用作自动 CI (ACtion) 使用，自动部署到 xmuli.github.io 这个仓库下。该脚本作用是收到 push 就会触发，将这里的仓库解析为脚本，生成网页到 xmuli.github.io 仓库下；</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Deploy Automatically<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest        <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Node.js envs      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo deploy      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">HEXO_DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HEXO_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$HEXO_DEPLOY_KEY" > ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com >> ~/.ssh/known_hosts        git config --global user.name "xmuli"        git config --global user.email "xmulitech@gmail.com"        npm i -g hexo-cli        npm i        hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过上面的部署后，最终的效果如下：</p><p>可以在任意一台电脑下书写 .md 文件，然后 push 上传的 github 的仓库，就会自动部署看到的网页；<br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/未命名文件.jpg" width="100%" / loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>翻译:Qt5 on Wayland</title>
      <link href="posts/fd73b125/"/>
      <url>posts/fd73b125/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　翻译一篇关于和 <code>wayland</code> 有关的技术文章, 其英文标题为 <a href="https://wayland.freedesktop.org/qt5.html">Qt 5 on Wayland</a>.</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>Qt 5工具箱中的Wayland支持在Qt Platform Abstraction（QPA） <a href="https://code.qt.io/cgit/qt/qtwayland.git/">Wayland插件中进行</a>。构建和使用QtWayland的最低要求是Wayland（和Weston）1.0.0。</p><p>如果您还想构建qtwebkit浏览器，则最好遵循<a href="https://wiki.qt.io/Building_Qt_5_from_Git">从git构建Qt 5的说明</a>，该指南可生成更多内容。init-repository脚本在失败时时候（不幸的是经常失败），会不智能的当地返回错误，因此您需要手动运行它并确保它不会输出错误。</p><p>第三个选项是<a href="https://wiki.qt.io/Qt-5-Alpha-building-instructions">Qt 5 Alpha构建指令</a>，它比git指令更小且更可靠，同时仍包含qtwebkit，但对于Wayland客户端需要LD_PRELOAD：<br><code>$ LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libfontconfig.so.1 ./fancybrowser -platform wayland</code></p><ul><li><a href="https://wayland.freedesktop.org/qt5.html#heading_toc_j_0">获取源代码并进行编译</a></li><li><a href="https://wayland.freedesktop.org/qt5.html#heading_toc_j_1">尝试一下</a></li><li><a href="https://wayland.freedesktop.org/qt5.html#heading_toc_j_2">移植您的Qt应用程序</a></li><li><a href="https://wayland.freedesktop.org/qt5.html#heading_toc_j_3">已知的问题</a></li><li><a href="https://wayland.freedesktop.org/qt5.html#heading_toc_j_4">获取帮助并报告问题</a></li></ul><br><h2 id="获取源代码和编译"><a href="#获取源代码和编译" class="headerlink" title="获取源代码和编译"></a>获取源代码和编译</h2><p>要想尝试的话，的首先要克隆 qtbase:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> qt<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> qt$ <span class="token function">git</span> clone git://code.qt.io/qt/qtbase.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译需要设置一些env变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">QTVER</span><span class="token operator">=</span>qt5$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">QTDIR</span><span class="token operator">=</span>/opt/qt/<span class="token variable">$QTVER</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$QTDIR</span>/bin/:<span class="token environment constant">$PATH</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$QTDIR</span>/lib/:<span class="token variable">$LD_LIBRARY_PATH</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token variable">$QTDIR</span>/lib/pkgconfig/:<span class="token variable">$PKG_CONFIG_PATH</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_PLUGIN_PATH</span><span class="token operator">=</span><span class="token variable">$QTDIR</span>/lib/plugins/$ ./configure -confirm-license -opensource -debug -nomake examples <span class="token punctuation">\</span>   -nomake tests -nomake demos -make libs --prefix <span class="token variable">$&#123;QTDIR&#125;</span>$ <span class="token function">make</span>$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，还需要克隆并构建qtdeclarative:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git://code.qt.io/qt/qtdeclarative.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要构建它们，运行以下命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ qmake$ <span class="token function">make</span>$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时，已经准备好了所有需要的Qt库和编译QtWayland平台所需的工具:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/$ <span class="token function">git</span> clone git://code.qt.io/qt/qtwayland.git$ <span class="token builtin class-name">cd</span> qtwayland/$ qmake$ <span class="token function">make</span>$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>首先，不能忘了设置XDG目录，以及之前设置的编译Qt的变量，以及重新运行.bashrc:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XDG_RUNTIME_DIR</span></span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/.xdg$ <span class="token function">mkdir</span> <span class="token environment constant">$HOME</span>/.xdg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以在Wayland和X之间来回跳转（”-platform xcb”），以比较Wayland和X下的应用程序的外观和感觉:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/qtbase/examples/opengl/hellowindow$ qmake$ <span class="token function">make</span>$ weston <span class="token operator">&amp;</span>$ ./hellowindow -platform wayland<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="移植Qt应用程序"><a href="#移植Qt应用程序" class="headerlink" title="移植Qt应用程序"></a>移植Qt应用程序</h2><p>Qt 5的结构是Lighthouse（或Qt Platform）抽象，即窗口系统和设备不可知的架构。这意味着Qt可以根据需要在运行时为不同的窗口系统加载不同的后台插件。例如，一个在Qt上开发的应用，可以分别使用”-platform xcb “和”-platform wayland “来运行XCB或Wayland（或设置<code>QT_QPA_PLATFORM</code>环境变量），在这两个系统上应该有类似的行为，而不需要重新编译。</p><p>Qt抽象也向应用开发者公开了Wayland的两个本地资源：<code>wl_display</code>和<code>wl_surface</code>。有了这些，开发者就可以通过接口访问Wayland的内部资源来处理一特殊情况。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token class-name">QPlatformNativeInterface</span><span class="token operator">::</span><span class="token function">nativeResourceForWindow</span><span class="token punctuation">(</span><span class="token keyword">const</span> QByteArray <span class="token operator">&amp;</span>resource<span class="token punctuation">,</span> QWindow <span class="token operator">*</span>window<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取显示全局处理程序很直接，如下例所示:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPlatformNativeInterface <span class="token operator">*</span>native <span class="token operator">=</span>    <span class="token class-name">QGuiApplication</span><span class="token operator">::</span><span class="token function">platformNativeInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">wl_display</span> <span class="token operator">*</span>wl_dpy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">wl_display</span> <span class="token operator">*</span><span class="token punctuation">)</span>    native<span class="token operator">-></span><span class="token function">nativeResourceForWindow</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>wl_surface</code>:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPlatformNativeInterface <span class="token operator">*</span>native <span class="token operator">=</span>    <span class="token class-name">QGuiApplication</span><span class="token operator">::</span><span class="token function">platformNativeInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">wl_surface</span> <span class="token operator">*</span>surface <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">struct</span> <span class="token class-name">wl_surface</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>    native<span class="token operator">-></span><span class="token function">nativeResourceForWindow</span><span class="token punctuation">(</span><span class="token string">"surface"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">windowHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><ul><li>有关 QtWayland错误的列表，请参见<a href="https://bugreports.qt.io/browse/QTBUG/component/19921/?selectedTab=com.atlassian.jira.jira-projects-plugin:component-summary-panel">Qt错误跟踪器</a>。</li></ul><br><h2 id="获得帮助和报告问题"><a href="#获得帮助和报告问题" class="headerlink" title="获得帮助和报告问题"></a>获得帮助和报告问题</h2><p>在irc.freenode.net上尝试＃qt-labs IRC频道</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wayland </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译:Wayland架构、渲染、硬件支持</title>
      <link href="posts/cab49185/"/>
      <url>posts/cab49185/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　翻译一篇关于和 wayland 有关的技术文章, 其英文标题为<a href="https://wayland.freedesktop.org/architecture.html">Wayland Architecture</a>  .</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="Wayland-架构"><a href="#Wayland-架构" class="headerlink" title="Wayland 架构"></a>Wayland 架构</h2><p>若是想要更好的理解 <code>Wayland</code> 架构及其与 <code>X (X11 or X Window System)</code>  结构；一种很好的方法是将事件从输入设备就开始跟踪, 查看期间所有的屏幕上出现的变化。</p><p>这就是我们现在对 <code>X</code> 的理解。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200706151755.png" width="50%"/ loading="lazy"><ol><li>内核是从一个输入设备中获取一个事件，并通过 evdev 输入驱动将其发送到 X。内核通过驱动设备将不同设备的事件协议翻译成 linux evdev 输入事件标准，依靠此来完成所有的工作。</li><li>X 服务器确定事件影响到哪个窗口，并将其发送给在该窗口上选择了相关事件的客户端。X 服务器实际上并不知道如何正确地做这件事，因为窗口在屏幕上的位置是由合成器控制的，并且可能会以很多 X 服务器不理解的方式进行转换（缩小、旋转、晃动等）。</li><li>客户端依据这个事件决定该如何操作。通常情况下，UI 通常根据事件来改变，也许是一个复选框被点击了，或者指向了一个必须被显示的按钮。因此，客户端会向X服务器发送一个渲染请求。</li><li>当X服务器收到渲染请求时，它将其发送给驱动程序，让它对硬件进行编程以进行渲染。X服务器还计算出渲染的边界区域，并将其作为damage事件发送给合成器。</li><li>damage事件告诉合成器，窗口中发生了一些变化，它必须重新合成该窗口可见的屏幕部分。合成器负责根据它的场景图和X窗口的内容来渲染整个屏幕内容。且它是必须通过X服务器来渲染。</li><li>X服务器接收到来自合成器的渲染请求后，要么将合成器的后缓冲区复制到前缓冲区，要么进行翻页。在一般情况下，X服务器必须做这一步，这样它就可以考虑到重叠的窗口，这可能需要剪接，并确定是否可以翻页。然而，对于一个总是全屏的合成器来说，这又是一个不必要的上下文切换。</li></ol><p>如上所述，这种方法都有瑕疵。X服务器没有信息来决定哪个窗口应该接收事件，也不能将屏幕坐标转换为窗口局部坐标。而且即使X已经把最终绘制屏幕的责任交给了合成管理器，X仍然控制着前面的缓冲区和模式设置。过去X服务器处理的大部分复杂问题，现在都可以在内核或自带的库中找到（KMS、evdev、mesa、fontconfig、freetype、cairo、Qt等）。总的来说，X服务器现在只是一个中间人，在应用程序和合成器之间多引入了一步，在合成器和硬件之间多引入了一步。</p><p>在wayland中，合成器就是显示服务器。我们把KMS和evdev的控制权转移到合成器上。wayland协议让合成器直接向客户端发送输入事件，让客户端直接向合成器发送损坏事件。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200706151816.png" width="50%"/ loading="lazy"><ol><li>内核获得一个事件并将其发送到合成器。这类似于X的情况，这很好，因为我们可以重复使用内核中所有的输入驱动。</li><li>合成器通过它的场景图来决定哪个窗口应该接收这个事件。场景图对应于屏幕上的内容，而合成器了解它可能已经对场景图中的元素转换。因此合成器可以选择合适的窗口，并通过应用逆向变换，将屏幕坐标转换为窗口局部坐标。只要能计算出输入事件的逆向变换，就可以应用于窗口的变换类型只限于合成器能做的事情。</li><li>如在X案例中，当客户端接收到事件时，它会更新UI作为响应。但在wayland的情况下，渲染发生在客户端，客户端只需向合成器发送一个请求，指示被更新的区域。</li><li>合成器收集客户端的damage请求，然后重新合成屏幕效果。且合成器可以直接发出ioctl，与KMS一起进行翻页。</li></ol><br><h2 id="Wayland-渲染"><a href="#Wayland-渲染" class="headerlink" title="Wayland 渲染"></a>Wayland 渲染</h2><p>在上面的概述中，有漏掉了一个细节，那就是客户端在wayland下究竟是如何渲染的。通过将X服务器从画面中移除，我们也移除了X客户端通常的渲染机制。但是我们在X下的DRI2已经使用了另一种机制：直接渲染。通过直接渲染，客户端和服务器共享一个视频内存缓冲区。客户端链接到一个渲染库，比如OpenGL，它知道如何对硬件进行编程，并直接渲染到缓冲区。而合成器则可以在合成桌面时，将缓冲区作为纹理使用。在初始设置之后，客户端只需要告诉合成器使用哪个缓冲区，以及何时何地的将新内容渲染到缓冲区中。</p><p>这就给应用程序留下了两种更新窗口内容的方法：</p><ol><li>把新的内容渲染到一个新的缓冲区里 然后告诉合成器使用哪个缓冲区来代替旧的缓冲区。应用程序可以在每次需要更新窗口内容时分配一个新的缓冲区，也可以保留两个（或更多）缓冲区并在它们之间循环。缓冲区的管理完全由应用程序控制。</li><li>将新的内容渲染之前告诉合成器使用的缓冲区。虽然可以直接渲染到合成器共享的缓冲区中，但这可能会与合成器发生竞赛。可能发生的情况是，重新绘制窗口内容可能会被合成器重新绘制桌面所中断。如果应用程序在清除窗口后但在渲染内容之前被打断，那么合成器将从一个空白缓冲区中进行纹理处理。其结果是，应用程序窗口将在空白窗口或半渲染的内容之间闪烁。避免这种情况的传统方法是将新的内容渲染到后置缓冲区，然后从那里复制到合成器表面。后面的缓冲区可以即时分配，并且刚好足够容纳新内容，或者应用程序可以保留一个缓冲区。同样这也是由应用程序所控制的。</li></ol><p>无论在哪种情况下，应用程序都必须告诉合成器表面的哪个区域存放新内容。当应用程序直接渲染到共享缓冲区时，需要注意到合成器有新内容。但在交换缓冲区时，合成器也不会认为有什么变化，只有需要应用程序提出请求才会重新绘制桌面。即使应用程序传递给合成器一个新的缓冲区，也可能只有一小部分缓冲区是不同的，比如一个闪烁的光标或一个旋转器。</p><br><h2 id="Wayland的-硬件支持"><a href="#Wayland的-硬件支持" class="headerlink" title="Wayland的 硬件支持"></a>Wayland的 硬件支持</h2><p>通常情况下，硬件启用包括 modesetting / display 和 EGL / GLES2。除此之外，Wayland还需要一种在进程之间高效共享缓冲区的方式。这有两个方面，客户端和服务器端。</p><p>在客户端，我们定义了一个Wayland EGL平台。在EGL模型中，它由原生类型（EGLNativeDisplayType、EGLNativeWindowType和EGLNativePixmapType）和创建这些类型的方法组成。换句话说，它是将EGL栈及其缓冲区共享机制与通用Wayland API绑定的耦合代码。EGL堆栈有望提供Wayland EGL平台的实现。完整的API在<a href="https://cgit.freedesktop.org/wayland/wayland/tree/egl/wayland-egl.h">wayland-egl.h</a>头中。mesa EGL协议栈中的开源实现在<a href="https://cgit.freedesktop.org/mesa/mesa/tree/src/egl/drivers/dri2/platform_wayland.c">platform_wayland.c</a>中</p><p>在引擎下，EGL堆栈寄希望于被一个特定厂商的协议扩展所定义，让客户端EGL堆栈与合成器通信缓冲区细节，以及共享缓冲区。wayland-egl.h API的意义在于将这些抽象掉，让客户端为Wayland曲面创建一个EGLSurface并开始渲染。开源栈使用了 <a href="https://cgit.freedesktop.org/mesa/mesa/tree/src/egl/wayland/wayland-drm/wayland-drm.xml">drm</a> Wayland 扩展，让客户端发现要使用的 drm 设备并进行认证，然后与合成器共享 drm（GEM）缓冲区。</p><p>Wayland的服务器端是垂直领域的合成器和核心用户体验，典型的是将任务切换器、应用启动器、锁屏整合在一个单体应用中。服务器运行在模式设置 API（内核模式设置、OpenWF Display或类似）之上，并使 EGL / GLES2 合成器和硬件覆盖（如果有的话）混合合成最终的UI。启用模式设置、EGL/GLES2和覆盖是标准硬件启动的一部分。启用Wayland的额外要求是<a href="https://cgit.freedesktop.org/mesa/mesa/tree/docs/specs/WL_bind_wayland_display.spec">EGL_WL_bind_wayland_display</a>扩展，它允许合成器从通用Wayland共享缓冲区创建EGLImage。它类似于<a href="http://www.khronos.org/registry/egl/extensions/KHR/EGL_KHR_image_pixmap.txt">EGL_KHR_image_pixmap</a>扩展，可从X像素图创建EGLImage。</p><p>该扩展有一个设置步骤，您必须将EGL显示与Wayland显示绑定。然后当合成器从客户端接收通用的Wayland缓冲区时（通常在客户端调用eglSwapBuffers时），它将能够将结构wl_buffer指针传递给eglCreateImageKHR作为EGLClientBuffer参数，并以EGL_WAYLAND_BUFFER_WL作为目标。这将创建一个EGLImage，它可以被合成器用作纹理，或传递给模式设置代码作为覆盖平面使用。同样这是由厂商特定的协议扩展来实现的，在服务器端，它将接收驱动程序关于共享缓冲区的具体细节，并在用户调用eglCreateImageKHR时将其转化为EGL图像。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wayland </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加载图片丢失解决方案</title>
      <link href="posts/edb355c4/"/>
      <url>posts/edb355c4/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　打开网站 <code>github</code> 的时候，经常会遇到加载图片丢失，或者有的图片能够显示，又是不能显示出来；非要开全局代理才能所有头像、图片资源才能够显示出来。附上解决方案：强制指定域名走代理和修改 <code>hosts</code> 文件。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>在 <strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>win10 2004版本 x64</code>中，打开 <code>github</code> 或者相关网站的时候，经常图片资源没有加载出来，看到的效果就是用户头像缺失。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621_045112_1.jpg" width="100%"/ loading="lazy"> <br><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p><strong>定位问题：</strong></p><ol><li><p>在浏览器打开 github 网站，右键“检查（Ctrl + Shift + I）”；</p></li><li><p>进入 “网络-全部-标头”， 然后刷新此页面，再次加载本网页</p></li><li><p>查看获取文件失败的的报文的请求链接。发现是 <code>githubusercontent.com</code> 域名， 而非也是 “github.com” 域名</p></li><li><p>在 代理软件里添加 <code>||githubusercontent.com</code>，其中 || 表示匹配该域名的所有子域名，点击保存</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621_045642_2.jpg" width="70%"/ loading="lazy"></li><li><p>再次刷新网页，即可看到头像都加载出来了</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621_045755_3.jpg" width="70%"/ loading="lazy"></li></ol><br><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>有时候， 经过上面的操作后，大部分图片资源都加载出来了，但是还有少部分的头像没有被加载出来。 这就狠狠狠狠。。。。。</p><p><strong>原因：</strong> 本土网络环境emmmm， 估计是大概率被 DNS 给污染了， 这里就需要手动修改 hosts 了</p><p><strong>解决：</strong> </p><ul><li>查询域名对应的真实 IP</li><li>将其追加到 hosts文件中；</li></ul><p>可在<code>https://www.ipaddress.com/</code> 查询 <code>raw.githubusercontent.com </code>的真实<code>IP</code> ；</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200621060056.png" width="50%"/ loading="lazy"><br><p>这里附上已经查询好了的，更新于 2020-06-21 日，[其中 <code>assets-cdn.github.com</code> 有四个，若是第一个失败了，则会解析第二个，依次（但是没有负载均衡的效果）]：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GitHub Start </span><span class="token number">140.82</span>.114.4 github.com <span class="token number">140.82</span>.114.3 gist.github.com <span class="token number">185.199</span>.108.153 assets-cdn.github.com<span class="token number">185.199</span>.109.153 assets-cdn.github.com <span class="token number">185.199</span>.110.153 assets-cdn.github.com <span class="token number">185.199</span>.111.153 assets-cdn.github.com <span class="token number">199.232</span>.68.133 raw.githubusercontent.com <span class="token number">199.232</span>.68.133 gist.githubusercontent.com <span class="token number">199.232</span>.68.133 cloud.githubusercontent.com <span class="token number">199.232</span>.68.133 camo.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars0.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars1.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars2.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars3.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars4.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars5.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars6.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars7.githubusercontent.com <span class="token number">199.232</span>.68.133 avatars8.githubusercontent.com <span class="token comment"># GitHub End</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>hosts</code> 文件所在目录：<ul><li><strong>[win:]</strong>  <code>C:\Windows\System32\drivers\etc\hosts</code></li><li><strong>[Mac:]</strong>  <code>/etc/hosts</code></li><li><strong>[Linux:]</strong>  <code>/etc/hosts</code></li></ul></li></ul><p>OK， 到这里就是大功告成了，再怎么打开github网站，都不会有网页图片资源缺失的情况出现</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
          <category> 学习 - 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学时在探索地，你可以系统的学习计算机知识体系结构(大学生)</title>
      <link href="posts/5dd74780/"/>
      <url>posts/5dd74780/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　提供一些自学编程的途径，或许你有心改变现状，但是无知从何处寻找资源开始，本篇所指☞的地方，你可以去康康~ 会找到很多的免费、精品的编程相关的资料学习视频</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="受众人群："><a href="#受众人群：" class="headerlink" title="受众人群："></a>受众人群：</h3><p>本篇主要介绍一些能够自我学习编程的地方；最佳受众为才大一，计算机专业此刻正欲学习编程的大学生，尤其是想要学习编程，但是不知道该如何学习，夜晚很久才能入眠，着急未来（毕业👨‍🎓），且后面想从事此方面的工作的你；且尽可能不花钱，就不能够学习到相关知识就最佳。。。</p><br><h3 id="学习方式："><a href="#学习方式：" class="headerlink" title="学习方式："></a>学习方式：</h3><ul><li>看编程网课🎬</li><li>买编程书籍📚</li><li>报培训班🏫</li><li>有师兄师姐导师带着手把手教导</li><li>自我学习（或许有更好的方式？？？ 我还未可知）</li></ul><br><h3 id="一点碎碎念："><a href="#一点碎碎念：" class="headerlink" title="一点碎碎念："></a>一点碎碎念：</h3><p>学习编程比较晚，大二才开始正式学习，后面每天都学习到很晚，花时间去堆，一个按键一下下的敲击；初次完成一个项目出来的时候，感觉自己无所不能；后面将各门语言进行打通之间的墙壁，同时写了 c/s 和 b/s 端的项目，才感觉没那么慌张；再到后来，越得越多，越感觉无知；学海无涯，山外有山，乐于分享使得我开心即可。</p><p>后来，总感觉自己是半路子出家学习编程，始终学习不够全面，和大牛们的学习相比，差的很远，虽后面重要相关课程都使劲学习，也掌握的还比较好，但是计算机迭代很快，我始终比较年轻；这篇文章，你若是应该是越早看见越好，但是现在看见其实也不晚；若是不知道该如何系列学习哪些课程，可以先按照这图学习：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200607233630.png" width="100%"/ loading="lazy"><br><h3 id="免费学习的地方："><a href="#免费学习的地方：" class="headerlink" title="免费学习的地方："></a>免费学习的地方：</h3><p>这里主要介绍一些我曾经学过的好的地方，很早之前就想分享出来了，但是一直拖到现在才出此篇文章 <strong>这里主要介绍两个地方，一个看网课，另外一个看博客：</strong> </p><br><ul><li><p><a href="https://next.xuetangx.com/">学堂在线</a></p><p>课程虽少，但所讲全部精品和免费，清华、北大、科技大、科技大、麻省等国际名校老师精品课程，推荐：★★★★★</p></li><li><p><a href="http://yun.itheima.com/course">黑马程序员</a></p><p>很多免费视频教学（早期收费课程公开），课程诙谐有趣，听着比较津津有味，课程很多，个人早期经常这里来找资料，推荐：★★★★★</p></li><li><p><a href="https://study.163.com/">网易云课堂</a></p><p>一个课程很齐全的，授课质量也很好的地方，其中免费精品课程很多，推荐：★★★★</p></li><li><p><a href="https://www.imooc.com/">慕课网</a></p><p>课程没有上面那么多，但是也有很多免费精品课程，推荐：★★★★</p></li><li><p><a href="https://www.icourse163.org/">中国大学 MOOC</a></p><p>国家精品课程，大学慕课，课程较少，免费的精品，推荐：★★★★</p></li><li><p><a href="https://www.youtube.com/">youtube</a></p><p>英文够好非常推荐，最能接近一手学习资料的地方，没有字幕的话，可以使用实时生成英文字幕，然后电脑机译为中文，也可以学习，但内容需要自己寻找，推荐：★★★★★</p></li><li><p><a href="https://www.bilibili.com/">哔哩哔哩</a></p><p>二次元聚集地，很多野生 up 主上传的自我学习教程，也可以找到一些比较不错的编程课程，总的来说稂莠不齐，鱼龙混杂，自我判断，但内容需要自己寻找，推荐：★★★</p></li><li><p><a href="https://open.163.com/">网易公开课</a></p><p>课程较少，非编程类的比较多，时不时学一点其他感兴趣的课程也很不错，推荐：★★</p></li><li><p><a href="https://www.wanmen.org/">万门大学</a></p><p>用过几次，没有我想要的课程，大多为付费课程，推荐：★★</p></li><li><p><a href="https://www.51zxw.net/">我要自学网</a></p><p>用的不多，没有前面广和精品，时不时也有惊喜，推荐：★★</p></li><li><p><a href="https://www.yiihuu.com/">翼狐网</a></p><p>用的比较少，不算很了解，推荐：★★</p></li><li><p><a href="https://www.runoob.com/">菜鸟教程</a></p><p>很实用，言简意赅，教程如其名，教你快速入门的基础，出进陌生语言，会看一看，推荐：★★★★</p></li><li><p><a href="https://www.w3school.com.cn/">w3school</a></p><p>基本都是前端，也可以当做一个电子词典查询和前端入门的知识，推荐：★★★</p></li><li><p><a href="http://www.watchmen.cn/video/algorithm/">守望者</a></p><p>可以学习到一些数据结构和算法的视频讲解，推荐：★★★</p></li><li><p><a href="https://www.51cto.com/">51cto</a></p><p>博客比较多，很多文章写的比较好，推荐：★★★</p></li><li><p><a href="http://www.eimhe.com/">美河学习在线</a></p><p>用的比较少，不算很了解，推荐：★★</p></li><li><p><a href="https://github.com/">github</a></p><p>国际的代码学习圣地，一定要学会使用，直接学习牛人代码，爆炸推荐，推荐：★★★★★★</p></li></ul><p>附上的大概的 logo 集合，判断你找对了地方：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200607230911.png" width="50%"/ loading="lazy"><br><p><strong>对于学习时候，如何寻找 error 的报错的解决方案：</strong></p><p>看博客最快，强烈推荐 google 搜索、Bing 等，在才是 baidu；搜索结果，带有后缀表示：csdn、博客园、51cto、知乎 的文章可以优先看，其次再是个人博客，最后就是百度经验等文；</p><br><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>学习这种事情，尤其是计算机这件事，只有一步一个👣，亲自去踩边很多坑，后面才会避过，欲速则不达，慢就是快，不出错就是快，做好笔记和分享，尝试写博客进行知识分享，然后去享受它们。若是对你有帮助，可以将此文点赞分享给你的朋友，大家一起学习，路上不寂寞也不枯燥，我也很享受分享这份分享的快乐，你能够帮我传播也就更棒了</p>]]></content>
      
      
      <categories>
          
          <category> 资源 - 编程语言资料(📚 or 🎬) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重装uos/deepin v20后必安装软件(个人习惯)</title>
      <link href="posts/db5a13a5/"/>
      <url>posts/db5a13a5/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　还是习惯使然，依旧每隔一段时间，就会重装一次系统；这里贴上重装 <code>uos / deepin v20</code> 后必安装软件(个人习惯)；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="启动盘制作工具："><a href="#启动盘制作工具：" class="headerlink" title="启动盘制作工具："></a>启动盘制作工具：</h3><p>深度启动盘制作工具是深度科技团队开发的一款系统启动盘制作工具，具有界面简洁、操作简单的特点，它可以帮助用户简单便捷地制作deepin启动U盘。</p><p><strong>项目地址：</strong></p><ul><li>源码地址：<a href="https://github.com/linuxdeepin/deepin-boot-maker">https://github.com/linuxdeepin/deepin-boot-maker</a></li><li>国际化地址：<a href="https://www.transifex.com/linuxdeepin/deepin-boot-maker/">https://www.transifex.com/linuxdeepin/deepin-boot-maker/</a></li><li>Windows下载地址： <a href="http://cdimage.deepin.com/applications/deepin-boot-maker/windows/deepin-boot-maker.exe">http://cdimage.deepin.com/applications/deepin-boot-maker/windows/</a></li><li>MacOS下载地址： <a href="http://cdimage.deepin.com/applications/deepin-boot-maker/macos/deepin-boot-maker.zip">http://cdimage.deepin.com/applications/deepin-boot-maker/macos/</a></li><li>uos / deepin： 系统自带</li></ul><br><h3 id="开启开发者模式："><a href="#开启开发者模式：" class="headerlink" title="开启开发者模式："></a>开启开发者模式：</h3><p>在 <strong>控制中心</strong> 里面设置； 然后激活， 重启电脑；</p><br><h3 id="换源："><a href="#换源：" class="headerlink" title="换源："></a>换源：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> ./sources.list  /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git:"></a>安装 git:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span class="token comment">#------------------------------------------------------------</span><span class="token function">git</span> config --global user.name <span class="token string">"xmuli"</span>  <span class="token comment"># 本地机器设置全局的姓名和邮箱</span><span class="token function">git</span> config --global user.email <span class="token string">"xmulitech@gmail.com"</span>ssh-keygen -t rsa -C <span class="token string">"xmulitech@gmail.com"</span>  <span class="token comment"># 生成密钥</span><span class="token function">cat</span> ~/.ssh/id_rsa.pub  <span class="token comment"># 显示公钥</span><span class="token comment"># 进入 github / gitlab 的 setting-ssh and gpg keys 去创建新的值</span><span class="token comment"># 成功，可以正常使用</span><span class="token function">git</span> config --global commit.gpgsign <span class="token boolean">true</span> <span class="token comment"># 设置 gpg 签名(若有)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="安装-QtCreator："><a href="#安装-QtCreator：" class="headerlink" title="安装 QtCreator："></a>安装 QtCreator：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator     <span class="token comment">#安装Craetor IDE</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-default   <span class="token comment">#安装qt的配置</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev  <span class="token comment">#安装dtk开发所需要环境(实际可以不需要)</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator-template-dtk  <span class="token comment">#安装 Dtk Widgets Application工程模板</span><span class="token builtin class-name">cd</span> /usr/src<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token builtin class-name">source</span> qt5-default    <span class="token comment">#qt源码包，此会安装在当前所处目录下，建议放在/usr/src 目录再执行</span>  <span class="token comment">#==============================================================</span><span class="token comment"># 也可以将上面的合成一个命令</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-default qtcreator cmake<span class="token comment"># 若是测试 QtCreator 运行空醒目失败，报时间错误，则重新安装 qmake （默认不需要执行）</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-qmake --reinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="安装-zsh："><a href="#安装-zsh：" class="headerlink" title="安装 zsh："></a>安装 zsh：</h3><ul><li>官网：<a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载 zsh</span><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="token variable">)</span></span>"</span>  <span class="token function">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc  <span class="token comment">#拷贝模板</span><span class="token function">vim</span> ~/.zshrc  <span class="token comment">#修改主题为 ZSH_THEME="cloud “</span>chsh -s /bin/zsh   <span class="token comment">#从bash切换到zsh</span>chsh -s /bin/bash  <span class="token comment">#从zsh切换到bash\</span><span class="token comment">#------------------------------------------------------------</span><span class="token comment"># 可以在 .zshrc 后面添加如下</span><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:./node_modules/.bin"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HOMEBREW_BOTTLE_DOMAIN</span><span class="token operator">=</span>https://mirrors.ustc.edu.cn/homebrew-bottles<span class="token builtin class-name">export</span> <span class="token assign-left variable">GPG_TTY</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">tty</span><span class="token variable">)</span></span><span class="token comment">#设置 tree 显示中文且带有颜色</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">tree</span><span class="token operator">=</span><span class="token string">'tree -CN'</span><span class="token comment">#设置行号</span><span class="token builtin class-name">set</span> number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="配置-vim-主题-one-："><a href="#配置-vim-主题-one-：" class="headerlink" title="配置 vim 主题(one)："></a>配置 vim 主题(one)：</h3><ul><li><strong>one 主题官网：</strong> <a href="https://github.com/rakr/vim-one/">vim-one</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">下载 one.vim 文件 <span class="token comment"># https://github.com/rakr/vim-one/tree/master/colors 为下载网址</span><span class="token function">mkdir</span> ~/.vim/colors/  <span class="token comment"># 没有该文件夹就创建</span><span class="token function">sudo</span> <span class="token function">cp</span> ./one.vim ~/.vim/colors/ <span class="token comment"># 复制到 vim 主题下</span><span class="token function">vim</span> ~/.vimrc <span class="token comment"># 修改 vim 配置文件，没有就创建；在 ~/.vimrc 加入如下三行代码后保存退出。「使用 one 主题的 dark 风格，且按下 delete 按键会删除字符」</span>colorscheme one<span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>dark<span class="token builtin class-name">set</span> <span class="token assign-left variable">backspace</span><span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="下载-gitlab-仓库地址："><a href="#下载-gitlab-仓库地址：" class="headerlink" title="下载 gitlab 仓库地址："></a>下载 gitlab 仓库地址：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v<span class="token function">git</span> clone git@github.com:linuxdeepin/dtkwidget.git<span class="token function">git</span> remote <span class="token function">add</span> self xxxxxxx<span class="token function">git</span> clone git@github.com:linuxdeepin/qt5integration.git<span class="token function">git</span> remote <span class="token function">add</span> self xxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="安装常用软件："><a href="#安装常用软件：" class="headerlink" title="安装常用软件："></a>安装常用软件：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># gammaray： 安装 Qt 调试工具 </span><span class="token comment"># flameshot 安装截图工具</span><span class="token comment"># com.notepadqq.notepadqq 安装 notepadqq； "设置-首选项-外观"选择duotone-light</span><span class="token comment"># gitg git 可视化工具</span><span class="token comment"># 商店里面安装讯飞输入法、typora、wps（或官网里面的）</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gammaray flameshot com.notepadqq.notepadqq tree gitg<span class="token function">scp</span> -r ./amd64 wang@10.20.32.137:~/ <span class="token comment"># 使用 scp 传送文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt网络编程之使用cookie和ssl</title>
      <link href="posts/ce5301c5/"/>
      <url>posts/ce5301c5/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　最近使用网络，对于请求头和协议头，有一处挠头了下，看到这一篇有些触发后面实现了，觉得写得还挺好的，且后面可能正好要改进使用 <code>Cookies</code> 和 <code>ssl</code> ，先摆着在这里；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="所使用的Qt版本：5-14-0"><a href="#所使用的Qt版本：5-14-0" class="headerlink" title="所使用的Qt版本：5.14.0"></a>所使用的Qt版本：5.14.0</h3><p>本例子基于这篇博客中的例子：《<a href="https://www.cnblogs.com/BlogPuppet/p/12804271.html">Qt使用HTTPS协议访问网站</a>》</p><br><h3 id="接收Cookies："><a href="#接收Cookies：" class="headerlink" title="接收Cookies："></a>接收Cookies：</h3><p>Cookie由返回的QNetworkReply获取，Qt已经做得很好了，我们只需要调用相关函数即可，像其他响应消息的头也可以由类似的方式获取。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"TestNet.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    TestNet One<span class="token punctuation">;</span>    One<span class="token punctuation">.</span><span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//main.cpp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtNetwork></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span><span class="token keyword">class</span> <span class="token class-name">TestNet</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    QNetworkAccessManager <span class="token operator">*</span>m_manager <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    QNetworkRequest <span class="token operator">*</span>m_request <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">//访问网站</span>    <span class="token keyword">void</span> <span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//建立新对象</span>        m_manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkAccessManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkRequest</span><span class="token punctuation">(</span><span class="token function">QUrl</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置SSL连接</span>        QSslConfiguration config<span class="token punctuation">;</span>        QSslConfiguration conf <span class="token operator">=</span> m_request<span class="token operator">-></span><span class="token function">sslConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setPeerVerifyMode</span><span class="token punctuation">(</span>QSslSocket<span class="token operator">::</span>VerifyNone<span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>QSsl<span class="token operator">::</span>TlsV1SslV3<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_request<span class="token operator">-></span><span class="token function">setSslConfiguration</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接槽</span>        <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>m_manager<span class="token punctuation">,</span><span class="token operator">&amp;</span>QNetworkAccessManager<span class="token operator">::</span>finished<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>TestNet<span class="token operator">::</span>GetWebFinished<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送Get请求</span>        m_manager<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">*</span>m_request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//访问后做的操作</span>    <span class="token keyword">void</span> <span class="token function">GetWebFinished</span><span class="token punctuation">(</span>QNetworkReply <span class="token operator">*</span>reply<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//转换为utf-8编码，这样就可以显示中文了</span>        QTextCodec <span class="token operator">*</span>codec <span class="token operator">=</span> <span class="token class-name">QTextCodec</span><span class="token operator">::</span><span class="token function">codecForName</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QString getData <span class="token operator">=</span> codec<span class="token operator">-></span><span class="token function">toUnicode</span><span class="token punctuation">(</span>reply<span class="token operator">-></span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取Cookies</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>reply<span class="token operator">-></span><span class="token function">hasRawHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            QByteArray cookie <span class="token operator">=</span> reply<span class="token operator">-></span><span class="token function">rawHeader</span><span class="token punctuation">(</span><span class="token string">"Set-Cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span>cookie<span class="token punctuation">.</span><span class="token function">toStdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//TestNet.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <br><h3 id="发送Cookies"><a href="#发送Cookies" class="headerlink" title="发送Cookies:"></a>发送Cookies:</h3><p>首先我们先看一下用Fiddler抓包软件截取的Http请求包。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">POST https<span class="token operator">:</span><span class="token comment">//gitee.com/check_user_login HTTP/1.1</span>Host<span class="token operator">:</span> gitee<span class="token punctuation">.</span>comUser<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv<span class="token operator">:</span><span class="token number">75.0</span><span class="token punctuation">)</span> Gecko<span class="token operator">/</span><span class="token number">20100101</span> Firefox<span class="token operator">/</span><span class="token number">75.0</span>Accept<span class="token operator">:</span> <span class="token operator">*</span><span class="token comment">/*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflate, brReferer: https://gitee.com/loginX-CSRF-Token: GbYJaqAJEXGRYoNtYXUlzdw06JNrqC1FGO7wJO8L+J8=Content-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 22Origin: https://gitee.comConnection: keep-aliveCookie: user_locale=zh-CN; oschina_new_user=false; Hm_lvt_24f17767262929947cc3631f99bfd274=1587994350,1587994363,1587994651,1587995075; remote_way=http; gitee-session-n=cVdXY3BBSG91a2JSWXRsR0gybVNZTXB6UUZoZU11dzdnNERRVjJNUmRSUzQ0NzZ5YkFHNjM5cG1Lbk82RHYrclVaQzRURjZIbFRsSGkybm1FQmdVR1M2dFJPZmhFdXNCK0JrRk9DVEVBQXdnVXF2V2tuYWw3aXRURUlEWkV6aXc0VUlwRGtJb1dCd0g2NFVxeW1IMC9MSHU2dnJHck1kY213ZEdDcWFFOU1OZTZtTWdKN1VkYVNTdGxVaUpIMUtpLS02K0Z1VzBFOHQyQ1FXWXpSYlhSZEVBPT0%3D--631c43af162f79e53290d6e86ac1ada72f92ffed; tz=Asia%2FShanghai; Hm_lpvt_24f17767262929947cc3631f99bfd274=1587995076</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>这是我在登陆Gitee网站时浏览器发出的POST请求头，那么请问，这个请求头中有多少个cookie？</p><h3 id="答案是：有7个（有多少个等号就有多少个cookie，每个cookie用-分隔开来）"><a href="#答案是：有7个（有多少个等号就有多少个cookie，每个cookie用-分隔开来）" class="headerlink" title="答案是：有7个（有多少个等号就有多少个cookie，每个cookie用 ; 分隔开来）"></a>答案是：有7个（有多少个等号就有多少个cookie，每个cookie用 ; 分隔开来）</h3><p>至少按照Qt的方式是这样理解的（狗头）</p><p>所以，我们一般叫这玩意作：<strong>cookies</strong></p><p>而每一个cookie有两个基本属性，等号之前的属性名称为“name”，等号后面的属性为“value”；</p> <br><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCoreApplication></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"TestNet.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QCoreApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    TestNet One<span class="token punctuation">;</span>    One<span class="token punctuation">.</span><span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//main.cpp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtNetwork></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span><span class="token keyword">class</span> <span class="token class-name">TestNet</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    QNetworkAccessManager <span class="token operator">*</span>m_manager <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    QNetworkRequest <span class="token operator">*</span>m_request <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    QList<span class="token operator">&lt;</span>QNetworkCookie<span class="token operator">></span> Web_cookies<span class="token punctuation">;</span>  <span class="token comment">//这么做的意图很明显了吧，QNetworkCookie是每一个cookie，QList是cookies</span>    <span class="token comment">//访问网站</span>    <span class="token keyword">void</span> <span class="token function">GetWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//建立新对象</span>        m_manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkAccessManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkRequest</span><span class="token punctuation">(</span><span class="token function">QUrl</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置SSL连接</span>        QSslConfiguration config<span class="token punctuation">;</span>        QSslConfiguration conf <span class="token operator">=</span> m_request<span class="token operator">-></span><span class="token function">sslConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setPeerVerifyMode</span><span class="token punctuation">(</span>QSslSocket<span class="token operator">::</span>VerifyNone<span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>QSsl<span class="token operator">::</span>TlsV1SslV3<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_request<span class="token operator">-></span><span class="token function">setSslConfiguration</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置cookies</span>        Web_cookies<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">QNetworkCookie</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">,</span><span class="token string">"Value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Web_cookies<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">QNetworkCookie</span><span class="token punctuation">(</span><span class="token string">"Test"</span><span class="token punctuation">,</span><span class="token string">"Net"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向请求头里加入cookies</span>        QVariant var<span class="token punctuation">;</span>        var<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>Web_cookies<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_request<span class="token operator">-></span><span class="token function">setHeader</span><span class="token punctuation">(</span>QNetworkRequest<span class="token operator">::</span>CookieHeader<span class="token punctuation">,</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//连接槽</span>        <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span>m_manager<span class="token punctuation">,</span><span class="token operator">&amp;</span>QNetworkAccessManager<span class="token operator">::</span>finished<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>TestNet<span class="token operator">::</span>GetWebFinished<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发送Get请求</span>        m_manager<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">*</span>m_request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//访问后做的操作</span>    <span class="token keyword">void</span> <span class="token function">GetWebFinished</span><span class="token punctuation">(</span>QNetworkReply <span class="token operator">*</span>reply<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//NULL</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//TestNet.h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>然后呢，发送的Http请求头如下：</p><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">GET https<span class="token operator">:</span><span class="token comment">//gitee.com/ HTTP/1.1</span>Host<span class="token operator">:</span> gitee<span class="token punctuation">.</span>comCookie<span class="token operator">:</span> Name<span class="token operator">=</span>Value<span class="token punctuation">;</span> Test<span class="token operator">=</span>NetConnection<span class="token operator">:</span> Keep<span class="token operator">-</span>AliveAccept<span class="token operator">-</span>Encoding<span class="token operator">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token operator">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>en<span class="token punctuation">,</span><span class="token operator">*</span>User<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>有什么问题就不要留言了，不是我无情，而是我是“全宿制”学生党，我也很无奈。</strong></p><br><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>转载原文：<a href="https://www.cnblogs.com/BlogPuppet/p/12805597.html">Qt网络编程之使用cookie</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PicGo在uos&amp;&amp;deepin系统运行失败：chrome-sandbox is owned by root and has mode 4755</title>
      <link href="posts/b6a7912e/"/>
      <url>posts/b6a7912e/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>uos / deepin v20</code> 系统中，使用 <code>picGo</code> 图床上传工具，直接运行会失败：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  softIns  ./PicGo-2.3.0-beta.0.AppImage                  <span class="token punctuation">[</span><span class="token number">4722</span>:0527/095648.836952:FATAL:setuid_sandbox_host.cc<span class="token punctuation">(</span><span class="token number">157</span><span class="token punctuation">)</span><span class="token punctuation">]</span> The SUID sandbox helper binary wasfound, but is not configured correctly. Rather than run without sandboxing I'm aborting now. Youneed to <span class="token function">make</span> sure that /tmp/.mount_PicGo-GVLhJS/chrome-sandbox is owned by root and has mode <span class="token number">4755</span>.<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token number">4722</span> trace <span class="token builtin class-name">trap</span>  ./PicGo-2.3.0-beta.0.AppImage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>gcc/g++ 9.0</code> 📎 <code>gdb8.0</code> </p><br><h3 id="报错如下："><a href="#报错如下：" class="headerlink" title="报错如下："></a>报错如下：</h3>   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200527_102212.png" width="90%"/ loading="lazy"><br><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>今天在谷歌上找到问题了，这是Linux内核的问题，解决方法四种，推荐第四种，一劳永逸</p><ol><li>启用用户名称空间： <code>sudo sysctl kernel.unprivileged_userns_clone=1</code>，但每次开机都要运行该命令。</li><li>给报错信息给出的文件授权：<code>sudo chown root /chrome-sandbox &amp;&amp; sudo chmod 4755 /chrome-sandbox</code>，但不适用于picgo，因为会自动删除。</li><li>运行的时候加上免沙箱命令：<code>--no-sandbox</code></li><li>开机时自启动用户名称空间：<code>echo &#39;kernel.unprivileged_userns_clone=1&#39; &gt; /etc/sysctl.d/userns.conf</code></li></ol><p>只适用于Debian/Ubuntu系列Linux发行版。</p><br><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://github.com/Molunerfinn/PicGo/issues/467"># 467</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux上面使用lintian检测deb包报错的解决方案</title>
      <link href="posts/231e1b44/"/>
      <url>posts/231e1b44/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　使用<code>Linux</code>（<code>uos v20</code> 系统），安装 了；<code>lintian</code> 命令之后，执行 <code>lintian xxx.deb</code> 发现报错如下；而未按照预期正确输出结果应该是带上 <code>E / W / I /N / O</code>   等明显的标记。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200526141442460.png" width="90%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><br><h3 id="lintian："><a href="#lintian：" class="headerlink" title="lintian："></a>lintian：</h3><p>事情的起因于 <a href="https://github.com/linuxdeepin/dtkgui/issues/5">#5</a>，后面去了解了一下想关知识；</p><p><code>lintian</code> 这是一个 <code>Debian</code> 上面的包质量的检测工具。对于要上传到  <code>Debian</code>  仓库的 <code>.deb</code> 包都是有着严格的文件夹规范的，否则不被允许上传；</p><br><p><strong><a href="https://www.debian.org/doc/manuals/maint-guide/checkit.zh-cn.html">官方解释：</a></strong></p><p><strong>lintian</strong> 命令会运行很多测试脚本来检查常见的打包错误。<strong>lintian</strong> 命令的输出常带有以下几种标记：</p><ul><li><code>E:</code> 代表错误：确定违反了 <code>Debian Policy</code> 或是一个肯定的打包错误。</li><li><code>W:</code> 代表警告：可能违反了 <code>Debian Policy</code> 或是一个可能的打包错误。</li><li><code>I:</code> 代表信息：对于特定打包类别的信息。</li><li><code>N:</code> 代表注释：帮助你调试的详细信息。</li><li><code>O:</code> 代表已覆盖：一个被 <code>lintian-overrides</code> 文件覆盖的信息，但由于使用 <code>--show-overrides</code> 选项而显示。</li></ul><p>对于警告，你应该改进软件包或者检查警告是否的确无意义。如果确定没有意义，则按照 <a href="https://www.debian.org/doc/manuals/maint-guide/dother.zh-cn.html#lintian">第 5.14 节 “<code>&#123;*</code>package<code>*.,source/&#125;lintian-overrides</code>”</a> 中的叙述使用 <code>lintian-overrides</code> 文件将其覆盖。</p><p>注意，你可以用 <strong>dpkg-buildpackage</strong> 来构建软件包，并执行 <strong>lintian</strong>，只要你使用了 debuild(1) 或 pdebuild(1).</p><br><h3 id="安装-amp-使用lintian报错："><a href="#安装-amp-使用lintian报错：" class="headerlink" title="安装&amp;使用lintian报错："></a>安装&amp;使用lintian报错：</h3><p>我在 <code>uos v20</code> 版本，下载和执行如下命令后，实际发现是无法使用的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载得到 dde-control-center_5.1.0101.1+r0+g98e285d4e_amd64.deb 文件</span>☁  softFile  <span class="token function">sudo</span> <span class="token function">apt</span> download dde-control-center  <span class="token comment"># 安装 lintian ，和使用它检测 deb 包</span>☁  softFile  <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> lintian☁  softFile  lintian dde-control-center_5.1.0101.1+r0+g98e285d4e_amd64.deb <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后，wtf！！！ 显示报错？ </p><pre class="line-numbers language-none"><code class="language-none">Could not find a profile matching &quot;&#123;VENDOR&#125;&#x2F;main&quot; for vendor deepin at &#x2F;usr&#x2F;share&#x2F;perl5&#x2F;Lintian&#x2F;Profile.pm line 702.Lintian::Profile::_find_vendor_profile(Lintian::Profile&#x3D;HASH(0x556a2ba4e6c0)) called at &#x2F;usr&#x2F;share&#x2F;perl5&#x2F;Lintian&#x2F;Profile.pm line 136Lintian::Profile::new(&quot;Lintian::Profile&quot;, undef, ARRAY(0x556a2a1887c0), HASH(0x556a2a354ed0)) called at &#x2F;usr&#x2F;bin&#x2F;lintian line 215dplint::load_profile(undef) called at &#x2F;usr&#x2F;share&#x2F;lintian&#x2F;commands&#x2F;lintian.pm line 1446main::load_profile_and_configure_tags() called at &#x2F;usr&#x2F;share&#x2F;lintian&#x2F;commands&#x2F;lintian.pm line 657main::main() called at &#x2F;usr&#x2F;bin&#x2F;lintian line 46eval &#123;...&#125; called at &#x2F;usr&#x2F;bin&#x2F;lintian line 46main::__ANON__(&quot;&#x2F;usr&#x2F;share&#x2F;lintian&#x2F;commands&#x2F;lintian.pm&quot;) called at &#x2F;usr&#x2F;bin&#x2F;lintian line 114dplint::run_tool(&quot;&#x2F;usr&#x2F;bin&#x2F;lintian&quot;, &quot;lintian&quot;) called at &#x2F;usr&#x2F;bin&#x2F;lintian line 290dplint::main() called at &#x2F;usr&#x2F;bin&#x2F;lintian line 359<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一顿胡乱分析，这很明显是 <code>lintian</code> 这个命令有点问题。</p><br><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p><code>/etc/dpkg/origins</code> 是这个里面<code>default</code> 指向了<code>deepin</code> 所以<code>dpkg</code> 认为当前是<code>deepin</code>环境，都换成<code>uos</code> 就可以；意思就是 <code>lintian</code> 需要通过判断当前系统环境 根据<code>debian/ubuntu/kail</code> 等环境做检测，我们 fork 一份 debian 配置检测。</p><br><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li>进入 <code>/etc/dpkg/origins</code> 里面，修改 <code>default</code> 的软链接 重新指向 <code>uos</code>；</li><li>复制一份<code>debian</code> 配置检测，改名为 <code>uos</code>；</li><li>正常使用 <code>lintian</code> 命令；</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 没有修改之前的来两个路径文件夹内容</span>xmuli@xmuli-PC:/etc/dpkg/origins$ <span class="token function">ls</span> -al总用量 <span class="token number">20</span>drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">20</span> <span class="token number">13</span>:40 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:17 <span class="token punctuation">..</span>-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">82</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:17 debian-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">87</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 deepinlrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">6</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:17 default -<span class="token operator">></span> deepin-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">84</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 uosxmuli@xmuli-PC:/usr/share/lintian/profiles$ <span class="token function">ls</span> -al总用量 <span class="token number">28</span>drwxr-xr-x  <span class="token number">7</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">11</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 <span class="token punctuation">..</span>drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 debiandrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">20</span> 09:19 dpkgdrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 kalidrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 pureosdrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:14 ubuntu<span class="token comment"># 修改软链接</span><span class="token builtin class-name">cd</span> /etc/dpkg/origins<span class="token function">sudo</span> <span class="token function">ln</span> -snf uos default <span class="token comment"># 或 sudo ln -snf /etc/dpkg/origins/uos default</span><span class="token comment"># 复制一份文件配置且改名</span><span class="token builtin class-name">cd</span> /usr/share/lintian/profiles<span class="token function">sudo</span> <span class="token function">cp</span> debian ./uos -r <span class="token comment"># 拷贝 debian 的配置，命令为 uos</span><span class="token comment"># 修改完成之后</span>xmuli@xmuli-PC:/etc/dpkg/origins$ <span class="token function">ls</span> -al总用量 <span class="token number">20</span>drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:06 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">25</span> <span class="token number">20</span>:19 <span class="token punctuation">..</span>-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">82</span> <span class="token number">5</span>月  <span class="token number">25</span> <span class="token number">20</span>:19 debian-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">87</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 deepinlrwxrwxrwx <span class="token number">1</span> root root    <span class="token number">3</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:06 default -<span class="token operator">></span> uos-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">84</span> <span class="token number">4</span>月  <span class="token number">29</span> <span class="token number">16</span>:41 uosxmuli@xmuli-PC:/usr/share/lintian/profiles$ <span class="token function">ls</span> -al总用量 <span class="token number">32</span>drwxr-xr-x  <span class="token number">8</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:07 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">11</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 <span class="token punctuation">..</span>drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 debiandrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">25</span> <span class="token number">20</span>:21 dpkgdrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 kalidrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 pureosdrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">11</span>:05 ubuntudrwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> <span class="token number">5</span>月  <span class="token number">26</span> <span class="token number">12</span>:07 uos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>重新运行一开始的命令，可以看到预期的效果： </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/image-20200526141346928.png" width="90%"/ loading="lazy"> <br><h3 id="所有-lintian-的解决方案："><a href="#所有-lintian-的解决方案：" class="headerlink" title="所有 lintian 的解决方案："></a>所有 lintian 的解决方案：</h3><p>对于开启 lintian 检查，其报错的问题可以在这里查到所有的报错信息：<a href="https://lintian.debian.org/tags/">https://lintian.debian.org/tags/</a>  根据官方的描述修改即可</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>deepin、dde的历史起源与发展(附deepin所有版本的dde截图)</title>
      <link href="posts/41a6b35e/"/>
      <url>posts/41a6b35e/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 <a href="https://xmuli.blog.csdn.net/article/details/106189533">另一篇</a>中，详细讲述了写了 <code>dtk</code> 的历史起源、发展和简单入门；而本篇则是简述与之紧密相关的 deepin， dde，team 相关；<strong>本篇重点在 <code>dde</code> 的多年以来的 <code>UI</code> 变化；重新欣赏一遍 <code>deepin</code> 以前到现在的界面演变过程。（2009-2015-&gt;2020）</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518142854.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="前排说明："><a href="#前排说明：" class="headerlink" title="前排说明："></a>前排说明：</h3><p>因有些地方知道的也不是详细，难以保证细节地方有所偏差，所有有一个小的声明；也是基于个人对于 dtk 、deepin、develop team 的一个团队的了解；<strong>文章图片素材大部分来自 shule 老师，少部分来自网络和自己截图；</strong> 故会在图片下方附加素材来源，毕竟白嫖了 shule 老师那么多好看的素材就跑，为了晚上能够睡的着觉，故有必要每张图标注一下图片来源（不然下次我就不好意思了~）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_1166.JPG" width="35%"/ loading="lazy"><br><p><font color=#FF0000  size=4 face="幼圆"><strong>若是图片未加说明，图片素材均来自 <a href="https://github.com/shule1987">shule</a>，其图片的版权也归其所有。</strong></font></p><p><strong>&amp;&amp;</strong></p><p><font color=#FF0000 size=4 face="幼圆"><strong>「本文仅代表个人观点和感知，若有偏差，请以官方文章为准，也欢迎邮件 <a href="mailto:&#x78;&#109;&#117;&#108;&#105;&#116;&#x65;&#x63;&#x68;&#64;&#x67;&#97;&#109;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x78;&#109;&#117;&#108;&#105;&#116;&#x65;&#x63;&#x68;&#64;&#x67;&#97;&#109;&#x69;&#108;&#x2e;&#99;&#x6f;&#x6d;</a> 帮我指正」；</strong></font> </p><br><h3 id="捋顺名词："><a href="#捋顺名词：" class="headerlink" title="捋顺名词："></a>捋顺名词：</h3><h4 id="deepin"><a href="#deepin" class="headerlink" title="deepin:"></a>deepin:</h4><p>deepin 通常是指 <font color=#D0087E size=4 face="幼圆"><code>deepin</code> 操作系统</font>（基于 debian 系统），一个国际排名长期稳定于前 10 名的一个 Linux 的发行版。同时也是该研发公司（武汉深之度科技有限公司）的 logo。</p><p>前辈们说（迷人一枝花的大叔），deepin 的发展历程一直早期是磕磕拌拌的，螺旋一样来回探索出路，然后在 14 年才有质的变化，在 15 年之后，才真正的一飞冲天；甚至还在自己绘画了一张很可爱的小表情图来表示这些年来的历程，我在了解一下后，柑橘这张图还真的是很蛮符合的：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518144027.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p><br><h4 id="dde"><a href="#dde" class="headerlink" title="dde:"></a>dde:</h4><p>dde（<code>deepin desktop environment</code>） 简称  <font color=#D0087E size=4 face="幼圆"><strong>深度桌面环境</strong></font>；是采用 <code>qt</code> 作为前端，<code>go</code> 为后端，<code>gala</code> 作为 <code>wm</code>，<code>lightdm</code> 作为 <code>dm</code> 的独立开发的桌面环境。</p><br><h4 id="dtk："><a href="#dtk：" class="headerlink" title="dtk："></a>dtk：</h4><p>dtk（<code>deepin tool kit</code>）中文名称 <font color=#D0087E size=4 face="幼圆"><strong>深度工具套件</strong></font>；是基于 <code>Qt5</code> 开发一整套界面美观且实用的 <code>UI</code> 图形库。是多个项目仓库的集合（dtkweidget + dtkgui + qt5integration + dtkcore + …）</p><p>dtk 各个项目之间联系。详细介绍和快速入门 dtk 见<a href="https://docsin.uniontech.com/?p=6268">这篇文章</a>；文末附较多 dtk 资料链接。<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518133859.png" width="100%"/ loading="lazy"><br>(本图片素材来自 <a href="https://github.com/BLumia">BLumia</a>)</p><br><h3 id="deepin-发展历史："><a href="#deepin-发展历史：" class="headerlink" title="deepin 发展历史："></a>deepin 发展历史：</h3><ul><li>2004年，其前身 Hiweed Linux 是中国第一个基于 Debian 的本地化版本，同时组建社区研发团队。</li><li>2008年，正式更名为Linux Deepin，发布了深度操作系统第一个版本。</li><li>2011年，成立了武汉深之度科技有限公司（简称：深度科技），并组建了专职研发团队对其进行支持。</li><li>2012年，deepin进入全球发行版排行榜前100名，获得《第七届中日韩开源软件竞赛优胜奖》。</li><li>2013年，deepin进入全球发行版排行榜前50名，对外提供商业服务。</li><li>2014年，再次更名为deepin，进入全球发行版排行版前20名，建立北京运营中心，进入中央国家机关政府采购中心操作系统采购名录，通过软件企业认定与ISO9001认证，与多家上下游国产软件厂商达成战略合作，多项作品获得软件著作权认证，获得中国开源软件推荐联盟《2014年度开源优秀项目奖》，获得数千万规模的战略投资，建立起国内唯一拥有员工过百人专注于桌面 Linux发行版的团队。</li><li>2015年，通过工信部国产操作系统适配测试，研发上线中国第一台基于国产操作系统的ATM设备，获得公安部安全操作系统认证，加入Linux基金会，获得《第十九届中国国际软件博览会创新奖》，获得2015中国信息安全大会《国产化迁移最佳解决方案奖》和《自主可控操作系统最佳产品奖》，建立华东、华南、东北、西北分支机构。</li><li>2016年，和网易云音乐联合正式发布国内第一个支持Linux平台的在线音乐应用，公司获得CMMI3 认证证书。</li><li>2020年，发布 deepin v20 beta 和 uos v20；</li></ul><p>目前，已经建立国内最活跃的国产操作系统社区，深度操作系统累计下载量5000多万次，提供40种不同的语言版本，用户遍及全球40多个国家和地区，是全球开源操作系统排行榜上排行名最高的中国操作系统产品。</p><br><h3 id="deepin-历史版本的发布："><a href="#deepin-历史版本的发布：" class="headerlink" title="deepin 历史版本的发布："></a>deepin 历史版本的发布：</h3><p>用一个大概的图来讲述 hiweed、deepin、uos 的关系，和他们重要版本的发布年限时间；更加细致的版本发布可参考：<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">wiki</a> 和 <a href="https://distrowatch.com/table.php?distribution=deepin">distribution</a> </p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518-140536.png" width="100%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/xmuli">xmuli</a>)</p><br><p><strong>发行版本列表:</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518142638.png" width="70%"/ loading="lazy"><p>(本图片素材来自 <a href="https://zh.wikipedia.org/wiki/">wiki</a>)</p><br><h3 id="Hiweed-Linux-时期："><a href="#Hiweed-Linux-时期：" class="headerlink" title="Hiweed Linux 时期："></a>Hiweed Linux 时期：</h3><p>在追寻 <code>deepin</code> 历史演变的时候，意外得知，约在 04 ~ 08 年，此前还有一个我不知道到的名称~;那个时候它的名字还是叫 <code>Hiweed Linux</code>；而 Hiweed Linux 是一个由国人制作的一个 Linux 发行版，Hiweed Linux 基于 Ubuntu 8.10 ,可以说 Hiweed Linux 是一个中文本土化的 Ubuntu ，相对比 Ubuntu 上手更容易，免去了安装 Ubuntu 后的一系列的“汉化”过程。</p><p>Hiweed GNU/Linux桌面版基于Ubuntu GNU/Linux，适合中国的 Debian 新手和老手使用。Hiweed 桌面是一份已经配置好的中文桌面，包括 fcitx 中文输入法，stardict 词典，zhcon 中文终端，ttf-simsun字体等等。Hiweed 的目标是：免去新手的痛苦，节省老手的时间。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518141958.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://www.youtube.com/watch?v=lPrM0AgeP7Y">youtub</a>)</p><br><h3 id="Linux-Deepin-时期："><a href="#Linux-Deepin-时期：" class="headerlink" title="Linux Deepin 时期："></a>Linux Deepin 时期：</h3><p>约 2009 年时期，咦，那这也是十一年前了~，这是早期的 Linux Deepin 桌面； </p><p><font color=#D0087E size=4 face="幼圆"><strong>下面的数字表示：</strong></font> <strong>年份.月份</strong> </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518150655.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150731.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150747.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150815.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150829.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150859.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p><br><h3 id="Deepin-时期："><a href="#Deepin-时期：" class="headerlink" title="Deepin 时期："></a>Deepin 时期：</h3><p>约 2014 年开始，dde 有了质的飞越，界面也变得美观多了，然后一直出出来了打磨好久的 deepin v 15 版本；成为了一个经典的版本，且我没有想到的是，在 2015- 2019 期间，反而是潜心下来继续打磨细节，在细微之处更加美观和实用。表示出来了极大的好感~</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_150915.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/shule1987">shule</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_151017.png" width="90%"/ loading="lazy">(本图片素材来自 [shule](https://github.com/shule1987)) <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_152732.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://www.youtube.com/watch?v=-jhDHmtdzsg">youtub</a>)</p><br><h3 id="uos-时期："><a href="#uos-时期：" class="headerlink" title="uos 时期："></a>uos 时期：</h3><p>deepin v15.11 在发展了这一版本的多次迭代之后，其已经有了比较惊艳的改观~，且在 2019 -&gt; 2020 之际，准备研发新的新的大版本，有了更多的研发小伙伴和其他产品等的加入。。。</p><p>在 2019 年末，2020 年初，分别依次发布了 deepin 20 beta 和 uos v20： desktop &amp;&amp; server 等版本的发布</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_151641.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/xmuli">xmuli</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_151610.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://github.com/xmuli">xmuli</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518154800.png" width="90%"/ loading="lazy"><p>(本图片素材来自 <a href="https://www.bilibili.com/">bilibili</a>)</p><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 star 和 fork 这个系列的 qt/dtk 学习，附学习由浅入深的目录。</p><br><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://wiki.deepin.org/wiki/%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE">深度操作系统项目</a> ：wiki 说明</li><li><a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">wiki 深度操作系统</a> ：wikipedia 国际排名说明</li><li><a href="https://www.deepin.org/aboutus/">deepin 公司</a> （官网）</li><li><a href="https://www.uniontech.com/about">uos 公司</a> （官网）</li><li><strong>&amp;&amp;</strong></li><li><a href="https://github.com/linuxdeepin">github linuxdeepin</a>： dde 相关的开源项目</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DTK的历史起源、发展，和简单入门(精华篇)</title>
      <link href="posts/974df8a3/"/>
      <url>posts/974df8a3/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　 <strong>DTK</strong>（<code>deepin tool kit</code>）全称是 <font color=#D0087E size=4 face="幼圆"><strong>深度工具套件</strong></font>；是基于 <code>Qt5</code> 开发一整套界面美观且实用的 <code>UI</code> 图形库。</p><p>本篇主要尽可能多的讲解一下 <code>dtk</code> 的起源于历史，以及项目壮大后的拆分、现在 <code>dtk</code> 项目的组成和基本含义；以及 <code>dtk</code> 的文档从无到有，再到现在的极大丰富历史；最后就是 <code>dtk</code> 的如何快速上手部分。</p><p><strong>在<a href="https://xmuli.blog.csdn.net/article/details/106195055">另一篇</a>中讲解 deepin、dde的历史起源与发展(附deepin所有版本的dde截图)，</strong>可以一览其近 10 年的变化。</p><p>网上关于它的教程比较少，关于历史的更是基本就没有，在此补一笔。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_1263.JPG" width="35%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="一点碎碎念-："><a href="#一点碎碎念-：" class="headerlink" title="一点碎碎念~："></a>一点碎碎念~：</h3><blockquote><p>工欲善其事，必先利其器。再知道一点它的演变历史~？</p></blockquote><blockquote><p><strong>本文仅仅无意代表官方文章</strong>，仅讲述 dtk 和 deepin 的演变历史</p></blockquote><p>本来只是想单写一篇 dtk 的其实起源的，但随着本文知识的丰富、确保时间线的基本准确，请教很多的前辈和大佬们，感谢他们</p><p>）请教了 dtk、deepin、develop team 的历史和原源过程中，体会到事物往往不是单一的，且与彼此之间有着千丝万缕联系而又互相独立，各有特色。<font color=#FF0000  size=4 face="幼圆"><strong>本篇的侧重点是 dtk 项目的历史起源、发展过程与现状、现在的理解和如何快速上手；最后附上部分 dtk 相关的资料文档。</strong></font> <strong>而关于 deepin &amp;&amp; dde &amp;&amp; team 的介绍，则单独成立一篇新的<a href="https://xmuli.blog.csdn.net/article/details/106195055">文章</a>。</strong></p><br><h3 id="背景交代："><a href="#背景交代：" class="headerlink" title="背景交代："></a>背景交代：</h3><p>说来惭愧，初接触 deepin 是由 v15.11 才开始的，一开始埋头着开发 dtk 有许久的一些时间，但对其历史出身来历一直比较模糊，于是乎收集和整理一下现存的所有 dtk 的项目、手册资料，与库的维护者和最初的库的开发者，以及公司有着较深资历前辈们交流，外加上个人和小伙伴们，也都有参与过该库的维护一段时间后，才得以落笔，梳理成此篇文章（欢迎交流与指正）。</p><br><h3 id="dtk-名称的理解（易混淆）："><a href="#dtk-名称的理解（易混淆）：" class="headerlink" title="dtk 名称的理解（易混淆）："></a>dtk 名称的理解（易混淆）：</h3><ul><li>其中有几个容易混淆的名词，<code>dtk</code>， <code>dtkwidget</code>， <code>dtk</code> 项目。</li></ul><p><font color=#FF0000  size=4 face="幼圆"><strong>下面仅为个人理解，按照当前 2020 上半年的阶段的项目实际情况理解：</strong></font></p><p><font color=#FF0000  size=4 face="幼圆"><strong>dtk 含义理解：</strong></font> 是一个泛指，需要灵活的在上下文的语义中理解其含义：</p><ol><li><strong>dtk 项目(库) 的集合。</strong> （是一堆仓库的集合 = dtkwidget + dtkgui + dtkcore + qt5integration…）</li><li>偶也指 dtkwidget 这个仓库项目（这个仓库的名称就叫 <a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget</a>）</li><li>deepin tool kit 是一个深度工具构建集合。</li><li>是能在 deepin(uos) 系统开发应用软件，使用非 Qt 原生的样式控件的集合的开发环境</li><li>dtk 也作为构建 deepin 全家桶的基石</li></ol><p>DTK 目前分为三个模块，dtkcore、dtkgui，dtkwidget，主要功能如下：</p><table><thead><tr><th align="center">项目</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">dtkcore</td><td align="center">提供应用程序开发中的工具类，如程序日志、文件系统监控、格式转换等工具类</td></tr><tr><td align="center">dtkgui</td><td align="center">包含了开发图形用户界面应用程序所需的功能。主要是控制窗口主题这种外观性，调色板等信息。</td></tr><tr><td align="center">dtkwidget</td><td align="center">提供各种dtk基础控件，方便开发统一风格的应用。</td></tr></tbody></table><br><h3 id="DTK-的历史起源："><a href="#DTK-的历史起源：" class="headerlink" title="DTK 的历史起源："></a>DTK 的历史起源：</h3><h4 id="dtk-项目的历史演变（含名称）："><a href="#dtk-项目的历史演变（含名称）：" class="headerlink" title="dtk 项目的历史演变（含名称）："></a>dtk 项目的历史演变（含名称）：</h4><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200518_111136.png" width="100%"/ loading="lazy"><br><ul><li>在 2015 年，开发 deepin v15 版本的时候，因为开发控制中心（基于 Qt Widgets），开发的过程中抽象出了 dui 控件库（从控制中心开发起三个月），只有一些通用性的控件，仓库名称为 <code>dui</code> 。</li><li>16 年初，随后开发其他项目，dui 中加的东西越来越多，也不仅限于 ui 方面的控件，之后就改名为了 <code>deepin-tool-kit</code> 项目。</li><li>17 年底，随后成为了 DDE 桌面环境的底层开发库，封装了桌面组件和上层应用的通用型窗口、控件、工具类，随着项目越来越大，编译也越来越慢，于是拆分为了 <code>dtkcore</code>、<code>dtkwidget</code>、<code>dtkwm</code>（仅三个仓库），旧的 deepin-tool-kit 仓库地址处于废弃状态。</li><li>19 年新增加了 dtkgui 模块，废弃了 dtkwm（不可跨平台，强依赖 X11，因此废弃），此后分为 dtkcore、dtkgui、dtkwidget，角色分别对应 Qt core、gui、widgets 模块。</li><li>20 年之后，按照如今的理解为，<code>dtk</code> = <code>dtkwidget</code> + <code>dtkgui</code> + <code>qt5integration</code> + <code>dtkcore</code> + … 等多个项目的总称呼</li></ul><br><p><font color=#D0087E size=4 face="幼圆"><strong>由于 <code>qt5integratioin</code> 项目一直是独立的，本不算 <code>dtk</code> 项目里的一员，不过实际上是和 <code>dtk</code> 配套的，故本文算到 <code>dtk</code> 框架中。</strong></font></p><br><h4 id="样式变化："><a href="#样式变化：" class="headerlink" title="样式变化："></a>样式变化：</h4><p>其中随着时间的变化，界面的 UI 样式也发生了比较大的变化，当时 v15 版本的控制中心，还在屏幕右侧，不透明偏向黑色，到后来的成为白色偏透明色，在到现在的一个单独的控制中心（下图依次为 deepin v15 早期版本，和 uos v20 的控制中心）。</p><p>而 dtk 是属于绘画自定义皮肤控件的基础核心，然后在它的基础上面做了一次封装， 封装了一系列 Dxxxx 开头的控件（如 DPushButton 等）， 然后再由应用开发的同学们，开发出一款款应用，全部使用 dtk 的控件。那样开发出来的界面，就和系统的风格保持了一致性；而对于 win 系列的软件，也可以使用 wine（deepin-win） 来在 此 linux 上面运行；而对于第三方的应用软件，使用 chameleon style 启动，来保证和系统的风格一致。</p><p>下面放图、使用 dtk 库 开发出来的控件或者应用,enen… dtk 的样式就这么好看，这么的棒，这里要多感谢设计师们。<strong>ps：</strong> 设计师们简直就是程序开发之友，尤其是使用绘画控件的时候，可以少修改 50%+ 的代码或者 bug，且他们也非常好沟通~</p><ul><li>deepin v15 早期不透明黑色效果：</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200515161731.png" width="100%"/ loading="lazy"><ul><li>uos/deepin v20 早期透明磨砂效果：</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200515_175353.png" width="100%"/ loading="lazy"><br><h4 id="0-gt-1-的诞生-dui："><a href="#0-gt-1-的诞生-dui：" class="headerlink" title="0 -&gt; 1 的诞生 dui："></a>0 -&gt; 1 的诞生 dui：</h4><p>约 2015 年，<strong>起初是创建 dui 项目的，后来才改名为，<a href="https://github.com/linuxdeepin/deepin-tool-kit">deepin-tool-kit</a> ；再后来拆分为为多个库 dtkwidget + qt5integration + 其他；</strong></p><br><p>早先，且所有的 dtk + deepin 的项目，都是在 github 作为唯一的大本营;由于 0-&gt;1 时代，主要是开发构建 dtk 的体系架构，基本没有什么文档的书写✍️（一个伏笔）</p><br><p>后来有听到前辈们说，那个时候是的氛围轻松而又欢乐，更多的是一种平等沟通的合作，大家都是开源爱好的志愿者，一起做着自己喜欢的事情。羡煞我也<del>。 向往与憧憬那个年代，以及更早的几年</del></p><br><h4 id="deepin-tool-kit-是石器时代："><a href="#deepin-tool-kit-是石器时代：" class="headerlink" title="deepin-tool-kit 是石器时代："></a>deepin-tool-kit 是石器时代：</h4><p>deepin-tool-kit 最开始，是既没有文档，且 api 接口不稳定，容易变化，且设计图的 UI 样式也变化较快，导致入门、开发、维护该 dtk 库都很是困难~。<strong>基本是内部开发者靠小伙伴讲解，外部开发靠自行阅读源码</strong> ；听说以至于一些社区的小伙伴都看不下去，主动做了一个<a href="http://deepin.lolimay.cn/">《Deepin开发指南》</a>（地址已失效）</p><br><h4 id="壮大后拆分-dtk-库："><a href="#壮大后拆分-dtk-库：" class="headerlink" title="壮大后拆分 dtk 库："></a>壮大后拆分 dtk 库：</h4><p>前辈们的开发者一起编写最初的 <code>dtk</code> 库，随着近好几年的变化和发展，后期一定规模了，深思熟虑后，为更好发展，就决定将对 <code>deepin-tool-kit</code> 仓库进行拆分（2017 年左右）： 详见 <a href="https://github.com/linuxdeepin/deepin-tool-kit/issues/8">issues #8</a></p><ul><li><strong>dtkcore：</strong> 由 dtkbase/dtkutil/dtksettings 合并进入 </li><li><strong>dtkwidget：</strong> 由 dtkwidget/dtksettings 构成</li><li><strong>dtkwm：</strong> 处理窗口识别库/xcb功能， 供截图、录屏、系统监视器使用</li><li><strong>qtwebkit：</strong> 封装chroium，提高CEF/WebEngine兼容接口</li></ul><p>昂~ ，为了代码的健壮性发展，与方便后期的可维护性</p><br><h4 id="dtk-的口口相传时代："><a href="#dtk-的口口相传时代：" class="headerlink" title="dtk 的口口相传时代："></a>dtk 的口口相传时代：</h4><p>随着上一个时代已经过去了，dtk 的主体框架和 api 都趋向于稳定；且有了部分中文文档，（是中文文档！！！ 鸡冻٩(๑&gt;◡&lt;๑)۶！！！）；此时也基本对内部和外部的研发都已经友好了很多。</p><br><p>此阶段应该是 deepin 15.11 （恩，至今都是一个经典的版本，后来发现该发版本打磨和维护了近 5 年，很棒的一个版本）已经发布了出来了，开始研发 v20 阶段了。</p><p>不过此阶段，新的库的维护者学习 dtk 的方法，依旧是口口相传，手把手的教你一行一行的写代码（像一个大哥哥一样<del>）；毕竟使用的最新的接口，还没来得及更新到文档之中，且容易有变化，旧的接口就稳定得多。<strong>此阶段 dtk 的研发就是内部靠口口相传，外部研发靠部分文档+@戳你一下，加双方都看源码，来完成彼此的合作</strong> （有事觉得有和其他开发者一起互动的感觉也很棒</del>） </p><br><p><strong>这里说一个小的插曲：</strong></p><p>当我初次开始接触 dtk 库的维护时候，学习方式也是口口相传。</p><p>记得刚来，就来负责 dtk 的开发与维护，初接触的一周，都不知到该如何敲下手，一行都憋不出来；担心自己凉了，然后网上搜了搜 dtk 关键字，我的妈耶，连一个文档都没得，心里下意识的觉着凉透了，想自学都没得门路，此刻只想点一碗伤心凉粉安慰一下自己；</p><br><p>后那一周，是我的负责人，搬着一个小板凳，坐在我旁边，一行一行的敲着我看的，我才得以快速上手的。后面就想着，一定要尽快的摸清楚 dtk 的绘画自定义皮肤的控件的架构和原理。后面写几篇 dtk 分析，帮助后面小白入门，尽我所能帮助，为它的发展添一块瓦（所幸，在延期了几个月后，将其写出来且发表了🤣🤣）</p><br><p>至今回忆起来，都感觉有点不好意思，但是那会却又是无可奈何。至今都十分奇怪，为何他的耐心如此只好，大概君子无愠色，就是这种赞誉吧~ （尤其是每天都有很多人找他的情况下，巨忙）；那个时候，也不只是我，还有很多新人也是被手把手的教会 着如何开发 dtk。那会看到，大佬很忙碌，但是又不得不请教他的时候，就觉得很残忍~（尤其是偶尔还打扰周末休息）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_1342.JPG" width="35%"/ loading="lazy"><br><h4 id="dtk-的文档时代："><a href="#dtk-的文档时代：" class="headerlink" title="dtk 的文档时代："></a>dtk 的文档时代：</h4><p>约 2019 年末，2020 年初~，deepin 和 team 成长的很多，收获了也很多，和外部一起合力成立一个更大的公司（统信软件），来更好的整合资源与预计前景规划 ~ ；</p><br><p>随着 uos v20 sp1 和 deepin v20 beta 的先后在今年发布，以及 deepin 也收获了金钱和其他资源的支持，反手就是一个投入更多的财力人力和其他资源来研发新的 v20 版本。以获得更好的回报~，然后良性循环。</p><p>咳咳，好像有点跑题了哦~ 不过落实到和 dtk 相关的就是，有一段时间，一群研发们，疯狂熬夜加班，给补充 dtk 文档（验证了伏笔 :dog:），使用 Doxygen 来生成文档（大部分都是中文的哦~）。</p><p>有关 dtk 的 api 使用说明，可以参考：<a href="https://linuxdeepin.github.io/dtk/">https://linuxdeepin.github.io/dtk</a> </p><p>但不知道为什么会显示上次更新的时间还是 20219-07-10，实际后面有补充很多的~。此阶段外部开发，可以很大一个程度来依靠此文档。且 dtk 的每一个 api 的解释都是写在函数的上面的注释地方。直接使用 IDE 的代码提示 + 源码 api 的注释，可以更加高效的开发。</p><p><strong>现阶段就是内部靠： 视频培训 + 手把手带 + Doxygen 文档 + 企业wx群 + 翻看源码 + 组员帮助</strong></p><p><strong>外部靠： 回看视频培训 + Doxygen 文档 + 企业wx群@dtk研发来讲解 + 翻看源码 + 组员帮助</strong></p><br><p><font color=#FF0000 >不过说讲真，dtk 学习，最快最有效的，还是自行翻阅 Qt &amp; dtk 的源码；和自己尝试独立写出一个自绘 dtk 控件皮肤样式来的快。且学习 qt/ c++ 的人，一般自学能力都真的很强，其中 dtk 的项目都已经在 github 上面同步开源了：<a href="https://github.com/linuxdeepin">linuxdeepin</a>， 其中社区版的分支是和内部的 gitlab 是保持同步的。</font></p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_5522.JPG" width="35%"/ loading="lazy"><br><h3 id="dtk-库的快速入门："><a href="#dtk-库的快速入门：" class="headerlink" title="dtk 库的快速入门："></a>dtk 库的快速入门：</h3><br><h4 id="如今-dtk-项目的构成（2020-05）："><a href="#如今-dtk-项目的构成（2020-05）：" class="headerlink" title="如今 dtk 项目的构成（2020-05）："></a>如今 dtk 项目的构成（2020-05）：</h4><p><font color=#FF0000  size=4 face="幼圆"><strong>目前，dtk 项目的各个仓库之间的关系如下：</strong></font> 现在基本是这个格局了（图片基本准确），说一下个人的 dtk 和它们之间的理解：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514160359.png" width="100%"/ loading="lazy"><p>实际开发过程中，你是不需要掌握这么多的库的，也不会需要你一个人同时维护这么多的库，且同时有一些库，是很少被改动的。并不是经常需要提交。</p><p><strong>这里再次说一下 dtk 的含义：</strong></p><blockquote><p><strong>dtk = dtk项目 = 多个仓库集合 = dtkwidget + dtkgui + qt5integration + dtkcore + …</strong></p></blockquote><p><strong>关于 dtk 的库，在外网 github 和内网 gitlab 上面是保持一致的，对应的分支是时刻同步的；</strong> 故从内网或者外网下载学习，都是这么开心和轻松。对于 dtk 的学习使用，主要掌握以下两个仓库 qt5integration 、 dtkwidget 的学习和使用，其中主要是在工作和兴趣开发中的书写代码的主要阵地。</p><br><h4 id="简述-dtk-的各仓库作用："><a href="#简述-dtk-的各仓库作用：" class="headerlink" title="简述 dtk 的各仓库作用："></a>简述 dtk 的各仓库作用：</h4><p>下面以一种清晰、简陋的理解，全局的概括的讲解 <code>qt5integration</code>、<code>dtkwidget</code>、<code>dtkgui</code>这三个比较常用的仓库（若是第一次接触的话，看完了后，你还记得每一个部分对应的什么麽？😶😶）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_0604.JPG" width="20%"/ loading="lazy"><br><h5 id="qt5integration："><a href="#qt5integration：" class="headerlink" title="qt5integration："></a><a href="https://github.com/linuxdeepin/qt5integration">qt5integration：</a></h5><ul><li><p><strong>qt5integration 项目结构组成：</strong></p><ul><li><p>其主要是由如下几个子部分组成</p><ul><li><p><strong>iconengines:</strong> DIcon 插件相关，方便直接提取项目中 .svg 图片资源，常用如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">case</span> SP_DialogResetButton<span class="token operator">:</span>            icon <span class="token operator">=</span> <span class="token class-name">QIcon</span><span class="token operator">::</span><span class="token function">fromTheme</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"edit-clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>imageformats:</strong> 相当于实现 DIcon::fromTheme() 的功能函数</p></li><li><p><strong>qt5deepintheme-plugin：</strong> 一些基础的图片 svg 资源存储地方，重点为 Resources 文件</p></li><li><p><strong>styleplugins：</strong> deepin 的自定义 chameleon style 样式插件，基本所有 Dxxxxx 控件，都是在 chameleon.h chameleon.cpp 这两个里面实现的（也是我们最主要修改 code 的地方）</p></li><li><p><strong>styles：</strong> 测试例子，也是 main.cpp 的函数入口</p></li></ul></li><li><p>绘画 dtk 控件的皮肤样式，主要是 chameleon 样式，其中主要的主要效果如下</p></li></ul><p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_165236.png" width="35%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/2020-05-14_16-43-35.png" width="62%"/ loading="lazy"></p></li></ul><br><h4 id="dtkwidget"><a href="#dtkwidget" class="headerlink" title="dtkwidget:"></a><a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget:</a></h4><ul><li><strong>dtkwidget 项目结构组成：</strong><ul><li>dtkwidget 其主要是由如下几个子部分组成<ul><li><strong>examples:</strong> 里面的 main.cpp 是整个程序的入口，通常在这里测试</li><li><strong>src：</strong> dtk 的自定义 Dxxxx 控件，都存放于其下的 widgets 下， 如 <a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/darrowbutton.h">darrowbutton.h</a> 、<a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/darrowlinedrawer.cpp">darrowlinedrawer.cpp</a>、<a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/ddialog.cpp">ddialog.cpp</a>、<a href="https://github.com/linuxdeepin/dtkwidget/blob/master/src/widgets/dslider.cpp">dslider.cpp</a> 这些等（我们也通常在这里直接修改 Dxxx.h 和 Dxxx.cpp 文件），是 dtk 开发的主战场。</li><li><strong>tools：</strong> 工具相关、可不管</li></ul></li><li>绘画 dtk 自定义的控件的皮肤样式，其中主要的主要效果如下</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/2020-05-14_17-16-43.png" width="35%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514171919.png" width="62%"/ loading="lazy"></p><br><h4 id="dtkgui"><a href="#dtkgui" class="headerlink" title="dtkgui:"></a><a href="https://github.com/linuxdeepin/dtkgui">dtkgui:</a></h4><ul><li><p><strong>dtkgui 项目结构组成：</strong></p><ul><li><p>这个就是前面说的，现在很少需要修改，但是偶尔要会使用的仓库。比如设计师修改了他们的基础颜色的 Color 的 rgb 数值，调整了一下透明度等，他们给的参数，一般都是在这里来实现，将具体的颜色数值与 Qt 子定义的枚举对应起来。</p></li><li><p>其中主要是修改 src-dguiapplicationhelper.cpp 该文件，一旦修改，所有其值，所有人的效果都会发生改变，谨慎。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/2020-05-14_17-35-37.png" width="100%"/ loading="lazy"></li></ul></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 star 和 fork 这个系列的 qt/dtk 学习，附学习由浅入深的目录。</p><br><h3 id="资料手册-amp-amp-故地址遗迹："><a href="#资料手册-amp-amp-故地址遗迹：" class="headerlink" title="资料手册 &amp;&amp; 故地址遗迹："></a>资料手册 &amp;&amp; 故地址遗迹：</h3><h4 id="资料手册："><a href="#资料手册：" class="headerlink" title="资料手册："></a>资料手册：</h4><ul><li><p><a href="ifmet.cn/posts/e7de542e/">Deepin、DTK 文档参考资料集合</a>： 个人整理的一些 DTK 文档资料 (2020-01-05)</p></li><li><p><a href="https://github.com/linuxdeepin">linuxdeepin</a>: deepin 在 github 的开源地址； 大部分项目均已开源（含完整 dtk），且和内部保持一致，无论是想要学习 dtk 的开发，还是研究一些应用软件的使用，提交 pr，均可以在此 github 这个交友网站找到你的想要的资源</p></li><li><p><a href="https://linuxdeepin.github.io/dtk/">dtk api 文档</a> ：有关 dtk 的 api 中文使用说明；更多注释，请阅源码注释</p></li><li><p><a href="https://github.com/xmuli/QtExamples">dtk 重绘控件的原理解析</a>：其中第五章节，为 dtk 的源码架构分析、以及入门和开发，一些理解和实战</p></li><li><p><a href="https://xmuli.blog.csdn.net/article/details/104987446">DTK重绘自定义需求控件</a>： 从 0 立创造一个非 Qt 原生控件，且自定义其控件皮肤（系列有三篇）</p></li><li><p><a href="https://xmuli.blog.csdn.net/article/details/106187959">DTK常用和测试代码片</a>：dtk 的一些开发常用、和测试的代码片</p></li><li><p><a href="https://blog.justforlxz.com/2018/01/12/%E4%BD%BF%E7%94%A8DTK%E5%BC%80%E5%8F%91/">使用 DTK 开发，D 开头的宏和命名空间的使用</a>：（早期）关于 dtk 宏的使用</p></li><li><p><a href="https://github.com/BLumia/BLumiaGist/tree/master/Misc/DDE">DDE.dot</a> ：dtk 各仓库之间的联系图</p></li><li><p><a href="https://www.deepin.org/">deepin 官网</a>：官网的发布社区版 deepin，也是一个获取的用户交流论坛</p></li><li><p><strong>dtk 和 qt 源码 + 注释（最佳）</strong></p></li></ul><h4 id="镜像下载："><a href="#镜像下载：" class="headerlink" title="镜像下载："></a>镜像下载：</h4><ul><li><a href="https://www.deepin.org/download/">deepin.org/download</a>：deepin v20 的 iso 镜像下载地址（官网）</li><li><a href="https://www.chinauos.com/cooperative">chinauos.com/cooperative</a>：uos v20 的 iso 镜像官网下载（官网）</li><li><a href="https://distrowatch.com/table.php?distribution=deepin">deepin 镜像国际排名</a>： deepin 历史版本（国际排名）。</li><li>&amp;&amp;</li><li><a href="https://wiki.deepin.org/wiki/Dtk">https://wiki.deepin.org/wiki/Dtk</a></li><li><a href="https://hualet.org/blog/2018/09/26/%E5%A6%82%E4%BD%95%E7%BB%99-dtk-%E6%B7%BB%E5%8A%A0%E6%96%87%E6%A1%A3/">如何给 DTK 添加文档</a></li><li><a href="https://www.deepin.org/dde/">深度桌面环境</a></li><li><a href="https://www.deepin.org/aboutus/">关于 deepin 公司（前身）</a> （官网）</li><li><a href="https://www.uniontech.com/about">关于 uos 公司 （如今）</a> 官网）</li></ul><br><h4 id="参考-amp-amp-感谢："><a href="#参考-amp-amp-感谢：" class="headerlink" title="参考 &amp;&amp; 感谢："></a>参考 &amp;&amp; 感谢：</h4><p>在探究 dtk 的历史中，搜寻着一些并不多的网络博客文章，和前辈们、大佬们的沟通，口口相传，文中有使用他们的素材或者博客片段，或者 dtk 的相关介绍、使用技巧链接，表示好感和谢谢 Thanks♪(･ω･)ﾉ <a href="https://github.com/zccrs">zccrs</a>、<a href="https://github.com/shule1987">shule</a>、<a href="https://github.com/hualet">hualet</a>、<a href="https://github.com/BLumia">BLumia</a>、<a href="https://github.com/xmuli">xmuli</a>、<a href="https://github.com/justforlxz">justforlxz</a> …等</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DTK常用和测试代码片</title>
      <link href="posts/b59ab8c1/"/>
      <url>posts/b59ab8c1/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　<code>DTK</code> 常用和测试代码片，在 <code>deepin 20</code> 或 <code>uos 20</code> 中，全部使用 <code>DTK</code> 开发，其中有一些是经常遇到的定位 <code>bug</code> 和修改的代码片。在此抛转引玉，提交一点开发的贡献</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h3><p>　　<strong>💻：</strong>  <code>uos 20</code> 📎 <code>deepin 20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><br><h3 id="将-dtkwidget-项目注册到系统："><a href="#将-dtkwidget-项目注册到系统：" class="headerlink" title="将 dtkwidget 项目注册到系统："></a>将 dtkwidget 项目注册到系统：</h3><p>这里以 <code>dtkwidget</code> 为例，它在系统的动态库是存放路径为 <code>/usr/lib/x86_64-linux-gnu/</code></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200407_134649.png" width="100%"/ loading="lazy"><ul><li><strong>解答图片：</strong><br>经过测试，系统库和 DTK 项目的生成的 libdtkwidget.so 实际使用的都是 最新的 5.xxx 版本，这里面的是 .so.5.1.0；系统库里面遗留下来的 2.xxx 版本可能是提供给某些没有v20版本的项目使用的。</li><li>若是想要代码片生效的话，则将项目生成的 .so 文件替代换掉 系统路径下，若是有新的接口改动，那么对应的头文件也要一起替换掉</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#【命令： 5.1.0 需要替换为实际的最大】</span><span class="token comment">#[拷贝二进制文件：]</span><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/lib/x86_64-linux-gnu/libdtkwidget.so.5.1.0<span class="token function">sudo</span> <span class="token function">cp</span>  <span class="token punctuation">..</span>/build-dtkwidget-unknown-Debug/src/libdtkwidget.so.5.1.0 /usr/lib/x86_64-linux-gnu/<span class="token comment">#[拷贝头文件：]</span><span class="token function">sudo</span> <span class="token function">cp</span> /home/muli/project/dtkwidget/src/widgets/dslider.h /usr/include/libdtk-5.1.0/DWidget/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PS（uos / deepin）：</strong></p><p>对于 <code>dtkwidget</code> 项目会生成 <code>libdtkwidget.so</code> 动态库；系统存放路径为 <code>/usr/lib/x86_64-linux-gnu/</code> ；</p><p>项目 <code>dtkgui</code> 会生成 <code>libdtkgui.so</code> 动态库文件；系统存放路径为 <code>/usr/lib/x86_64-linux-gnu/</code> ；</p><p>项目 <code>qt5integration</code> 会生成 <code>libchameleon.so</code> 动态库文件在 <code>./bin/plugins/styles/libchameleon.so  </code> 下 ；<code>/usr/lib/x86_64-linux-gnu/qt5/plugins/styles/</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /usr/lib/x86_64-linux-gnu/qt5/plugins/styles/libchameleon.so<span class="token function">sudo</span> <span class="token function">cp</span>  ./bin/plugins/styles/libchameleon.so /usr/lib/x86_64-linux-gnu/qt5/plugins/styles/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="判断-系统主题是浅色还是暗色："><a href="#判断-系统主题是浅色还是暗色：" class="headerlink" title="判断 系统主题是浅色还是暗色："></a>判断 系统主题是浅色还是暗色：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">DGuiApplicationHelper <span class="token operator">*</span>guiAppHelp <span class="token operator">=</span> <span class="token class-name">DGuiApplicationHelper</span><span class="token operator">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>guiAppHelp<span class="token operator">-></span><span class="token function">themeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DGuiApplicationHelper<span class="token operator">::</span>ColorType<span class="token operator">::</span>DarkType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//暗色主题</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//浅色主题</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="对某一颜色，在浅-暗主题对其亮度进行修改："><a href="#对某一颜色，在浅-暗主题对其亮度进行修改：" class="headerlink" title="对某一颜色，在浅 / 暗主题对其亮度进行修改："></a>对某一颜色，在浅 / 暗主题对其亮度进行修改：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//DGuiApplicationHelper::toColorType 获取颜色的明亮度，将其转换为主题类型的枚举值。</span>QColor <span class="token function">lineColor</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">DGuiApplicationHelper</span><span class="token operator">::</span><span class="token function">toColorType</span><span class="token punctuation">(</span>lineColor<span class="token punctuation">)</span> <span class="token operator">==</span> DGuiApplicationHelper<span class="token operator">::</span>LightType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//此颜色在浅色主题下，亮度 -10</span>lineColor <span class="token operator">=</span> <span class="token class-name">DGuiApplicationHelper</span><span class="token operator">::</span><span class="token function">adjustColor</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//此颜色在暗色色主题下，亮度 +10</span>lineColor <span class="token operator">=</span> <span class="token class-name">DGuiApplicationHelper</span><span class="token operator">::</span><span class="token function">adjustColor</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="属性的使用："><a href="#属性的使用：" class="headerlink" title="属性的使用："></a>属性的使用：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Q_DECLARE_METATYPE</span><span class="token punctuation">(</span>QMargins<span class="token punctuation">)</span>par<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"_d_margins"</span><span class="token punctuation">,</span> <span class="token class-name">QVariant</span><span class="token operator">::</span><span class="token function">fromValue</span><span class="token punctuation">(</span>margins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QMargins magins <span class="token operator">=</span> par<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"_d_margins"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token operator">&lt;</span>QMargins<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>par<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"_d_margins"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>content<span class="token operator">-></span><span class="token function">setContentsMargins</span><span class="token punctuation">(</span><span class="token function">QMargins</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>content<span class="token operator">-></span><span class="token function">setContentsMargins</span><span class="token punctuation">(</span>magins<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="在-paintEvent-里面获取一个颜色："><a href="#在-paintEvent-里面获取一个颜色：" class="headerlink" title="在 paintEvent() 里面获取一个颜色："></a>在 paintEvent() 里面获取一个颜色：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">SliderStrip</span><span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    QPainter <span class="token function">pa</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> dpa <span class="token operator">=</span> <span class="token class-name">DApplicationHelper</span><span class="token operator">::</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPen penLine <span class="token operator">=</span> <span class="token function">QPen</span><span class="token punctuation">(</span>dpa<span class="token punctuation">.</span><span class="token function">textTips</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPen penNumber <span class="token operator">=</span> <span class="token function">QPen</span><span class="token punctuation">(</span>dpa<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>DPalette<span class="token operator">::</span>ObviousBackground<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pa<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>penLine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="将自定义风格-应用于-其他的软件："><a href="#将自定义风格-应用于-其他的软件：" class="headerlink" title="将自定义风格 应用于 其他的软件："></a>将自定义风格 应用于 其他的软件：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qtcreator -style windowsqtcreator -style chameleon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="打印-QBoxLayout里面的所有元素："><a href="#打印-QBoxLayout里面的所有元素：" class="headerlink" title="打印 QBoxLayout里面的所有元素："></a>打印 QBoxLayout里面的所有元素：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d<span class="token operator">-></span>hBoxLayout<span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    QLayoutItem <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token punctuation">(</span>QLayoutItem <span class="token operator">*</span><span class="token punctuation">)</span>d<span class="token operator">-></span>hBoxLayout<span class="token operator">-></span><span class="token function">itemAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>item<span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="QT判断鼠标是否在某子窗口控件上方："><a href="#QT判断鼠标是否在某子窗口控件上方：" class="headerlink" title="QT判断鼠标是否在某子窗口控件上方："></a>QT判断鼠标是否在某子窗口控件上方：</h3><p>需要注意的是，子窗口获取geometry，是相对于父窗口的相对位置，QCursor::pos()获取的是鼠标绝对位置，要不将父窗口的相对位置进行换算，要不将鼠标的绝对位置进行换算，这里本文采用将鼠标绝对位置换算到控件上，示例代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>groupBox<span class="token operator">-></span><span class="token function">geometry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">mapFromGlobal</span><span class="token punctuation">(</span><span class="token class-name">QCursor</span><span class="token operator">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="获取项目中的-svg-图片资源："><a href="#获取项目中的-svg-图片资源：" class="headerlink" title="获取项目中的 .svg 图片资源："></a>获取项目中的 .svg 图片资源：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">case</span> SP_DialogResetButton<span class="token operator">:</span>            icon <span class="token operator">=</span> <span class="token class-name">QIcon</span><span class="token operator">::</span><span class="token function">fromTheme</span><span class="token punctuation">(</span><span class="token function">QLatin1String</span><span class="token punctuation">(</span><span class="token string">"edit-clear"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="在-main-cpp-中修改测试代码："><a href="#在-main-cpp-中修改测试代码：" class="headerlink" title="在 main.cpp 中修改测试代码："></a>在 main.cpp 中修改测试代码：</h3><p>在 <code>qt5integration</code> 的  main.cpp 中, 常用测试代码如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileInfo></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTextBrowser></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QAction></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMenu></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QList></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPalette></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPixmap></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DLineEdit></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DPasswordEdit></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DScrollBar></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DListView></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QStandardItemModel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DStandardItem></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DDialog></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DSuggestButton></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DTitlebar></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DComboBox></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;DProgressBar></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTimer></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDialog></span></span>DWIDGET_USE_NAMESPACE<span class="token keyword">class</span> <span class="token class-name">ExWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">contextMenuEvent</span><span class="token punctuation">(</span>QContextMenuEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widgetgallery.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_INIT_RESOURCE</span><span class="token punctuation">(</span>styles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    qputenv("QT_DEBUG_PLUGINS", "1");</span>    QStringList paths <span class="token operator">=</span> <span class="token class-name">QApplication</span><span class="token operator">::</span><span class="token function">libraryPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    paths<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token function">QFileInfo</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/plugins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QApplication</span><span class="token operator">::</span><span class="token function">setLibraryPaths</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span><span class="token punctuation">;</span>    QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    WidgetGallery gallery;</span><span class="token comment">//    gallery.show();</span><span class="token comment">//    DDialog *dialog = new DDialog("title", "mesg");</span><span class="token comment">//    dialog->show();</span>    ExWidget<span class="token operator">*</span> exWidget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exWidget<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">720</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"example DTK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    moveToCenter(this);</span>    <span class="token function">setContextMenuPolicy</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>DefaultContextMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//DTitlebar Test--------------------------------------------------------------</span>    DTitlebar<span class="token operator">*</span> titleBar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DTitlebar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    titleBar<span class="token operator">-></span><span class="token function">setQuitMenuDisabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    titleBar<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">620</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//--------------------------------------------------------------</span><span class="token comment">//    QPalette pale = this->palette();</span><span class="token comment">//    pale.setBrush(backgroundRole(),</span><span class="token comment">//                  Qt::white); //纯白</span><span class="token comment">//                  Qt::black); //黑色</span><span class="token comment">//                  QPixmap("/home/muli/softFile/netWallPaper/700047.jpg"));</span><span class="token comment">//                  QPixmap("/home/muli/softFile/netWallPaper/499786.png"));</span><span class="token comment">//                  QPixmap("/home/muli/softFile/netWallPaper/20200326.png"));</span><span class="token comment">//                  QPixmap("/home/muli/Desktop/20200327_104540.png"));</span><span class="token comment">//    setPalette(pale);</span>    <span class="token comment">//DListView Test--------------------------------------------------------------</span>    DListView <span class="token operator">*</span>listview <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DListView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QStandardItemModel <span class="token operator">*</span>model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        DStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DStandardItem</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"%1%1%1%1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token operator">-></span><span class="token function">appendRow</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    listview<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>    listview<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    listview<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    listview<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//DScrollbar Test--------------------------------------------------------------</span><span class="token comment">//    DScrollBar * scrollbar = new DScrollBar(this);</span><span class="token comment">//    scrollbar->move(50, 50);</span><span class="token comment">////    scrollbar->show();</span><span class="token comment">//    DScrollBar * scrollbar2 = new DScrollBar(this);</span><span class="token comment">//    scrollbar2->setOrientation(Qt::Horizontal);</span><span class="token comment">//    scrollbar2->move(200, 50);</span><span class="token comment">////    scrollbar2->show();</span>    <span class="token comment">//DLineEdit Test--------------------------------------------------------------</span><span class="token comment">//    DLineEdit* lineEdit = new DLineEdit(this);</span><span class="token comment">//    lineEdit->resize(300, 40);</span><span class="token comment">//    lineEdit->setEchoMode(QLineEdit::Password);</span><span class="token comment">//    lineEdit->move(50, 40);</span><span class="token comment">//    DPasswordEdit* passEdit = new DPasswordEdit(this);</span><span class="token comment">//    passEdit->resize(300, 40);</span><span class="token comment">//    passEdit->move(50, 100);</span><span class="token comment">//    QLineEdit* edit = new QLineEdit(this);</span><span class="token comment">//    edit->resize(300, 40);</span><span class="token comment">//    edit->move(50, 150);</span><span class="token comment">//    edit->setEchoMode(QLineEdit::Password);</span>    <span class="token comment">//DComboBox Test--------------------------------------------------------------</span><span class="token comment">//    DComboBox* combobox = new DComboBox(this);</span><span class="token comment">//    combobox->resize(300, 40);</span><span class="token comment">//    combobox->addItem(QIcon::fromTheme("edit"), "test 01");</span><span class="token comment">//    combobox->addItem(QIcon::fromTheme("button_add"), "test 02");</span><span class="token comment">//    combobox->addItem(QIcon::fromTheme("edit"), "test 03");</span><span class="token comment">//    combobox->addItem(QIcon::fromTheme("edit"), "test 04");</span><span class="token comment">//    combobox->move(50, 200);</span>    <span class="token comment">//DPushButton Test--------------------------------------------------------------</span><span class="token comment">//    btn = new DPushButton("this", this);</span><span class="token comment">//    btn->resize(300, 50);</span><span class="token comment">//    btn->move(50, 50);</span><span class="token comment">//    btn->setGeometry(50,05,300,50);</span><span class="token comment">//    btn2 = new DPushButton("this a", this);</span><span class="token comment">//    btn2->resize(300, 50);</span><span class="token comment">//    btn2->move(360, 50);</span><span class="token comment">//    frame = new DFrame(this);</span><span class="token comment">//    frame->resize(300, 50);</span><span class="token comment">//    frame->move(50, 110);</span><span class="token comment">////    DStyle::setFrameRadius(frame, 16);</span><span class="token comment">//    frame->setStyleSheet("font: bold; font-size:20px; color: rgb(241, 70, 62)");</span><span class="token comment">//    frame->setFrameRounded(true);</span><span class="token comment">//    qDebug()&lt;&lt;"--01--"&lt;&lt;frame->rect();</span><span class="token comment">//DProgressBar Test--------------------------------------------------------------</span><span class="token comment">//    int nStar = 50;</span><span class="token comment">//    DProgressBar *proBar1 = new DProgressBar(this);</span><span class="token comment">//    proBar1->setOrientation(Qt::Horizontal);</span><span class="token comment">//    proBar1->move(50, 50);</span><span class="token comment">//    proBar1->resize(300, 50);</span><span class="token comment">//    proBar1->setRange(0, 100);</span><span class="token comment">//    proBar1->setValue(nStar);</span><span class="token comment">////    proBar1->setAlignment(Qt::AlignCenter);</span><span class="token comment">//    proBar1->show();</span><span class="token comment">//    DProgressBar *proBar2 = new DProgressBar(this);</span><span class="token comment">//    proBar2->setOrientation(Qt::Vertical);</span><span class="token comment">//    proBar2->move(400, 50);</span><span class="token comment">//    proBar2->resize(50, 300);</span><span class="token comment">//    proBar2->setRange(0, 100);</span><span class="token comment">//    proBar2->setValue(nStar);</span><span class="token comment">//    proBar2->show();</span><span class="token comment">//    DProgressBar *proBar3 = new DProgressBar(this);</span><span class="token comment">//    proBar3->setOrientation(Qt::Horizontal);</span><span class="token comment">//    proBar3->move(50, 200);</span><span class="token comment">//    proBar3->resize(300, 8);</span><span class="token comment">//    proBar3->setRange(0, 100);</span><span class="token comment">//    proBar3->setValue(nStar);</span><span class="token comment">////    proBar3->setAlignment(Qt::AlignCenter);</span><span class="token comment">//    proBar3->show();</span><span class="token comment">//    DProgressBar *proBar4 = new DProgressBar(this);</span><span class="token comment">//    proBar4->setOrientation(Qt::Vertical);</span><span class="token comment">//    proBar4->move(500, 50);</span><span class="token comment">//    proBar4->resize(8, 300);</span><span class="token comment">//    proBar4->setRange(0, 100);</span><span class="token comment">//    proBar4->setValue(nStar);</span><span class="token comment">//    proBar4->show();</span><span class="token comment">//    QTimer *timer = new QTimer(this);</span><span class="token comment">//    timer->start();</span><span class="token comment">//    timer->setInterval(50);</span><span class="token comment">//    connect(timer, &amp;QTimer::timeout, [=]()&#123;</span><span class="token comment">//        if (proBar1->value() >= 100)</span><span class="token comment">//            proBar1->setValue(0);</span><span class="token comment">//        proBar1->setValue(proBar1->value() + 1);</span><span class="token comment">//        if (proBar2->value() >= 100)</span><span class="token comment">//            proBar2->setValue(0);</span><span class="token comment">//        proBar2->setValue(proBar2->value() + 1);</span><span class="token comment">//        if (proBar3->value() >= 100)</span><span class="token comment">//            proBar3->setValue(0);</span><span class="token comment">//        proBar3->setValue(proBar3->value() + 1);</span><span class="token comment">//        if (proBar4->value() >= 100)</span><span class="token comment">//            proBar4->setValue(0);</span><span class="token comment">//        proBar4->setValue(proBar4->value() + 1);</span><span class="token comment">//        &#125;);</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">contextMenuEvent</span><span class="token punctuation">(</span>QContextMenuEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    QMenu<span class="token operator">*</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QString str <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"act   %1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        menu<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    menu<span class="token operator">-></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">QCursor</span><span class="token operator">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>修改typora主题的字体</title>
      <link href="posts/60a3437a/"/>
      <url>posts/60a3437a/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 mac 中修改 typora 主题的英文和中文的字体，使得码字更加舒服（win 也有效）。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="书写环境："><a href="#书写环境：" class="headerlink" title="书写环境："></a>书写环境：</h3><p><strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>typora  0.9.9.32.1</code></p><br><h3 id="痛点与需求："><a href="#痛点与需求：" class="headerlink" title="痛点与需求："></a>痛点与需求：</h3><p>在 mac 上面默认是使用的 github.css 主题的文字。发现 其中 I 与 l 显示效果相同（大写的 i 与小写的 L）；长得一样，容易混淆；</p><p>于是就产生了想要修改一下 typora 的英文显示字体，干脆顺便把中文字体也一起换掉。</p><ul><li><p><strong>当前效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104516.png" width="20%"/ loading="lazy"></li><li><p><strong>期望效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104558.png" width="20%"/ loading="lazy"></li></ul><br><h3 id="修改-css-配置："><a href="#修改-css-配置：" class="headerlink" title="修改 css 配置："></a>修改 css 配置：</h3><p>步骤如下：</p><ul><li><p>打开 <code>typora-偏好设置-外观-打开主题设置</code>，进入目录文件下</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104623.png" width="90%"/ loading="lazy"></li><li><p>将原文件 <code>github.css</code> 备份一份，重名为 <code>github.css.backup</code>,留作为日后恢复</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_104658.png" width="90%"/ loading="lazy"> </li><li><p>修改 <code>github.css</code> 文件，使用文本编辑器打开，查找 <code>font-family</code> ，找到如下</p><ul><li><p>将可以找到如下的内容 </p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Open Sans"</span><span class="token punctuation">,</span><span class="token string">"Clear Sans"</span><span class="token punctuation">,</span><span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>51<span class="token punctuation">,</span> 51<span class="token punctuation">,</span> 51<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后将其替换为</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Monaco"</span><span class="token punctuation">,</span><span class="token string">"PingFangSC-Regular"</span><span class="token punctuation">,</span><span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>51<span class="token punctuation">,</span> 51<span class="token punctuation">,</span> 51<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他的 font-family 都是不需要替换的，</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200514_105039.png" width="90%"/ loading="lazy"></li></ul></li><li><p><font color=#FF0000  size=4 face="幼圆">修改完成之后，一定要重启 typora，才会在再次生效 </font></p></li></ul><br><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a><strong>说明：</strong></h3><ul><li><p>通常使用到的只是 <code>font-family: &quot;Monaco&quot;,&quot;PingFangSC-Regular&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif;</code>   </p><p>通常只是第一个值；第一位表示文章遇到的英文都显示为 <code>Monaco</code> 字体（也只有英文）；其次遇到的中文，再用 <code>PingFangSC-Regular</code> 字体来显示；倘若本机中没有底这两种字体，再顺延尝试第三个 Helvetica 字体和第四个 Helvetica 字体。 </p></li></ul><br><h3 id="关于字体选择："><a href="#关于字体选择：" class="headerlink" title="关于字体选择："></a>关于字体选择：</h3><ul><li><strong>mac 下：</strong><ul><li>英文字体：Monaco</li><li>中文字体：PingFangSC-Regular</li></ul></li><li><strong>win 下：</strong><ul><li>英文字体：Consolas</li><li>中文字体：？（随你喜好）</li></ul></li></ul><p>这两款字体字体，大概是对应平台使用起来，最舒服的字体，经过多次尝试之后；其中 mac 下是默认没安装 Consolas 字体的。</p><br><h3 id="mac-安装-Consolas-字体："><a href="#mac-安装-Consolas-字体：" class="headerlink" title="mac 安装 Consolas 字体："></a>mac 安装 Consolas 字体：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 原文链接：[install consolas on mac](https://gist.github.com/avalonalex/8125197)</span><span class="token comment"># Thanks to this post:</span><span class="token comment"># http://blog.ikato.com/post/15675823000/how-to-install-consolas-font-on-mac-os-x</span>$ brew <span class="token function">install</span> cabextract$ <span class="token builtin class-name">cd</span> ~/Downloads$ <span class="token function">mkdir</span> consolas$ <span class="token builtin class-name">cd</span> consolas$ <span class="token function">curl</span> -O http://download.microsoft.com/download/f/5/a/f5a3df76-d856-4a61-a6bd-722f52a5be26/PowerPointViewer.exe$ cabextract PowerPointViewer.exe$ cabextract ppviewer.cab$ <span class="token function">open</span> CONSOLA*.TTF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>附带苹方字体的中英文对照：</p><table><thead><tr><th>中文</th><th>font-family（英文）</th><th></th></tr></thead><tbody><tr><td>苹方-简 常规体</td><td>PingFangSC-Regular</td><td></td></tr><tr><td>苹方-简 极细体</td><td>PingFangSC-Ultralight</td><td></td></tr><tr><td>苹方-简 细体</td><td>PingFangSC-Light</td><td></td></tr><tr><td>苹方-简 纤细体</td><td>PingFangSC-Thin</td><td></td></tr><tr><td>苹方-简 中黑体</td><td>PingFangSC-Medium</td><td></td></tr><tr><td>苹方-简 中粗体</td><td>PingFangSC-Semibold</td><td></td></tr></tbody></table><br><p>常见字体中英文对照：</p><table><thead><tr><th>中文名</th><th>英文名</th><th>Unicode</th><th>Unicode 2</th></tr></thead><tbody><tr><td>Mac OS</td><td></td><td></td><td></td></tr><tr><td>华文细黑</td><td>STHeiti Light [STXihei]</td><td>534E65877EC69ED1</td><td>华文细黑</td></tr><tr><td>华文黑体</td><td>STHeiti</td><td>534E65879ED14F53</td><td>华文黑体</td></tr><tr><td>华文楷体</td><td>STKaiti</td><td>534E658769774F53</td><td>华文楷体</td></tr><tr><td>华文宋体</td><td>STSong</td><td>534E65875B8B4F53</td><td>华文宋体</td></tr><tr><td>华文仿宋</td><td>STFangsong</td><td>534E65874EFF5B8B</td><td>华文仿宋</td></tr><tr><td>丽黑 Pro</td><td>LiHei Pro Medium</td><td>4E3D9ED1 Pro</td><td>丽黑 Pro</td></tr><tr><td>丽宋 Pro</td><td>LiSong Pro Light</td><td>4E3D5B8B Pro</td><td>丽宋 Pro</td></tr><tr><td>标楷体</td><td>BiauKai</td><td>680769774F53</td><td>标楷体</td></tr><tr><td>苹果丽中黑</td><td>Apple LiGothic Medium</td><td>82F9679C4E3D4E2D9ED1</td><td>苹果丽中黑</td></tr><tr><td>苹果丽细宋</td><td>Apple LiSung Light</td><td>82F9679C4E3D7EC65B8B</td><td>苹果丽细宋</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>Windows</td><td></td><td></td><td></td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>65B07EC6660E4F53</td><td>新细明体</td></tr><tr><td>细明体</td><td>MingLiU</td><td>7EC6660E4F53</td><td>细明体</td></tr><tr><td>标楷体</td><td>DFKai-SB</td><td>680769774F53</td><td>标楷体</td></tr><tr><td>黑体</td><td>SimHei</td><td>9ED14F53</td><td>黑体</td></tr><tr><td>宋体</td><td>SimSun</td><td>5B8B4F53</td><td>宋体</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>65B05B8B4F53</td><td>新宋体</td></tr><tr><td>仿宋</td><td>FangSong</td><td>4EFF5B8B</td><td>仿宋</td></tr><tr><td>楷体</td><td>KaiTi</td><td>69774F53</td><td>楷体</td></tr><tr><td>仿宋_GB2312</td><td>FangSong_GB2312</td><td>4EFF5B8B_GB2312</td><td>仿宋_GB2312</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>69774F53_GB2312</td><td>楷体_GB2312</td></tr><tr><td>微软正黑体</td><td>Microsoft JhengHei</td><td>5FAEx8F6F6B639ED14F53</td><td>微软正黑体</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>5FAE8F6F96C59ED1</td><td>微软雅黑</td></tr></tbody></table><br><p><strong>参考：</strong></p><ul><li><a href="https://www.cnblogs.com/asheng2016/p/8979282.html">把typora改为微软雅黑+Consolas</a> </li><li><a href="https://support.typora.io/Add-Custom-CSS/">https://support.typora.io/Add-Custom-CSS/</a></li><li><a href="https://support.typora.io/About-Themes/">https://support.typora.io/About-Themes/</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用gpg提交遇到error:gpg数据签名失败fatal:写提交对象失败</title>
      <link href="posts/66c9c8f8/"/>
      <url>posts/66c9c8f8/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>mac</code> 上面配置好了 <code>gpg</code> 的相关密钥之后，尝试带着 <code>gpg</code>  验证提交 commit，发现报错如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200510_005503.png" width="60%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.8</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="报错问题："><a href="#报错问题：" class="headerlink" title="报错问题："></a>报错问题：</h3><p>当按照教程，在 <code>Mac</code>上面配置好了<code>gpg</code> 的教程之后，尝试带验证提交 <code>commit</code> 到 <code>github</code> 上，发现报错如下： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: gpg 数据签名失败fatal: 写提交对象失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>将下面的三个步骤都运行一遍：</p><ul><li><p> 在<code>.zshrc</code>里面加入一行代码 <code>export GPG_TTY=$(tty)</code></p></li><li><p><strong>重启 gpg-agent</strong></p><p>第一次配置，必须重启，否则签名会失败，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpgconf –kill gpg-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启终端（或者新开一个终端标签）</p></li></ul><p>成功之后即可以看到：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200510005133.png" width="30%"/ loading="lazy"><br><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p>下面的 1，2 两篇是如何创建 gpg 和使用，3，4 篇是实际第一使用会遇到的错误解决方法。</p><p><a href="https://zhuanlan.zhihu.com/p/76861431">在Github上使用GPG的全过程</a></p><p><a href="https://www.xiexianbin.cn/git/2017-06-06-git-gpg/index.html">Git 使用 GPG 签名你的 Commit</a></p><p><a href="https://zhuanlan.zhihu.com/p/97984430">解决GPG签名失败的问题</a></p><p><a href="https://gist.github.com/repodevs/a18c7bb42b2ab293155aca889d447f1b">github gist</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Mac上面安装HomeBrew失败的解决方案：修改hosts文件</title>
      <link href="posts/42ca01bf/"/>
      <url>posts/42ca01bf/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在重装 <code>Mac</code> 系统的 💻 上，安装  <code>HomeBrew</code> ，执行官方命令失败，报错 <code>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code>  的 <font color=#D0087E size=4 face="幼圆"><strong>解决方法： 修改 hosts 文件 [使用<code>raw.githubusercontent.com</code>的真实IP]</strong></font> 。</p><p><code>Google</code> 了下，网上那转载了一篇文章已经有几十遍了，或许也对你不起效吧，即使想找一篇不一样的也这么的困难，还是我自己动手；如果对你有效，就把这篇顶上去，为其他人节约时间，提供一个新的方法的</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h3><p>在我的  <code>MacOS 10.14.6 </code>  上面，执行命令 <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</code> 之后，显示连接 github 失败。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 报错原因</span>curl: <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> Failed to connect to raw.githubusercontent.com port <span class="token number">443</span>: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h3><p>由于某种原因，导致<code>github</code>的<code>raw.githubusercontent.com</code>域名解析被污染了，所以，需要通过修改<code>hosts</code>解决这个问题；</p><br><h3 id="解决方案-修改-hosts-文件-："><a href="#解决方案-修改-hosts-文件-：" class="headerlink" title="解决方案[修改 hosts 文件]："></a>解决方案[修改 hosts 文件]：</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>前提条件：</strong></font>  安装了 <code>xcode</code> 或者 <code>Command Line Tools for Xcode</code></p><p>若是不需要使用 xcode 开发，只用安装后者即可，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcode-select --install  //安装 Command Line Tools <span class="token keyword">for</span> Xcode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><ol><li><p>查阅真实的 <code>IP</code> 地址：</p><p>在<code>https://www.ipaddress.com/</code>查询<code>raw.githubusercontent.com</code>的真实IP。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200508_153350.png" width="70%"/ loading="lazy"></li><li><p>修改 <code>hosts</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件最后一行加上，然后保存 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">199.232</span>.68.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>再次输入<a href="https://brew.sh/">Homebrew 官网 </a>命令 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/bin/bash -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>等待即可安装成功</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200508_160252.png" width="90%"/ loading="lazy"></li></ol><br><h3 id="换国内镜像源："><a href="#换国内镜像源：" class="headerlink" title="换国内镜像源："></a>换国内镜像源：</h3><p>安装完成之后，当然是要进行替换 <code>Homebrew</code> 和 <code>Homebrew Bottles</code> 换源，否则就是浪费时间。</p><p>下面的国内镜像源任选其一：</p><ul><li>使用中科大的源：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git">替换及重置Homebrew默认源</a> （具体操作如下）</li><li>使用清华的源：<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/">Homebrew/Linuxbrew 镜像使用帮助</a> </li></ul><br><h4 id="替换及重置Homebrew默认源"><a href="#替换及重置Homebrew默认源" class="headerlink" title="替换及重置Homebrew默认源"></a>替换及重置Homebrew默认源</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#替换brew.git:</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git<span class="token comment">#替换homebrew-core.git:</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="Homebrew-Bottles源"><a href="#Homebrew-Bottles源" class="headerlink" title="Homebrew Bottles源"></a>Homebrew Bottles源</h4><p>Homebrew Bottles 是 Homebrew 提供的二进制代码包，目前镜像站收录了以下仓库：</p><ul><li>homebrew/homebrew-core</li><li>homebrew/homebrew-dupes</li><li>homebrew/homebrew-games</li><li>homebrew/homebrew-gui</li><li>homebrew/homebrew-python</li><li>homebrew/homebrew-php</li><li>homebrew/homebrew-science</li><li>homebrew/homebrew-versions</li><li>homebrew/homebrew-x11</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对于bash用户：</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile<span class="token comment"># 对于zsh用户：</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/homebrew-bottles">LUG@USIC</a></p><p><a href="https://blog.ponycool.com/archives/88.html">Mac安装Homebrew</a></p><p><a href="https://www.cnblogs.com/yanht/p/brew-note.html">Mac下安装brew</a></p><p><a href="https://github.com/jackzhaoyu/ceshi/blob/master/homebrew.rb">homebrew.rb</a> 文件</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Mac上打不开“uPic.dmg”，因为 Apple 无法检查其是否包含恶意软件</title>
      <link href="posts/326d4d13/"/>
      <url>posts/326d4d13/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在我的 💻  <code>MacOS 10.14.6 </code>  上面，第一次遇如下问题，附上解决方法</p><blockquote><p>打不开“ xxx”，因为 Apple 无法检查其是否包含恶意软件。</p></blockquote><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h3><p>昨天晚上才重装的 <code>MacOS</code> 系统，遇到一个软件的时候，使用谷歌浏览器在 <code>github</code> 上面下载 .<code>dmg</code> 镜像的时候，直接双击报错如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200509_141858.png" width="70%"/ loading="lazy"><br><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>简单纯朴：在 <strong>访达</strong> 里找到这个应用，右键点击打开</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200509_141908.png" width="70%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>元对象系统moc(Meat-Object System)的对象MetaObject和(含动态)属性Propert的用法</title>
      <link href="posts/e78f52cc/"/>
      <url>posts/e78f52cc/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　讲解元对象系统<code>moc</code>(<strong>Meat-Object System</strong>)的对象<code>MetaObject</code>和(含动态)属性<code>Propert</code>的用法。没想到这一篇会延期如此之久之久。 <strong>（此篇有大部分是借鉴书籍和或互联网），因为作者写的很棒，故大篇幅的直接借鉴过来了</strong> 。其中文中有些少部分是自己照着修改了一点，稍加改写而成的。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.6</code></p><p>　　<strong>💻：</strong>  <code>win10 x64</code> 📎 <code>Qt 5.12.7</code></p><br><h3 id="元对象系统"><a href="#元对象系统" class="headerlink" title="元对象系统:"></a>元对象系统:</h3><p>​    Qt 的元对象系统 (<code>Meta-Object System</code>) 提供了对象之间通信的信号与槽机制、运行时类型信息和动态属性系统。</p><p>​    <font color=#FF0000  size=4 face="幼圆"><strong>元对象系统由以下三个基础组成：</strong></font></p><ul><li><font color=#FF0000  size=4 face="幼圆">QObject类是所有使用元对象系统的类的基类。</font></li><li><font color=#FF0000  size=4 face="幼圆">在一个类的private部分声明 Q OBJECT 宏，使得类可以使用元对象的特性，如动态属性、信号与槽。</font></li><li><font color=#FF0000  size=4 face="幼圆">MOC (元对象编译器)为每个 QObjeet 的子类提供必要的代码来实现元对象系统的特性。构建项目时，MOC工具读取 C++ 源文件，当它发现类的定义里有 Q_ OBJECT 宏时，它就会为这个类生成另外一个包含有元对象支持代码的 C++ 源文件，这个生成的源文件连同类的实现文件一起被编译和连接。</font></li></ul><ul><li><p><strong>除了信号与槽机制外，元对象还提供如下一些功能。</strong></p></li><li><p>Qbjet::metaOject()函数返回类关联的元对象，元对象类 QMetaObject 包含了访问元对象的一些接口口函数，例如 QMetabjet:classNamec() 函数可在运行时返回类的名称字符串。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QObject <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> QPushButton<span class="token punctuation">;</span>obj<span class="token operator">-></span><span class="token function">metaObject</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">classNane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回"QPushButton</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>QMetaOjct::newInstance()</code>函数创建类的一个新的实例。</p></li><li><p>Q0bjct:inherits(const char *className)函数判断一个对象实例是否是名称为 className 的类或 QObject 的子类的实例。例如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTimer <span class="token operator">*</span>timer <span class="token operator">=</span> <span class="token keyword">new</span> QTimer<span class="token punctuation">;</span>  <span class="token comment">// OTimer是oobject的子类</span>timer<span class="token operator">-></span><span class="token function">inherits</span> <span class="token punctuation">(</span><span class="token string">"QTimer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回true</span>timer<span class="token operator">-></span><span class="token function">inherits</span> <span class="token punctuation">(</span><span class="token string">"QObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回true</span>timer<span class="token operator">-></span><span class="token function">inherits</span> <span class="token punctuation">(</span><span class="token string">"QAbstractButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回false. 不是QAbatractButton的子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>QObject::tr()</code> 和 <code>Qbjet::trUtf8()</code> 函数可翻译字符串，用于多语言界面设计。</p></li><li><p><code>QObjct:setProperty()</code> 和 <code>Q0bjct:property()</code> 函数用于通过属性名称动态设置和获取属性值。</p><p>对于 QObject 及其子类，还可以使用 <code>qobject_cast()</code> 函数进行动态投射(dynamic cast)。例如，假设 QMyWidget 是 QWidget 的子类并且在类定义中声明了Q_OBJECT宏。创建实例使用下面的语句: </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Q0bject <span class="token operator">*</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> QMyWidget<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>变量 obj 定义为 QObject 指针,但它实际指向 QMyWidget 类,所以可以正确投射为 QWidget，即: </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Qwidget <span class="token operator">*</span>widget <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>Qwidget <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从 QObject 到 QWidget 的投射是成功的，因为 obj 实际是 QMyWidget 类，是 QWidge 的子类。也可以将其成功投射为 QMyWidget，即:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QMyWidget <span class="token operator">*</span>myWidget <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>QMyWidget <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>投射为 QMyWidget是成功的，因为 qoiect_cast() 并不区分 Qt 内建的类型和用户自定义类型。但是，若要将 obj 投射为 QLabel 则是失败的，因为 QMyWidget 不是 Qlabel 的子类。即: </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLabe1 <span class="token operator">*</span>labol <span class="token operator">=</span> qobject_caot<span class="token operator">&lt;</span>QLabe1 <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br></li></ul><h3 id="属性系统："><a href="#属性系统：" class="headerlink" title="属性系统："></a>属性系统：</h3><h4 id="属性定义："><a href="#属性定义：" class="headerlink" title="属性定义："></a>属性定义：</h4><p>Qt提供一个Q PROPERTY0宏可以定义属性，它也是基于元对象系统实现的。Qt 的属性系統与C++编译器无管，可以用任何柝准的C++编译器定义属性的Qt C++程序。</p><ul><li><p>在QObijct的子奬中，用宏Q PROPERTYO定文属性，其使用格式如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span>type <span class="token function">name</span>             <span class="token punctuation">(</span>READ getFunction <span class="token punctuation">[</span>WRITE setFunction<span class="token punctuation">]</span> <span class="token operator">|</span>              MEMBER memberName <span class="token punctuation">[</span><span class="token punctuation">(</span>READ getFunction <span class="token operator">|</span> WRITE setFunction<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token punctuation">[</span>RESET resetFunction<span class="token punctuation">]</span>             <span class="token punctuation">[</span>NOTIFY notifySignal<span class="token punctuation">]</span>             <span class="token punctuation">[</span>REVISION <span class="token keyword">int</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>DESIGNABLE <span class="token keyword">bool</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>SCRIPTABLE <span class="token keyword">bool</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>STORED <span class="token keyword">bool</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>USER <span class="token keyword">bool</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>CONSTANT<span class="token punctuation">]</span>             <span class="token punctuation">[</span>FINAL<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Q_PROPERTY宏定义属性的一些主要关键字的意义如下。</p><p>● READ 指定一个读取属性值的函数，没有 MEMBER 关键字时必须设置READ.</p><p>● WRITE指定一个设定属性值的函数， 只读属性没有WRITE设置。</p><p>● MEMBER指定一个成员变量与属性关联，成为可读可写的属性，无需再设置READ和WRITE.</p><p>● RESET是可选的，用于指定一个设置属性缺省值的函数。</p><p>● NOTIFY是可选的，用于设置一个信号， 当属性值变化时发射此信号.</p><p>● CONSTANT表示属性値是一常数，対于一个対象实例，READ 指定的函数返回値是常数，但是每个实例的返回值可以不一-样。具有CONSTANT关键字的属性不能有WRITE和NOTIFY关键字。</p><p>FINAL表示所定文的属性不能被子美重栽。QWidget类定义属性的一-些例子如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Q_ <span class="token function">PROPERTY</span> <span class="token punctuation">(</span><span class="token keyword">bool</span>  focus READ hasFocus<span class="token punctuation">)</span>Q_ <span class="token function">PROPERTY</span><span class="token punctuation">(</span>b0ol enabled READ isEnabled WRITE setEnabled<span class="token punctuation">)</span>Q_ <span class="token function">PROPERTY</span> <span class="token punctuation">(</span>QCursor cursor READ cursor WRITE setCursor RESET <span class="token function">unsetCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><br><h4 id="属性的使用"><a href="#属性的使用" class="headerlink" title="属性的使用:"></a>属性的使用:</h4><p>不管是否用READ和WRITE定义了接口函数，只要知道属性名称就可以通过QObjct:property()读取属性值，并通过QObject:setProperty0设置属性值。例如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPushButton <span class="token operator">*</span>button <span class="token operator">=</span> <span class="token keyword">new</span> QPushButton<span class="token punctuation">;</span>Q0bject <span class="token operator">*</span>object <span class="token operator">=</span> button<span class="token punctuation">;</span>object<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"flat"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> isFlat<span class="token operator">-</span> object<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"flat"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h4 id="动态属性"><a href="#动态属性" class="headerlink" title="动态属性:"></a>动态属性:</h4><p> QObject:setPropert()函数可以在运行时为类定义一个新的属性，称之为动态属性。动态属性是针对类的实例定义的。动态属性可以使用Qbjct:property()查询，就如在类定义里用 Q_PROPERTY 宏定义的属性一样。</p><p>  例如，在数据表编辑界面上，一些字段是必填字段，就可以在初始化界面时为这些字段的关联显示组件定义一个新的required属性，并设置值为”true”，如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">editName<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"required"</span>，<span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>comboSex<span class="token operator">-></span> <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">.</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> checkAgree<span class="token operator">-></span> <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  然后，可以应用下面的样式定义将这种必填字段的背景颜色设置为亮绿色</p><p><code>*[required=&quot;true&quot;] (background-color: lime)</code></p><br><h4 id="类的附加信息"><a href="#类的附加信息" class="headerlink" title="类的附加信息:"></a>类的附加信息:</h4><p>  属性系统还有一个宏Q CLASSINFO0.可以为类的元对象定义“名称-值” 信息，如:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">QMyC1ass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>   Q_OBJECT  <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"Wang"</span> <span class="token punctuation">)</span>  <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token string">"UPC"</span> <span class="token punctuation">)</span>  <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"version "</span>，<span class="token string">"3.0.1"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用Q CLASSINFOQ宏定义附加类信息后，可以通过元对象的一些函数获取类的附加信息，如classInfo(int )获取某个附加信息，函数原型定义如下: .</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QMetaClassInfo QMetaObject<span class="token operator">:</span> <span class="token operator">:</span><span class="token function">classInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值是 QMetaClassInfo 类型，有name()和value()两个函数，可获得类附加信息的名称和值。</p><br><h3 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h3><p>　写了一个例子：</p><p>ExPerson.h</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXPERSON_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXPERSON_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QObject></span></span><span class="token keyword">class</span> <span class="token class-name">ExPerson</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT    <span class="token comment">//类的附加信息：名称————值</span>    <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"touwoyimuli"</span><span class="token punctuation">)</span>    <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"1.0.0"</span><span class="token punctuation">)</span>    <span class="token function">Q_CLASSINFO</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"Qt5 Meta Object and Property Example"</span><span class="token punctuation">)</span>    <span class="token comment">//属性定义</span>    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span><span class="token keyword">int</span> age READ getAge WRITE setAge NOTIFY ageChanged<span class="token punctuation">)</span>    <span class="token comment">//属性age; 方法getAge()和setAge()对其读写; 设置信号ageChanged()</span>    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span>QString name MEMBER m_name<span class="token punctuation">)</span>     <span class="token comment">//属性name 与类成员变量m_name关联</span>    <span class="token function">Q_PROPERTY</span><span class="token punctuation">(</span><span class="token keyword">int</span> score MEMBER m_score<span class="token punctuation">)</span>       <span class="token comment">//属性score与类成员变量m_score关联</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExPerson</span><span class="token punctuation">(</span>QString name<span class="token punctuation">,</span> QObject <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//属性 READ 函数</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//属性 WRITE 函数</span>    <span class="token keyword">void</span> <span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//单独写一个接口，与属性无关</span>signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">ageChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//属性age发生改变的信号函数</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_age <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    QString m_name<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_score <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXPERSON_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ExWidget.h</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXWIDGET_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXWIDGET_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExPerson.h"</span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExWidget</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">onAgeChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//自定义的槽函数</span>    <span class="token keyword">void</span> <span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onBtnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//UI界面的槽函数</span>    <span class="token keyword">void</span> <span class="token function">onBtnBoyInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onBtnGrilInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onClassInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>    ExPerson<span class="token operator">*</span> m_boy<span class="token punctuation">;</span>    ExPerson<span class="token operator">*</span> m_girl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXWIDGET_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ExPerson.cpp</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExPerson.h"</span></span><span class="token comment">//加一个参后的构造函数</span><span class="token class-name">ExPerson</span><span class="token operator">::</span><span class="token function">ExPerson</span><span class="token punctuation">(</span>QString name<span class="token punctuation">,</span> QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QObject</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">ExPerson</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> m_age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExPerson</span><span class="token operator">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_age <span class="token operator">=</span> value<span class="token punctuation">;</span>    emit <span class="token function">ageChanged</span><span class="token punctuation">(</span>m_age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发射信号</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExPerson</span><span class="token operator">::</span><span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_age<span class="token operator">++</span><span class="token punctuation">;</span>    emit <span class="token function">ageChanged</span><span class="token punctuation">(</span>m_age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发射信号</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ExWidget.cpp</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExWidget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExWidget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMetaProperty></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">ExWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExWidget<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExPerson</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_boy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_boy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_boy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"Boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//动态属性</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_boy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExPerson<span class="token operator">::</span>ageChanged<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExWidget<span class="token operator">::</span>onAgeChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExPerson</span><span class="token punctuation">(</span><span class="token string">"张丽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_girl<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_girl<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_girl<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token string">"Gril"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//动态属性</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_girl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExPerson<span class="token operator">::</span>ageChanged<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ExWidget<span class="token operator">::</span>onAgeChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>spinBoy<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"isBoy"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//动态属性</span>    ui<span class="token operator">-></span>spinGril<span class="token operator">-></span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"isBoy"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinGril<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinBoy<span class="token punctuation">,</span>  <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnBoyAdd<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onBtnBoyInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnGrilAdd<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onBtnGrilInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnMetaObject<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onClassInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>btnClean<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onBtnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"元对象MetaObject和(含动态)属性Propert的用法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">onAgeChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>   <span class="token comment">//参数val没使用，避免警告</span>    ExPerson<span class="token operator">*</span> person <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>ExPerson <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//类型投射</span>    QString name <span class="token operator">=</span> person<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString sex <span class="token operator">=</span> person<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age  <span class="token operator">=</span> person<span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//通过接口函数，获得年龄</span>                                                             <span class="token comment">//或使用 int age  = person->property("age").toInt();</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>sex <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">asprintf</span><span class="token punctuation">(</span><span class="token string">",年龄=%d"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">onSpinValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    QSpinBox<span class="token operator">*</span> spin <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>QSpinBox <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//类型投射</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>spin<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">"isBoy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        m_boy<span class="token operator">-></span><span class="token function">setAge</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinBoy<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        m_girl<span class="token operator">-></span><span class="token function">setAge</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinGril<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">onBtnClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">onBtnBoyInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_boy<span class="token operator">-></span><span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">onBtnGrilInc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_girl<span class="token operator">-></span><span class="token function">incAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExWidget</span><span class="token operator">::</span><span class="token function">onClassInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> QMetaObject<span class="token operator">*</span> meta <span class="token operator">=</span> m_boy<span class="token operator">-></span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"==元对象信息(Meta Object)==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"类名称: %1\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>meta<span class="token operator">-></span><span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"属性(property)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">propertyOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> meta<span class="token operator">-></span><span class="token function">propertyCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        QMetaProperty prop <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> propName <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QString propValue <span class="token operator">=</span> m_boy<span class="token operator">-></span><span class="token function">property</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"属性名称=%1， 属性值= %2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>propValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"classInfo:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">classInfoOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> meta<span class="token operator">-></span><span class="token function">classInfoCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        QMetaClassInfo classInfo <span class="token operator">=</span> meta<span class="token operator">-></span><span class="token function">classInfo</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>textEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"Name=%1， Value= %2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>classInfo<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>classInfo<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><p>　　附上的最后的运行效果图一览：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200504_220444.gif" width="70%"/ loading="lazy"><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtMeatObjectEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中多线程使用信号量(信号灯)，和sem_wait()函数使用</title>
      <link href="posts/67949f28/"/>
      <url>posts/67949f28/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　<a href="https://xmuli.blog.csdn.net/article/details/105885580">上一篇</a>中讲解了“条件变量 + 互斥量”的组合使用，演示了 “生产者-消费者”模型。本篇讲解 互斥量的升级版：<strong>信号量（信号灯）</strong> 的理解和使用。互斥量与信号量的关系，可以简单理解为 c 和 c++ 的关系。信号量的使用的步骤，也是和前面的互斥量很像，不过这次的头文件改为了 <code>#include &lt;semaphore.h&gt;</code>:</p><ul><li>sem_t sem; //定义变量</li><li>sem_wait();  //加锁</li><li>…其他代码</li><li>sem_post();  //解锁</li><li>sem_destroy();  //销毁</li></ul><p><font color=#D0087E size=4 face="幼圆">说明：</font></p><p><strong>本例子是在 Linux 下面运行成功的，编译时候，时候需要加参数 <code>-pthread</code> 。</strong></p><p>若是想要在 Mac 运行改程序，需要改写替换部分函数(mac 不支持其中的部分函数)</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="信号量-信号灯-："><a href="#信号量-信号灯-：" class="headerlink" title="信号量(信号灯)："></a>信号量(信号灯)：</h3><p>简单理解为里面具有多个互斥量的集合。是加强版的互斥锁。</p><p><strong>其他：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sem_t sem<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之间的一些解释：</p><p>sem 变量和 函数 sem_init 中的 sem 参数是同一个；在函数里面，第一个参数 sem 实际是和第三个参数 value 关联的；表面上对 sem 进行修改，实际上是修改关联的 value 的值，对其进行 ++ 或 – 操作。（嗯嗯，原理就这么理解就行）。</p><br><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li><p>sem_t sem; </p><br></li><li><p>初始化信号量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">int</span> pshared<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li>pshared：<ul><li>0 - 线程同步</li><li>1 - 进程同步</li></ul></li><li>value：<ul><li>最多有几个线程操作共享数据</li></ul></li></ul></li></ul><br></li><li><p>加锁:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//调用一次相当于对 sem 做了一次 -- 操作</span><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁； => 如果 sem 值为 0，线程会阻塞</span><span class="token keyword">int</span> <span class="token function">sem_trywait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//尝试加锁； => sem == 0，加锁失败，不阻塞，直接返回</span><span class="token keyword">int</span> <span class="token function">sem_timedwait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>abs_timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//限时尝试加锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br></li><li><p>解锁:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//相当于对于 sem 做了 ++ 操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br></li><li><p>销毁信号量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br></li></ol><h3 id="“生产者-消费者”例子："><a href="#“生产者-消费者”例子：" class="headerlink" title="“生产者-消费者”例子："></a>“生产者-消费者”例子：</h3><p>将上一篇的例子改一改，直接使用信号量来写这个例子“生产者-消费者”。本篇文章例子如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_020639.png" width="80%"/ loading="lazy"><br><h4 id="理论模型："><a href="#理论模型：" class="headerlink" title="理论模型："></a>理论模型：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_021414.png" width="90%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_020625.png" width="60%"/ loading="lazy"><br><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>多看一下理论模型的那个伪代码的流程图，多体会揣摩其中的箭头的流向，且一开始这设置为消费者为阻塞，当生产者生产之后，为其解锁。</p><br><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span>sem_t semProducer<span class="token punctuation">;</span>sem_t semCustomer<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span>  <span class="token comment">//节点结构</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Node<span class="token punctuation">;</span>Node<span class="token operator">*</span> g_head <span class="token operator">=</span>  <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token comment">//永远指向链表头部的指针</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生产者--添加一个头结点</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//消费者--删除一个头结点</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pthread_t p1<span class="token punctuation">;</span>    pthread_t p2<span class="token punctuation">;</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化生产者线程信号量， （赋予 4 个，对比下一行，让生产者先运行）</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化消费者线程信号量， (赋予 0 个， 一开始就让消费者处于阻塞状态)</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funProducer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建生产者线程</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funCustomer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建消费者线程</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞回收子线程</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//销毁生产者信号量</span>    <span class="token function">sem_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//销毁消费者信号量</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//semProducer--，  == 0， 则阻塞</span>        Node<span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pNew<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>         pNew<span class="token operator">-></span>next <span class="token operator">=</span> g_head<span class="token punctuation">;</span>        g_head <span class="token operator">=</span> pNew<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funProducer(生产者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pNew<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// semCustomer++</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//随机休息 0~2 s</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semCustomer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//semCustomer--，  == 0， 则阻塞</span>        Node<span class="token operator">*</span> pDel <span class="token operator">=</span> g_head<span class="token punctuation">;</span>        g_head <span class="token operator">=</span> g_head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funCustomer(消费者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> pDel<span class="token punctuation">;</span>        <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>semProducer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// semProducer++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p>这个例子是在 uos20 上面运行的成功的；编译的时候，记得加上参数 <code>-pthread</code> 。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_014422.gif" width="90%"/ loading="lazy"><br><h3 id="Mac-下对-sem-init-sem-destory-不支持："><a href="#Mac-下对-sem-init-sem-destory-不支持：" class="headerlink" title="Mac 下对 sem_init()/sem_destory() 不支持："></a>Mac 下对 sem_init()/sem_destory() 不支持：</h3><p><font color=#D0087E size=4 face="幼圆"><strong>注意：</strong> </font></p><p>MacOS 不支持 <code>sem_init()</code> 和 <code>sem_destroy()</code>；这个例子若是想在 mac 下编译通过，需要自行修改替换相关的函数。</p><ul><li><code>sem_init(&amp;sem, 0, 1)</code> 改成 <code>sem_open(&quot;sem&quot;, O_CREAT|O_EXCL, S_IRWXU, 0)</code></li><li><code>sem_destory(&amp;sem)</code> 改成 <code>sem_unlink(&quot;sem&quot;);</code></li><li>且支持 <code>pthread_mutex_init(&amp;mutex, NULL)</code> 却不支持 <code>pthread_mutex_destory(&amp;mutex)</code></li></ul><br><p>Mac 的该文件在 <code>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/semaphore.h</code> 路径，可以查看到该头文件的源码，附上详细 mac 下该库源码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_SYS_SEMAPHORE_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_SYS_SEMAPHORE_H_</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> sem_t<span class="token punctuation">;</span><span class="token comment">/* this should go in limits.h> */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEM_VALUE_MAX</span> <span class="token expression"><span class="token number">32767</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SEM_FAILED</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/cdefs.h></span></span>__BEGIN_DECLS<span class="token keyword">int</span> <span class="token function">sem_close</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_destroy</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span> __deprecated<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_getvalue</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span> __restrict<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> __restrict<span class="token punctuation">)</span> __deprecated<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_init</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> __deprecated<span class="token punctuation">;</span>sem_t <span class="token operator">*</span> <span class="token function">sem_open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_post</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_trywait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sem_wait</span><span class="token punctuation">(</span>sem_t <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">__DARWIN_ALIAS_C</span><span class="token punctuation">(</span>sem_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>__END_DECLS<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  <span class="token comment">/* _SYS_SEMAPHORE_H_ */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/21_semaphore">21_semaphore</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中多线程使用条件变量阻塞线程，和pthread_cond_wait()函数使用</title>
      <link href="posts/1b3fd61f/"/>
      <url>posts/1b3fd61f/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　继续<a href="https://xmuli.blog.csdn.net/article/details/105800949">上一篇</a>中，讲解了原子⚛操作（粗略看作 cpu 会执行完该几行代码，才会切换到其他的线程）和重点讲解<strong>读写锁</strong> 的使用。本篇讲解 <strong>条件变量</strong> 的使用步骤：</p><ul><li><code>pthread_cond_t g_cond()</code> //条件变量–阻塞线程，等待条件满足*</li><li><code>pthread_cond_init()</code>  //初始化</li><li><code>pthread_cond_wait()</code> / <code>pthread_cond_timedwait()</code>  //阻塞线程（若是条件不满足）</li><li>…其他代码</li><li><code>pthread_cond_signal()</code> / <code>pthread_cond_timedwait()</code> //通知阻塞中的线程解除阻塞</li><li><code>pthread_cond_destroy()</code>  //销毁</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><br><h3 id="条件变量是锁🔐吗？"><a href="#条件变量是锁🔐吗？" class="headerlink" title="条件变量是锁🔐吗？"></a>条件变量是锁🔐吗？</h3><ul><li><font color=#FF0000  size=4 face="幼圆">条<strong>件变量不是锁，</strong></font>  但是条件变量能够阻塞线程</li><li>使用条件变量 + 互斥量<ul><li>互斥量：保护一块共享数据</li><li>条件变量：引起阻塞<ul><li>生产者和消费者模型</li></ul></li></ul></li></ul><br><h3 id="条件变量的两个动作？"><a href="#条件变量的两个动作？" class="headerlink" title="条件变量的两个动作？"></a>条件变量的两个动作？</h3><ul><li>当条件不满足，阻塞线程</li><li>当条件满足；通知阻塞的线程开始工作</li></ul><br><h3 id="使用条件变量流程："><a href="#使用条件变量流程：" class="headerlink" title="使用条件变量流程："></a>使用条件变量流程：</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>条件变量通常是结合和互斥量一起使用。</strong></font> 其使用方式，和互斥量使用很是相似，包括下一篇准备写的<strong>信号量(信号灯)</strong> ，的使用方式也是和互斥量很是相似。</p><ol><li><p>初始化条件变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_condattr_t <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>阻塞条件变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//阻塞一个条件变量</span><span class="token keyword">int</span> <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span> pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意：另一个参数是互斥量参数</span><span class="token comment">//限时阻塞一个条件变量</span><span class="token keyword">int</span> <span class="token function">pthread_cond_timedwait</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">,</span> pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>abstime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pthread_cond_wait() 函数，还有干了其他事情：</p><ul><li><strong>阻塞线程</strong></li><li><font color=#D0087E size=4 face="幼圆"><strong>将已经上锁的互斥锁解锁</strong></font></li><li><font color=#D0087E size=4 face="幼圆"><strong>接解除阻塞之后，对互斥锁进行加锁操作</strong></font></li></ul></li><li><p><font color=#FF0000  size=4 face="幼圆">唤醒阻塞在条件变量上的线程</font> </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//唤醒至少一个阻塞在条件变量上的线程</span><span class="token keyword">int</span> <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒全部阻塞在条件变量上的线程</span><span class="token keyword">int</span> <span class="token function">pthread_cond_broadcast</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>销毁一个条件变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span>pthread_cond_t <span class="token operator">*</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><br><h3 id="生产者-消费者模型："><a href="#生产者-消费者模型：" class="headerlink" title="生产者-消费者模型："></a>生产者-消费者模型：</h3><p>对于 <strong>“条件变量 + 互斥量”</strong> 的使用组合，有一个很是景点的例子 “生产者-消费者模型”。</p><br><h4 id="理论模型："><a href="#理论模型：" class="headerlink" title="理论模型："></a>理论模型：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200502_003206.png" width="90%"/ loading="lazy"><br><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><p>将上面的理论模型的伪代码，用实际的完整代码实现如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">node</span>  <span class="token comment">//节点结构</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Node<span class="token punctuation">;</span>Node<span class="token operator">*</span> g_head <span class="token operator">=</span>  <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token comment">//永远指向链表头部的指针</span>pthread_mutex_t g_mutex<span class="token punctuation">;</span>  <span class="token comment">//互斥锁--线程同步</span>pthread_cond_t g_cond<span class="token punctuation">;</span>    <span class="token comment">//条件变量--阻塞线程，等待条件满足</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//生产者--添加一个头结点</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//消费者--删除一个头结点</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pthread_t p1<span class="token punctuation">;</span>    pthread_t p2<span class="token punctuation">;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//初始化互斥锁</span>    <span class="token function">pthread_cond_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化条件变量</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funProducer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建生产者线程</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funCustomer<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建消费者线程</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞回收子线程</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//配套销毁互斥锁</span>    <span class="token function">pthread_cond_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配套销毁条件变量</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funProducer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Node<span class="token operator">*</span> pNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Node* pNew = (Node *)malloc(sizeof(Node));</span>        pNew<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>         <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁</span>        pNew<span class="token operator">-></span>next <span class="token operator">=</span> g_head<span class="token punctuation">;</span>        g_head <span class="token operator">=</span> pNew<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funProducer(生产者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pNew<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>                <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通知阻塞的消费者线程，解除阻塞</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//随机休息 0~2 s</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funCustomer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g_head <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//若是没有，则等待生产者生产出来，在此阻塞，等待消费</span>            <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_cond<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻塞线程，且该函数会对互斥锁解锁；且接解除阻塞之后，对互斥锁进行加锁操作</span>        <span class="token punctuation">&#125;</span>        Node<span class="token operator">*</span> pDel <span class="token operator">=</span> g_head<span class="token punctuation">;</span>        g_head <span class="token operator">=</span> g_head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----funCustomer(消费者): %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> pDel<span class="token punctuation">;</span>        <span class="token comment">// free(pDel);</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h4><p>多看一下理论模型的那个伪代码的流程图，生产者生产完一个之后，要通知（此时处于）阻塞的线程，给它一个信号，让他解除阻塞。</p><br><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200501_173204.gif" width="90%"/ loading="lazy"><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/20_conditton">20_conditton</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 该如何自我系统的学习「心路」？</title>
      <link href="posts/63d476f1/"/>
      <url>posts/63d476f1/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h4 id="序言："><a href="#序言：" class="headerlink" title="序言："></a>序言：</h4><p>搞编程，学 C/C++ 怎么不能学习一下 Linux ? 了解一下底层的知识库和程序运行原理？附上个人学习目录，此系列学完之后，回来预期会继续更新 Qt 相关的知识 <a href="https://github.com/xmuli/QtExamples">QtExamples</a> ，将更多的一些知识分享出来。</p><p><font color=#D0087E size=4 face="幼圆">Linux 系统学习三部曲：❶基础编程 ❷系统编程 ❸网络编程</font></p><br><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p><code>Linux / Unix</code> Example：文章中的所有例子均在 MacOS &amp;&amp; UOS 上面编译和运行成功。</p><br><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p><strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>gcc/g++ 9.2.0</code> 📎 <code>gdb 8.3</code></p><p><strong>💻：</strong>  <code>UOS20 (Debian8+)</code> 📎 <code>gcc/g++ 8.3.0</code> 📎 <code>gdb 8.0</code></p><br><h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><h4 id="服务器开发之-Linux-基础编程："><a href="#服务器开发之-Linux-基础编程：" class="headerlink" title="服务器开发之 Linux 基础编程："></a>服务器开发之 Linux 基础编程：</h4><h5 id="gcc-g"><a href="#gcc-g" class="headerlink" title="gcc/g++:"></a>gcc/g++:</h5><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/104639656">在MacOS上面通过brew命令安装gcc编译器集</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104645129">gcc和g++的区别，编译.c和.cpp文件的区别</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104693603">gcc工作流程：预处理，编译，汇编，链接</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104692241">Linux下使用gcc生成静态库.a和调用（图文并茂，坑已踩完）</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104692370">Linux下使用gcc生成动态库.so和调用（图文并茂，坑已踩完）</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104758512">在Linux中，编写入门的makefile文件，然后逐渐迭代</a></li></ul><br><h5 id="gdb"><a href="#gdb" class="headerlink" title="gdb:"></a>gdb:</h5><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/104784641"> 在MacOS10.14.6安装最新gdb8.3的详细教程，含可能遇到的所有坑(网上最新教程)</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104904798">gdb调试器的使用，初探全貌</a></li></ul><br><h5 id="程序运行原理，文件描述符，PCB："><a href="#程序运行原理，文件描述符，PCB：" class="headerlink" title="程序运行原理，文件描述符，PCB："></a>程序运行原理，文件描述符，PCB：</h5><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/105010222">Linux中文件操作，软硬链接ln，用户权限chmod、chown，文件查找和检索find、grep，压缩gz，bz2</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/105029261">Linux中虚拟地址空间、pcb、文件描述符、C库函数工作流程、标准库和系统库函数区别</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/105031987">Linux中man手册，阻塞和非阻塞，stat，文件操作和遍历，文件描述符复制dup()</a> </li></ul><br><h4 id="服务器开发之-Linux-系统编程："><a href="#服务器开发之-Linux-系统编程：" class="headerlink" title="服务器开发之 Linux 系统编程："></a>服务器开发之 Linux 系统编程：</h4><h5 id="进程间通信："><a href="#进程间通信：" class="headerlink" title="进程间通信："></a>进程间通信：</h5><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/105157044">Linux中fork创建兄弟子进程，验证进程之间全局变量不共享，exec函数族</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/105164215">Linux中孤儿进程，僵尸进程，进程回收wait、waitpid函数</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/105254078">父子进程、兄弟子进程之间通信方式–匿名管道pipe(适用于有血缘关系的进程)</a></li><li><a href="https://xmuli.blog.csdn.net/article/details/105266919">Linux中普通的进程间通信方式–有名管道fifo(适用于无血缘关系的进程)</a> </li><li><a href="https://xmuli.blog.csdn.net/article/details/105322927">Linux中进程间的通信方式–内存映射区mmap()</a> </li></ul><br><h5 id="信号和守护进程："><a href="#信号和守护进程：" class="headerlink" title="信号和守护进程："></a>信号和守护进程：</h5><ul><li><a href="https://xmuli.blog.csdn.net/article/details/105357886">Linux中系统信号初识，和函数kill，raise，abort，alarm，setitimer</a> </li><li><a href="https://xmuli.blog.csdn.net/article/details/105448914">Linux中未决信号集和阻塞信号集的状态关系sigaddset，以及捕捉信号函数</a> </li><li><a href="https://xmuli.blog.csdn.net/article/details/105453850">Linux中创建守护进程setsid()</a></li></ul><br><h5 id="多线程："><a href="#多线程：" class="headerlink" title="多线程："></a>多线程：</h5><ul><li><a href="https://xmuli.blog.csdn.net/article/details/105546234">Linux中创建多线程实例pthread_create()</a> </li><li><a href="https://xmuli.blog.csdn.net/article/details/105620043">Linux中多线程操作函数pthread_exit()、pthread_jion()、pthread_detach()、pthread_cancel()</a> </li><li><a href="https://xmuli.blog.csdn.net/article/details/105779111">Linux中使用使用互斥量(锁)Mutex来操持多线程同步执行pthread_mutex_lock()</a> </li><li><a href="https://xmuli.blog.csdn.net/article/details/105800949">Linux中原子操作，死锁原因以及解决方法，读写锁的属性和函数使用pthread_rwlock_wrlock()</a> </li></ul><p><br><br></p><h3 id="我所想说：🙋‍♀️"><a href="#我所想说：🙋‍♀️" class="headerlink" title="我所想说：🙋‍♀️"></a>我所想说：🙋‍♀️</h3><p>虽然不盈利，会累，但因自由和开源软件而写的开心ya， 鸭鸭</p><p>但 github 上，你的 star 和 fork 是我最大鼓励，也是我一直持续写下去的动力…</p><blockquote><p>由于会经常更新新的文章，所以暂时先使用这一份目录更新：<a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a><br>更新时间： 2020-04-29</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中原子操作，死锁原因以及解决方法，读写锁的属性和函数使用pthread_rwlock_wrlock()</title>
      <link href="posts/9e69ff46/"/>
      <url>posts/9e69ff46/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　上一篇中介绍了多线程使用互斥量(锁)来控制程序的访问公共资源的时候是”串行“的；本篇继续，重点讲解如下几个概念：Linux 中的<strong>原子操作</strong> 、<strong>死锁原因</strong> 以<strong>及解决方法</strong> 、和<strong>读写锁</strong> 和对应的源码小例子。其中读写锁的使用例子，完全可以参考互斥量(锁)，其大概流程如下：</p><ul><li><code>pthread_rwlock_init()</code></li><li><code>pthread_rwlock_rdlock()</code> / <code>pthread_rwlock_tryrdlock()</code> / <code>pthread_rwlock_wrlock()</code> / <code>pthread_rwlock_trywrlock()</code></li><li>、、、代码片</li><li><code>pthread_rwlock_unlock()</code></li><li><code>pthread_rwlock_destroy()</code></li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="原子操作："><a href="#原子操作：" class="headerlink" title="原子操作："></a>原子操作：</h3><ul><li><p><strong>原子操作：</strong></p><ul><li><strong>cpu 处理一个指令，线程 / 进程在处理完这个指令之前，是不会失去 cpu 的。</strong></li></ul></li></ul><p>借用显示生活中的知识，原子⚛是最小的不可分割的物质，没有比它更小的（类比，不详探究夸克）；在一个程序中，是有几百行代码构成了，可以将一行代码（一行表达式语句）看做为一个 <strong>”原子操作“</strong>；</p><p>比如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><ul><li><p><strong>临界区：</strong></p><ul><li>从代码的角度理解，就是 执行加锁语句 <code>pthread_mutex_lock()</code> 和解锁语句 <code>pthread_mutex_unlock()</code> 之间代码片，称之为 <strong>临界区</strong>； 也可以看作为 ”伪原子操作“ ，因为它有可能临界区的代码执行到一半，cpu 就被抢走了，但是其虽然抢到了 cpu 但是会阻塞，或者不能够访问该临界区的代码片，然后等待轮转，cpu 再次回来，继续在自己身上继续执行接下来的代码行；然后这样临界区的代码就只有它执行完毕了。可以看做是一个 ”伪“ 原子操作。</li></ul><p> <strong>示意图如下：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200426_231357.png" width="50%"/ loading="lazy"></li></ul><br><h3 id="造成死锁的原因："><a href="#造成死锁的原因：" class="headerlink" title="造成死锁的原因："></a>造成死锁的原因：</h3><h4 id="自己锁自己："><a href="#自己锁自己：" class="headerlink" title="自己锁自己："></a>自己锁自己：</h4><ul><li><strong>分析：</strong> 当遇到连续锁两次的时候，线程会阻塞在 第二个 <code>pthread_mutex_lock()</code> 函数这一行里面。</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200426_231648.png" width="70%"/ loading="lazy"><br><h4 id="循环锁住："><a href="#循环锁住：" class="headerlink" title="循环锁住："></a>循环锁住：</h4> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200426_231710.png" width="70%"/ loading="lazy"><br><h3 id="避免死锁的方式："><a href="#避免死锁的方式：" class="headerlink" title="避免死锁的方式："></a>避免死锁的方式：</h3><p>避免或者解决死锁的三种方式如下：</p><ul><li><strong>让线程按照一定的顺序访问共享资源</strong></li><li><strong>在访问其他锁的时候，需要先将自己的锁解开</strong></li><li><strong>设置上锁的使用，可以使用 <code>pthread_mutex_trylock()</code> 函数</strong> </li></ul><br><h3 id="读写锁："><a href="#读写锁：" class="headerlink" title="读写锁："></a>读写锁：</h3><p>除了使用互斥量(锁)之外，还可以采用 读写锁 来控制多线程访问共享资源。</p><h4 id="读写锁的理解："><a href="#读写锁的理解：" class="headerlink" title="读写锁的理解："></a>读写锁的理解：</h4><ul><li>读锁 - 对内存做读操作</li><li>写锁 - 对内存做写操作</li></ul><h4 id="读写锁的特性："><a href="#读写锁的特性：" class="headerlink" title="读写锁的特性："></a><font color=#FF0000 face="幼圆">读写锁的特性：</font></h4><ul><li>线程 A 加锁成功，又来了三个线程，做读操作，可以加锁成功<ul><li><font color=#FF0000  size=4 face="幼圆">读共享</font> - 并行处理</li></ul></li><li>线程 A 加写锁成功，又来了三个线程，做读操作，三个线程阻塞<ul><li><font color=#FF0000  size=4 face="幼圆">写独占</font></li></ul></li><li>线程 A 加读锁成功，又来了 B 线程加写锁线程阻塞，又来了 C 线程加读锁阻塞<ul><li><font color=#FF0000  size=4 face="幼圆">读写不能同时进行</font></li><li><font color=#FF0000  size=4 face="幼圆">写的优先级高</font>（即使后面线程有先后来顺序来，也会看一下优先级）</li></ul></li></ul><br><h3 id="读写锁的场景练习："><a href="#读写锁的场景练习：" class="headerlink" title="读写锁的场景练习："></a>读写锁的场景练习：</h3><p>上面的<strong>读写锁的特性</strong> 可以看做是理论部分，然后这里用几个实际场景进行一下分析：</p><ul><li>线程 A 加写锁成功，线程 B 请求读锁<ul><li>线程 B 阻塞</li></ul></li><li>线程 A 持有读锁，线程 B 请求写锁<ul><li>线程 B 阻塞</li></ul></li><li>线程 A 拥有读锁，线程 B 请求读锁<ul><li>线程 B 加锁成功</li></ul></li><li>线程 A 持有读锁，然后线程 B 请求写锁，然后线程 C 请求读锁<ul><li>B 阻塞，C 阻塞 -写的优先级高</li><li>A 解锁，B 线程加写锁成功，C继续阻塞</li><li>B 解锁，C 加读锁成功</li></ul></li><li>线程A持有写锁，然后线程B请求读锁，然后线程C请求写锁</li></ul><br><h3 id="读写锁的使用场景："><a href="#读写锁的使用场景：" class="headerlink" title="读写锁的使用场景："></a>读写锁的使用场景：</h3><ul><li>互斥锁 - 读写串行</li><li>读写锁：<ul><li>读：并行</li><li>写：串行</li></ul></li><li>程序中的 “读操作” 大于 ”写操作“ 的时候，比如说 12306 买火车票的例子 ，就有大量的率新读取数据，远大于买票的时候写操作。</li></ul><br><h3 id="读写锁的主要操作函数："><a href="#读写锁的主要操作函数：" class="headerlink" title="读写锁的主要操作函数："></a>读写锁的主要操作函数：</h3><p>读写锁的使用流程和互斥量(锁)的流程基本一样。</p><ul><li><p>初始化读写锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_rwlockattr_t <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>销毁读写锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>加读锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>尝试加读锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_tryrdlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>加写锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>尝试加写锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_trywrlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解锁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span>pthread_rwlock_t <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><br><h3 id="写一个运用读写锁的例子："><a href="#写一个运用读写锁的例子：" class="headerlink" title="写一个运用读写锁的例子："></a>写一个运用读写锁的例子：</h3><p>上面例子讲了这么多用法和属性作为铺垫，这里有一代码例子，讲解读写锁的使用例子：</p><ul><li><p><strong>需求练习：</strong> </p><ul><li>3 个线程不定时写同一全局资源，5 个线程不定时读同一全局资源</li></ul></li><li><p><strong>代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> g_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pthread_rwlock_t lock<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writeFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pthread_t p<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pthread_rwlock_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化一个锁</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//创建写线程</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> writeFunc<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//创建读线程</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> readFunc<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//阻塞回收子线程的 pcb</span>        <span class="token function">pthread_join</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">pthread_rwlock_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//销毁读写锁，释放锁资源</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">writeFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_rwlock_wrlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加写锁</span>        g_number<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--write: %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">readFunc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_rwlock_rdlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加读锁</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--read : %lu, %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_rwlock_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解锁</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p><ul><li><p>屏蔽去掉加锁解锁的几行注释，则会出现以下异常情况，小数可能在大数后面再执行打印语句：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200427_215101.png" width="60%"/ loading="lazy"></li><li><p>加上读写锁之后，得到预期正确结果，大数只会出现在小数后面打印</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200427_214901.png" width="60%"/ loading="lazy"></li></ul></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/19_pthread_rwlock_wrlock">19_pthread_rwlock_wrlock</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中使用使用互斥量(锁)Mutex来操持多线程同步执行pthread_mutex_lock()</title>
      <link href="posts/ea6e5a6c/"/>
      <url>posts/ea6e5a6c/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 Linux 中，<strong>使用互斥量（互斥锁🔐） Mutex 来给保证多线程</strong> ，在访问公共变量的时候能够 “串行” 代码。从而使得多线程正确的同步执行。关于多线程创建和使用可以参考<a href="https://blog.csdn.net/qq_33154343/article/details/105546234">前面几篇</a>的文章，争取早日把 Linux 系统篇之 系统编程给发布完系列的教程。</p><p>PS：好几天没有接着学习 Linux 的系统函数和理论知识了。可能是前面几天有点忙了吧；时间流逝啊，总是这么得快，，，，</p><p>关于互斥锁的使用如下：</p><ul><li>pthread_mutex_t *mutex;   //创建一个锁 </li><li>pthread_mutex_init();     //初始化一个互斥锁</li><li>pthread_mutex_lock();     //上锁🔓，或者使用 pthread_mutex_trylock()</li><li>pthread_mutex_unlock();   //解锁🔐</li><li>pthread_mutex_destroy;    //销毁互斥锁</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><ul><li><p><strong>程序：</strong></p><p>先写一个多线程程序，A 和 B 两个子线程一起数出输出到 100000；然后在没有锁🔐的情况下，每一线程轮流执行 10 毫秒，模拟时间片轮转切片。</p></li><li><p><strong>代码程序：</strong></p><p>这个代码还没有加锁，保护共享变量。完整代码如下；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> g_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//在全局区域，共享</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNUMBER</span> <span class="token expression"><span class="token number">100000</span></span></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pthread_t pthreadA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pthread_t pthreadB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建两个子线程</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞，回收资源</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> g_num<span class="token punctuation">;</span>  <span class="token comment">//27-29行，增加寄存器和内存之间的数据交换操作，使得出现内存没来得及保存数据的现象的概率大一点</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>        g_num <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> g_num<span class="token punctuation">;</span>        b<span class="token operator">++</span><span class="token punctuation">;</span>        g_num <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>结果分析：</strong></p><p>下面截图里面，在 MacOS 10.14.6 和 Ubuntu 20.04 里面跑，都是正确的结果；</p><p>[疑惑]可能是因为系统系统内核或者底层作了修改？？？又或者是数数的间隔过小，数的数字不多？ 预判的结果是 实际数数的大小会比实际正确结果要小一点（原因是时间片轮转的原因），待日后挖坟考古？难道是系统比较新？所以连续出现几次都是最正确的结果。。。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200425_161541.png" width="70%"/ loading="lazy"></li></ul><p>  [解答]没有出现内存来不及保存增加的数据，cpu 的时间片就被其他资源占去了，导致最后出现的小数有可能出现在大数的后面打印，这是一个概率问题；而 27-29 行和 42-44 行，是刻意增加寄存器和内存之间的数据交换操作次数，使得出现内存没来得及保存数据的现象的概率大一点。</p><ul><li><p>如果在 Ubuntu 16.04 里面跑改程序，如果出现了最后一个数字比 100000 小一点，那么解释的可能如下：</p><p>其中会发现结果有点混乱。这是两个子线程互相操作同一个数据，时间片切换的时候，还新的数据还没有来得及保存进内存里面，就切换到了下一个线程中去了。</p><ul><li>[实际结果]多数了一位，最后一个结果是100001，且有时候还会下面还会再打印一个小的数字</li><li>[期望结果]只数数到 100000；</li><li>分析图如下：</li></ul></li></ul>   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200425_145954.png" width="60%"/ loading="lazy"><br><h3 id="使用互斥量-锁-Mutex"><a href="#使用互斥量-锁-Mutex" class="headerlink" title="使用互斥量(锁) Mutex:"></a>使用互斥量(锁) Mutex:</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>如果我们想使用互斥锁同步线程，那么所有线程，只要是有访问同一个共享公共变量的线程都要加锁。</strong> </font></p><ul><li><strong>使用流程步骤：</strong></li></ul><ol><li><p><strong>创建一把互斥锁</strong> </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pthread_mutex_t <span class="token operator">*</span>mutex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>对互斥锁进程初始化 init</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_mutexattr_t <span class="token operator">*</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用互斥锁：每个子线程要访问公共变量的时候，都加上锁，使用完后就解锁</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//若果没有上锁，就上锁；若果已经上锁，直接返回，不阻塞</span><span class="token keyword">int</span> <span class="token function">pthread_mutex_trylock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若果没有上锁，就上锁；若果已经上锁，就阻塞该线程</span><span class="token keyword">int</span> <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解锁</span><span class="token keyword">int</span> <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用完毕，销毁互斥锁</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span>pthread_mutex_t <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><br><h3 id="改写例子，使用互斥量-锁-实例："><a href="#改写例子，使用互斥量-锁-实例：" class="headerlink" title="改写例子，使用互斥量(锁)实例："></a>改写例子，使用互斥量(锁)实例：</h3><p>将上面的例子改了改，然后在 A、B 两个子线程里面，使用互斥量(锁)，会发现也会得到取其正确的结果。结果符合预期。</p><ul><li><strong>修改后的加锁例子：</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> g_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//在全局区域，共享</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXNUMBER</span> <span class="token expression"><span class="token number">100000</span></span></span>pthread_mutex_t g_mutex<span class="token punctuation">;</span> <span class="token comment">//创建全局的互斥锁</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">pthread_mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对锁进行初始化</span>    pthread_t pthreadA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pthread_t pthreadB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建两个子线程</span>    <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> funB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadA<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//阻塞，回收资源</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthreadB<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_destroy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//释放互斥锁资源</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funA</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> g_num<span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>        g_num <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">funB</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> g_num <span class="token operator">&lt;</span> MAXNUMBER<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> g_num<span class="token punctuation">;</span>        b<span class="token operator">++</span><span class="token punctuation">;</span>        g_num <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B thread id: %ld,   num = %d\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沉睡 10 毫秒， 模拟时间片轮转，效果更明显</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>运行结果：</strong></p><p>实际结果和预期结果一致。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200425_161541.png" width="60%"/ loading="lazy"></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/18_mutex">18_mutex</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>短时间如何清晰阐述你的需求、观点和目的?</title>
      <link href="posts/ac78579e/"/>
      <url>posts/ac78579e/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　遇到 “茶壶里面煮饺子” 就不是一件开心的事情了；<strong>虽然说，敲代码专心享受的一件快乐的事情，但是与人沟通交流更加重要，经常遇到需要在很短的时间里面，将自己的想法和观点清晰的告诉 她/他 人。</strong> </p><p>今年过年那一周，付费去专门学习了一下基本的沟通交流，有所改善。觉着很是有效，后整理为笔记，与诸君共享。关于 <font color=#FF0000  size=4 face="幼圆"><strong>高效表达 = 定主题 + 搭架子 + 填素材</strong> </font></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200420_234913.png" width="100%"/ loading="lazy"><br><h3 id="1-定主题，明目的，让人秒懂你的想法"><a href="#1-定主题，明目的，让人秒懂你的想法" class="headerlink" title="1.定主题，明目的，让人秒懂你的想法"></a>1.定主题，明目的，让人秒懂你的想法</h3><ul><li><p><strong>首句添加一个工作核心的重点围绕</strong></p></li><li><ol><li>什么是正真的的主题？</li></ol><ul><li>让老板知道我来是干嘛的</li></ul></li><li><ol start="2"><li>如何明确的表达目的?</li></ol><ul><li>将要汇报的对象是谁（站在对方的角度思考，他所关心的是什么？具有针对性）</li><li>谁在听我说话？我想达成的效果是？</li></ul></li></ul><br><h3 id="2-3-种经典框架，快速整理表达思路"><a href="#2-3-种经典框架，快速整理表达思路" class="headerlink" title="2. 3 种经典框架，快速整理表达思路"></a>2. 3 种经典框架，快速整理表达思路</h3><ul><li><ol><li>时间轴结构</li></ol><ul><li>首先-然后-最后（项目的发生顺序）</li><li>压力环境下，思路没有打开的时候使用</li></ul></li><li><ol start="2"><li>解决问题结构</li></ol><ul><li>问题</li><li>原因</li><li><strong>解决方案</strong></li></ul></li><li><ol start="3"><li>FAB 结构 <strong>(属性-优势-利益)</strong></li></ol><ul><li>基本情况 + 过人之处 + 可提供的帮助</li><li>要<strong>清楚听众</strong>是谁</li></ul></li></ul><br><h3 id="3-2-种素材，让你发言更具有说服力"><a href="#3-2-种素材，让你发言更具有说服力" class="headerlink" title="3. 2 种素材，让你发言更具有说服力"></a>3. 2 种素材，让你发言更具有说服力</h3><ul><li><strong>数据</strong> (数据本生没有意义，我才是意义的缔造者)<ul><li>数据要筛选 （对取有利于目的而言）</li><li>数据要解释 （数据换算，有冲击力）</li></ul></li><li><strong>故事</strong><ul><li><strong>冲突</strong></li><li>行动</li><li>结局</li></ul></li></ul><br><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="4-临时汇报，让你的发言更具有说服力？"><a href="#4-临时汇报，让你的发言更具有说服力？" class="headerlink" title="4. 临时汇报，让你的发言更具有说服力？"></a>4. 临时汇报，让你的发言更具有说服力？</h4><ul><li><strong>汇报进度</strong> （也是工作职责之一）<ul><li>得让老板具有掌控感，不能像等外卖一样感到焦虑（关键节点，也可主动出击谈谈，让其看到自己积极的一面）</li></ul></li><li><strong>汇报成果</strong> （高光时刻）<ul><li><strong>使用关键数据和故事（可加图表）</strong></li><li>对无能的细节不感兴趣</li></ul></li><li><strong>汇报困难</strong> （职场非学校，老板不是老师，我也不是被考评的学生）<ul><li><strong>问题 - 原因 - 解决方案选项 - 利弊分析</strong></li><li>千万不要带着问题汇报，正确的方式是带着解决方案去汇报</li></ul></li><li>你得随时关注老板的反应，并且及时调整汇报节奏（不耐烦就赶紧说结论重点）</li><li>关注老板的风格，有利于更高效的沟通 (简单直接。关注结果，细致认真，关注细节）</li><li>汇报是影响老板的机会，而非应付老板的差事</li></ul><br><h4 id="5-回应质疑：遭遇突然提问，怎么回答才能滴水不漏？"><a href="#5-回应质疑：遭遇突然提问，怎么回答才能滴水不漏？" class="headerlink" title="5. 回应质疑：遭遇突然提问，怎么回答才能滴水不漏？"></a>5. 回应质疑：遭遇突然提问，怎么回答才能滴水不漏？</h4><ul><li><strong>认可对方的提问</strong><ul><li><strong>认可提问者</strong> (最常见)</li><li>认可事实</li><li>认可感受</li></ul></li><li><strong>澄清对方的问题</strong> （进一步确认对方的问题）<ul><li>你能重复一遍吗？或者更确定吗？</li><li>能否举个例？具体说明一下问题？</li></ul></li><li>确保对方得到尊重 + 进一步确认问题 + 赢得思考时间，提升回答质量</li></ul><br><h4 id="6、会议发言：跨团队沟通，怎么让对方接受我的方案？"><a href="#6、会议发言：跨团队沟通，怎么让对方接受我的方案？" class="headerlink" title="6、会议发言：跨团队沟通，怎么让对方接受我的方案？"></a>6、会议发言：跨团队沟通，怎么让对方接受我的方案？</h4><ul><li>提前和“刺头”沟通，进行推进，再开会</li><li><strong>原因</strong><ul><li>各部门的优先级不一样</li><li>各方的理解存在偏差</li><li>（填表格在数据部和销售部，重要性不一样，后者业绩和时间更重要）</li></ul></li><li><strong>解决</strong><ul><li>解决问题结构 （换起对方的关注） + 属性优势利益 （需要做出什么）</li><li><strong>「认可」+ 为什么 + 做什么 + 有什么好处 + 马上行动</strong>（容易的部分先让团队进入状态，也称临门一脚）</li><li>原则：谁痛谁负责，谁痛谁解决（他人没有足够的动力）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
          <category> 学习 - 技术之外 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中多线程操作函数pthread_exit()、pthread_jion()、pthread_detach()、pthread_cancel()</title>
      <link href="posts/e20f5ad6/"/>
      <url>posts/e20f5ad6/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　<a href="https://blog.csdn.net/qq_33154343/article/details/105546234">上一篇</a>讲解了多线程的入门的知识，如何创建多线程程序，以及从虚拟地址空间和 PCB 分析线程的一些细节。本章再讲述一些线程操作相关的函数：</p><ul><li>pthread_exit(): 退出一个线程，不会影响其他线程的</li><li>pthread_jion(): <font color=#FF0000  size=4 face="幼圆">阻塞等待线程退出，获取线程退出的状态</font> </li><li>pthread_detach(): 设置线程分离的属性</li><li>pthread_cancel(): 杀死（取消）一个线程</li><li>pthread_equal(): 判断两个线程是否相等，预留函数</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="单个线程退出-pthread-exit"><a href="#单个线程退出-pthread-exit" class="headerlink" title="单个线程退出 pthread_exit():"></a>单个线程退出 pthread_exit():</h3><ul><li><strong>作用：</strong> 一个进程的退出使用 <code>exit(0)</code>； 而退出一个线程，使用 <code>pthread_exit(NULL)</code>；</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>value_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li>value_ptr：必须指向全局，或者堆。是一个传出参数，用来在该线程结束推出的时候，传输一个内容。若是指向局部变量，该线程被销毁了的话，其他线程可能访问不到此块数据块。</li></ul></li></ul><ul><li><p>写一个例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//设置为全局变量，在全局区域，共享</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token comment">//传一个地址进去（voi* 也是 4 个字节）</span>    pthread_t id<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread id: %ld\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// pthread_exit(nullptr);  //终止主线程</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"main thread-----%d------\n"</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"child thread-----%d------\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//退出进程</span>            <span class="token comment">// pthread_exit(nullptr);  //终止主线程</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行结果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419_123512.png" width="60%"/ loading="lazy"></li></ul><br><h3 id="阻塞等待退出线程退出-pthread-jion"><a href="#阻塞等待退出线程退出-pthread-jion" class="headerlink" title="阻塞等待退出线程退出 pthread_jion():"></a>阻塞等待退出线程退出 pthread_jion():</h3><ul><li><p><strong>作用:</strong> </p><p><font color=#FF0000  size=4 face="幼圆">阻塞等待线程退出，获取线程退出的状态</font> </p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthread_t thread<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>value_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li>thread： 要回收的子线程的 id</li><li>value_ptr：读取线程退出时候的携带信息状态；指向的内存和 pthread_exit 的参数是指向同一块内存地址 。在上一个函数 pthread_exit(void *value_ptr) 中，线程退出的时候，传出来了全局变量的指针； 而这里第二个参数，此二级指针就可以读出来这个值。</li></ul></li></ul><ul><li><p><strong>写了一例子：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token comment">//要是一个全局的变量哦，或者是堆的空间</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pthread_t pthread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent thread id: %ld\n"</span><span class="token punctuation">,</span> pthread_self<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token function">pthread_join</span><span class="token punctuation">(</span>pthread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//阻塞等待子线程退出，并且回收 pcb</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"number = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent i = %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child thread id: %ld\n"</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// int number = 1234;   //若是为栈里面的数据，则会组线程里面，会崩溃或者失败</span>            <span class="token function">pthread_exit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此处的地址，必须是指向堆或者全局变量</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419_123654.png" width="60%"/ loading="lazy"></li></ul><br><h3 id="线程分离-pthread-detach"><a href="#线程分离-pthread-detach" class="headerlink" title="线程分离 pthread_detach():"></a>线程分离 pthread_detach():</h3><p>在用 pthread_create 创建子线程的时候，第三个参数，是可以设置为此属性的；正常情况下，是由子线程死亡，是由父线程来释放遗留的资源；但如果设置了此线程分离的属性，那么子线程是在创建的时候，就独立于父线程，其死亡时候资源也是由自己来释放。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_detach</span><span class="token punctuation">(</span>pthread_t thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>调用该函数之后，就不在需要调用 pthread_jion() 了</strong></li></ul><br><h3 id="杀死-取消-线程-pthread-cancel"><a href="#杀死-取消-线程-pthread-cancel" class="headerlink" title="杀死(取消)线程 pthread_cancel():"></a>杀死(取消)线程 pthread_cancel():</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_cancel</span><span class="token punctuation">(</span>pthread_t thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>注意：</strong><ul><li>要杀死子线程对应的处理的函数的内部，必须做一次系统调用。</li><li>系统调用函数有，eg: open,write, printf 等，这次都是最终会调用到系统层及的函数。</li><li>不涉及到系统层级调用，eg： int a = 10;</li></ul></li></ul><br><h3 id="判断线程是否相等-pthread-equal"><a href="#判断线程是否相等-pthread-equal" class="headerlink" title="判断线程是否相等 pthread_equal():"></a>判断线程是否相等 pthread_equal():</h3><p><strong>是一个预留函数</strong> ，通过线程号 判断两个线程是否相等；目前不需要使用该函数。若是以后线程变为返回一个结构体。就可以用此预留函数(修改一下实现)来判断两个线程是否实现了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_equal</span><span class="token punctuation">(</span>pthread_t t1<span class="token punctuation">,</span> pthread_t t2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/17_thread">17_thread</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中创建多线程实例pthread_create()</title>
      <link href="posts/28f8209f/"/>
      <url>posts/28f8209f/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　前面几篇，学习了 Linux 下多进程使用  fork() 分析的其构造和原理；这里进一步，探究一下如何创建多线程，以及多线程和多进程之间的差异。最后写几个实例；验证分析。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h3><p>线程和进程的理论概念不再称述；这里主要是从虚拟地址空间和 PCB 的角度来看，主、子线程。</p><p>Linux 中，系统是不认识线程还是进程的，它们只认识 PCB；</p><p>Unix 和 Linux 的线程在系统的底层实现是不一样的，有区别的，但是它们在应用层是看起来没什么区别；Linux 中一开始没有线程，是 Windows 中先有的，后面被前辈们移植过来的，所以 Linux 中线程的实现，系统底层是由创建进程改了改。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411_215259.png" width="80%"/ loading="lazy"><ul><li><font color=#FF0000  size=4 face="幼圆"><strong>主线程和子线程：</strong></font><ul><li><font color=#FF0000  size=4 face="幼圆"><strong>共享：</strong></font><ul><li>用户区内，除了栈区是不共享的，其余都是不共享的。</li></ul></li><li><font color=#FF0000  size=4 face="幼圆"><strong>不共享：</strong></font><ul><li>栈区（当有 1 主 + 4 子线程时候，栈区会被平分为 5 份）</li></ul></li></ul></li></ul><ul><li><strong>在 Linux 下：</strong><ul><li>线程就是进程 – 轻量级的进程</li><li>对于内核来说，线程就是进程（内核只会用）</li></ul></li></ul><ul><li><strong>多线程和多进程的区别：</strong><ul><li><strong>多进程共享的资源：</strong><ul><li>代码</li><li>文件描述符</li><li>内存映射区 –mmap</li></ul></li><li><strong>多线程共享的资源：</strong><ul><li>堆</li><li>全局变量</li><li>相比多进程，更加节省系统资源；对于系统 CPU 轮转时间片来说，不论是线程还是进程，它不认识，只认 PCB。</li></ul></li></ul></li></ul><br><h3 id="安装线程-man-page："><a href="#安装线程-man-page：" class="headerlink" title="安装线程 man page："></a>安装线程 man page：</h3><ul><li><p>安装线程 man page 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> manpages-posix-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><br><h3 id="查看指定线程的-LWP-号："><a href="#查看指定线程的-LWP-号：" class="headerlink" title="查看指定线程的 LWP 号："></a>查看指定线程的 LWP 号：</h3><ul><li>线程号和线程 ID 是有区别的</li><li>线程号是给内核看的</li><li>查看方式：<ul><li>找到程序的进程 ID</li><li><code>ps -Lf pid</code></li></ul></li></ul><p>一个例子，查看火狐浏览器程序由多线程构成：</p><p>如： Linux 下 查看火狐浏览器，发现其是由多线程构成的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ps ajx <span class="token operator">|</span> grep <span class="token string">"firefox"</span>ps <span class="token operator">-</span>Lf <span class="token number">31102</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="pthread-create-："><a href="#pthread-create-：" class="headerlink" title="pthread_create()："></a>pthread_create()：</h3><ul><li><strong>作用：</strong> 创建子线程</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span>pthread_t <span class="token operator">*</span>thread<span class="token punctuation">,</span> <span class="token keyword">const</span> pthread_attr_t <span class="token operator">*</span>attr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>start_routine<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>主线程退出，子线程一定会被强制结束退出。</p></li><li><p><strong>参数：</strong></p><ul><li><strong>thread：</strong> 传出参数，线程创建成功后，会设置一个合适值，通常比较大。</li><li><strong>attr：</strong> 线程属性，默认使用 NULL</li><li><strong>start_routine：</strong> 子线程的处理函数（也被称为回调函数）</li><li><strong>arg：</strong> 子线程的处理函数的参数</li></ul></li><li><p><strong>返回值：</strong></p><ul><li><p>函数调用成功返回 0，失败返回错误号；但此处的错误号不是之前那个能够用 perror() 打印的错误号，这两个不是一个东西，他们各自使用的库不通用。</p></li><li><p>想要打印错误信息，需要使用标准库函数 strerror()</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_creator</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error: %s\n"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="写一个例子："><a href="#写一个例子：" class="headerlink" title="写一个例子："></a>写一个例子：</h3><h4 id="例子一："><a href="#例子一：" class="headerlink" title="例子一："></a>例子一：</h4><p>使用不带参数的，子线程的处理函数，验证子线程执行的代码，只有该回调函数里面的内容。</p><ul><li><p><strong>代码示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pthread_t pthread <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//创建一个子线程</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pthread<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent thread id: %ld\n"</span><span class="token punctuation">,</span> pthread_self<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//避免主线程运行后，就死亡了，而子线程没机会</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//验证子线程，并不会执行这里面的代码，只会执行回调函数 muyfun 里面的</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child thread id: %ld\n"</span><span class="token punctuation">,</span> pthread_self<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行结果：</strong></p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411_214058.png" width="60%"/ loading="lazy"></li></ul><br><h4 id="例子二："><a href="#例子二：" class="headerlink" title="例子二："></a>例子二：</h4><p>写一个能够创建多个子线程的函数，要使用到其参数。</p><p>注意其是地址传递的话，有这样一种可能，该变量是在主线程的地址空间中，其他几个子线程都是在该线程中读取改值；但是由于他们分别抢占 CPU 时间片，会导致结果可能和预期结果不符；此时可以考虑使用值传递。</p><ul><li><p><strong>代码示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token comment">//设置为全局变量，在全局区域，共享</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>num<span class="token punctuation">;</span>  <span class="token comment">//传一个地址进去（voi* 也是 4 个字节）</span>    pthread_t id<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> myfun<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"i = %d, thread id: %ld\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> id<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">myfun</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d, child thread id: %ld\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>程序分析：</strong></p><p>可以看出，其其创建多个子线程成功了🤓🤓，和预期结果相符。</p></li><li><p><strong>运行结果：</strong></p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200413_220730.png" width="70%"/ loading="lazy"></li><li><p>其它</p><p>如果将全局变量 <code>int num = 13;</code> 放到  main() 里面，当做局部变量的话，就会出现如下结果!!! 有一处小的瑕疵，有点困惑？注意其 mun 的值，有时候会异常，怀疑是多个线程抢占 CPU 的时间片 + 是传递的地址，或者有其他系统或者数据修改过该值？？？所以有时候值得范围是非 13-17；异常变得巨大； 原因还在找，或者你知道的话，可以在下方留言告诉我，学习知识这种事，达者为先，相互指点一下后到“晚辈”。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411_232406.png" width="100%"/ loading="lazy"></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/17_thread">17_thread</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中创建守护进程setsid()</title>
      <link href="posts/2c6bb236/"/>
      <url>posts/2c6bb236/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　前面几篇，刚写过了父子进程的实例。这里写一个<strong>守护进程</strong> 的例子，从了解到运用 <code>setsid()</code> ；守护进程也就是脱离于终端，不需要和用户交流的，不受注销影响的后台程序（可理解为 win 中的<strong>服务</strong> ）。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="守护进程的特点："><a href="#守护进程的特点：" class="headerlink" title="守护进程的特点："></a>守护进程的特点：</h3><ul><li>后台服务程序</li><li>独立（是脱离于）控制终端的，用户不需要和终端交互</li><li>周期性的执行某任务</li><li>不受用户登录注销的影响</li><li>一般采用 d 结尾的名字（服务）</li></ul><br><h3 id="进程组-多个进程："><a href="#进程组-多个进程：" class="headerlink" title="进程组 - 多个进程："></a>进程组 - 多个进程：</h3><ul><li><font color=#FF0000  size=4 face="幼圆">进程组的组长？</font><ul><li><font color=#FF0000  size=4 face="幼圆">组长是是组里的第一个进程</font></li><li><font color=#FF0000  size=4 face="幼圆">进程组的 ID == 进程组的组长的 ID</font></li></ul></li></ul><br><h3 id="会话-多个进程组："><a href="#会话-多个进程组：" class="headerlink" title="会话 - 多个进程组："></a>会话 - 多个进程组：</h3><p>进程组是由多个进程组成，而会话是由多个进程组组成成。</p><ul><li><strong>创建一个会话注意的事项：</strong><ul><li><font color=#FF0000  size=4 face="幼圆"><strong>不能是组长进程</strong></font></li><li>创建会话的进程成为新进程组的组长</li><li>有些 Linux 版本需要 root 权限执行此操作（Ubuntu 不需要）</li><li><font color=#FF0000  size=4 face="幼圆"><strong>创建出的新会话会丢弃原有的控制终端</strong></font></li><li>一般步骤：先 fork()，父亲死，儿子创建绘画操作(setsid())</li></ul></li><li><strong>获取进程所属的会话 ID：</strong><ul><li><code>pid_t getsid(pid_t pid);</code></li></ul></li><li><strong>创建一个会话：</strong><ul><li><code>pid_t setsid(void);</code></li></ul></li></ul><br><h3 id="创建守护进程模型："><a href="#创建守护进程模型：" class="headerlink" title="创建守护进程模型："></a>创建守护进程模型：</h3><p>下面列出创建一个标准的进程守护模型操作流程：</p><ol><li><strong>fork() 进程，父进程退出 (必须)</strong></li><li><strong>子进程创建新的会话 (必须)</strong><ul><li>使用 <code>setsid()</code></li></ul></li><li><strong>改变当前工作目录 chdir (可选)</strong><ul><li>比如，U 盘插在笔记本，运行 U 盘文件夹里面的可执行程序，然后拔掉，会有一些影响</li></ul></li><li><strong>重设文件掩码 (可选)</strong><ul><li>子进程会继承父进程的掩码</li><li>增加子进程程序操作的灵活性</li><li>umask(0)</li></ul></li><li><strong>关闭文件描述符 (可选)</strong><ul><li>节约资源，关闭此进程的 PCB 的文件描述符表中 0、1、2 三个，因为预警不需要和终端交互，故可关闭</li></ul></li><li><strong>执行核心工作 (必须)</strong><ul><li>你想让该守护进程干的事情</li></ul></li></ol><br><h3 id="写一个例子："><a href="#写一个例子：" class="headerlink" title="写一个例子："></a>写一个例子：</h3><p>对上面的函数使用，写一个例子：写一个守护进程，每隔 2s 获取一次系统时间，写入到文本文件中。</p><ul><li><p><strong>代码示例</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用作回调函数，给 signal() 调用</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父进程退出</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//子进程创建为会话</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/Users/muli/Desktop/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//改变进程的工作目录</span>        <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重设置文件掩码</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//关闭和终端的联系，文件描述符</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDERR_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>        __sigaction_u sigactu<span class="token punctuation">;</span>  <span class="token comment">//设置信号捕捉</span>        sigactu<span class="token punctuation">.</span>__sa_handler <span class="token operator">=</span> func<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>        act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        act<span class="token punctuation">.</span>__sigaction_u <span class="token operator">=</span> sigactu<span class="token punctuation">;</span>        <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>        itimerval time<span class="token punctuation">;</span>  <span class="token comment">//设置周期性的定时器</span>        time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span>it_interval<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGVTALRM<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//捕捉（下面一行发射的）信号，在 fun() 里面实现</span>        <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_VIRTUAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>time<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用定时器，发射信号</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保持该守护进程不死亡</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    time_t currtime<span class="token punctuation">;</span>  <span class="token comment">//获取系统当前时间，传出参数</span>    <span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>currtime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">ctime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>currtime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/Users/muli/Desktop/setsid.txt"</span><span class="token punctuation">,</span> O_CREAT <span class="token operator">|</span> O_WRONLY <span class="token operator">|</span> O_APPEND<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//写入磁盘文件</span>    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>代码分析：</strong></p><p>这里 <code>sigaction(SIGVTALRM, &amp;act, NULL);</code> 和代码 <code>setitimer(ITIMER_VIRTUAL, &amp;time, NULL);</code> 这一行，成为互相对应的关系。</p><p>，使用了周期定时器 setitimer，第一个参数填了三个枚举之一，但是对应的 sigaction 信号捕捉中，就要填写对应的参数（见 man 手册）；<strong>注意，要先有捕捉函数，后实现信号发射函数，避免出现信号已经发射了，但是捕捉函数还没有实现或执行。</strong> </p></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200411175755.gif" width="90%"/ loading="lazy"></li></ul><br><h3 id="文件掩码是什么？"><a href="#文件掩码是什么？" class="headerlink" title="文件掩码是什么？"></a>文件掩码是什么？</h3><ul><li>linux中的 umask 函数主要用于：在创建新文件或目录时 屏蔽掉新文件或目录不应有的访问允许权限。</li><li>文件的访问允许权限共有9种，分别是：rwxrwxrwx</li><li>它们分别代表：用户读 用户写 用户执行　组读 组写　组执行　其它读 其它写 其它执行</li><li>更多是使用 umask 命令或者 umask() 函数老表示，比如： 777；</li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/16_daemon">16_daemon</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中未决信号集和阻塞信号集的状态关系sigaddset，以及捕捉信号函数signal、sigaction</title>
      <link href="posts/1a716682/"/>
      <url>posts/1a716682/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在<a href="https://blog.csdn.net/qq_33154343/article/details/105357886">上一篇</a>中，讲解了 Linux 的系统中基本信号概念入门。这里就说一下两个重要的概念，系统内核里面的 <strong>未决信号集</strong> 和 <strong>阻塞信号集</strong> 的状态关系，以及处于用户区域的 <strong>自定义的信号集</strong> ，如何处理这三者之间的关系。和 Linux 中的<strong>信号捕捉</strong> ，以及捕捉函数相关函数相关的使用。</p><ul><li><strong>自定义信号集：</strong><ul><li>sigaddset()    //将指定信号置为 1，添加到自定义集中 </li><li>sigdelset()    //将指定信号置为 0，添加到自定义集中 </li><li>sigemptyset()  //将所有信号置为 0，清空</li><li>sigfillset()   //将所有信号置为 1，填充</li><li>sigismember()  //判断指定信号是否存在，是否为 1</li></ul></li><li><strong>系统信号集：</strong><ul><li>sigprocmask()   //将自定义信号集设置给阻塞信号集。</li><li>sigprocmask()   //读取当前信号的未决信号集。参数为输出参数，内核将未决信号集写入 set</li></ul></li><li><strong>信号捕捉：</strong><ul><li>signal()        //实现信号捕捉的功能；最简单使用一个函数。</li><li>sigaction()     //同上，多一个额外功能，运行期间能够<strong>临时</strong> 屏蔽指定信号</li></ul></li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="未决信号集："><a href="#未决信号集：" class="headerlink" title="未决信号集："></a>未决信号集：</h3><ul><li><strong>概念：</strong> 没有被当前进程处理的信号</li></ul><h3 id="阻塞信号集："><a href="#阻塞信号集：" class="headerlink" title="阻塞信号集："></a>阻塞信号集：</h3><ul><li><strong>概念：</strong> 将某个信号放到阻塞信号集中，这个信号就不会被进程处理；当阻塞解除后，信号就会被处理。</li></ul><p>绘画一个草图理解一下这几则之间的关系，当一个程序跑起来之后，会生成一个进程，有自己虚拟地址控件，然后在内核区域的 PCB 中，有着未决信号集合阻塞信号集两个，被系统内核所控制，包括其和自定义信号集的类型都是一样的。左侧的数值是系统信号 1-64(或更多)对应的，然后格子里面的是该 n 号信号对应的值，值为 0 或 1；当发送一个 2 号信号在未决信号集里面时候，系统就会去阻塞信号集里面照片 2 号信号的值，若是为 1，表示阻塞，不作处理，让其一直待在未决信号集中；若是为 0，则将 2 号信号在未决信号集中的值修改为 1，且对出对应的处理。</p><p>若是要修改阻塞信号集合里面的值，只能够先赋值号自顶一个信号集，然后再讲自定义的这个值设置到系统的阻塞信号中。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200407_233036.png" width="80%"/ loading="lazy"><br><h3 id="自定义信号集："><a href="#自定义信号集：" class="headerlink" title="自定义信号集："></a>自定义信号集：</h3><p>查看 man 文档，里面常见的 自定义信号集 的接口函数为如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigaddset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将指定信号置为 1，添加到自定义集中 </span><span class="token keyword">int</span> <span class="token function">sigdelset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//将指定信号置为 0，添加到自定义集中 </span><span class="token keyword">int</span> <span class="token function">sigemptyset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//将所有信号置为 0，清空</span><span class="token keyword">int</span> <span class="token function">sigfillset</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//将所有信号置为 1，填充</span><span class="token keyword">int</span> <span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token keyword">const</span> sigset_t <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断指定信号是否存在，是否为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="sigprocmask-函数："><a href="#sigprocmask-函数：" class="headerlink" title="sigprocmask() 函数："></a>sigprocmask() 函数：</h3><ul><li><strong>作用：</strong>  将自定义信号集设置给阻塞信号集。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigprocmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token keyword">const</span> sigset_t <span class="token operator">*</span>restrict set<span class="token punctuation">,</span> sigset_t <span class="token operator">*</span>restrict oset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li><strong>how：</strong> 假设当前屏蔽的信号屏蔽字符为 mask；<ul><li><code>SIG_BLOCK</code>: 相当于 <strong>mask = mask | set</strong>  (set 为需要屏蔽的信号集)</li><li><code>SIG_UNBLOCK</code>： 相当于 <strong>mask = mask &amp; ~set</strong>  (set 为需要解除屏蔽的信号集)</li><li><code>SIG_SETMASK</code>： 相当于 <strong>mask = set</strong>  (set 为用于替代原始屏蔽集的新屏蔽集)</li></ul></li></ul></li></ul><br><h3 id="sigpending-函数："><a href="#sigpending-函数：" class="headerlink" title="sigpending() 函数："></a>sigpending() 函数：</h3><ul><li><strong>作用：</strong>  读取当前信号的未决信号集。参数为输出参数，内核将未决信号集写入 set</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigpending</span><span class="token punctuation">(</span>sigset_t <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="写一个小的例子："><a href="#写一个小的例子：" class="headerlink" title="写一个小的例子："></a>写一个小的例子：</h3><p>编写一个小的例子来使用一下，设置阻塞信号集，并把所有常规的信号的未决状态打印到终端。</p><ul><li><p><strong>代码实现：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sigset_t pendest<span class="token punctuation">;</span>        <span class="token function">sigpending</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//每隔一秒，对系统信号阻塞集的信号做一次校验</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sigismember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pendest<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p><p> 这里的 1-64 号信号，在系统的阻塞信号集中，都是 0，说明该进程没有设置信号阻塞。</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200408175735.gif" width="70%"/ loading="lazy"></li></ul><br><h3 id="信号捕捉："><a href="#信号捕捉：" class="headerlink" title="信号捕捉："></a>信号捕捉：</h3><p>在 Linux 中， 系统会释放信号，然后内核又会根据这个信号对对应的进程做相应的动作。然后对于信号捕捉常用有如下函数的使用。</p><p>其中分为简单的 <code>signal()</code> 函数，和 <code>sigaction()</code> 函数，这两个都能够捕捉指定的信号，也比较常使用</p><h4 id="signal-函数："><a href="#signal-函数：" class="headerlink" title="signal() 函数："></a>signal() 函数：</h4><p>实现信号捕捉的功能；最简单一个函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>sig_t<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sig_t <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> sig_t func<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>这个函数比较特别，当然，也可以简写为 <code> void (* signal(int sig, void (*func)(int));)(int);</code> 这种复杂形式的。<ul><li>第一行是一个函数指针，作为后面的函数的回调函数使用。</li><li>第二行是真正的信号捕捉函数调用</li></ul></li></ul><ul><li><p><strong>代码例子：</strong></p><p>写一个例子，捕捉信号 <code>SIGINT</code> 函数，键盘按下 <code>ctrl + c</code> 会发射此信号，然后保证此进程没有终止或者死亡的情况下，捕捉这个函数，做出自定义的行为，具体的在 func() 函数里面实现。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用作回调函数，给 signal() 调用</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置信号捕捉函数， 捕捉 ctrl + c</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Keep the thread running for the non-death state.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"捕捉的信号为: %d\n"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200408175755.gif" width="80%"/ loading="lazy"></li></ul><br><h4 id="Unix-中的-sigaction-函数："><a href="#Unix-中的-sigaction-函数：" class="headerlink" title="Unix 中的 sigaction() 函数："></a>Unix 中的 sigaction() 函数：</h4><p>捕捉信号的函数，比上面使用略微复杂点，但是有一个额外的功能，<strong>可以在程序运行期间，临时屏蔽指定的信号。</strong> </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>restrict act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>restrict oact<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* union for signal handlers */</span><span class="token keyword">union</span> __sigaction_u <span class="token punctuation">&#123;</span><span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>__sa_handler<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>__sa_sigaction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">__siginfo</span> <span class="token operator">*</span><span class="token punctuation">,</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* Signal vector template for Kernel user boundary */</span><span class="token keyword">struct</span>  <span class="token class-name">__sigaction</span> <span class="token punctuation">&#123;</span><span class="token keyword">union</span> __sigaction_u __sigaction_u<span class="token punctuation">;</span>  <span class="token comment">/* signal handler */</span><span class="token keyword">void</span>    <span class="token punctuation">(</span><span class="token operator">*</span>sa_tramp<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> siginfo_t <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//已被废弃的参数，不填</span>sigset_t sa_mask<span class="token punctuation">;</span>               <span class="token comment">/* signal mask to apply */</span><span class="token keyword">int</span>     sa_flags<span class="token punctuation">;</span>               <span class="token comment">/* see signal options below */</span> <span class="token comment">//在信号处理函数执行中，是 "临时" 屏蔽指定信号</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* if SA_SIGINFO is set, sa_sigaction is to be used instead of sa_handler. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">sa_handler</span>      <span class="token expression">__sigaction_u<span class="token punctuation">.</span>__sa_handler</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">sa_sigaction</span>    <span class="token expression">__sigaction_u<span class="token punctuation">.</span>__sa_sigaction</span></span><span class="token comment">//--------------------------------------------------------------------</span><span class="token comment">//__sigaction() 函数也可以 改为使用 sigaction() 函数</span><span class="token comment">/* * Signal vector "template" used in sigaction call. */</span><span class="token keyword">struct</span>  <span class="token class-name">sigaction</span> <span class="token punctuation">&#123;</span><span class="token keyword">union</span> __sigaction_u __sigaction_u<span class="token punctuation">;</span>  <span class="token comment">/* signal handler */</span>sigset_t sa_mask<span class="token punctuation">;</span>               <span class="token comment">/* signal mask to apply */</span><span class="token keyword">int</span>     sa_flags<span class="token punctuation">;</span>               <span class="token comment">/* see signal options below */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li>sig： 捕捉的信号</li><li>act： 新的，将要执行的自定义动作的设定操作</li><li>oact： 被设置之前的旧的设定的操作吗，一般不需要，传入 NULL</li></ul></li></ul><p>restrict是c99标准引入的，它只可以用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式.即它告诉编译器，所有修改该指针所指向内存中内容的操作都必须通过该指针来修改,而不能通过其它途径(其它变量或指针)来修改;这样做的好处是,能帮助编译器进行更好的优化代码,生成更有效率的汇编代码.如 int *restrict ptr, ptr 指向的内存单元只能被 ptr 访问到，任何同样指向这个内存单元的其他指针都是未定义的，直白点就是无效指针(野指针)。这个关键字只能在C99标准的C程序里使用，C++程序不支持，restrict的起源最早可以追溯到Fortran。</p><ul><li><p><strong>写一个例子：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//用作回调函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    __sigaction_u sigactu<span class="token punctuation">;</span>    sigactu<span class="token punctuation">.</span>__sa_handler <span class="token operator">=</span> func<span class="token punctuation">;</span> <span class="token comment">//另一个变量 sigactu.__sa_sigaction 不用赋值</span>    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">;</span>    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//通常给 0</span>    act<span class="token punctuation">.</span>__sigaction_u <span class="token operator">=</span> sigactu<span class="token punctuation">;</span>    <span class="token function">sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//清空 自定义信号集</span>    <span class="token function">sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> SIGQUIT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//向指定 系统阻塞集 中写入 自定义的信号集，添加需要屏蔽的信号(ctrl + 反斜杠 触发)</span>    <span class="token function">sigaction</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Keep the thread running for the non-death state.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"捕捉的信号为: %d\n"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"醒了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>分析运行：</strong></p><p>这里故意运行两次：</p><p><font color=#D0087E size=4 face="幼圆"><strong>第一次：</strong></font>  先按下 <code>ctrl + c</code> 发射 2 号信号 <code>SIGINT</code>， 等待其收到信号后，<strong>执行 3s 后</strong> ，将 func() 内容跑完，<strong>再次按下</strong>  <code>ctrl + \</code> 发射其他信号 <code>SIGINT</code>，系统收到后，<font color=#FF0000  size=4 face="幼圆">程序立即死亡（此时该 <code>SIGINT</code> 已经过了临死屏蔽的状态）</font></p><p><font color=#D0087E size=4 face="幼圆"><strong>第二次：</strong></font>  先按下 <code>ctrl + c</code> 发射 2 号信号 <code>SIGINT</code>， 等待其收到信号后，<strong>执行不到 3s</strong>  ，func() 内容还没跑完，<strong>立即按下</strong>  <code>ctrl + \</code> 发射其他信号 <code>SIGINT</code>，系统收到后，<font color=#FF0000  size=4 face="幼圆">程序没有立即死亡（此时该 <code>SIGINT</code> 正处于临死屏蔽的状态）， 而是过了几秒钟在死亡。</font></p></li><li><p><strong>运行效果:</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200410_224339.png" width="60%"/ loading="lazy"></li></ul><br><h4 id="Linux-中的-sigaction-函数："><a href="#Linux-中的-sigaction-函数：" class="headerlink" title="Linux 中的 sigaction() 函数："></a>Linux 中的 sigaction() 函数：</h4><p>Linux 中的该函数，和 Unix 有点不一致，<strong>但主要填写的四个参数是一样的，这是不变的；</strong> </p><p>这里贴出 Linux 下的函数原型，可以和 Unix 下的 <code>sigaction()</code> 比较一下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200410_221353.png" width="70%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200410_221434.png" width="70%"/ loading="lazy"><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p> <a href="https://github.com/xmuli/linuxExample/tree/master/15_sys_usr_signal">15_sys_usr_signal</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中系统信号初识，和函数kill，raise，abort，alarm，setitimer</title>
      <link href="posts/cef3b890/"/>
      <url>posts/cef3b890/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　此处指 Linux 中系统内核发出的信号；而不是之前 Qt 学习的信号。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="信号初识："><a href="#信号初识：" class="headerlink" title="信号初识："></a>信号初识：</h3><ul><li><p><strong>特点：</strong></p><ul><li>简单</li><li>携带信息量很少</li><li>用在某个特定的场景中</li></ul></li><li><p><strong>型号的状态：</strong></p><ul><li><strong>产生原因：</strong><ol><li>键盘 Ctrl + C</li><li>命令：kill</li><li>系统函数：kill()</li><li>软条件：定时器</li><li>硬件：段错误，除 0 错误</li></ol></li><li><strong>未决状态</strong>  – 没有被处理</li><li><strong>递达状态</strong>  – 信号被处理了</li></ul></li><li><p><strong>处理方式：</strong></p><ul><li>忽略</li><li>捕捉，然后自定义动作</li><li>执行了默认动作</li></ul></li><li><p><strong>信号的四要素：</strong></p><ul><li><p>信号名、信号编号、信号默认动作、事件描述</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_210927.png" width="100%"/ loading="lazy"></li><li><p>“动作(Action)”栏 的 字母 有 下列 含义:</p><table><thead><tr><th>A</th><th>缺省动作是结束进程.</th></tr></thead><tbody><tr><td>B</td><td>缺省动作是忽略这个信号.</td></tr><tr><td>C</td><td>缺省动作是结束进程, 并且核心转储.</td></tr><tr><td>D</td><td>缺省动作是停止进程.</td></tr><tr><td>E</td><td>信号不能被捕获.</td></tr><tr><td>F</td><td>信号不能被忽略.</td></tr></tbody></table><p>译注: 这里 “结束” 指 进程 终止 并 释放资源, “停止” 指 进程 停止 运行, 但是 资源 没有 释放，有可能 继续 运行。</p></li></ul></li><li><p><strong>通过 man 文档查看信号</strong></p><ul><li>执行 <code>man 7 signal</code></li><li><font color=#FF0000  size=4 face="幼圆">注意(man 手册中有写)：<code>SIGKILL</code>、<code>SIGSTOP</code> 这两个信号不能够被捕捉，阻塞，忽略的</font></li></ul><blockquote><p> The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored.</p></blockquote></li><li><p><strong>概念：阻塞信号集，未决信号集</strong></p><ul><li>是在 PCB 中</li><li>阻塞信号集：让信号处于一个未决的状态</li><li>未决信号集：如果信号被阻塞了，该信号集会对阻塞的信号做记录</li></ul></li><li><p><strong>图解进程产生和处理：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_212602.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_212734.png" width="70%"/ loading="lazy"></li></ul><br><h3 id="kill-函数："><a href="#kill-函数：" class="headerlink" title="kill() 函数："></a>kill() 函数：</h3><p><strong>作用：</strong> 发射信号给指定进程、或者同组的信号。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">kill</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">,</span> <span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>参数：</strong></p><ul><li>pid：<ul><li>pid &gt; 0； 发送信号给指定的进程</li><li>pid = 0； 发送信号给 调用 kill 函数进程属于同一个组的所有进程</li><li>pid = -1；如果用户拥有超级用户权限，则信号将被发送到所有进程</li><li>pid &lt; -1；取 |pid| 发给对应进程组</li></ul></li><li>sig：<ul><li>推荐使用完整的宏名称而非数字，在少数发行版下，可能指定宏对应的数值有变化</li></ul></li></ul></li><li><p><strong>返回值：</strong></p><ul><li>成功： 0</li><li>失败：-1（ID 非法，信号非法，普通信号杀 init进程等权限级别问题，设置 errno）</li></ul></li></ul><p>写一个小的例子验证 kill 信号的使用，子进程在 5S 后，通知系统内核发送 SIGKILL 给它的父进程，然后系统将父进程杀死。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">kill</span><span class="token punctuation">(</span><span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SIGKILL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_163402.png" width="60%"/ loading="lazy"><br><h3 id="raise-函数："><a href="#raise-函数：" class="headerlink" title="raise() 函数："></a>raise() 函数：</h3><p><strong>作用：</strong> 自己给自己发射信号。在单线程程序中，它相当于 kill(getpid(), sig)；</p><p>在一个多线程程序中，它等同于 pthread_kill(pthread_self(), sig)。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">raise</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比较简单，但依旧写一个例子使用一下：子进程给机子发射终止进程的信号。然后父进程在回收子进程的时候，答应其死亡的信号值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> s<span class="token punctuation">;</span>        pid_t wpid <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process dide pid = %d\n"</span><span class="token punctuation">,</span> wpid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"dide by signal: %d\n"</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">raise</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给自己发射信号</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中 19 行，选中的 <code>SIGINT</code> 信号，默认动作是终止进程。其对应的事件为 当用户按下&lt;ctrl + c&gt;组合键时候，<strong>用户终端向正在运行中的</strong> （由该终端启动的）<strong>程序 发出此信号。</strong> </p><p>运行截图：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_171152.png" width="70%"/ loading="lazy"><br><h3 id="abort-函数："><a href="#abort-函数：" class="headerlink" title="abort() 函数："></a>abort() 函数：</h3><p><strong>作用：</strong> 给自己发送异常终止的信号。该函数没有参数和返回值，也永远不会调用失败。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="定时器："><a href="#定时器：" class="headerlink" title="定时器："></a>定时器：</h3><h4 id="alarm-函数："><a href="#alarm-函数：" class="headerlink" title="alarm() 函数："></a>alarm() 函数：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置定时器（每一个进程只有一个定时器）</li><li>使用的是自然定时法则；不受进程状态的影响</li><li>当时间到达之后，函数发出一个信号 <code>SIGALRM</code><ul><li>SIGALRM – 调用 abort() 函数时候产生该信号 – 终止进程并产生 core 文件</li></ul></li><li>返回值：始终是返回上一次调用此函数，还剩些的时间。</li></ul><ul><li><p><strong>写一个例子：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重新设定定时器，返回值是返回之前闹钟的剩余的时间</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-------test-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>分析：</strong></p><p>这里 ret = 0 ，是因为第一次调用，它的上一次的剩余时间为 0；然后 ret = 3 是因为 5 - 2 s，然后定时器被充重置了新的 10 s。故后面会打印 10 次输出语句，然后收到系统的终止信号，杀死本进程。因为是执行的 <code>alarm()</code> 的默认动作，为终止进程，且没有捕捉该函数发射的对应的信号，也没有定义自定义动作，所以本进程会被终止。</p></li><li><p><strong>运行结果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_173535.png" width="50%"/ loading="lazy"></li></ul><h4 id="分析程序运行的损耗："><a href="#分析程序运行的损耗：" class="headerlink" title="分析程序运行的损耗："></a>分析程序运行的损耗：</h4><p><font color=#FF0000  size=5 face="幼圆">实际耗时 ==  用户 +  系统 + 损耗 </font></p><ul><li><p>写一个例子，检测一下计算机在 1s 内可以计算多少个数字？</p></li><li><p><strong>代码如下:</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行演示：</strong></p><p>分析：其中损耗文件来自文件 IO 操作</p><p><strong>输出到终端：</strong> 1.012 = 0.31 + 0.34 + 损耗 （约  70w）</p><p><strong>输出到文件：</strong> 1.012 = 0.93 + 0.07 + 损耗 （约 800w）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//执行 time ./myAlarmCount（输出到终端）</span><span class="token number">0.31</span>s user <span class="token number">0.34</span>s system <span class="token number">64</span><span class="token operator">%</span>   cpu <span class="token number">1.012</span> <span class="token function">total</span>  <span class="token punctuation">(</span>输出到 <span class="token number">692977</span><span class="token punctuation">)</span>  <span class="token comment">//time ./myAlarmCount > file（输出到文本）</span><span class="token number">0.93</span>s user <span class="token number">0.07</span>s system <span class="token number">98</span><span class="token operator">%</span>   cpu <span class="token number">1.012</span> <span class="token function">total</span>  <span class="token punctuation">(</span>输出到 <span class="token number">8686215</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><h4 id="setitimer-函数："><a href="#setitimer-函数：" class="headerlink" title="setitimer() 函数："></a>setitimer() 函数：</h4><ul><li><strong>作用：</strong> 定时器，并且实现<strong>周期性</strong> 定时。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">setitimer</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token operator">*</span>new_value<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token operator">*</span>old_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">itimerval</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">struct</span> <span class="token class-name">timeval</span> it_interval<span class="token punctuation">;</span> <span class="token comment">/* 定时器的循环周期 */</span>  <span class="token keyword">struct</span> <span class="token class-name">timeval</span> it_value<span class="token punctuation">;</span>    <span class="token comment">/* 第一次触发定时器的时间 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token punctuation">&#123;</span>  time_t      tv_sec<span class="token punctuation">;</span>         <span class="token comment">/* 秒 */</span>  suseconds_t tv_usec<span class="token punctuation">;</span>        <span class="token comment">/* 微秒 */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li>which：<ul><li>ITIMER_REAL：   自然定时法，会发出信号 <code>SIGALRM</code></li><li>ITIMER_VIRTUAL：虚拟定时法，只会计算 <strong>用户时间</strong> ，对应信号 <code>SIGVTALRM</code></li><li>ITIMER_PROF：   只计算 <strong>用户时间 + 系统时间</strong> ，对应发射 <code>ITIMER_VIRTUAL</code> 信号 </li></ul></li><li>new_value：我们需要设置的参数，总的定时时间是 <code>tv_sec + tv_usec</code> 之和</li><li>old_value：传出参数，传出上一次定时器的设置，一般用不到，用 NULL</li></ul></li></ul><ul><li><p>写一个例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    itimerval time<span class="token punctuation">;</span>    <span class="token comment">// time.it_interval = 3;  //每隔 3s 一次循环定时</span>    <span class="token comment">//第一次触发定时器的时间为 5s + 3ms</span>    time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_sec <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">//5s </span>    time<span class="token punctuation">.</span>it_value<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">//3 ms</span>    <span class="token function">setitimer</span><span class="token punctuation">(</span>ITIMER_REAL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>time<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----printf()-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200406_215441.png" width="60%"/ loading="lazy"></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/14_signal">14_signal</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重装windows后必安装软件(个人习惯)</title>
      <link href="posts/9f8cae55/"/>
      <url>posts/9f8cae55/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　每次都要不久后就要重装一次 win10 系统，里面有一些软件都是要重新配置的。这里做一个重装系统后的软件分享，更多的是个人一个使用习惯的记载。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h4 id="火绒拦截广告弹窗："><a href="#火绒拦截广告弹窗：" class="headerlink" title="火绒拦截广告弹窗："></a>火绒拦截广告弹窗：</h4><ul><li><a href="https://www.huorong.cn/">火绒管家</a> ： 推荐下载 <code>个人用户版本(完整版)</code>，内置的 <strong>弹窗拦截、启动项管理、浏览器保护</strong>  ，可以拦截 99% 的流氓软件的广告，自定义设置软件启动，系统防护-浏览器保护可以固定主页和搜索引擎不被修改。</li></ul><br><h4 id="V2ray客户端官网："><a href="#V2ray客户端官网：" class="headerlink" title="V2ray客户端官网："></a>V2ray客户端官网：</h4><ul><li><a href="https://github.com/2dust/v2rayN/releases">V2rayN </a> ： 中文免安装，使用 VPN 代理上网。 [<a href="https://github.com/2dust/v2rayN/releases">官网其他工具集合</a>]</li></ul><br><h4 id="截图-amp-录屏"><a href="#截图-amp-录屏" class="headerlink" title="截图 &amp; 录屏:"></a>截图 &amp; 录屏:</h4><ul><li><a href="https://www.faststone.org/download.htm">FastStone  Capture</a> : 中文免安装，3.3 M，设置快捷键后开机自启，很方便的截屏，录屏小工具</li><li><a href="https://www.faststone.org/download.htm">FastStone Photo Resizer</a>： 中文免安装，同一家产品，1.7 M，批量重命名文件、文件夹</li></ul><br><h4 id="自动清理内存："><a href="#自动清理内存：" class="headerlink" title="自动清理内存："></a>自动清理内存：</h4><ul><li><a href="https://github.com/henrypp/memreduct/releases">mem reduct</a> ：中文免安装， 322KB，目前见过最屌的清理内存软件，<strong>任务栏显示内存使用率</strong> ，双击 / 设定时间 / 超过阈值都可<strong>清理内存</strong>   <a href="https://www.henrypp.org/product/memreduct">官网介绍</a></li></ul><br><h4 id="实时显示网速，CPU，内存："><a href="#实时显示网速，CPU，内存：" class="headerlink" title="实时显示网速，CPU，内存："></a>实时显示网速，CPU，内存：</h4><ul><li><a href="https://github.com/zhongyang219/TrafficMonitor/releases">TrafficMonitor</a> ： 中文免安装，1.29M，任务栏实时显示和统计网速、CPU、内存使用率，网速单位可以自定义</li></ul><br><h4 id="设置任务栏磨砂-透明："><a href="#设置任务栏磨砂-透明：" class="headerlink" title="设置任务栏磨砂 | 透明："></a>设置任务栏磨砂 | 透明：</h4><ul><li><a href="https://github.com/TranslucentTB/TranslucentTB/releases">TranslucentTB</a> ： 中文免安装，2.35M，设置任务栏变得透明或者磨砂效果</li></ul><br><h4 id="照片查看："><a href="#照片查看：" class="headerlink" title="照片查看："></a>照片查看：</h4><ul><li><a href="https://www.google.com/intl/zh-CN/picasa/">picasa</a> ： google 出品，已经停止更新，但查看图片的效果很棒，背景透明朦胧；唯一缺点，不能查看 gif，搭配 win 自带照片使用。 <a href="https://picasa.softonic.cn/">下载地址</a></li></ul><br><h4 id="gif-录制-amp-加水印："><a href="#gif-录制-amp-加水印：" class="headerlink" title="gif 录制 &amp; 加水印："></a>gif 录制 &amp; 加水印：</h4><ul><li><a href="https://www.screentogif.com/?l=zh_cn">ScreenToGif</a> ： 中文免安装，2.38M，录制出的 gif 很小和清晰，容易使用，设置录制帧数，添加水印</li></ul><br><h4 id="视频播放："><a href="#视频播放：" class="headerlink" title="视频播放："></a>视频播放：</h4><ul><li><a href="https://potplayer.daum.net/">potplayer</a> ： 简约单纯的视屏播放器，安装后连解码器一起安装会更好；可以自己修改皮肤，自定义很多种。</li></ul><br><h4 id="浏览器："><a href="#浏览器：" class="headerlink" title="浏览器："></a>浏览器：</h4><ul><li><p><a href="https://www.google.com/chrome/">Chrome</a> ： 谷歌浏览器，鼎鼎大名，推荐配合一些插件使用，尤其 Aduurad 拦截广告</p><ul><li><strong>离线下载安装包：</strong><ul><li> <code>https://www.google.com/chrome/?system=true&amp;standalone=1</code> ； 如果需要指定下载的版本就再加上「**&amp;extra=[版本名称]<strong>」（版本有</strong>stablechannel<strong>、</strong>betachannel<strong>、</strong>devchannel<strong>、</strong>canarychannel**）。插件下载需要 google。</li></ul></li><li><strong>国内同步镜像：</strong><ul><li><a href="https://www.iplaysoft.com/tools/chrome/">Google Chrome 每日镜像更新</a></li></ul></li></ul></li><li><p><a href="https://www.mozilla.org/zh-CN/firefox/new/?redirect_source=firefox-com">Firefox </a> ： 火狐浏览器，内存占用更少，完全可以替代 chrome， 建议配合插件 Adblock Plus 屏蔽广告使用。插件下载不需要 google。</p></li></ul><br><h4 id="压缩解压："><a href="#压缩解压：" class="headerlink" title="压缩解压："></a>压缩解压：</h4><ul><li><a href="https://www.bandisoft.com/bandizip/">Bandizip</a> ： 无任何广告的压缩软件</li></ul><br><h4 id="输入法："><a href="#输入法：" class="headerlink" title="输入法："></a>输入法：</h4><ul><li><strong>无广告版搜狗输入法：</strong>  这货已经堕落了，都是弹窗和广告，也可以尝试讯飞输入法。</li></ul><br><hr><p><br>#### —- 可选软件 —-：</p><br><h4 id="制作-U-盘-PE-启动项："><a href="#制作-U-盘-PE-启动项：" class="headerlink" title="制作 U 盘 PE 启动项："></a>制作 U 盘 PE 启动项：</h4><ul><li><a href="https://u.diannaodian.com/down/">电脑店</a> : 制作 U 盘启动工具，没必要使用最新版本，新版有联网等功能，没有研究过，也没取消取消赞助商的密码。<ul><li>推荐使用 <a href="https://u.diannaodian.com/down/2138/">此旧版本</a>，刻录 U 盘后，在个性化设置中，取消电脑店u盘PE系统赞助商主页、软件；取消密码为：<code>2012dnd</code>。 <a href="https://jingyan.baidu.com/article/5225f26b7d6345e6fa0908ed.html">教程</a></li></ul></li></ul><br><h4 id="镜像"><a href="#镜像" class="headerlink" title="镜像:"></a>镜像:</h4><ul><li><a href="https://msdn.itellyou.cn/">msdn</a> : I tell you，下载微软官网纯净 iso 镜像。 比较推荐<ul><li>推荐 <code>cn_windows_10_consumer_edition_version_1803_updated_aug_2018_x64_dvd_2cf38490.iso</code> 版本，感觉最为稳定一个 win10 版本。</li></ul></li></ul><br><h4 id="360-驱动大师："><a href="#360-驱动大师：" class="headerlink" title="360 驱动大师："></a>360 驱动大师：</h4><ul><li><a href="https://weishi.360.cn/qudongdashi/index.html">360 驱动大师</a> ： 重装系统之后，需要的重装驱动，用完之后就卸载掉。</li></ul><br><h4 id="硬件检测工具："><a href="#硬件检测工具：" class="headerlink" title="硬件检测工具："></a>硬件检测工具：</h4><ul><li><a href="https://weishi.360.cn/qudongdashi/index.html">aida64</a> ： 详细检测软硬件系统信息的工具。</li></ul><br><h4 id="破解百度云："><a href="#破解百度云：" class="headerlink" title="破解百度云："></a>破解百度云：</h4><ul><li><a href="https://pandownload.com/">PanDownload</a> ： 普通版官网下载，Beat 版本需要有内测账号登录，<a href="https://blog.csdn.net/qq_33154343/article/details/94618573">使用教程</a></li></ul><br><h4 id="提取图片的文字："><a href="#提取图片的文字：" class="headerlink" title="提取图片的文字："></a>提取图片的文字：</h4><ul><li><strong>[易]强制识别复制：</strong> 中文免安装，748KB， 按 F4 运行，可以将一切图片提取文字到txt<ul><li>链接：<a href="https://pan.baidu.com/s/1_ryp69QgF1FjjV6_XOHvaw">https://pan.baidu.com/s/1_ryp69QgF1FjjV6_XOHvaw</a>  提取码：qev1</li></ul></li></ul><br><h4 id="仅-360-网络测速："><a href="#仅-360-网络测速：" class="headerlink" title="[仅]360 网络测速："></a>[仅]360 网络测速：</h4><ul><li><strong>网络测速 :</strong>  中文免安装，2.67M，从360安全卫士里面提取出来的，360宽带测速器。<ul><li>链接：<a href="https://pan.baidu.com/s/1MlSQtPS5lTtgE8gmk3ILEA">https://pan.baidu.com/s/1MlSQtPS5lTtgE8gmk3ILEA</a>  提取码：m7s5</li></ul></li></ul><br><h4 id="下载百度文库："><a href="#下载百度文库：" class="headerlink" title="下载百度文库："></a>下载百度文库：</h4><ul><li><a href="http://www.bingdian001.com/">冰点文库</a> ： 无需积分就可以自由下载百度、豆丁、丁香、MBALib、Book118等文库文档，无需注册和登录。<strong>但是会篡改浏览器主页。</strong> </li></ul><br><h4 id="写博客三件套："><a href="#写博客三件套：" class="headerlink" title="写博客三件套："></a>写博客三件套：</h4><ul><li><a href="https://typora.io/">typora</a> + <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a> + githubPage + jsDeliver CDN<ul><li> [可见即可得的编辑器 + 图床上传工具 + 图床 + cdn加速]</li></ul></li></ul><br><h4 id="用户习惯："><a href="#用户习惯：" class="headerlink" title="用户习惯："></a>用户习惯：</h4><p><strong>一切优秀软件，都比不上用户习惯，安装软件去官网，或者可靠的破解网站，安装时候不要无脑下一步，避免被捆绑了垃圾流氓全家桶；google &gt;&gt; Bing &gt;&gt; Baidu；</strong> 有一个懂电脑的男票也行请无视上面一段话。</p><br><h4 id="总结和下载："><a href="#总结和下载：" class="headerlink" title="总结和下载："></a>总结和下载：</h4><p>以上所有资源，自家收藏和使用的版本，基本都是中文免安装版，都在这里。当然，你可以去官网下载最新的版本。这里更多是我的一个方便下次重装的记载地。所有下载</p><br><p>链接：<a href="https://pan.baidu.com/s/1U8BtsXvFbjQaCiIh1HZFKA">https://pan.baidu.com/s/1U8BtsXvFbjQaCiIh1HZFKA</a>  提取码：h9mz </p><br> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200405_150518_1.png" width="100%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中进程间的通信方式--内存映射区mmap()</title>
      <link href="posts/54396db8/"/>
      <url>posts/54396db8/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　本篇讲解另外一种进程间通信方式，<strong>内存映射区</strong> <code>mmap()</code>，以及对应的释放内存映射区 <code>munmap()</code> ，。前面两篇讲解了进程间通信，使用<a href="https://blog.csdn.net/qq_33154343/article/details/105266919">有名管道</a>和<a href="https://blog.csdn.net/qq_33154343/article/details/105254078">匿名管道</a>的方式进行 IPC，也是经常用到的，可以去接触一下。</p><ul><li><strong>对于有血缘关系的进程间通信：</strong><ul><li>有名内存映射区</li><li>匿名内存映射区(推荐)</li></ul></li><li><strong>对于无血缘关系的进程间通信：</strong><ul><li>(只能用)有名内存映射区</li></ul></li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><br><h3 id="mmap内存映射原理"><a href="#mmap内存映射原理" class="headerlink" title="mmap内存映射原理:"></a>mmap内存映射原理:</h3><p><strong>（一）进程启动映射过程，并在虚拟地址空间中为映射创建虚拟映射区域</strong></p><p>1、进程在用户空间调用库函数mmap，原型：void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);</p><p>2、在当前进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址</p><p>3、为此虚拟区分配一个vm_area_struct结构，接着对这个结构的各个域进行了初始化</p><p>4、将新建的虚拟区结构（vm_area_struct）插入进程的虚拟地址区域链表或树中</p><p><strong>（二）调用内核空间的系统调用函数 mmap（不同于用户空间函数），实现文件物理地址和进程虚拟地址的一一映射关系</strong></p><p>5、为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p><p>6、通过该文件的文件结构体，链接到file_operations模块，调用内核函数mmap，其原型为：int mmap(struct file *filp, struct vm_area_struct *vma)，不同于用户空间库函数。</p><p>7、内核mmap函数通过虚拟文件系统inode模块定位到文件磁盘物理地址。</p><p>8、通过remap_pfn_range函数建立页表，即实现了文件地址和虚拟地址区域的映射关系。此时，这片虚拟地址并没有任何数据关联到主存中。</p><p><strong>（三）进程发起对这片映射空间的访问，引发缺页异常，实现文件内容到物理内存（主存）的拷贝</strong></p><p>注：前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存。真正的文件读取是当进程发起读或写操作时。</p><p>9、进程的读或写操作访问虚拟地址空间这一段映射地址，通过查询页表，发现这一段地址并不在物理页面上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。</p><p>10、缺页异常进行一系列判断，确定无非法操作后，内核发起请求调页过程。</p><p>11、调页过程先在交换缓存空间（swap cache）中寻找需要访问的内存页，如果没有则调用nopage函数把所缺的页从磁盘装入到主存中。</p><p>12、之后进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。</p><p>注：修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用msync()来强制同步, 这样所写的内容就能立即保存到文件里了。</p><br><h3 id="创建内存映射区-mmap-："><a href="#创建内存映射区-mmap-：" class="headerlink" title="创建内存映射区 mmap()："></a>创建内存映射区 mmap()：</h3><p><strong>作用：</strong> 将磁盘文件的数据映射到内存，用户通过修改内存就能修改磁盘文件。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_172709.png" width="70%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200402_181944.png" width="65%"/ loading="lazy"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> size_t len<span class="token punctuation">,</span> <span class="token keyword">int</span> prot<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> off_t offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>参数：</strong><ul><li><strong>addr：</strong><ul><li><strong>映射区的首地址，传 <code>NULL</code></strong> ；系统会自动在虚拟地址空间的动态加载区，开辟一块大小为 len 的内存区域空间。</li></ul></li><li><strong>len： //映射区的大小</strong><ul><li><font color=#FF0000  size=4 face="幼圆">必须是 4K 的整数倍，且不能够为 0。</font></li><li>一般文件有多大，len 就有多大</li></ul></li><li><strong>prot： //映射区的权限</strong><ul><li><code>PROT_READ</code>  – 映射区必须要有读权限</li><li><code>PROT_WRITE</code> – 写权限</li></ul></li><li>**flags： //标志位参数 **<ul><li><code>MAP_SHARED</code>  共享区域，开启此权限，则内存中映射区域的内容，是和磁盘文件的内容保持一致</li><li><code>MAP_PRIVATR</code>  内存区域的映射内容，是和磁盘文件的内容，不是时刻同步的。</li></ul></li><li><strong>fd： //文件描述符</strong><ul><li>磁盘文件（想要映射到内存中的共享区）的那个文件的文件描述符</li></ul></li><li><strong>offset： //偏移文件的偏移量</strong><ul><li>当想要从文件的中间某处到结束区域，映射到内存中，就可以只用这个偏移</li></ul></li></ul></li><li><strong>返回值：</strong><ul><li>*<em>void <em>：</em></em>  开辟的那个区域的首地址，用指针传出来。<ul><li>映射区的首地址 – 调用成功</li><li>调用失败， 返回 MAP_FAILED</li></ul></li></ul></li></ul><br><h3 id="释放内存映射区-munmap-："><a href="#释放内存映射区-munmap-：" class="headerlink" title="释放内存映射区 munmap()："></a>释放内存映射区 munmap()：</h3><p>就像 malloc - free； new - delete； mmap - munmap 一样，有开辟空间，就有释放该内存区域</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">munmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两个参数，就是 mmap() 的第一个和第二个参数。</p><br><h3 id="写一个例子，验证内存内容和磁盘文件会同步："><a href="#写一个例子，验证内存内容和磁盘文件会同步：" class="headerlink" title="写一个例子，验证内存内容和磁盘文件会同步："></a>写一个例子，验证内存内容和磁盘文件会同步：</h3><p>对于一个已有的文本文件 it.txt 进行映射，创建一个内存映射区，然后在内存映射区里面修改文件的聂荣，再重新打开磁盘的文本文件查看内容是否同时发生了改变。显示修改之前文件和使用内存映射区的内容后的文件内容后，发现磁盘里面的内容的确是和同步的改变了。最后要记得使用 <code>munmap()</code> 关闭你使用 <code>mmap()</code> 创建的内存映射区的空间哦。</p><ul><li><p><strong>代码示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"it.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建内存映射区</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[mmap fail] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//释放内存映射区</span>    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong> </p><p>和预期的效果一直，在内存中改动内容，磁盘的文件的内容也随之改变。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200402_203940.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="对于-mmap-的一些思考："><a href="#对于-mmap-的一些思考：" class="headerlink" title="对于 mmap() 的一些思考："></a>对于 mmap() 的一些思考：</h3><ul><li>如果 mmap() 的返回值 (ptr)做++操作（ptr++)，munmap是否能够成功？<ul><li>不能，如果要做指针偏移的的话，可以 char* pt = ptr；</li></ul></li><li>如果 open() 时候 O_RDONLY，mmap 时 prot 参数指定 PROR_READ | PROT_WRITE 会怎样？<ul><li>mmap 会调用失败</li><li><strong>open() 文件指定权限应该大于等于 mmap() 的第三个参数 prot 指定的权限</strong></li></ul></li><li>如果文件的偏移量为 1000 会怎么样？<ul><li><strong>会失败，其必须是 4096 的整数倍</strong></li></ul></li><li>如果不检查 mmap() 的返回值会怎样？<ul><li>也不会怎么样</li></ul></li><li>mmap() 什么时候会调用失败？<ul><li>第二个参数 len = 0</li><li>第三个必须要有 PROT_READ 权限；且 open()打开的权限要大于 mmap() 的 port 参数权限</li></ul></li><li>可以open()的时候，O_CREAT 一个新文件来创建映射区吗？<ul><li>可以，但是需要做文件扩展</li><li>lseek()</li><li>truncate(path，length)</li></ul></li><li>mmap 后关闭文件描述符，对 mmap 映射有没有影响？<ul><li>文件被打开之后，就没有影响了。</li></ul></li><li>对 ptr 越界操作会怎么样？<ul><li>这个取决于 ptr 越界后面的内存写的是什么。但是<strong>大概率的会遇到段错误</strong> </li></ul></li></ul><br><h3 id="mmap-实现内存映射？"><a href="#mmap-实现内存映射？" class="headerlink" title="mmap 实现内存映射？"></a>mmap 实现内存映射？</h3><ul><li>必须要有一个文件</li><li>文件数据什么时候有用？<ul><li>单纯的实现文件映射</li><li>进行进程间通信，磁盘的文件数据时没有用的。（在内存操作会更有效率，但是属于非阻塞）</li></ul></li></ul><br><h3 id="父子进程间永远共享的东西？"><a href="#父子进程间永远共享的东西？" class="headerlink" title="父子进程间永远共享的东西？"></a><font color=#FF0000 face="幼圆">父子进程间永远共享的东西？</font></h3><ul><li><font color=#FF0000 face="幼圆">文件描述符</font></li><li><font color=#FF0000 face="幼圆">内存映射区</font></li></ul><br><h3 id="例子实现父子进程间的通信："><a href="#例子实现父子进程间的通信：" class="headerlink" title="例子实现父子进程间的通信："></a>例子实现父子进程间的通信：</h3><p>通过改写上面的例子，创建 <a href="https://github.com/xmuli/linuxExample/blob/master/13_mmap/anonMmap">anonMmap.cpp</a> 文件，创建子进程，父进程对内存映射区进行修改内容，在首段使用 strcpy() 添加一段中文语句，然后在子进程里面对复制进来的尾部’\0’进行覆盖，再次修改一段内容，然后在子进程里面间该短内容输出到终端显示。</p><ul><li><p><strong>代码实现：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"it.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建内存映射区</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[mmap fail] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>         <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token string">"(我是父进程写入数据到内存映射区内容)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下标0-53，一共 54 个，其中ptr[53]为'\0'</span>         <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//回收子进程</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//子进程</span>        <span class="token comment">// sleep(2);</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//故意覆盖掉'\0'，方便打印出来后面文章</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_181557.png" width="50%"/ loading="lazy"></li></ul><br><h3 id="创建匿名内存映射区："><a href="#创建匿名内存映射区：" class="headerlink" title="创建匿名内存映射区："></a>创建匿名内存映射区：</h3><p>上面写的例子，都是对于有血缘关系的父子进程之间的通信例子，通过磁盘文件使用 <code>mmap()</code> 创建的是<strong>（有名）内存映射区</strong>； 但是改一下 mmap() 创建的倒数第二个参数，且不需要 open() 磁盘文件，创建出来的就是<strong>（匿名）内存映射区</strong> ；</p><p><strong>但是匿名内存映射区只能够适用于有血缘关系之间的进程通信。而有名内存映射区，可以使用与在有有血缘的进程和无血缘的进程之间的通信，都可以。</strong> </p><h4 id="匿名内存映射区（有血缘关系进程通信）："><a href="#匿名内存映射区（有血缘关系进程通信）：" class="headerlink" title="匿名内存映射区（有血缘关系进程通信）："></a>匿名内存映射区（有血缘关系进程通信）：</h4><ul><li><p><strong>（匿名）内存映射区 代码例子:</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED <span class="token operator">|</span> MAP_ANON<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建匿名内存映射区，只需要修改倒数 2、3 两个阐述即可</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> MAP_FAILED<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[mmap fail] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>         <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token string">"this is parent process"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//回收子进程</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//子进程</span>        <span class="token comment">// sleep(2);</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token comment">//故意覆盖掉'\0'，打印出来后面文章</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_225528.png" width="80%"/ loading="lazy"></li></ul><br><h4 id="有名内存映射区（无血缘关系进程通信）："><a href="#有名内存映射区（无血缘关系进程通信）：" class="headerlink" title="有名内存映射区（无血缘关系进程通信）："></a>有名内存映射区（无血缘关系进程通信）：</h4><p>而对于无血缘关系的进程间通信，只需要都打开同一个磁盘文件，各自的进程会按照这个顺序， <code>磁盘文件名 --&gt; (各自的进程虚拟地址空间的)内存映射区 --&gt; （共用一份的）物理内存的区域 </code>， 然后都可以修改和读取这一段内存区域，从而实现进程间通信。</p><p>创建 aProcess.cpp 生成 a 进程，创建 bProcess.cpp 生成 b 进程；a 进程先对 c.txt 文件改写添加 “abc”，然后 b 进程再对 c.txt 文件改写添加 “ABC”，然后输出到终端显示。</p><ul><li><p><strong>代码显示：</strong></p><p>实现伪代码如下，详细的源码见下面下载链接</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//aProcess.cpp</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>        <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//bProcess.cpp</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"c.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>        <span class="token function">munmap</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_231307.png" width="70%"/ loading="lazy"></li></ul><br><h3 id="借鉴博客与总结："><a href="#借鉴博客与总结：" class="headerlink" title="借鉴博客与总结："></a>借鉴博客与总结：</h3><p>发现一篇讲解的很棒的博客，更多的是理论和概念上面的分析 mmap() 的原理：<a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html">认真分析mmap：是什么 为什么 怎么用</a>， 其中文章开头的一段拿来再描述一下，其余则是本篇的侧重点是用代码来写两个例子，以及需要注意的一些坑，验证和学习这个内存映射区。</p><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/13_mmap">13_mmap</a></p><p>欢迎 star 和 fork <strong>这个系列</strong> 的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>V2ray客户端突然连接不上，问题排查和解决原因</title>
      <link href="posts/3feb52da/"/>
      <url>posts/3feb52da/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>  <font color=#FF0000  size=4 face="幼圆"><strong>V2ray 客户端， 昨天还是用着好好地，怎么今天出了问题？？？就用不了，连接不上去了呢？</strong></font> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="V2ray-客户端："><a href="#V2ray-客户端：" class="headerlink" title="V2ray 客户端："></a>V2ray 客户端：</h3><p>一直有使用 Mac 、 Linux、 win10 这三个系统，外加一个 ios 设备。对于 V2ray 客户端，分别选用为：</p><ul><li><p><strong>Mac：</strong> <a href="https://github.com/yanue/V2rayU">V2RayU</a></p></li><li><p><strong>Linux：</strong> <a href="https://lhy0403.github.io/Qv2ray">Qv2ray</a> + <a href="https://github.com/v2ray/v2ray-core/releases">v2ray-core</a> + 浏览器插件 SwitchyOmega </p></li><li><p><strong>Windows:</strong> <a href="https://github.com/2dust/v2rayN">V2RayN</a></p></li><li><p><strong>ios:</strong> Shadowrocket 、 Kitsunebi （美区下载）</p></li></ul><br><h3 id="客户端抽风原因以及解决方法："><a href="#客户端抽风原因以及解决方法：" class="headerlink" title="客户端抽风原因以及解决方法："></a>客户端抽风原因以及解决方法：</h3><ul><li><p><strong>win10：</strong></p><p>昨晚上，重装 win10 + V2rayN，居然私活连接不上去，今早上破案了，是系统时间的问题（系统右下角的时间是正确时间 2020，但是下图框处中的时间是 2015 年的时间）。重新同步一下系统时间 + 重启一下 win10 系统就好了。可以 google 了。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_2545.JPG" width="80%"/ loading="lazy"></li></ul><ul><li><p><strong>MacOS：</strong></p><p>昨晚上折腾 win10，然后今早上突然 Mac 不能访问了！！！！，无语😑😑，也是各种尝试不行。现在应该是软件抽风了吧（正常工作了几个月）。使用如下 CleanMyMac X 软件清理系统和卸载重装软件即可。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_155134.png" width="20%"/ loading="lazy"><p><strong>解决方法：</strong></p><p>使用 CleanMyMac X，先将 V2RayU 卸载（这样卸载会很干净），然后扫描和清理系统垃圾，重启电脑，在重装 V2RayU，导入订阅，又可以使用了。可以 google 了。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_155214.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="其他可能原因："><a href="#其他可能原因：" class="headerlink" title="其他可能原因："></a>其他可能原因：</h3><ul><li><p>同时使用不同的设备，同一个 wifi 下，看能否链接 google？（排除运营商和线路的问题）</p></li><li><p>客户端的 http 代理是否打开了？（Pac 还是全局模式，还是关闭状态）</p></li><li><p>http 和 Socket5 的端口号和系统端口冲突了，更改一下，然后重启软件和系统，再试试。</p></li><li><p>尝试其他工具：<a href="https://v2ray.com/awesome/tools.html">v2ray 客户端集合</a></p></li><li><p>上面说的那个浏览器插件，图标如下： </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200404_154510.png" width="35%"/ loading="lazy"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - 科学上网vpn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中普通的进程间通信方式--有名管道fifo(适用于无血缘关系的进程)</title>
      <link href="posts/fe544e10/"/>
      <url>posts/fe544e10/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在<a href="https://blog.csdn.net/qq_33154343/article/details/105254078">上一篇</a>中，写了有血缘关系的进程间的通信，使用匿名管道 <code>pipe</code>，本篇是介绍，<strong>对于无血缘关系的进程间通信，可以采用（有名）管道的 <code>fifo</code> 方式。</strong>   </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="进程间通信-IPC："><a href="#进程间通信-IPC：" class="headerlink" title="进程间通信 IPC："></a>进程间通信 IPC：</h3><p>进程间通信（Inter Process Communication），字母首写即为 IPC。</p><ul><li><font color=#FF0000  size=4 face="幼圆"><strong>进程间常用的 4 种方式：</strong></font><ul><li><strong>管道</strong> （简单）</li><li><strong>信号</strong> （系统开销小）</li><li><strong>共享映射区</strong> （有无血缘关系的进程间通信都可以）</li><li><strong>本地 socket 套接字</strong> (稳定)</li></ul></li></ul><br><h3 id="有名管道（fifo）："><a href="#有名管道（fifo）：" class="headerlink" title="有名管道（fifo）："></a>有名管道（fifo）：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fifo</span><span class="token punctuation">(</span><span class="token keyword">int</span> fildes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color=#FF0000  size=4 face="幼圆">适用于无血缘关系的进程之间的通信。</font>进程之间是不要使用 sleep() 函数的，因为管道默认就是堵塞的。虽然实现形态上是文件，但是管道本身并不占用磁盘或者其他外部存储的空间。在Linux的实现上，它占用的是内核的一段缓冲区空间。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200401202233.png" width="50%"/ loading="lazy"><br><ul><li><strong>本质：</strong> <ul><li><font color=#FF0000  size=4 face="幼圆">是内核缓冲区。也是伪文件（不占用磁盘空间）</font></li></ul></li><li><strong>特点：</strong><ul><li>有名管道</li><li>在磁盘上有这样一个文件 <code>ls -l -&gt; p</code></li><li>伪文件，在磁盘大小永远为 0</li><li>在内核中有一个对应的缓冲区</li><li>使用半双工的通信方式</li></ul></li><li><strong>使用场景：</strong><ul><li>适用于没有血缘关系的进程间的通信</li></ul></li><li><strong>创建方式：</strong><ul><li>命令： mkfifo 管道名</li><li>函数： mkfifo()</li></ul></li><li><strong>fifo 文件可以使用 IO 函数进行操作</strong><ul><li>open() / close()</li><li>read() / write()</li><li>不能执行 lseek 操作</li></ul></li></ul><br><h3 id="写一个例子："><a href="#写一个例子：" class="headerlink" title="写一个例子："></a>写一个例子：</h3><p>有两个进程 a 和 b，分别用 write.cpp 和 read.cpp 进行实现，然后进程 a 往一个管道里面写数据，进程 b 从这个管道里面读取数据。</p><ul><li><p><strong>代码实现：</strong></p><p>这里写 <code>writ.cpp</code>，之后运行可执行程序 writ，当做 <strong>a 进程</strong> ，往这个管道里面一直写数据：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请按照格式输入: ./write myfifo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断文件是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[creator fifo file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"creator fifo success: %d\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">_exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"this is 2020-04-01, code"</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        sleep(2);  //用来验证管道阻塞这一属性的</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里写 <code>read.cpp</code>，之后运行可执行程序 read，当做 <strong>b 进程</strong> ，往这个管道里面一直读数据：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请按照格式输入: ./read myfifo\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">access</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断文件是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[creator fifo file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"creator fifo success: %d\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[open file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf = %s,  len = %d\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​    </p><ul><li><p><strong>代码分析：</strong><br>为了清晰演示管道的阻塞属性，我们打开写端的 <code>sleep(2)</code> 这一行代码，故意用来制造写端的速度比读端要慢，然后观察读端的打印显示。可以清楚的得到管道是阻塞的这一结论。</p></li><li><p><strong>运行效果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200401_210833.png" width="90%"/ loading="lazy"></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/11_pipe">11_pipe</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中父子进程、兄弟子进程之间通信方式--匿名管道pipe(适用于有血缘关系的进程)</title>
      <link href="posts/145c9de9/"/>
      <url>posts/145c9de9/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　<strong>对于有血缘关系的进程间通信，如父子进程、兄弟子进程子之间的通信，可以采用（匿名）管道的 <code>pipe</code> 方式。</strong> 而进程间通信一共有四种方式：管道、信号、共享映射区、套接字。且说一个概念，进程间通信（Inter Process Communication），字母首写即为 IPC。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="进程间通信-IPC："><a href="#进程间通信-IPC：" class="headerlink" title="进程间通信 IPC："></a>进程间通信 IPC：</h3><p>进程间通信（Inter Process Communication），字母首写即为 IPC。</p><ul><li><font color=#FF0000  size=4 face="幼圆"><strong>进程间常用的 4 种方式：</strong></font><ul><li><strong>管道</strong> （简单）</li><li><strong>信号</strong> （系统开销小）</li><li><strong>共享映射区</strong> （有无血缘关系的进程间通信都可以）</li><li><strong>本地 socket 套接字</strong> (稳定)</li></ul></li></ul><br><h3 id="匿名管道（pipe）："><a href="#匿名管道（pipe）：" class="headerlink" title="匿名管道（pipe）："></a>匿名管道（pipe）：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span> fildes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般都是指创建匿名管道，其中传出 <code>int fildes[2]</code> 参数是固定的；fildes[0] 代表读端，fildes[1] 代表写端。<font color=#FF0000  size=4 face="幼圆">适用于有血缘关系的进程。</font>通常父子进程之间是不要使用 sleep() 函数的，因为管道默认就是堵塞的。虽然实现形态上是文件，但是管道本身并不占用磁盘或者其他外部存储的空间。在Linux的实现上，它占用的是内存空间。所以，Linux上的管道就是一个操作方式为文件的内存缓冲区。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200329_165752.png" width="70%"/ loading="lazy"><br><ul><li><strong>本质：</strong> <ul><li><font color=#FF0000  size=4 face="幼圆">是内核缓冲区。也是伪文件（不占用磁盘空间）</font></li></ul></li><li><strong>特点：</strong><ul><li>其读端和写端，对应两个文件描述符；数据写端流入，读端流出</li><li>操作管道的进程被销毁之后，管道自动被释放了</li><li>管道默认是阻塞的（读写端）</li></ul></li><li><strong>实现原理：</strong><ul><li>内部实现方式：环形队列。只有一次读写的机会。先进先出。</li><li>其缓冲区默认是 4K 大小；但是大小会随着实际情况<strong>适当</strong> 调整。</li></ul></li><li><strong>局限性：</strong><ul><li>队列：数据只能够读取一次，不能够重复读取</li><li>半全工方式工作</li></ul></li></ul><br><h4 id="父子进程间通信："><a href="#父子进程间通信：" class="headerlink" title="父子进程间通信："></a>父子进程间通信：</h4><ul><li><p><strong>写一个父子进程间，使用管道通信的例子：</strong></p><p>比如说，写一个例子，实现父子进程间的通信，实现 <code>ps aux | grep bash</code> 的实现。你可以看下面的思路图解析，然后自己尝试敲写一遍，没有出来的话，再来看我的。学习之事，不能急于求成，始终是那句话：<strong>纸上学来终觉浅，觉知此事要躬行。</strong> 当你开始写下第一行代码的时候，你会感受到创造的快乐。</p></li><li><p><strong>代码实现：</strong></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//用来标记管道的两端的文件描述符</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建管道 pipe. fd[2] 是固定的输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[pipe create file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> pipeRead <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> pipeWrite <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token comment">//parent process</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重定向</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"aux"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//child process</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">,</span> STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//重定向</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"--color=auto"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>代码分析：</strong></p><ul><li><p>父进程的 3 号文件描述符表，指向 pipe 管道的写端，要记得此刻把它的读端关闭</p></li><li><p>子进程的 4 号文件描述符表，指向 pipe 管道的读端，要记得此刻把它的写端关闭</p></li><li><p>因为管道只能够一次机会读写机会。如果要父子进程都能够读写，那么还得加一个管道</p></li><li><p>管道是默认是阻塞的</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_160109.png" width="100%"/ loading="lazy"></li></ul><ul><li><p>其中对代码进程中的 20-28行的理解，和文件描述表中的文件描述符 0-4号 的对应关系如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_154545.png" width="70%"/ loading="lazy"></li></ul></li></ul><ul><li><p><strong>运行结果：</strong></p><ul><li><p>在 Ubuntu 18.4 上面的效果如图：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143343.png" width="90%"/ loading="lazy"></li><li><p>在 Mac 10.14.6 上面效果（后面那一串多余的，都是它自带的一些命令参数）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143639.png" width="90%"/ loading="lazy"><ul><li>当你故意开多个终端的时候，也会把其他的终端搜索出来</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200330_212720.png" width="90%"/ loading="lazy"></li></ul><p>​     </p><ul><li>由上面是可以看到 在 Linux 和 Unix 系统之间是有着一些区别的，第1、2 张截图，其进程的所有者，Linux 中两个都是 muli 用户；而 Unix 一个是 root 系统 ，一个是 muli 用户。但是这里有一段困惑，怎么 Unix 中显示 root 的那个进程， 后面是有显示为我的一个虚拟机软件y？怎么和他扯上关系的？？？这里暂时有一个小的困惑。在下一个例子中，会看到更有其他的不同。</li></ul></li></ul><br><h4 id="兄弟子进程间通信："><a href="#兄弟子进程间通信：" class="headerlink" title="兄弟子进程间通信："></a>兄弟子进程间通信：</h4><p>这里实现两个兄弟子进程（无孙子进程）之间，利用管道进程 pipe 进程通信的例子</p><ul><li><p><strong>先上代码：</strong> 这是由上面一个例子改写的，思路可以参考前面那个图</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//用来标记管道的两端的文件描述符</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建管道 pipe. fd[2] 是固定的输出参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[pipe create file] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> pipeRead <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> pipeWrite <span class="token operator">=</span> fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[creator process file:]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                         <span class="token comment">//child process 1</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">,</span> STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">close</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"ps"</span><span class="token punctuation">,</span> <span class="token string">"aux"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//child process 2</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">,</span> STDIN_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"grep"</span><span class="token punctuation">,</span> <span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"--color=auto"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//parent process</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipeWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// sleep(2);</span>        <span class="token keyword">int</span> wpid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> wpid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> WNOHANG<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//回收子进程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wpid <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">///sbin/init splash 进程    /sbin/launchd</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wpid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child dide pid = %d\n"</span><span class="token punctuation">,</span> wpid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pipeWrite = %d,  pipeRead = %d\n"</span><span class="token punctuation">,</span> pipeWrite<span class="token punctuation">,</span> pipeRead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><strong>附上该例子的思路图：</strong></p><ul><li>要注意关闭父进程和不必要的进程的对应对管道的读写的文件描述符。且注意到管道默认是阻塞的。</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_154612.png" width="60%"/ loading="lazy"></li></ul><ul><li><p><strong>运行效果：</strong></p><ul><li><p>在 Ubuntu 18.4 中的效果：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143330.png" width="90%"/ loading="lazy"></li><li><p>在 Mac 10.14。6 中的效果：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_143655.png" width="90%"/ loading="lazy"></li></ul></li><li><p><strong>运行结果以及代码分析：</strong></p><ul><li>在 Linux 和 Unix 下，均可看到，是 三行打印输出的结果<ul><li>第一行是查询到 <code>子进程 1</code> 的信息，往管道里面写入 <code>ps aux</code> 的那个</li><li>第二行是查询到 <code>子进程 2</code> 的信息，往管道里面写入 <code>grep “bash” --color=auto</code>  的那个</li><li>第三行是父进程，打印的输出信息。</li></ul></li><li>思考，如果去掉代码42，45，46 行，会发生什么？？？会发现在 Linux 和 Unix 上面，都会答应批量的 <code>child dide pid = 1</code> 信息。查看了一下，<font color=#FF0000  size=4 face="幼圆">该进程号 pid == 1，在 Linux 下是 <code>/sbin/init splash</code> ；在 Unix 下是 <code>/sbin/launchd</code> 进程。</font> 也就是书上和一些博客说的 init 进程，专门用来领养孤儿进程的，<strong>用来释放</strong> 子（孤儿）进程的 <strong>系统空间的 PCB</strong> 。</li></ul></li></ul><br><h3 id="管道的读写行为："><a href="#管道的读写行为：" class="headerlink" title="管道的读写行为："></a>管道的读写行为：</h3><p>此部分为理解，但是归总结纳一下：</p><h4 id="读操作："><a href="#读操作：" class="headerlink" title="读操作："></a>读操作：</h4><ul><li><strong>有数据：</strong><ul><li>read(fd)， -正常读，返回读出的字节数</li></ul></li><li><strong>无数据：</strong><ul><li>写端全部关闭<ul><li>read 解除阻塞，返回 0</li><li>相当于读文件到了尾部</li></ul></li><li>没有全部关闭<ul><li>read 阻塞（比如设置了一个 sleep(10)）</li></ul></li></ul></li></ul><h4 id="写操作："><a href="#写操作：" class="headerlink" title="写操作："></a>写操作：</h4><ul><li><strong>读端全部关闭：</strong><ul><li>管道破裂，进程被终止<ul><li>内核给当前进程发送 SIGPIPE 信号（13 号信号）</li></ul></li></ul></li><li><strong>读端没有全部关闭</strong><ul><li>缓冲区写满了<ul><li>write 阻塞</li></ul></li><li>缓冲区没有写满<ul><li>write 继续写</li></ul></li></ul></li></ul><br><h3 id="查看管道缓冲区大小："><a href="#查看管道缓冲区大小：" class="headerlink" title="查看管道缓冲区大小："></a>查看管道缓冲区大小：</h3><ul><li><p><strong>命令：</strong>  <del><code>ulimix -a</code></del> 现在在 Linux 和 Unix 上面，都没有 pipe size 这一栏详细信息了</p></li><li><p><strong>函数：</strong> <code>fpathconf()</code></p><ul><li><p>一个例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//用来标记管道的两端的文件描述符</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建管道 pipe. fd[2] 是固定的输出参数</span><span class="token keyword">int</span> pipeSize <span class="token operator">=</span> <span class="token function">fpathconf</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _PC_PIPE_BUF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//fd[1] 也行</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pipeSize = %d\n"</span><span class="token punctuation">,</span> pipeSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出结果：Unix 下是 512 大小</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_165502.png" width="60%"/ loading="lazy"></li></ul></li></ul><br><h3 id="设置管道的非阻塞属性："><a href="#设置管道的非阻塞属性：" class="headerlink" title="设置管道的非阻塞属性："></a>设置管道的非阻塞属性：</h3><ul><li><p><strong>默认管道是读写两端都是阻塞</strong></p></li><li><p>fcntl()  –变参函数</p><ul><li>作用一：复制文件描述符 -dup</li><li>作用二：修改文件属性 -open 的时候对应 flag 属性</li></ul></li><li><p>例如实现读端为非阻塞 pipe(fd)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> flags <span class="token operator">=</span> <span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_GETFL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取原来的 flags， F_GET FL （get flags 的缩写）</span>flags <span class="token operator">|=</span> O_NONBLOCK<span class="token punctuation">;</span>                <span class="token comment">//添加非阻塞属性</span><span class="token function">fcntl</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> F_SETFL<span class="token punctuation">,</span> flages<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置新的属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/11_pipe">11_pipe</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac的邮件客户端使用--登录GMail邮箱和QQ邮箱的解决方案</title>
      <link href="posts/7c9c6ccc/"/>
      <url>posts/7c9c6ccc/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 MacOS 中使用 <strong>邮件</strong> （邮箱） 登录 <strong>GMail</strong> 邮箱和 <strong>QQ</strong> 邮箱</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>邮件 12.4 </code> </p><br><h3 id="邮件上登录-谷歌邮箱（GMail）："><a href="#邮件上登录-谷歌邮箱（GMail）：" class="headerlink" title="邮件上登录 谷歌邮箱（GMail）："></a>邮件上登录 谷歌邮箱（GMail）：</h3><ul><li><p>谷歌邮箱要开启 IMAP 设置，然后在 V2rayU 的 PAC 中添加一条规则即可。</p></li><li><p><strong>解决方案：</strong></p><ol><li><p>登录网页版的谷歌邮箱 <a href="https://accounts.google.com/">https://accounts.google.com</a></p></li><li><p>点击右上角的设置，进入 <code>设置 - 转发和 POP/IMAP - IMAP 访问</code>， 开启 <code>启用 IMAP</code> 设置</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_223505.png" width="70%"/ loading="lazy"></li><li><p>点击保存；</p></li><li><p>点击你自己的设置自由上网的，修改 PAC 规则，在这里添加这样一行 <code>||*.gmail.com</code></p><p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_225500.png" width="25%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_225556.png" width="60%"/ loading="lazy"></p></li><li><p>然后进入邮件输入 google gmail 的账号和密码。即可登录成功</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_222942.png" width="70%"/ loading="lazy"></li></ol></li></ul><br><h3 id="邮件上登录-QQ-邮箱（qq-com）："><a href="#邮件上登录-QQ-邮箱（qq-com）：" class="headerlink" title="邮件上登录 QQ 邮箱（qq.com）："></a>邮件上登录 QQ 邮箱（qq.com）：</h3><ul><li><p>实际操作中，会发现，直接输入 QQ 邮箱的账号密码即使是正确的，也会提示登录失败，也会提示是错误的。因为密码不是 QQ 邮箱密码，而是你开启的 POP3/IMAP 验证之后的密码。 否则会提示如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185458.png" width="50%"/ loading="lazy"></li></ul><br><ul><li><p><strong>解决方法：</strong></p><ol><li><p>登录网页版 QQ 邮箱： <a href="https://mail.qq.com/">https://mail.qq.com</a></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185205.png" width="70%"/ loading="lazy"></li><li><p>进入到 <code>主页-设置-账户</code> </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185235.png" width="70%"/ loading="lazy"></li><li><p>然后往下拉，找到设置 POP3/IMAP 服务的地方，开启如下两个服务（若是开启时候，系统给的密码没有显示，可以刷新，或者退出后再次尝试，即可刷新出来）</p><ul><li><p>POP3/SMTP服务 (<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=371">如何使用 Foxmail 等软件收发邮件？</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_184900.png" width="50%"/ loading="lazy"></li><li><p>MAP/SMTP服务 (<a href="http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331">什么是 IMAP，它又是如何设置？</a>)</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_185104.png" width="50%"/ loading="lazy"></li></ul></li><li><p>开启之后，然后再次输入你的邮箱，密码一栏输入 IMAP 的授权密码。即可登陆成功。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_223704.png" width="70%"/ loading="lazy"></li></ol></li></ul><br><h3 id="邮件上登录-Gmail-和-QQ-Mail-成功："><a href="#邮件上登录-Gmail-和-QQ-Mail-成功：" class="headerlink" title="邮件上登录 Gmail 和 QQ Mail 成功："></a>邮件上登录 Gmail 和 QQ Mail 成功：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200331_224144.png" width="70%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中孤儿进程，僵尸进程，进程回收wait、waitpid函数</title>
      <link href="posts/19535392/"/>
      <url>posts/19535392/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　这篇继承<a href="https://blog.csdn.net/qq_33154343/article/details/105157044">上一篇</a>，先要自己梳理清楚一下进程相关的知识， <a href="https://blog.csdn.net/qq_33154343/article/details/105029261">上上一篇</a>的虚拟地址空间和进程控制块 <code>PCB</code> ，以及上一篇的进程相关知识，带着思考来学习 <strong>孤儿进程、僵尸进程</strong>、 以及<strong>进程回收</strong> <code>wait()</code>， <code>waitpid()</code>相关的概念。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="孤儿进程："><a href="#孤儿进程：" class="headerlink" title="孤儿进程："></a>孤儿进程：</h3><ul><li><p>父进程创建子进程</p></li><li><p><strong>父进程死了，子进程还活着，该进程叫孤儿进程(Orphan Process)</strong></p></li><li><p><font color=#FF0000  face="幼圆">在传统的 Linux 系统中，孤儿进程被 init 进程领养，init 进程成为孤儿进程的父亲</font></p><ul><li><font color=#FF0000  face="幼圆">init 进程这样做，主要是为了释放子进程占用的系统资源。</font></li><li><font color=#FF0000  face="幼圆">因为进程结束之后，能够释放用户控空间；但是释放不了系统空间的 PCB，这块资源必须由父进程释放。</font></li></ul></li><li><p><strong>写一个代码例子：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//存活时间大于 1s（此时父进程已经执行完成销毁）, 为孤儿子进程</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行完后，父进程就结束了</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>代码分析：</strong></p><p>当父进程创建子进程之后，很快的就执行完后就结束销毁自己（小于 1s 内）；因为子进程的生存时间大于 1s，故此时它为孤儿进程（下图可证明：此时其父进程号是 1 而非 17441），然后被系统的 init 进程领养，帮助销毁子进程的 PCB；</p></li><li><p><strong>运行结果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_000041.png" width="90%"/ loading="lazy"></li></ul><br><h3 id="僵尸进程："><a href="#僵尸进程：" class="headerlink" title="僵尸进程："></a>僵尸进程：</h3><ul><li><p>父进程创建子进程</p></li><li><p><strong>子进程死了，父进程还活着，且不去释放子进程的 PCB，该子进程就变成了僵尸进程(Zombie Process)。</strong></p></li><li><p><font color=#FF0000  face="幼圆">僵尸进程是一个已经死掉的进程。</font></p></li><li><p><strong>写一个代码例子：</strong> </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//（此时子进程已经执行完成销毁）, 而父进程没有时间去销毁这个子进程的 pcb，故为僵尸进程</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行完后，父进程就结束了</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>代码分析：</strong></p><p>父进程创建子进程之后，子进程在极短的时间内执行完所有代码后，其用户区的资源被释放，其系统区的 pcb 等待其父进程来释放；但是父进程一直在忙其它的时间，没有做处理，释放自己成的 PCB，在下图左侧还没有运行 <code>ctrl c</code> 的时候，使用 <code>ps</code> 在管道里面查询该子进程的号 5563，可以发现其已经被标注为死亡的进程（其 Z+ 中的是单词僵尸 Zombie 的首字母）。</p></li><li><p><strong>运行结果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_002130.png" width="100%"/ loading="lazy"></li></ul><br><h3 id="进程回收："><a href="#进程回收：" class="headerlink" title="进程回收："></a>进程回收：</h3><h4 id="wait-："><a href="#wait-：" class="headerlink" title="wait()："></a>wait()：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pid_t <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>stat_loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>作用：</strong></p><ul><li><font color=#FF0000  face="幼圆"><strong>阻塞并且等待子进程退出</strong></font></li><li><font color=#FF0000 face="幼圆"><strong>回收子进程残留的资源</strong></font></li><li><font color=#FF0000 face="幼圆"><strong>获取子进程结束的状态（退出原因）</strong></font></li><li>每次只能够回收一个进程，调用一次 wait() 也只能回收一个进程</li></ul></li><li><p><strong>参数：</strong></p><ul><li><code>WIFEXITED(status)</code>: 为非 0   –&gt; 进程正常退出<ul><li><code>WEXITSTATUS(status)</code>: 如果这个宏为真，使用此宏 –&gt; 获取进程退出状态(exit / return) 的参数</li></ul></li><li><code>WIFSIGNALED(status)</code>: 为非 0   –&gt; 进程异常终止<ul><li><code>WTERMSIG(status)</code>: 如果这个宏为真，使用此宏 –&gt; 获取使进程退出的那个信号的编号。</li></ul></li></ul></li><li><p><strong>返回值：</strong></p><ul><li>成功：清理掉的子进程 ID</li><li>失败：-1（没有子进程）</li></ul></li><li><p><strong>写一个代码例子验证：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----开始-----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//（此时子进程已经执行完成销毁）, 而父进程没有时间去销毁这个子进程的 pcb，故为僵尸进程</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//父进程</span>        <span class="token comment">//sleep(1);</span>                <span class="token keyword">int</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        pid_t wpid <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//回收子进程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//判断是否正常退出</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"退出值是 val = %d\n"</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//判断是被信号杀死</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"通过信号退出 val = %d\n"</span><span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d  ppid =  %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行完后，父进程就结束了</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+++++结束+++++\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">//若是注释掉 12 和 15 行代码，会显示父父进程的 退出值是 9</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>代码分析：</strong></p><p><strong>代码是在 MacOS（Unix）系统上面运行的；</strong> </p><p>若是注释掉 12 和 15 行代码，则会运行第一个宏，可以看到进程结束的返回值是 9 （人为随机指定的一个数值，return 9）；运行结果见下面第一个图。</p><p>而不注释掉 12 和 15 行代码；运行程序后，执行 <code>kill 进程号</code> 杀死子进程， 则会执行第二个宏，显示是被信号（15）所杀「若果是 Linux 运行，这里会显示信号是 9」；运行结果见下面第二个图。</p></li><li><p><strong>运行截图：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_163037.png" width="70%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200328_163741.png" width="100%"/ loading="lazy"></li></ul></li></ul><br><h4 id="waitpid"><a href="#waitpid" class="headerlink" title="waitpid():"></a>waitpid():</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pid_t <span class="token function">waitpid</span><span class="token punctuation">(</span>pid_t pid<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>stat_loc<span class="token punctuation">,</span> <span class="token keyword">int</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>作用：</strong></p><p>同 wait()，但是可以指定要回收的进程 pid 号，且能够指定是阻塞还是非阻塞模式。</p></li><li><p><strong>参数：</strong></p><ul><li><p>pid：</p><p><font color=#FF0000 face="幼圆">pid == -1；回收所有的子进程。与 wait 等效</font></p><p><font color=#FF0000 face="幼圆">pid &gt; 0；  回收指定 pid 的进程</font></p><p>pid == 0； 回收当前组的所有子进程</p><p>pid &lt; -1； 回收进程的 pid 取反（加减号）</p></li><li><p>status：</p><p>子进程的退出状态，用法同 wait()</p></li><li><p>options：</p><p>设置为 WNOHANG，函数非阻塞，设置为 0，函数阻塞</p></li></ul></li><li><p><strong>返回值：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">></span> <span class="token number">0</span>  <span class="token comment">//返回清理掉的子进程 ID</span><span class="token operator">-</span><span class="token number">1</span>   <span class="token comment">//无子进程</span><span class="token operator">=</span><span class="token number">0</span>   <span class="token comment">//参数 3 为 WHOHANG，且子进程正在运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/10_orphan_zombie_process">10_orphan_zombie_process</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中fork创建(兄弟)子进程，验证进程之间全局变量不共享，exec函数族</title>
      <link href="posts/5e8d6319/"/>
      <url>posts/5e8d6319/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong> 本篇主要讲解如下知识点：</p><ul><li>并行和并发的区别</li><li>进程控制块 <code>PCB</code> 和进程的五种状态</li><li>使用 <code>fork()</code> 创建子进程，创建多个兄弟子进程（不含孙进程）</li><li>验证进程之间没有共享全局变量</li><li><code>exec()</code> 函数族的使用：<code>execl()</code> 和 <code>execlp()</code></li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="并行和并发："><a href="#并行和并发：" class="headerlink" title="并行和并发："></a>并行和并发：</h3><h4 id="并发：一个时间段，处理请求的个数"><a href="#并发：一个时间段，处理请求的个数" class="headerlink" title="并发：一个时间段，处理请求的个数"></a>并发：一个时间段，处理请求的个数</h4><p>eg：<font color=#FF0000 face="幼圆"><strong>在一个时间段内，</strong> </font> <strong>处理的请求个数。</strong> 只有一个 cpu 对任务进行处理。 （每个人都吃一口饭，但是所有人都没有吃饱，短时间内让大量的快速吃，然后这样轮循环。）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_204310.png" width="50%"/ loading="lazy"> <bt><h4 id="并行：多个进程同时进行任务分配："><a href="#并行：多个进程同时进行任务分配：" class="headerlink" title="并行：多个进程同时进行任务分配："></a>并行：多个进程同时进行任务分配：</h4><p>可以看做，有多个 cpu 对多个任务进行同时处理。</p>  <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/vQbYAF.png' width="50%"/ loading="lazy"><br><h3 id="PCB-和-进程的五种状态："><a href="#PCB-和-进程的五种状态：" class="headerlink" title="PCB 和 进程的五种状态："></a>PCB 和 进程的五种状态：</h3><h4 id="进程控制块-PCB："><a href="#进程控制块-PCB：" class="headerlink" title="进程控制块 PCB："></a>进程控制块 PCB：</h4><p><strong>此部分了解即可：</strong> 每一个进程在内核中都有一个进程控制块 PCB 来维护进程相关的信息，其是有一个 400 多行的结构体组成，其中主要的需要了解的部分如下：</p><ul><li>进程 id。系统中每一个进程有唯一的一个 id，在 C 语言中，用 pid_t 类型表示。（凡是 xxx_t 一般都是 #define 重新定一个类型， 这里实际就上课非负整数）</li><li>进程的状态，有<strong>就绪，运行，挂起，停止</strong> 等状态。（还有一个<strong>初始态</strong> ）</li><li>进程切换时候，需要保存和恢复一些的 CPU 寄存器</li><li>描述虚拟地址空间的信息（每启动一个进程，就对应一个虚拟地址空间）</li><li>描述控制终端的信息</li><li>当前的工作目录</li><li>umask 掩码（执行 umask）</li><li>文件描述符表，包含很多执行 file 结构体的指针（一个进程最多打开 1024 个）</li><li>和信号相关的信息</li><li>用户 uid 和组 gid (用stat xxx 可以查看)</li><li>会话（Session）和进程组。（会话就是多个进程组）</li><li>进程可以使用的资源上限（Resource Limit）。（使用 <code>ulimit -a</code> 可看）</li></ul><br><h4 id="进程的五种状态："><a href="#进程的五种状态：" class="headerlink" title="进程的五种状态："></a>进程的五种状态：</h4><p>看着如下的这张图，想起里了我之前初看的计算机操作系统的相关知识的时候，感慨颇多。</p><ul><li>状态切换的关键：<ul><li>获得 cpu</li><li>cpu 执行</li></ul></li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_212716.png" width="70%"/ loading="lazy"><br><h3 id="进程控制块，父进程创建子进程的分析-🎃："><a href="#进程控制块，父进程创建子进程的分析-🎃：" class="headerlink" title="进程控制块，父进程创建子进程的分析 🎃："></a>进程控制块，父进程创建子进程的分析 🎃：</h3><p>父子进程空间，其虚拟地址空间是完全一样的（用户区的所有数据都是一样的，也是会运行的相同的一段代码；系统区也是一样的，唯一不一样的就是系统区的 id 号）。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_215524.png" width="90%"/ loading="lazy"><p>创建一个子进程，是使用 <code>int fork(void)</code> 函数来创建，在执行完这个 fork 函数之后，将用户区的内容全部拷贝（包括接下来要执行的代码）过去。<font color=#FF0000  size=4 face="幼圆">且该 fork 函数有两个返回值，<strong>执行完 fork() 后，父进程会返回子进程的 id（大于 0），子进程会返回一个 0，后面执行相同的代码，依靠这个来区分父子进程。</strong></font> 下面写一个代码片来表明：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_220405.png" width="70%"/ loading="lazy"><p>对照上面的两个图，可以思考如下问题：</p><ul><li>fork 之后，函数的返回值？<ul><li>fork() 返回值 &gt; 0，就是父进程；fork() 返回值 == 0，就是子进程</li></ul></li><li>子进程创建成功之后，代码的执行位置？<ul><li><font color=#FF0000  size=4 face="幼圆"><strong>父进程执行哪里（才创建子进程），子进程就重哪里里开始执行。</strong></font></li></ul></li><li>父子进程的执行顺序？<ul><li>不一定，自己去抢占 cpu 资源。执行顺序是程序员无法控制的。<strong>（cpu 轮循执行）</strong></li></ul></li><li>如何区分父子进程？<ul><li>通过 fork() 返回值</li></ul></li><li>如何获取当前进程和父进程的 id？<ul><li>获取进程 id：获取当前进程的 PID：<code>getpid()</code> ；获取当前进程的父进程的 PID： <code>getppid()</code></li></ul></li></ul><p>对与上面的问题，写如下代码片段进程测试，main.cpp 里面的代码是：<a href="https://github.com/xmuli/linuxExample/tree/master/08_fork">代码下载 main.cpp</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"++++i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pid_t pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process, pid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process, pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"----i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其运行结果如下：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_223752.png" width="60%"/ loading="lazy"><br><h3 id="父进程如何创建多个兄弟子进程（不含孙进程）🎃："><a href="#父进程如何创建多个兄弟子进程（不含孙进程）🎃：" class="headerlink" title="父进程如何创建多个兄弟子进程（不含孙进程）🎃："></a>父进程如何创建多个兄弟子进程（不含孙进程）🎃：</h3><p>看了上面的小的例子之后，发现这样可以创建子进程；进一步，怎么创建多个子进程，但是不要孙创建进程？有怎么判断子进程的顺序编号？怎么得到最开始父进程？</p><p><strong>代码如下：</strong> <a href="https://github.com/xmuli/linuxExample/tree/master/08_fork">代码下载 childProcess.cpp</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pid_t pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//如果当前进程是子进程，就跳出此循环，不在进行 fork() 创建新的子进程</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 0), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 1), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process (i == 3), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>分析代码片：</strong></p><p><strong>若是没有上面的 13、14 行代码，那么创建的就不止 3 个子进程；就是如下图片所示的结果；</strong> <font color=#FF0000  size=4 face="幼圆"><strong>使用 fork() 创建子进程的时候，是进行虚拟地址控件的拷贝（可在草稿纸上面画图理解，是一个地址块所有的代码和变量值都复制一份），他们的当时 i 是 1 的时候，创建的新的子进程的 i 也是 1，不会是初值 0；同理，当 i 是 2 时候创建新进程，其新进程的 i 值是 2，而不是 1；</strong></font> 但是禁止子进程创建孙进程，那么就可以使用 for() 循环生成多个兄弟子进程，且没有任何的孙进程。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_230510.png" width="80%"/ loading="lazy"><p><strong>运行结果：</strong></p><p>可以自己每运行行代码，标记一下 i 的值，以及此 i 的值时刻复制当前进程的虚拟地址空间，给新的子进程；所以 可以通过编号 i 的数值，来判断兄弟子进程的先后顺序；最后编号最大的那个，就是最初的父进程。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200325_233741.png" width="80%"/ loading="lazy"><br><h3 id="进程之间是否共享全局变量：🎃"><a href="#进程之间是否共享全局变量：🎃" class="headerlink" title="进程之间是否共享全局变量：🎃"></a>进程之间是否共享全局变量：🎃</h3><ul><li><p>读时共享（同一个物理内存的上面区域，内存地址为同一个变量）</p></li><li><p>写的时候复制</p></li><li><p><font color=#FF0000  face="幼圆">父子进程之间能否使用全局变量通信？</font></p><ul><li><font color=#FF0000  face="幼圆">不能。因为两个进程之间内存不共享</font>（读时共享，写时复制）</li></ul><p>代码验证，改写上面的代码，添加一个全局变量 int g_num = 200，进行验证：</p><p><a href="https://github.com/xmuli/linuxExample/tree/master/08_fork">代码下载 sharedGlobalvariable.cpp</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>      <span class="token keyword">int</span> g_num <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      pid_t pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//如果当前进程是子进程，就跳出此循环，不在进行 fork() 创建新的子进程</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          g_num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          g_num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          g_num <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a child process (i == 2), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          g_num <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this is a parent process (i == 3), pid = %d  ppid = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"g_nmu = %d\n"</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行截图：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200326_232753.png" width="90%"/ loading="lazy"><p>草稿图分析：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200326_233718.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="显示当前进程的状态-ps"><a href="#显示当前进程的状态-ps" class="headerlink" title="显示当前进程的状态 ps:"></a>显示当前进程的状态 ps:</h3><ul><li><code>ps aus</code> 显示不依赖于终端的进程（终端是用来和用户进行交互的）</li><li><code>ps aux | grep 查找的进程名</code> 使用管道查找指定的进程名称</li><li><code>ps ajx</code> 显示更多的进程信息； PID、PPID、PGID、SID（进程，父进程，组进程，会话）（会话就是多个组进程）</li><li><code>ps ajx | grep 查找的进程名</code> 若是没有找到，也会有一行显示信息，显示的是 grep 进程相关的信息</li></ul><br><h3 id="删除执行中的程序或工作-kill"><a href="#删除执行中的程序或工作-kill" class="headerlink" title="删除执行中的程序或工作 kill:"></a>删除执行中的程序或工作 kill:</h3><p>Linux kill命令用于删除执行中的程序或工作。</p><p>kill可将指定的信息送至程序。预设的信息为SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或jobs指令查看。</p><ul><li><code>kill -9 将被杀死的进程</code>  -9 为 杀死信号</li><li><code>kill -l</code> 显示所有，1-31 通常使用；32 和 33 没有； 34-51 号通常为系统预留</li></ul><p>使用 kill 命令之后，有一点困惑，使用 <code>kill -l</code> 命令之后；</p><ul><li><p>在 Ubuntu 18.4 显示如下， 和 MacOS 显示有区别， 有清楚的，可以在下面留言帮我解答一下也可以哦。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200327_144507.png" width="70%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200327_144548.png" width="80%"/ loading="lazy"></li><li><p><strong>只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。 下面是常用的信号：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HUP     <span class="token number">1</span>    终端断线INT     <span class="token number">2</span>    中断（同 Ctrl + C）QUIT    <span class="token number">3</span>    退出（同 Ctrl + <span class="token punctuation">\</span>）KILL    <span class="token number">9</span>    强制终止<span class="token environment constant">TERM</span>   <span class="token number">15</span>    终止CONT   <span class="token number">18</span>    继续（与STOP相反， fg/bg命令）STOP   <span class="token number">19</span>    暂停（同 Ctrl + Z）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><h3 id="exec-函数族-🎃："><a href="#exec-函数族-🎃：" class="headerlink" title="exec 函数族 🎃："></a>exec 函数族 🎃：</h3><p><strong>作用：</strong> <font color=#FF0000  size=4 face="幼圆"><strong>让父子进程执行不相干的操作；能够替换进程空间中源代码的 <code>.txt</code> 段；当前程序中调用另外一个应用程序 （调用 exec 之前，需要 fork ）；</strong></font></p><p><font color=#FF0000  size=4 face="幼圆"><strong>exec() 函数族， 也不要判断返回值：若是函数执行成功，不返回（.text 的代码立即被全部替换，后面的代码也不会执行）；若是执行失败，可以调用 perror(“xx 提示:”) 来打印错误信息，退出当前进程；</strong></font></p><br><h4 id="执行指定目录下的程序-execl"><a href="#执行指定目录下的程序-execl" class="headerlink" title="执行指定目录下的程序 execl():"></a>执行指定目录下的程序 execl():</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">execl</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/*, (char *)0 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>path:</strong> 需要执行的程序的绝对路径(推荐绝对路经)</p></li><li><p><strong>变参 arg：</strong> 要执行的程序的需要的参数</p><ul><li><strong>第一个 arg：</strong> 占位（内容随便写什么，但不可为空）</li><li><strong>后边的 arg：</strong> 命令的参数</li></ul></li><li><p><strong>参数写完之后：</strong> NULL （作用是哨兵，表示该命令的参数已经输入完毕）</p></li><li><p>一般是执行自己写的程序（也可以执行系统自带的命令）</p></li><li><p>写一个例子验证一下：<a href="https://github.com/xmuli/linuxExample/tree/master/09_exec">代码下载</a></p><ul><li><strong>代码如下：</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    pid_t pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建子进程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">execl</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> <span class="token string">"占位参数"</span><span class="token punctuation">,</span> <span class="token string">"-al"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//ls 程序使用子进程的地址空间</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token comment">//这段打印只会（父进程）被执行一遍。</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+++++i = %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>过程分析：</strong></p><p>第一段打印”—–i =” 内容，是只会被父进程执行一遍的，子进程不会执行该段代码（分析见上）；结束时候打印 “+++++i =” 内容时候，是只会执行一遍的，还是被父进程执行的，而子进程不执行 的原因是，当第 12 行的代码execl(“ls”) 执行结束之后，其子进程的虚拟地址空间的以用户区域的 .text 代码段的二进制代码被替换为 /bin/ls 这个程序的代码；其后面面也都是运行 ls 程序的代码内容。</p></li><li><p><strong>运行结果：</strong></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200327_150211.png" width="70%"/ loading="lazy"></li></ul></li></ul><br><h4 id="执行-PATH-目录下的程序-execlp"><a href="#执行-PATH-目录下的程序-execlp" class="headerlink" title="执行 PATH 目录下的程序 execlp():"></a>执行 PATH 目录下的程序 execlp():</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">execlp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">/*, (char *)0 */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>file:</strong> 需要执行的程序的名字</li><li><strong>变参 arg：</strong> 要执行的程序的需要的参数<ul><li><strong>第一个 arg：</strong> 占位（内容随便写什么，但不可为空）</li><li><strong>后边的 arg：</strong> 命令的参数</li></ul></li><li><strong>参数写完之后：</strong> NULL （作用是哨兵，表示该命令的参数已经输入完毕）</li><li>一般是执行系统自带的命令（也就是 /bin 下的程序）<ul><li>execlp 执行自定义程序的程序： file 参数绝对路径</li></ul></li></ul><br><h3 id="下载-系列地址："><a href="#下载-系列地址：" class="headerlink" title="下载/系列地址："></a>下载/系列地址：</h3><p><a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习进阶的路线图。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有些快乐是真的快乐吗？</title>
      <link href="posts/ce29b8ce/"/>
      <url>posts/ce29b8ce/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　 比如有些快乐是真的快乐吗？真的是我心底所渴望的快乐吗？还只是单单的，我觉得我做了这件事，所以我应该会感觉快乐？？？</p><span id="more"></span><p>​        <strong>二十多岁的困惑有很多： 比如有些快乐是真的快乐吗？真的是我心底所渴望的快乐吗？</strong> 还只是单单的，我觉得我做了这件事，所以我应该会感觉快乐？？？</p><p>​        在<a href="https://xmuli.blog.csdn.net/article/details/104735123">上一篇</a>中，简单的陈述了一下想法。这篇就换一个话题：有些快乐是真的快乐吗？是一时的快感？还是一瞬间的快乐？还是你内心长期渴望之后的，得到之后的快乐？</p><br><p>​        <strong>在购物方面；购买的东西一定是当下自己所需要的吗？以及购买后，它真的有带给我们纯正的快乐吗？</strong></p><p>​        在网线和 WiFi 连接了世界之后，获取信息变得异常容易；在各个 App 割据流量土地；各自沦为为孤岛的现在；启动 App 之后，看到的就是 <strong>大数据 + 算法</strong> 带来的 <strong>商业推荐；</strong>但这通常不是我们所希望看到的，<strong>在 “大量信息流 + 复杂优惠券 + 人为制造榜单 + 明星效应 + 网红带货”</strong> 一轮轮的轰炸我们的大脑，当浏览信息麻木的时候，点击购买只是一瞬间的冲动（而不是深思熟虑的和真的所需的购买）。</p><p>​        （也并非是说，只有有所需要才会去购买行为）：买东西可以带来的快乐有很多，有服务期间的享受、品牌价值的认可、工匠精湛的技艺的认可、生活所需的痛点解决、单纯消费的快乐等。。。<strong>重要的是基于自己的钱包决定购买。</strong>（以后有空再展开说）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_216622.JPG" width="15%"/ loading="lazy"><br><p>​        <strong>在日常生活上，对你厌恶的人进行的使绊子，时候真的会有如释重负，酣畅淋漓的快乐吗？这又是真的心灵的快乐吗？</strong> </p><p>​        和大学的室友（或者工作合租的），因长时间的琐碎摩擦，而产生的隔阂，又或者他人的一些不良嗜好自己无法容忍，使得彼此之间产生厌恶；故而打击报复，暗处使袢子，图一个快意恩仇的快感。</p><p>​        <strong>这种行为很难的评判，</strong> <strong>没有对错之分，人生数十载，你的人生你决定，所带的后后果都是自己承担；不管你愿不愿意。</strong>（世界的规则已经被先前的人给制定了）。但他人不悦你，他会转身就忘记了，可你却一直暗暗记于心，时刻提醒自己，自我生气，用他人的惩罚来伤害自己的身体？？？岂不是很亏？？？你可以暂时性的忘记，期间努力提升自己，当你能力提升了起来，个人境界也会改变了，到时候你会有更多的选择，慷慨大度忘记当初小事；或是解决旧事后忘记恩仇；或是和平谈起一笑泯恩仇；都由你选择。</p><img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_2138.JPG' width="15%" / loading="lazy"><br><p>​        <strong>在恋爱感情方面，无论你是有了 1 ：1、还是 1：n、还是 n : n 的情感；这些情愫都已经产生，它们带给你的是已经发生过的快乐？只是这种快乐，是真假难辨的快乐？</strong> </p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_213226.png" width="25%"/ loading="lazy"><br><p>​        对于这个。毕竟男人都是大猪蹄子；配上 呵呵， 女人。 谈到这个，毕竟就是剪不断，理还乱的一种感情。 如果你是一个单身狗，那么恭喜，你暂时处于安全区，但是你若是想要来到浅水区游玩，或者不慎跌落深水区，那都是没有遗憾的。毕竟有些事情，自己不去尝试一把，你都不知道它对你到底是天天的糖果🍬，还是砒霜☠️️。<strong>不过能够看到这里的，我想都是男的都是纯情坚定的痴心男，女的都是柔情似水的仙女。</strong></p><p>​        如果在交往比较短时间后，就发生了闭月羞花的事情？嗯、？？？这种事情本生就没有谁有资格评判什么！只要你能够对你做的决定负责，能够承担后果就好（很多时候后果并不可怕，也并非是什么不可承受之重）。</p><p>​        <strong>唯一需要判断的就是，你是感受到的是你侬我侬的快乐？还是被守护的快乐？还是有人值得你守护的快乐？还是单纯的希望希望有人陪伴你的快乐？还是你的 pua 实践成功的快乐？还是单纯的寻求但时间的快感的快乐？弄清楚自己心底到底是需要那种快乐？不去骗自己本心就好。</strong> 对于某些。。。，请给老实的宅男宅女们，留一块自留地，不要再破坏这个感情市场了。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_213213.png" width="25%"/ loading="lazy"><br><p>​        在这个方面去做自己，爱自己，去探寻自己心底的真正快乐，去试探着这片恋爱区域，它可能带给你惊喜和甜美的，也有可能是未知。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中man手册，阻塞和非阻塞，stat，文件操作和遍历，文件描述符复制dup()</title>
      <link href="posts/85526a5a/"/>
      <url>posts/85526a5a/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　讲解在 <code>Unix / Linux</code> 下，<code>man</code> 手册的使用；写了一个例子调用系统库函数来读写文本文件，和打印文件描述符；<strong>阻塞和非阻塞实际是文件的属性，而非标准输入输出的 I/O 函数的属性。</strong> 以及文件详细描述的 <code>stat</code> 命令和 <code>stat()</code> 函数的使用；文件属性相关的操作；文件夹遍历和创建、删除的相关函数，可能 <code>Linux</code> 有时候会调用到他们，现在实际上，更多的使用 Qt 的库来对文件进行读写操作；以及关于复制文件描述符的函数 <code>dup()</code> 函数的讲解</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14 </code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h3 id="man-手册的使用："><a href="#man-手册的使用：" class="headerlink" title="man 手册的使用："></a>man 手册的使用：</h3><ul><li><p><code>man 2 open</code> 在第二章里面，精确查找 open 函数</p></li><li><p><code>man man</code> 查看 man 手册的大致介绍 （Linux 下）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_171732.png" width="80%"/ loading="lazy"></li><li><p>mac 下安装中文 man 文档：<a href="https://www.cnblogs.com/himonkey/p/11853564.html">Mac配置中文 man 手册</a> </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200314_205616.png" width="70%"/ loading="lazy"></li></ul><br><h3 id="系统函数读写文件："><a href="#系统函数读写文件：" class="headerlink" title="系统函数读写文件："></a>系统函数读写文件：</h3><p><strong>如下为 Unix / Linux系统的库函数：</strong></p><ul><li><p><code>open()</code> ：打开文件</p></li><li><p><code>read()</code> ：对文件进行读操作</p></li><li><p><code>write()</code> ：对文件进行写操作</p></li><li><p><code>lseek()</code> ：移动文件指针；扩展文件大小（移动指针后，要进行一次写操作）</p><ul><li><p>文件指针移动到头部：lseek(fd, 0, SEEK_SET);</p></li><li><p>文件指针移动到尾部：lseek(fd, 0, SEEK_END);</p></li><li><p>文件指针移动到当前位置：lseek(fd, 0, SEEK_SUR);</p></li><li><p>文件大写为 100K, 扩展到 1000K:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件指针从文件尾部偏移 1000 大小，这部分用^@ 填充占位</span><span class="token function">wrire</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//随便写一个什么到文件中，进行一次写操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><code>全局变量 errno</code> ：对于调用系统函数对文件进行读写操作，函数会返回一个错误 int 类型的数值。而 errno 变量就是不同的错误返回值的含义打印出来（字符串），使得人类可以看懂。调用方法:  <code>perror(&quot;[注释信息: ]&quot;);</code></p></li></ul><br><h4 id="写一例子："><a href="#写一例子：" class="headerlink" title="写一例子："></a>写一例子：</h4><ul><li><p>将 <code>Linux</code> 系统的函数，调用 <code>open</code> 、<code>printf</code>、<code>read</code> 写一个例子：</p></li><li><p>编写代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fp <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fp2 <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"temp.txt"</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建文件时候，必须要有权限</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp = %d\n"</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fp2 = %d\n"</span><span class="token punctuation">,</span> fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[注释信息: ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//如果返回错误，会打印人类可读懂的出字符串</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fp2<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ret = %d\n"</span><span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编译：<code>g++-9 main.cpp -o main</code></p></li><li><p>运行：其中 fp 便是打开文件 hello.txt 的文件描述符（因为 0、1、2 被 stdin、stdout、stdout 占了，所以最小就是 3）；然后当打开第二个文本文件 temp.txt 的时候，其返回的文件描述符自然就是 4。关于文件描述符，详细原理解释可参考 <a href="https://github.com/xmuli/linuxExample/tree/master/07_sysfun">此篇</a> 。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_172958.png" width="50%"/ loading="lazy"></li></ul><p><strong>源码下载：</strong> <a href="https://github.com/xmuli/linuxExample/tree/master/07_sysfun">07_sysfun</a></p><br><h3 id="阻塞和非阻塞："><a href="#阻塞和非阻塞：" class="headerlink" title="阻塞和非阻塞："></a>阻塞和非阻塞：</h3><p>终端程序： bash 为前台程序，当执行 a.out 程序时候，bash 就成为了后台程序，a.out 成为了前台程序（代码执行到，等待输入）；当键盘输入完成，a.out 成为了后台程序，bash 成为了前台程序。</p><p>当输入的长度 大于 buf[10] 中的 10 时候， 多余的部分就会成为后面的命令输入。</p><p>将下面的两种，手动敲一遍。</p><p><font color=#FF0000 face="幼圆"><strong>阻塞</strong> 和 <strong>非阻塞</strong> 情况下，是文件的属性，而非标准输入输出的 I/O 函数的属性。</font></p><ul><li><p>普通文件：hello.cpp </p><ul><li>默认是非阻塞</li></ul></li><li><p>终端设备 /dev/tty （默认是阻塞）</p><ul><li>终端</li><li>管道</li><li>套接字</li></ul></li></ul><br><h3 id="stat-lstat-函数-："><a href="#stat-lstat-函数-：" class="headerlink" title="stat / lstat 函数 ："></a><font color=#FF0000 face="幼圆">stat / lstat 函数 ：</font></h3><ul><li><p>写一个小的程序，判断 <code>ls -l</code> 命令，基本可以实现 改用 switch()</p></li><li><p><code>lstat</code> 和 <code>stat</code> 函数对于链接 l 的区别不一样。</p><ul><li>lstat 读取的是链接文件， 本身的属性</li><li>stat 读取的是链接文件指向的文件的属性 （也被称呼：追踪，穿透）</li><li>fstat 第一个参数是指文件描述符</li></ul></li></ul><br><blockquote><p>#对应的 stat 命令：</p><p><font color=#FF0000  size=4 face="幼圆"><strong>作用：显示文件或文件系统的状态</strong></font></p><p>uinx: stat -x hello.txt</p><p>linux: stat hello.txt</p></blockquote><br><p>运行命令可以看到：hell.txt 文件的所有信息</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_165144.png" width="60%"/ loading="lazy"> <br><p>由 <code>ls -l hello.txt</code> 查看看的，前面的 <code>-rwxrwxrwx</code> 就是表示下图的 <strong>文件类型</strong> 、<strong>文件所有者权限</strong> 、<strong>文件所属组权限</strong> 、<strong>其他人对该文件的权限</strong> ，</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_171459.png" width="60%"/ loading="lazy"><br><ul><li>其用 含义就是如下：</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_163434.png" width="80%"/ loading="lazy"><ul><li><strong>其在代码里面，用 struct 所表示的为：</strong></li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_163416.png" width="70%"/ loading="lazy"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">st_ mode <span class="token operator">--</span> <span class="token number">16</span>位整数  <span class="token number">0</span><span class="token operator">-</span><span class="token number">2</span> bit<span class="token operator">--</span>其他人权限      <span class="token operator">-</span> S_IROTH  <span class="token number">00004</span>    读权限      <span class="token operator">-</span> S_IWOTH  <span class="token number">00002</span>    写权限      <span class="token operator">-</span> S_IXOTH  <span class="token number">00001</span>    执行权限      <span class="token operator">-</span> S_IRIvxO <span class="token number">00007</span>    掩码<span class="token punctuation">,</span>过滤 st_mode 中除其他人权限以外的信息      <span class="token number">3</span><span class="token operator">-</span><span class="token number">5</span> bit <span class="token operator">--</span>所属组权限      <span class="token operator">-</span>S_IRGRP   <span class="token number">00040</span>    读权限      <span class="token operator">-</span>S_IWGRP   <span class="token number">00020</span>    写权限      <span class="token operator">-</span>S_IXGRP   <span class="token number">00010</span>    执行权限      <span class="token operator">-</span>S_IRWXG   <span class="token number">00070</span>    掩码<span class="token punctuation">,</span>过滤 st_mode 中除所属组权限以外的信息    <span class="token number">6</span><span class="token operator">-</span><span class="token number">8</span> bit <span class="token operator">--</span>文件所有者权限      <span class="token operator">-</span>S_IRUSR   <span class="token number">00400</span>    读权限      <span class="token operator">-</span>S_IWUSR   <span class="token number">00200</span>    写权限      <span class="token operator">-</span>S_IXUSR   <span class="token number">00100</span>    执行权限      <span class="token operator">-</span>S_IRWXU   <span class="token number">00700</span>    掩码<span class="token punctuation">,</span>过滤 st_mode 中除文件所有者权限以外的信息。    <span class="token number">12</span><span class="token operator">-</span><span class="token number">15</span> bit <span class="token operator">--</span>文件类型      <span class="token operator">-</span>S_IFSOCK  <span class="token number">0140000</span>  套接字      <span class="token operator">-</span>S_IFLNK   <span class="token number">0120000</span>  符号链接<span class="token punctuation">(</span>软链接<span class="token punctuation">)</span>      <span class="token operator">-</span>S_IFREG   <span class="token number">0100000</span>  普通文件      <span class="token operator">-</span>S_IFBLK   <span class="token number">0060000</span>  块设备      <span class="token operator">-</span>S_IFDIR   <span class="token number">0040000</span>  目录      <span class="token operator">-</span>S_IFCHR   <span class="token number">0020000</span>  字符设备      <span class="token operator">-</span>S_IFIFO   <span class="token number">0010000</span>  管道      <span class="token operator">-</span>S_IFMT0   <span class="token number">0017000</span>  掩码<span class="token punctuation">,</span>过滤 st_mode 中除文件类型以外的信息         <span class="token comment">// 命令对应的函数 </span><span class="token keyword">int</span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Istat</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="文件属性相关的函数："><a href="#文件属性相关的函数：" class="headerlink" title="文件属性相关的函数："></a>文件属性相关的函数：</h3><ul><li><code>access()</code> 判断传入的文件，所具有的（读、写、执行、是否存）的权限</li><li><code>chmod()</code> 修改文件权限</li><li><code>chown()</code> 修改文件所有者和所属组</li><li><code>truncate()</code> 修改文件大小</li><li><code>^@</code> 文件空洞， 填充占位符号，实际就是 <code>\0</code></li></ul><br><h3 id="目录操作相关函数："><a href="#目录操作相关函数：" class="headerlink" title="目录操作相关函数："></a>目录操作相关函数：</h3><h4 id="目录操作相关函数：-1"><a href="#目录操作相关函数：-1" class="headerlink" title="目录操作相关函数："></a>目录操作相关函数：</h4><ul><li><code>rename()</code> 文件重命名</li><li><code>chdir()</code> 修改 <font color=#D0087E size=4 face="幼圆">当前进程（应用程序）</font>的路径；cd</li><li><code>getcwd()</code> 获取当前进程的工作目录；pwd</li><li><code>mkdir()</code> 创建目录；mkdir</li><li><code>rmdir()</code> 删除一个空目录；rm</li></ul><br><h4 id="目录遍历相关函数："><a href="#目录遍历相关函数：" class="headerlink" title="目录遍历相关函数： "></a><font color=#FF0000 face="幼圆">目录遍历相关函数： </font></h4><ul><li><code>opendir()</code> 打开一个目录</li><li><code>readdir()</code> 读目录（进入子目录，需要手动创建递归函数） </li><li><code>close()</code> 关闭目录</li></ul><br><h3 id="dup-dup2-fcntl-函数："><a href="#dup-dup2-fcntl-函数：" class="headerlink" title="dup / dup2 / fcntl 函数："></a><font color=#FF0000 face="幼圆">dup / dup2 / fcntl 函数：</font></h3><ul><li><code>dup()</code> 复制文件描述符</li><li><code>dup2()</code> 同上，形参不同（也会称为 参数 2：文件描述符的重定向）</li><li><code>fcntl()</code> 修改文件的状态标志</li></ul><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/github.svg" width="5%"/ loading="lazy"> <a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a> </p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中虚拟地址空间、pcb、文件描述符、C库函数工作流程、标准库和系统库函数区别</title>
      <link href="posts/29bf4f80/"/>
      <url>posts/29bf4f80/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　对于 <code>Linux</code> 学习过程中，有一些基本的知识点、关于系统，以下均是以 32 位系统上的为例的知识点：</p><ul><li><p>虚拟地址空间</p></li><li><p>pcb 和<strong>文件描述符</strong> 表</p></li><li><p>C 库 I/O 函数工作流程</p></li><li><p>标准 c 库函数和 linux 系统函数的区别</p></li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos20</code> 📎 <code>gcc/g++ 8.3</code> 📎 <code>gdb8.0</code> </p><br><h3 id="虚拟地址空间："><a href="#虚拟地址空间：" class="headerlink" title="虚拟地址空间："></a>虚拟地址空间：</h3><p><font color=#FF0000  size=4 face="幼圆"><strong>Linux 每一个运行的程序（进程）操作系统都会为其分配一个 0~4G 的地址空间（虚拟地址空间）。</strong> </font></p><p><font color=#FF0000  size=4 face="幼圆"><strong>进程：正在运行的程序。</strong>   </font></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_135017.png" width="90%"/ loading="lazy"><p>Linux 程序运行理解图：</p><ul><li>env 查看系统的环境变量</li><li>static int a = 0; 变量 a 仍然是放在 .bss 区域（其值为0）</li><li><strong>栈（局域变量）：</strong> 从高位 到 低位 生长</li><li><strong>堆（new ）：</strong>  从低位 到 高位 生长</li><li>MMU（内存管理单元）：将 虚拟地址空间（硬盘）的地址， 映射 到 物理内存 里面进行管理和操作。</li><li>没有必要研究，大致知道其原理即可。</li></ul><br><h3 id="pcb-和文件描述符表："><a href="#pcb-和文件描述符表：" class="headerlink" title="pcb 和文件描述符表："></a>pcb 和文件描述符表：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_135513.png" width="90%"/ loading="lazy"><ul><li><p><strong>进程控制块（PCB）：</strong> 进程在操作系统中都有一个户口，用于表示这个进程。这个户口操作系统被称为PCB（进程控制块），在 linux 中具体实现是 task_struct 数据结构。</p></li><li><p><strong>进程就是一个运行当中的程序。</strong> 我们在编辑器或 IDE 上写了十几个的.cpp 文本文件，它们组合起来就是一个工程。程序本来是存储在磁盘的,当我们需要执行它的时候，先把他读取到内存当中，再然后放入到寄存器中，最后让cpu执行程序，这个时候程序就变成了一个进程。</p></li><li><p> 每个进程运行的时候都会拿到最多 4G 的虚拟内存。其中 3G 是交给用户的,然后剩下的 1G 内存存储内核的东西了。</p></li><li><p><strong>文件描述符</strong> 表，系统最多可以打开 1024 个文件，其中 0、1、2 依次被 stdin、stdout、stderr 这个给使用了；且这个三个文件描述符所指向的对象都是当前终端，当前终端也可以被看为一个文件 <code>/dev/tty</code> （Linux 下一切皆文件）； 其余每打开一个文件，就会申请一个空的、最小的 文件描述符。其就是一个 int 型的数值。eg：此时使用系统 open() 函数打开一个 .txt 文件，printf() 打印其的返回值，会显示是 4。</p></li></ul><br><h3 id="C-库-I-O-函数工作流程："><a href="#C-库-I-O-函数工作流程：" class="headerlink" title="C 库 I/O 函数工作流程："></a>C 库 I/O 函数工作流程：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134219.png" width="90%"/ loading="lazy"><ul><li><p>由这个图可以思考一个问题🤔？那么是不是使用系统的读写函数，一定比使用 c 库的函数的效率一定高呢❓❓❓</p><p>当然不是；这个的看实际情况的。使用系统的读写函数，就是直接和硬件，直接在磁盘上面读写操作，速度肯定比直接在内存上面读写要慢的多。所以就引发内存块上有缓冲区的机制，内存上面写入多次之后，缓冲区满了后，再一次都写入到磁盘上面的文件。</p></li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134304.png" width="70%"/ loading="lazy"><br><h3 id="C-库函数与系统函数的关系："><a href="#C-库函数与系统函数的关系：" class="headerlink" title="C 库函数与系统函数的关系："></a>C 库函数与系统函数的关系：</h3> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134320.png" width="90%"/ loading="lazy"><ul><li>当调用标准的 C 库函数时候（<code># include &lt;stdio.h&gt;</code>）的 <code>printf()</code> 时候，它会在里面调用应用层的 <code>weite()</code> 函数，然后应用层实际又是调用 系统的 <code>sys_write()</code>，其系统层实际又是调用驱动层的写函数，而驱动层的函数当然是可以直接操作硬件的（比如显示器🖥）。最后就终端里面看到了一句输出语句函数。</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200322_134342.png" width="50%"/ loading="lazy"><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/github.svg" width="5%"/ loading="lazy"> <a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a> </p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中文件操作，软硬链接ln，用户权限chmod、chown，文件查找和检索find、grep，压缩gz，bz2</title>
      <link href="posts/ecefa455/"/>
      <url>posts/ecefa455/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong> 在 <code>Linux</code> 中，对于一些经常会使用到的命令（不做知识点的搬运工），作业个简短的记录📝，主要作为日后快速查找。还有对于操作系统的主次版本号的含义，<code>shell</code>，<code>bash</code> 的区别等简单做一个说明。主要有如下知识点：</p><ul><li>Linux 和 GNU 的区别</li><li>shell 和 bash 的区别</li><li>光标相关快捷键</li><li>文件目录的结构组成，</li><li>文件 / 文件夹操作命令 tree，pwd，mkdir，rm，cp，mv，touch</li><li>显示文件相关信息 cat，more，head，less，tial</li><li>软硬链接 ln -s</li><li>用户组，权限 chmod， chown</li><li>文件查找和检索文件内容 find，grep</li><li>压缩与解压 tar，rar，zip，gz，bz2</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="Linux-和-GNU-的区别与联系："><a href="#Linux-和-GNU-的区别与联系：" class="headerlink" title="Linux 和 GNU 的区别与联系："></a>Linux 和 GNU 的区别与联系：</h3><blockquote><p>Linux 发行版 == Linux 内核 + GNU 应用软件的操作系统</p></blockquote><ul><li>Linux 是类 Unix 计算机操作系统的统称</li><li>Linux 操作系统的内核也是 ”Linux“</li><li>Linux 这个单词只表示 Linux 内核，但是实际上人们已经习惯用 Linux 来形容基于 Linux 内核的整个操作系统</li><li>Linux 是由芬兰大学生 Linus Torvallds 1991 年编写</li></ul><ul><li>GNU 是一个类 Unix 操作系统。它是由多个应用程序、系统库、开发工具乃至游戏构成的程序集合。</li></ul><p><strong>总结：</strong></p><p>Linux 确实存在，许多人都在使用它，但它仅仅是所用系统的一部分。Linux是内核：它是为你运行的其他程序分配计算机资源的程序。内核是操作系统的基本部分，但是它自己并无用处；它只能在完整的操作系统框架下才能发挥作用。Linux一般和GNU操作系统一起使用：整个系统基本上就是GNU加上Linux，或叫GNU/Linux。所有被叫做“Linux”的发行版实际上是GNU/Linux发行版。</p><p><strong>详细参考：</strong></p><ul><li>Linux和GNU系统 <a href="https://www.gnu.org/gnu/linux-and-gnu.html">https://www.gnu.org/gnu/linux-and-gnu.html</a></li><li>GNU是什么？ <a href="https://www.gnu.org/">https://www.gnu.org</a></li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200321_163227.png" width="70%"/ loading="lazy"><br><h3 id="Linux-版本号和-PATH："><a href="#Linux-版本号和-PATH：" class="headerlink" title="Linux 版本号和 PATH："></a>Linux 版本号和 PATH：</h3><ul><li><p><strong>Linux 版本号：</strong> 主版本号是双数为 STL 支持 5 年；此版本.04 (4月份稳定版)，.10为 debug 版本</p></li><li><p><strong>环境变量：</strong> 一些列的路径，在 shell 里面输入的命令，系统就会在这个路径里面去查找该命令是否存在；若存在则执行对应的操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$HOME</span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><br><h3 id="shell-和-bash-的区别："><a href="#shell-和-bash-的区别：" class="headerlink" title="shell 和 bash 的区别："></a>shell 和 bash 的区别：</h3><ul><li><code>shell</code> –unix  全称：Bourne（伯恩） shell</li><li><code>bash</code>  –linux  首字母缩写：Bourne age shell</li></ul><p>解释一下，先有 Unix 系统，当时是以伯恩开发的和系统进行交互的软件，命名为 shell ；随后在出现 Linux （类 Unix）系统，伯恩想要将 shell 迁移到 Linux 上面，但是又不重名，所以称呼为 Bourne age shell，简写为 bash。</p><br><h3 id="shell-命令参数风格："><a href="#shell-命令参数风格：" class="headerlink" title="shell 命令参数风格："></a>shell 命令参数风格：</h3><p>命令参数，其实是由带 - 和不带 - 两种的。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200321_163207.png" width="90%"/ loading="lazy"><br><h3 id="光标相关快捷键："><a href="#光标相关快捷键：" class="headerlink" title="光标相关快捷键："></a>光标相关快捷键：</h3><ul><li><code>history</code> (crtl + p/n  向上向下遍历历史命令)</li><li><code>crtl + b/f</code> (前进后退：backward，forward)</li><li><code>crtl + a/e</code> (移动到首尾：begin，end)</li><li><code>crtl + u/k</code> (删除一行、删除光标到结尾)</li><li><code>crtl + h/d</code> （删除光标前面、后面一个字母： del）</li><li><code>Tab</code> 单词提示补全</li></ul><br><h3 id="Linux-目录文件结构："><a href="#Linux-目录文件结构：" class="headerlink" title="Linux 目录文件结构："></a>Linux 目录文件结构：</h3><ul><li><p>Linux 目录根文件/结构</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_000515.png" width="100%"/ loading="lazy"></li><li><p><code>/bin</code> 二进制文件，可执行文件，shell 命令</p></li><li><p><code>/dev</code> Linux 下一切皆文件，硬盘，显卡，显示器</p></li><li><p><code>/lib</code> 动态库</p></li><li><p><code>/met</code> 手动的挂载目录</p></li><li><p><code>/media</code> 外设的自动的挂载目录，如 U 盘</p></li><li><p><code>/root</code> 超级用户的家目录</p></li><li><p><code>/usr</code> -&gt;unix system resource</p></li><li><p>头文件，游戏，用户安装的程序（usr/local） <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_000631.png" width="100%"/ loading="lazy"></p></li><li><p><code>/etc</code> 存放配置文件</p></li><li><p><code>/opt</code> 安装第三方应用程序（如：火狐浏览器，notepadqq） </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_001451.png" width="60%"/ loading="lazy"></li><li><p><code>/home</code> Linux 操作系统下所有用户的家目录</p></li><li><p><code>/tmp</code> 存放临时文件，可能重启会被清除里面的文件</p></li><li><p><code>/boot</code> 系统开机的一些配置文件</p></li></ul><br><h3 id="文件目录相关的命令："><a href="#文件目录相关的命令：" class="headerlink" title="文件目录相关的命令："></a>文件目录相关的命令：</h3><ul><li><p><code>tree</code> 查看目录的内容</p><ul><li># -C 表示输出带彩色， -N 直接显示编码输出（中文不乱码）；<code>alias tree=&#39;tree -CN&#39;</code></li><li>-L 显示多少层的树</li></ul></li><li><p><code>ls</code> 查看文件或者目录</p><ul><li><p>-a 显示包括影隐藏文件， -l 每个文件的详细信息</p></li><li><p>-F 若是文件夹，则文件夹名字后加 / 标识</p></li><li><p>-h 以人类能够看得懂的方式显示，大小带单位</p><p><font color=#FF0000  size=4 face="幼圆"><strong>Linux 下文件夹永远是 4K；</strong> </font> 而 unix 下不是 4K。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_004653.png" width="90%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_004531.png" width="90%"/ loading="lazy"></li></ul></li><li><p><code>pwd</code> 显示完整当前路径 (printf work dir)</p></li><li><p><code>mkdir</code> 创建文件夹</p><ul><li>-p 循环创建多个文件夹</li></ul></li><li><p><code>touch</code> 创建文件</p><ul><li>若是文件已存在，则只更改文件创建时间</li></ul></li><li><p><code>rm</code> 删除目录（删除之后，不能恢复）</p><ul><li><p>-r 递归删除；-f 删除时候不弹出确认是否；-i 删除时候添加提示信息</p><p>rmdir （辣鸡，只能删除空文件夹）</p></li></ul></li><li><p><code>cp</code> 复制文件、文件夹</p><ul><li>cp fileA fileB (fileB 无，则创建；fileB 已存在，则覆盖)</li><li>cp dirA/ dirB <ul><li>dirB 无   (dirA 文件夹(含) 拷贝到 目录 dirB)</li><li>dirB 存在  (dirA 文件夹(不含) 拷贝到 目录 dirB)</li></ul></li></ul></li><li><p><code>mv</code> 移动、改名</p></li></ul><br><h3 id="显示文件内容命令-cat-more："><a href="#显示文件内容命令-cat-more：" class="headerlink" title="显示文件内容命令 cat / more："></a>显示文件内容命令 cat / more：</h3><ul><li><code>cat</code> 把文件内容打印到终端</li><li><code>more</code> 浏览文件（回车浏览下一行；空格翻页；q 退出）</li><li><code>less</code> 和 more 相似</li><li><code>head</code> 显示文件头部的前 10 行</li><li><code>tail</code> 显示文件尾部 10 行</li></ul><br><h3 id="软硬链接："><a href="#软硬链接：" class="headerlink" title="软硬链接："></a>软硬链接：</h3><h4 id="软连接-ln-s："><a href="#软连接-ln-s：" class="headerlink" title="软连接 ln -s："></a>软连接 ln -s：</h4><ul><li><p>可以看做 <strong>快捷方式</strong></p></li><li><p><code>ln -s 文件名 快捷方式名</code> (文件名带上绝对路劲，快捷方式任何地方都可用)</p></li><li><p>目录也可以创建快捷方式</p></li></ul><h4 id="硬链接-ln："><a href="#硬链接-ln：" class="headerlink" title="硬链接 ln："></a>硬链接 ln：</h4><ul><li><p><code>ln 文件名 硬链接名</code> （不需要带路径）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320220735.png" width="50%"/ loading="lazy"></li></ul><br><h3 id="用户权限，用户，用户组-chmod-chown："><a href="#用户权限，用户，用户组-chmod-chown：" class="headerlink" title="用户权限，用户，用户组 chmod / chown："></a>用户权限，用户，用户组 chmod / chown：</h3><blockquote><ul><li>目录必须要有执行权限，才可以进去</li><li>查看所属用户 cat /etc/passwd </li><li>查看所属于组 cat /etc/group （看到的 x 表示加密的密码）</li></ul></blockquote><ul><li><code>chmod</code> 修改文件或者目录的权限（同命令，在 Linux 可运行，在 Unix 不一定可以通过）；<strong>含义：u、g、o、a （usr/group/other/all）</strong> <ul><li>默认是使用 a(all) 所有人的权限<ul><li>eg: chmod ugo+x 20200314_205632.png (加减不同权限用逗号)</li><li>eg: chmod 777 20200314_205632.png （覆盖权限）</li><li>eg: chmod -440 20200314_205616.png （加减权限）</li></ul></li></ul></li><li><code>chown</code> 修改文件所有者或所属组<ul><li>chown 新的所有者 文件名</li><li>chown 新的所有者：新的组 文件名</li></ul></li><li><code>chgrp</code> 修改文件所属组(可以看做弱一点的命令)<ul><li>chgrp 新的组 文件名</li></ul></li></ul><br><h3 id="文件查找和检索-find-grep："><a href="#文件查找和检索-find-grep：" class="headerlink" title="文件查找和检索 find / grep："></a><font color=#FF0000 face="幼圆">文件查找和检索 find / grep：</font></h3><ul><li><p><font color=#FF0000 face="幼圆"><code>find</code> 根据文件属性查找</font></p><ul><li><p><strong>name、type、size、ctime/mtime/atime</strong> (创建、修改、访问日期)、<strong>mindepth/maxdepth/</strong> (最浅、深的层数)</p><ul><li>eg: find ~/ -name “*.txt”</li><li>eg: find . -type d (七种文件类型:f,d,l,p,s,c,b)</li><li>eg: find . -size +4k -size -1M <strong>(4k &lt; 文件大于 &lt; 1M)</strong></li><li>eg: find . -ctime -2 (在2天之内创建的文件)</li><li>eg: find . -maxdepth 2 (查找当前目录下最深为 2 层的目录)</li></ul></li><li><p>高级查找： </p><ul><li><p>find . -type d <font color=#FF0000 face="幼圆">-exec</font> ls -l <font color=#FF0000 face="幼圆">{} ;</font>  (ls -l 为具体的shell 命令，<strong>红色为固定格式</strong> )</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># exec 也可以替换为 ok; ok还会弹出确认提示，要加上分号</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type d -exec 命令 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  <span class="token function">find</span> <span class="token builtin class-name">.</span> -type d -ok 命令 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>find . -type d | xargs shell命令 (用管道效率比上面高)</p></li></ul></li></ul></li><li><p><font color=#FF0000 face="幼圆"><code>grep</code> 根据文件内容查找</font></p><ul><li>grep -r (有文件夹) ”查找的内容“ 搜索路径 -n； <strong>（-n 显示匹配到的字符串的行数）</strong><ul><li>eg: grep -r “aa” ~/Desktop -n  （文件夹可以没有）</li></ul></li></ul></li></ul><br><h3 id="压缩包的管理"><a href="#压缩包的管理" class="headerlink" title="压缩包的管理:"></a><font color=#FF0000 face="幼圆">压缩包的管理:</font></h3><h4 id="Linux-常见压缩格式-gz-bz2："><a href="#Linux-常见压缩格式-gz-bz2：" class="headerlink" title="Linux 常见压缩格式 .gz / .bz2："></a><font color=#FF0000 face="幼圆">Linux 常见压缩格式 .gz / .bz2：</font></h4><ul><li><code>.gz</code>   –gzip 工具压压缩出来的 </li><li><code>.bz2</code>  –bzip2 工具压压缩出来的</li><li>上面两个命令，只能压缩文件，很弱，一般是被间接使用</li></ul><h4 id="常用压缩命令-tar-rar-zip："><a href="#常用压缩命令-tar-rar-zip：" class="headerlink" title="常用压缩命令 tar / rar / zip："></a><font color=#FF0000 face="幼圆">常用压缩命令 tar / rar / zip：</font></h4><blockquote><p><font color=#FF0000 face="幼圆"><strong>总结：</strong> </font></p><p><strong>压缩：</strong></p><p>tar zcvf  压缩包名 原材料    （若含文件夹，压缩则需要 -r）</p><p>rar a     压缩包名 原材料    （若含文件夹，压缩则需要 -r）</p><p>zip       压缩包名 原材料    （若含文件夹，压缩则需要 -r）</p><p><strong>解缩：</strong></p><p>tar   zxvf 压缩包名 -C 解压路径</p><p>rar   x    压缩包名    解压路径</p><p>unzip      压缩包名 -d 解压路径</p></blockquote> <br><ul><li><code>tar</code>   <strong>–压缩解压</strong><ul><li><strong>参数：</strong><ul><li>c  -创建压缩文件</li><li>x  -释放压缩文件</li><li>v  -打印提示信息（可不写）</li><li>f  -指定压缩包的名字</li><li>z  -使用 gzip 压缩文件    -xxx.tar.gz</li><li>j  -使用 bzip 压缩该文件  -xxx.tar.bz2</li></ul></li><li><strong>压缩：</strong><ul><li>tar 参数 压缩包名字 原材料</li><li><code>tar zcvf test.tar.gz A b.txt c.png d.exe</code></li></ul></li><li><strong>解压：</strong><ul><li>-C  -解压目录</li><li><code>tar zxvf test.tar.gz -C 解压目录</code></li></ul></li></ul></li></ul><br><ul><li><code>rar</code>    <strong>–压缩解压</strong><ul><li><strong>压缩：</strong> <code>rar a 压缩包名(不用指定后缀) 压缩内容</code>  (有目录则加 -r 参数)</li><li><strong>解压：</strong> <code>rar x 压缩包名 解压目录</code></li></ul></li></ul><br><ul><li><code>zip</code>   <strong>–压缩解压</strong><ul><li><strong>压缩：</strong> <code>zip 参数 压缩包名 原材料</code></li><li><strong>解压缩：</strong> <code>unzip 解压文件 -d 解压路径</code></li></ul></li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/linuxExample">https://github.com/xmuli/linuxExample</a></p><p>欢迎 star 和 fork 这个系列的 linux 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QStyle/DTK重绘自定义需求控件,举例MySwitchButton</title>
      <link href="posts/70928d69/"/>
      <url>posts/70928d69/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　使用 QStyle / DTK 来实现重绘自定义需求控件（Qt-GUI 没有的），此处以重绘 ios 的控件 MySwitchButton 举例。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>uos 20 amd64 </code> 📎 <code>Qt 5.11.3</code></p><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.6</code></p><p>　　<strong>💻：</strong>  <code>win10 x64 </code> 📎 <code>Qt 5.9.8</code></p><br><h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><p>​    由<a href="https://blog.csdn.net/qq_33154343/article/details/104367878">上上一篇</a> 的文章，已理解 <code>QStyle</code> 、 <code>QCommonStyle</code> 和自定义的 <code>MyStyle</code> 三者的关系；对基础的风格控件也有所学习了；</p><p>​    和<a href="https://blog.csdn.net/qq_33154343/article/details/104537944">上一篇</a> 文章中，已理解如何使用 <code>MyStyle</code> 来绘画 Qt 自带的控件的风格，也有一次的实战重绘 <code>QCommonStyle</code> 里面的虚函数的项目；</p><p>​    在此，本文收尾，分析开源社区精神小伙们，它们是怎么对 DTK 的库进行重绘控件的。想到的新学习的框架，良心说，<strong>开源，真的能够学习到很多知识。</strong> 本篇重点介绍，如何创建一个新的自定义的控件，并且对其进行绘画，写一个简单工程，进行示范。</p><br><h3 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h3><p>​    因 <code>DTk/QStyle</code> 绘画的这个系列的完整性，得自己想一个比较好的控件啊，挠了挠头，iPhone 给了我感觉。<code>SwitchButton</code> 控件是 ios / Andiroad 📱的控件，不属于 PC 的控件，更非是 Qt 自带的一个控件；用电脑进行绘画，正好是妙哉。其 UI 原型图如下；功能就是点击一下，就会在 开/关 状态之间来回切换，且展示不同的颜色背景。</p>  <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_122334b.png' width="30%"/ loading="lazy"><br><h3 id="工程文件分析："><a href="#工程文件分析：" class="headerlink" title="工程文件分析："></a>工程文件分析：</h3><p>​    这里分析下，整个项目的构成组成；这里还是再次简单梳理一番：</p> <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_122343a.png' width="50%"/ loading="lazy"><ul><li><font color=#FE7207  size=4 face="Courier">QtStyleEx:</font><ul><li><font color=#FE7207  size=4 face="Courier">main.cpp:</font> 程序的总入口</li><li><font color=#FE7207  size=4 face="Courier">widget.h:</font> 显示 GUI 控件的背景窗口，继承于 QWidget 的<strong>类的声明</strong> </li><li><font color=#FE7207  size=4 face="Courier">widget.cpp:</font> 显示 GUI 控件的背景窗口，继承于 QWidget 的<strong>类定义</strong> </li><li><font color=#FE7207  size=4 face="Courier">mystyle.h:</font> 自定义风格（不属于 OS 自带风格）<strong>类的声明</strong> </li><li><font color=#FE7207  size=4 face="Courier">mystyle.cpp:</font> 自定义风格（不属于 OS 自带风格）的<strong>类定义</strong> </li><li><font color=#FE7207  size=4 face="Courier">myswitchbutton.h：</font> 自定义需求的控件<strong>类的声明</strong> </li><li><font color=#FE7207  size=4 face="Courier">myswitchbutton_p.h:</font> 自定义需求的控件类<strong>的数据类 Private 的声明</strong> </li><li><font color=#FE7207  size=4 face="Courier">myswitchbutton.cpp:</font> 自定义需求的控件<strong>类和变量 Private 类的实现</strong> </li></ul></li></ul><p>其中主要涉及的几个类如下：</p><br><h3 id="整理所有类的思维导图："><a href="#整理所有类的思维导图：" class="headerlink" title="整理所有类的思维导图："></a>整理所有类的思维导图：</h3><p>​    这上面的这些问题，顺其自然的找到它们对应的类。按照各自的功能划分，可以得到如下的思维导图。提纲挈领，写代码不会迷失在细节👩‍💻；</p> <img src='https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/axsrJt.png' width="100%"/ loading="lazy"><br><h3 id="实现流程图："><a href="#实现流程图：" class="headerlink" title="实现流程图："></a>实现流程图：</h3><p>​    有了 UI 设计图，和熟悉的功能，已经进行重绘控件；通过以上的代码逻辑流程，复盘一下 DTK 绘画自定义需求的源码思路。将自己的逻辑插入到 Qt 原本的绘画架构中，利用已经有的 QStyle 架构来进行绘画。梳理出来的流程图如下。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200320_115759.png" width="100%"/ loading="lazy"><br><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>​    其中代码实现的地方，有几处是的设计很精妙，可能我是才眼界初看开，很有必要的🌶出来单独讲；看着代码来实现复现一个功能很容易，属于借鉴技巧与学习，但容易让自己上钩思想懒惰，不去思考原理。有一些细节是含糊过去的地方；在正式实现之前，<strong>主要解决的问题有如下难点：</strong></p><ul><li>如何创建 MySwitchButton 控件？ 需要继承哪些类❓<ul><li>控件矩形大小❓</li><li>控件的 UI 样式❓</li><li>控件如何拆分部件 MyStyle::CE_SwitchButton ❓</li></ul></li><li>如何进入到绘画步骤中❓<ul><li>QPainter 如何绘画该小部件？进入到控件的 paintEvent()函数❓</li></ul></li><li>MyStyle 如何区分 Qt 原生控件和自定义的控件❓<ul><li>如何增加自定义枚举 CE_ , SE_ , PM_ , PE_ 等❓</li><li>如何区分重绘画的控件是 Qt 自带的还是自定义枚举元素❓</li></ul></li><li>以及 MyStyle 如何调用这些重载的函数❓</li></ul><p>​    上面👆这些想的清楚了，那么这个架构也清楚了很多。也知晓了绘画的流程。</p><br><h4 id="添加自定义的枚举："><a href="#添加自定义的枚举：" class="headerlink" title="添加自定义的枚举："></a>添加自定义的枚举：</h4><p>​    这里新增加的枚举，是属于 MyStyle:: , 而非 QStyle:: 范围。</p><p>且要从 <code>CE_CustomBase</code> = <code>QStyle::CE_CustomBase + 0xf00000</code> 开始，新的枚举按照 int 类型依次加一。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//这里新增加的枚举，是属于 MyStyle:: , 而非 QStyle:: 范围</span>    <span class="token keyword">enum</span> <span class="token class-name">ControlElement</span> <span class="token punctuation">&#123;</span>        CE_SwitchButton <span class="token operator">=</span> QStyle<span class="token operator">::</span>CE_CustomBase <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                   <span class="token comment">//switchButton 控件</span>        CE_CustomBase <span class="token operator">=</span> QStyle<span class="token operator">::</span>CE_CustomBase <span class="token operator">+</span> <span class="token number">0xf00000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="重写-QCommonStyle-的虚函数："><a href="#重写-QCommonStyle-的虚函数：" class="headerlink" title="重写 QCommonStyle 的虚函数："></a>重写 QCommonStyle 的虚函数：</h4><p>​    这里的快捷方式创建的枚举,都是不带QStyle::， 但是快捷方式的定义是带是QStyle:: , 此处声明的地方必须加上 QStyle::，后面改写更复杂的得写上MyStyle:: 因添加自定义的枚举。</p><p>​    这里 override 的虚函数，只能够调用旧有的  QStyle:: 的函数。主要用来绘画 Qt 、 自定义新增 的控件枚举。</p><p>​    后面改写更复杂的得写上MyStyle:: 因添加自定义的枚举  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> QRect <span class="token function">subElementRect</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>SubElement subElement<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawComplexControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> QSize <span class="token function">sizeFromContents</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ContentsType ct<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QSize <span class="token operator">&amp;</span>contentsSize<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">polish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> override<span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">unpolish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> override<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="内敛函数调用-MyStyle-强制转换为-QStyle-调用："><a href="#内敛函数调用-MyStyle-强制转换为-QStyle-调用：" class="headerlink" title="内敛函数调用 MyStyle:: 强制转换为 QStyle:: 调用："></a>内敛函数调用 MyStyle:: 强制转换为 QStyle:: 调用：</h4><p>​    新增加的枚举属 MyStyle:: , 之能够在此内敛函数里面调用；主要用来绘画 自定义新增 的控件枚举 –&gt; 实际调用在 下面的 virtual 里面绘画。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">//声明如下：</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//定义如下：</span><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>QStyle<span class="token operator">::</span>PrimitiveElement<span class="token operator">></span><span class="token punctuation">(</span>pe<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>QStyle<span class="token operator">::</span>ControlElement<span class="token operator">></span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="设计静态函数同名接口让-MyStylrHelp-调用："><a href="#设计静态函数同名接口让-MyStylrHelp-调用：" class="headerlink" title="设计静态函数同名接口让 MyStylrHelp 调用："></a>设计静态函数同名接口让 MyStylrHelp 调用：</h4><p>​    static 函数，供 MyStylrHelp 调用 [用来绘画自增加的控件枚举]。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">//声明如下：</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span>style<span class="token punctuation">,</span> MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span>style<span class="token punctuation">,</span> MyStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//定义如下：</span><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span>style<span class="token punctuation">,</span> MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//没有使用到，因为具体的设计因为每个人的思路设计不同，决定的具体的绘画地方也不一样；这里我是放到 重写的虚函数里面，和绘画 Qt 的虚函数的框架里面一起绘画</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="辅助类-MyStyleHelp-，-区分绘画控件："><a href="#辅助类-MyStyleHelp-，-区分绘画控件：" class="headerlink" title="辅助类 MyStyleHelp ， 区分绘画控件："></a>辅助类 MyStyleHelp ， 区分绘画控件：</h4><p>​    辅助类 MyStyleHelp ， 帮助区分绘画到底是绘画 MyStyle::PrimitiveElement 还是，它的类的实现如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStyleHelp</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">inline</span> <span class="token function">MyStyleHelp</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyle<span class="token operator">*</span> style <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">const</span> QStyle<span class="token operator">*</span> m_qStyle<span class="token punctuation">;</span>    <span class="token keyword">const</span> MyStyle<span class="token operator">*</span> m_myStyle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    其中放一个函数的实现，会简单发现这个 三目表达式，很是精华，属于一段点睛之笔；设计上面，既可以专门绘画自定义的新增加的控件，也可以绘画 Qt 的控件；有着很好的扩展性和代码的健壮性。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyleHelp</span><span class="token operator">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    m_myStyle <span class="token operator">?</span> m_myStyle<span class="token operator">-></span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>pe<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span>              <span class="token operator">:</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">drawPrimitive</span><span class="token punctuation">(</span>m_qStyle<span class="token punctuation">,</span> pe<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="MyStylePainter-画家，在指定的“画板”上绘画："><a href="#MyStylePainter-画家，在指定的“画板”上绘画：" class="headerlink" title="MyStylePainter 画家，在指定的“画板”上绘画："></a>MyStylePainter 画家，在指定的“画板”上绘画：</h4><p>​    其直接继承于 class MyStylePainter : public QPainter；本也可以不这样再单独设计一个画家类，为了展现此架构的可扩展性，此处会再封装一下，是的分风格更为统一。其类的设计如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStylePainter</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QPainter</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyStylePainter</span><span class="token punctuation">(</span>QWidget<span class="token operator">*</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token operator">:</span>    QWidget<span class="token operator">*</span> m_widget<span class="token punctuation">;</span>    QStyle<span class="token operator">*</span> m_qStyle<span class="token punctuation">;</span>    MyStyleHelp m_myStyleHelp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面，相反，我觉得最重要的除了三个成员变量之外，就是这个构造函数，里面调用父类的函数 <code>QPainter::begin(w);</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MyStylePainter</span><span class="token operator">::</span><span class="token function">MyStylePainter</span><span class="token punctuation">(</span>QWidget<span class="token operator">*</span> w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_widget <span class="token operator">=</span> w<span class="token punctuation">;</span>    m_qStyle <span class="token operator">=</span> w<span class="token operator">-></span><span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_myStyleHelp<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>m_qStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QPainter</span><span class="token operator">::</span><span class="token function">begin</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//是调用父类的 begin(), 调试半天才发现</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="控件-MySwitchButton-设计："><a href="#控件-MySwitchButton-设计：" class="headerlink" title="控件 MySwitchButton 设计："></a>控件 MySwitchButton 设计：</h4><p>​    作为新的控件，使用 xxx 和它的数据类 xxxPrivate 进行构建，两个类之间依靠宏 Q_D 和 Q_Q 来进行互相的调用；</p><ul><li>MySwitchButton &amp;&amp; MySwitchButtonPrivate</li><li>Q_D(MySwitchButton) &amp;&amp; Q_Q(MySwitchButton)</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MySwitchButtonPrivate</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MySwitchButton</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QAbstractButton</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">MySwitchButton</span><span class="token punctuation">(</span>QWidget<span class="token operator">*</span> parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">MySwitchButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> QSize <span class="token function">sizeHint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span> override<span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">initStyleOption</span><span class="token punctuation">(</span>QStyleOptionButton <span class="token operator">*</span>opt<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token function">Q_DECLARE_PRIVATE</span><span class="token punctuation">(</span>MySwitchButton<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​    <strong>这里的自定义控件， 在 paintEvent 函数里面，通过画笔进行绘画，与 MyStyle::CE_SwitchButton 关联上。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MySwitchButton</span><span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>    QStyleOptionButton opt<span class="token punctuation">;</span>    <span class="token function">initStyleOption</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    MyStylePainter <span class="token function">painter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    painter<span class="token punctuation">.</span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token operator">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>    painter<span class="token punctuation">.</span><span class="token function">drawControl</span><span class="token punctuation">(</span>MyStyle<span class="token operator">::</span>CE_SwitchButton<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//重点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><p>​    附上一张完整的 gif 的动图：当然是重点看的 switchButton 控件效果，咳咳，👀 不要跟着鼠标乱动。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200227175734.gif" width="90%"/ loading="lazy"><br><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample03/QtStyleEx">QtExample03</a></p><p>欢迎 star 和 fork 这个系列的 qt/dtk 学习，附学习由浅入深的目录。</p><br><h3 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章:"></a>系列文章:</h3><ol><li><a href="https://blog.csdn.net/qq_33154343/article/details/104367878">QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104537944">QStyle/DTK重绘Qt-GUI已有控件,举例QScrollBar</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104987446">QStyle/DTK重绘自定义需求控件,举例MySwitchButton</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gdb调试器的使用，初探全貌</title>
      <link href="posts/9157b0d0/"/>
      <url>posts/9157b0d0/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 Mac 下安装和调用 gdb 调试程序。和 gdb 一些常用的使用参数含义。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>gcc/g++ 9.2.0</code> 📎 <code>gdb8.3</code></p><br><h3 id="在-Mac-安装-gdb-程序："><a href="#在-Mac-安装-gdb-程序：" class="headerlink" title="在 Mac 安装 gdb 程序："></a>在 Mac 安装 gdb 程序：</h3><p>在 Linux 下面安装gdb 真的 so 容易； 但是在 Mac 上面，尤其是高版本的，安装过程中就会遇到各种坑，亲自把所有的坑都踩了一遍，安装教程如文：</p><p><a href="https://blog.csdn.net/qq_33154343/article/details/104784641">在MacOS10.14.6安装最新gdb8.3的详细教程，含可能遇到的所有坑(网上最新教程)</a></p><br><h4 id="编译程序："><a href="#编译程序：" class="headerlink" title="编译程序："></a>编译程序：</h4><p>沿用前面的项目测试测试代码 <a href="https://github.com/xmuli/linuxExample/tree/master/06_gdb">06_gdb</a>，执行命令 <code>g++-9 *.cpp -o mainApp -g</code> 生成带有调试信息的可执行文件 mainApp。 （对 C / C++ 程序的调试，需要在编译前就加上-g选项:）</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200315_175719.png" width="90%"/ loading="lazy"><br><h4 id="运行调试："><a href="#运行调试：" class="headerlink" title="运行调试："></a>运行调试：</h4><p>运行 <code>sudo gdb mainApp</code> 对可执行程序进行调试。</p><br><h3 id="gdb-介绍："><a href="#gdb-介绍：" class="headerlink" title="gdb 介绍："></a>gdb 介绍：</h3><p>GDB 是一个由 GNU 开源组织发布的、UNIX / LINUX 操作系统下的、<strong>基于命令行的</strong> 、功能强大的程序<strong>调试工具。</strong>  </p><br><h3 id="gdb交互命令："><a href="#gdb交互命令：" class="headerlink" title="gdb交互命令："></a>gdb交互命令：</h3><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p><br><h4 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h4><ul><li><code>run</code>：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li><li><code>continue</code> （简写c ）：继续执行，到下一个断点处（或运行结束）</li><li><code>next</code>：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li><li><code>step</code> （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li><li><code>until</code>：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li><li><code>until + 行号</code>： 运行至某行，不仅仅用来跳出循环</li><li><code>finish</code>： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li><li><code>call 函数(参数)</code>：调用程序中可见的函数，并传递“参数”，如：call gdb_test(55)</li><li><code>quit</code>：简记为 q ，退出gdb</li></ul><br><h4 id="设置断点："><a href="#设置断点：" class="headerlink" title="设置断点："></a>设置断点：</h4><ul><li><p><code>break n</code> （简写b n）:在第n行处设置断点</p><p>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）</p></li><li><p><code>b fn1 if a＞b</code>：条件断点设置</p></li><li><p><code>break func</code>（break缩写为b）：在函数func()的入口处设置断点，如：break cb_button</p></li><li><p><code>delete 断点号n</code>：删除第n个断点</p></li><li><p><code>disable 断点号n</code>：暂停第n个断点</p></li><li><p><code>enable 断点号n</code>：开启第n个断点</p></li><li><p><code>clear 行号n</code>：清除第n行的断点</p></li><li><p><code>info b</code> （info breakpoints） ：显示当前程序的断点设置情况</p></li><li><p><code>delete breakpoints</code>：清除所有断点：</p></li></ul><br><h4 id="查看源代码："><a href="#查看源代码：" class="headerlink" title="查看源代码："></a>查看源代码：</h4><ul><li><code>list</code> ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li><li><code>list 行号</code>：将显示当前文件以“行号”为中心的前后10行代码，如：list 12</li><li><code>list 函数名</code>：将显示“函数名”所在函数的源代码，如：list main</li><li><code>list</code> ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li></ul><br><h4 id="打印表达式："><a href="#打印表达式：" class="headerlink" title="打印表达式："></a>打印表达式：</h4><ul><li><code>print</code> 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li><li><code>print a</code>：将显示整数 a 的值</li><li><code>print ++a</code>：将把 a 中的值加1,并显示出来</li><li><code>print name</code>：将显示字符串 name 的值</li><li><code>print gdb_test(22)</code>：将以整数22作为参数调用 gdb_test() 函数</li><li><code>print gdb_test(a)</code>：将以变量 a 作为参数调用 gdb_test() 函数</li><li><code>display 表达式</code>：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li><li><code>watch 表达式</code>：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li><li><code>whatis</code> ：查询变量或函数</li><li><code>info function</code>： 查询函数</li><li><code>扩展info locals</code>： 显示当前堆栈页的所有变量</li></ul><br><h4 id="查询运行信息："><a href="#查询运行信息：" class="headerlink" title="查询运行信息："></a>查询运行信息：</h4><ul><li><code>where/bt</code> ：当前运行的堆栈列表；</li><li><code>bt backtrace</code> 显示当前调用堆栈</li><li><code>up/down</code> 改变堆栈显示的深度</li><li><code>set args 参数</code>:指定运行时的参数</li><li><code>show args</code>：查看设置好的参数</li><li><code>info program</code>： 来查看程序的是否在运行，进程号，被暂停的原因。</li></ul><br><h4 id="分割窗口："><a href="#分割窗口：" class="headerlink" title="分割窗口："></a>分割窗口：</h4><ul><li><code>layout</code>：用于分割窗口，可以一边查看代码，一边测试：</li><li><code>layout src</code>：显示源代码窗口</li><li><code>layout asm</code>：显示反汇编窗口</li><li><code>layout regs</code>：显示源代码/反汇编和CPU寄存器窗口</li><li><code>layout split</code>：显示源代码和反汇编窗口</li><li><code>Ctrl + L</code>：刷新窗口</li></ul><br><p><strong>注解：</strong></p><p>交互模式下直接回车的作用是重复上一指令，对于单步调试非常方便；</p><br><h3 id="更强大的工具-cgdb："><a href="#更强大的工具-cgdb：" class="headerlink" title="更强大的工具 cgdb："></a>更强大的工具 cgdb：</h3><p><code>cgdb</code> 可以看作 gdb 的界面增强版,用来替代 gdb 的 gdb -tui。cgdb 主要功能是在调试时进行代码的同步显示，这无疑增加了调试的方便性，提高了调试效率。界面类似 vi，符合 unix / linux 下开发人员习惯; 如果熟悉 gdb 和 vi，几乎可以立即使用 cgdb。</p><br><p><strong>转载于：</strong></p><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/gdb.html">gdb 调试利器</a></p><br><h3 id="常用自我检测："><a href="#常用自我检测：" class="headerlink" title="常用自我检测："></a>常用自我检测：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//测试回忆 <span class="token number">2020</span>-03-15：brew和brew cask有什么区别？g++ -g启动 gdb mainApplshow ?size<span class="token builtin class-name">set</span> ?size <span class="token number">20</span>   设置一次显示多少行代码b 断点i b      <span class="token punctuation">(</span>info<span class="token punctuation">)</span>  查看断点信息d <span class="token number">2</span> <span class="token number">3</span> <span class="token punctuation">(</span>d <span class="token number">4</span>-11<span class="token punctuation">)</span> 删除断点dis/ena <span class="token number">4</span>  设置/取消 无效断点b <span class="token number">17</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> 设置条件断点ptype b 查看变量类型p a 查看变量的值（print）n 执行下一行<span class="token punctuation">(</span>next<span class="token punctuation">)</span>  后面一直按回车display a 每走一行代码，都显示出变量 a 的值i display 查看所有的显示变量undisplay <span class="token number">1</span> 不再显示变量的值（先运行 i display）c 一次运行多行 <span class="token punctuation">(</span>continue<span class="token punctuation">)</span>s 进入到函数体 <span class="token punctuation">(</span>step<span class="token punctuation">)</span>start 停在 <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 的地方r 停在了第一个断点 <span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token builtin class-name">set</span> val i <span class="token operator">=</span> <span class="token number">5</span> 设置循环变量的值<span class="token keyword">until</span> 跳出 <span class="token keyword">for</span> 循环 （此for 里面没有断点）finsish 跳出函数体内部 （里面也没有断点）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github+coding开启双线程搭建博客，提高访问速度</title>
      <link href="posts/2404cfdc/"/>
      <url>posts/2404cfdc/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　使用 <code>hexo</code> + <code>githubPage</code> + <code>codingPage</code> 开启双线程；使用同一个域名 <code>xmuli.tech</code> 访问，效果为：</p><ul><li>国内用户 IP 访问国内 coding 服务器</li><li>国外用户 IP 访问国外 github 服务器</li></ul><p>使得访问博客速度哒哒提高。本博客已经搭建成功。本篇作为记录，作为日后备查。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><ul><li><strong>域名：</strong> 付费极低<ul><li><strong>域名解析：</strong> 免费</li></ul></li><li><strong>github：</strong> 免费</li><li><strong>coding：</strong> 免费</li><li><strong>hexo：</strong> 免费</li></ul><br><h3 id="hexo-githubPage-搭建："><a href="#hexo-githubPage-搭建：" class="headerlink" title="hexo + githubPage 搭建："></a>hexo + githubPage 搭建：</h3><ul><li><strong>maupassant 主题：</strong></li><li><a href="https://hexo.io/zh-cn/">Hexo</a><ul><li><a href="https://www.haomwei.com/">屠城</a> </li><li><a href="ifmet.cn/2019/06/09/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84Hexo%E6%90%AD%E5%BB%BA%EF%BC%8C%E4%B8%BB%E9%A2%98maupassant/">个人博客的Hexo搭建，主题maupassant</a> </li></ul></li></ul><ul><li><p><strong>bluelake 主题：</strong></p><ul><li>主题下载: <a href="https://github.com/chaooo/hexo-theme-BlueLake">https://github.com/chaooo/hexo-theme-BlueLake</a></li><li>使用教程: <a href="https://chaooo.github.io/article/20161229.html">https://chaooo.github.io/article/20161229.html</a></li></ul></li></ul><br><h3 id="hexo-codingPage-搭建："><a href="#hexo-codingPage-搭建：" class="headerlink" title="hexo + codingPage 搭建："></a>hexo + codingPage 搭建：</h3><ul><li><p><a href="https://help.coding.net/docs/devops/cd/static-website.html#%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99">coding 如何搭建静态网站？</a></p></li><li><p><a href="https://support.qq.com/products/104149/faqs/61222">Pages 迁移至新版 CODING</a> </p></li></ul><br><h3 id="设置域名解析："><a href="#设置域名解析：" class="headerlink" title="设置域名解析："></a>设置域名解析：</h3><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/104727225">刚买的域名怎么绑定自己博客？再白嫖一年的SSL，使用https访问博客</a> </li><li><a href="https://blog.csdn.net/qq_36759224/article/details/100879609">Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS10.14.6安装最新gdb8.3的详细教程，含可能遇到的所有坑(网上最新教程)</title>
      <link href="posts/a75b2ced/"/>
      <url>posts/a75b2ced/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 mac 使用 gdb 调试程序时候，会遇到报错如下，本文就是专门解决这个问题的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> runStarting program: /Users/muli/project/github/linuxExample/06_gdb/mainApp Note: this version of macOS has System Integrity Protection.Because `startup-with-shell' is enabled, gdb has worked around this bycaching a copy of your shell.  The shell used by <span class="token string">"run"</span> is now:    /Users/muli/Library/Caches/gdb/bin/zshUnable to <span class="token function">find</span> Mach task port <span class="token keyword">for</span> process-id <span class="token number">20050</span>: <span class="token punctuation">(</span>os/kern<span class="token punctuation">)</span> failure <span class="token punctuation">(</span>0x5<span class="token punctuation">)</span>. <span class="token punctuation">(</span>please check gdb is codesigned - see taskgated<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 MacOS 10.14.6 的系统下，发现安装 gdb 8.3 （当前最新） 的坑不是一般的多，那真真的多。鉴于网上的教程都是过时的，且按照某一篇， 你是不可能顺利运行安装成功的。所以浪费我昨天一个晚上解决这个问题（我的时间也很宝贵的），今天又花费一晚上时间，完成这篇图文并茂的的安装教程。作为一个日后的记录和给后来者一个方便。</p><p>也<strong>是目前网上最新最详细的在 mac 安装 gdb 的教程</strong> ；其中大概思路：</p><ul><li>创建整证书，证书授权</li><li>关闭 SIP 安全防护，重启系统；</li><li>sudo 运行 gdb 调试；</li><li>kill 卡死进程， 再次重新 gdb 调试；</li><li>成功</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="笔记本系统环境："><a href="#笔记本系统环境：" class="headerlink" title="笔记本系统环境："></a>笔记本系统环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> </p><br><h3 id="查看是否安装-gdb"><a href="#查看是否安装-gdb" class="headerlink" title="查看是否安装 gdb:"></a>查看是否安装 gdb:</h3><ul><li><p>执行 <code>brew search gdb</code> ，搜索 brew 仓库：</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185237.png" width="70%"/ loading="lazy"></li></ul><br><h3 id="命令-brew-安装-gdb："><a href="#命令-brew-安装-gdb：" class="headerlink" title="命令 brew 安装 gdb："></a>命令 brew 安装 gdb：</h3><ul><li><p>执行 <code>brew install gdb</code> 使用 brew 工具安装 gdb （默认最新），等待安装完毕；</p></li><li><p>执行 <code>which gdb</code> 查看安装的路径为 <code>/usr/local/bin/gdb</code> </p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185446.png" width="70%"/ loading="lazy"></li><li><p>执行 <code>gdb -v</code> 查看的 gdb 安装版本，版本为 <code>8.3</code></p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185458.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="创建系统证书："><a href="#创建系统证书：" class="headerlink" title="创建系统证书："></a>创建系统证书：</h3><ul><li><p>打开 <strong>钥匙串访问</strong> </p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185515.png" width="20%"/ loading="lazy"></li><li><p>左上角进入 <code>钥匙串访问 - 证书助理 - 创建证书</code></p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185639.png" width="50%"/ loading="lazy"></li><li><p>创建证书， 名称随意，如 gdb_codesigned ，其中选择为 <strong>自签名根证书</strong> ，<strong>代码签名</strong> ，还有✅ <strong>让我覆盖这些默认值</strong> </p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185816.png" width="50%"/ loading="lazy"></li><li><p>后面一路<strong>点击下一步，不用做任何修改</strong> ，贴出来中间的过程图</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185829.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185835.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185840.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185844.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185849.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185854.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185858.png" width="50%"/ loading="lazy"></li><li><p>一直到这步骤，进行修改，选择 “<strong>系统</strong> “， </p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185915.png" width="50%"/ loading="lazy"></li><li><p>证书创建成功 （若是失败，参考下面解决方案）</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_191146.png" width="50%"/ loading="lazy"></li></ul><br><h3 id="修改证书："><a href="#修改证书：" class="headerlink" title="修改证书："></a>修改证书：</h3><ul><li><p><strong>双击</strong> 证书打开， 勾选使用 <strong>始终信任</strong> ，然后关闭此此窗口，会自动保存修改</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_191412.png" width="70%"/ loading="lazy"></li></ul><br><h3 id="对证书授权："><a href="#对证书授权：" class="headerlink" title="对证书授权："></a>对证书授权：</h3><ul><li><p>执行 <code>codesign -fs gdb_codesigned /usr/local/bin/gdb</code> 命令，<strong>给证书授权</strong>；在执行 <code>echo &quot;set startup-with-shell off&quot; &gt;&gt; ~/.gdbinit</code> ， <strong>关闭 MacOS 系统的 SIP 安全验证</strong> ；设置完这咯爱那个步骤后， <strong>要重启电脑</strong> ，使得配置生效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign -fs gdb_codesigned /usr/local/bin/gdb<span class="token builtin class-name">echo</span> <span class="token string">"set startup-with-shell off"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_211131.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="验证-gdb-证书创建，关闭-SIP-成功："><a href="#验证-gdb-证书创建，关闭-SIP-成功：" class="headerlink" title="验证 gdb 证书创建，关闭 SIP 成功："></a>验证 gdb 证书创建，关闭 SIP 成功：</h3><ul><li><p>使用一个小的 c++ 项目测试下，<a href="https://github.com/touwoyimuli/linuxExample/tree/master/05_makefile">下载地址</a>，执行 <code>g++-9 *.cpp -o mainApp -g</code>  生成可调试的<strong>可执行程序</strong> mainApp  ，然后运行 <code>sudo gdb mainApp</code></p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_192435.png" width="70%"/ loading="lazy"></li></ul><br><hr><h3 id="期间可能会遇到的奇怪的问题？"><a href="#期间可能会遇到的奇怪的问题？" class="headerlink" title="期间可能会遇到的奇怪的问题？"></a>期间可能会遇到的奇怪的问题？</h3><h4 id="遇到证书创建失败？"><a href="#遇到证书创建失败？" class="headerlink" title="遇到证书创建失败？"></a>遇到证书创建失败？</h4><ul><li><p>若是失败，看到下图提示：</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_185938.png" width="50%"/ loading="lazy"></li></ul><ul><li><p>解决方法：则重头创建一次系统证书，最后这一步选择 “<strong>登录</strong>” ，编绘创建成功。</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/image-20200310191044729.png" width="50%"/ loading="lazy"></li><li><p>且证书创建成功后，需要手动将其从登录区域， 移动到系统区域</p></li></ul> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_191315.png" width="70%"/ loading="lazy"><br><h4 id="遇到-Unable-to-find-Mach-task-port-for-process-id-2358-os-kern-failure-0x5-："><a href="#遇到-Unable-to-find-Mach-task-port-for-process-id-2358-os-kern-failure-0x5-：" class="headerlink" title="遇到 Unable to find Mach task port for process-id 2358: (os/kern) failure (0x5).："></a>遇到 <code>Unable to find Mach task port for process-id 2358: (os/kern) failure (0x5).</code>：</h4><ul><li><p>出现如下如下代码：  <code>Unable to find Mach task port for process-id 2358: (os/kern) failure (0x5).</code> <code>(please check gdb is codesigned - see taskgated(8))</code> </p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_212227.png" width="80%"/ loading="lazy"></li></ul><ul><li>解决方法：按下 <code>control + z</code> <strong>退出终端</strong> ，<strong>使用 sudo 权限</strong> ，运行命令 <code>sudo gdb mainApp</code> 调试</li></ul><br><h4 id="遇到-New-Thread-0x1303-of-process-971-卡死"><a href="#遇到-New-Thread-0x1303-of-process-971-卡死" class="headerlink" title="遇到 [New Thread 0x1303 of process 971] 卡死:"></a>遇到 <code>[New Thread 0x1303 of process 971]</code> 卡死:</h4><ul><li><p>出现如下代码 <code>[New Thread 0x1303 of process 971]</code> 代码，被进程被卡死（<strong>通常第一次会遇到这个问题）</strong> 。</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_192247.png" width="80%"/ loading="lazy"></li></ul><br><ul><li><p>解决方法：按下 <code>control + z</code> <strong>退出终端</strong>，执行 <code>killall 2415</code> 杀死该进程；然后再次运行 <code>sudo gdb mainApp</code> 调试， 按下 <code>r</code> 调试。</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200310_192130.png" width="70%"/ loading="lazy"></li></ul><br><h3 id="一些必须注意点"><a href="#一些必须注意点" class="headerlink" title="一些必须注意点:"></a>一些必须注意点:</h3><ul><li>执行命令时候，证书生效，有的带 -f 参数；</li><li>命令 <code>codesign -fs gdb_codesigned /usr/local/bin/gdb</code> 时候，<code>gdb_codesigned</code> 要换成你的证书名称</li><li>有的证书博客证书的起名称为 gdb_cert， 但是命令 和终端截图为 gdb-cert； 注意短杠</li><li>另外一个是 dgb 最好需要带绝对路径，避免找不到；</li><li><strong>看完这篇教程，一定要点赞</strong></li></ul><br><p><strong>参考博客：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/68398728">在macOS10.14上使用GDB的教程</a></p><p><a href="https://www.zhihu.com/question/264381471">macbook创建自签名根证书失败,怎么办？</a></p><p><a href="https://blog.csdn.net/zg_hover/article/details/82453862">mac book上安装和使用gdb</a></p><p><a href="https://studygolang.com/articles/26715?fr=sidebar">Tips:如何优雅的使用GDB调试Go</a></p><p><a href="https://segmentfault.com/a/1190000004136351">解决GDB在Mac下不能调试的问题</a></p><p><a href="https://blog.csdn.net/angus_monroe/article/details/78515468">MAC OSX系统使用gdb编译程序时的报错处理</a></p><p><a href="https://juejin.im/post/5acdc6bef265da239a6029f4">macOS High Sierra下无法使用gdb的解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中，编写入门的makefile文件，然后逐渐迭代</title>
      <link href="posts/11bba156/"/>
      <url>posts/11bba156/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>Uinx / Linux</code> 下，写下这篇适合小白学习的入门教程，理解 <code>make</code>，<code>makefile</code> 文件。和开始编写自己的 <code>makefile</code> 文件，使用 <code>make</code> 命令执行，生成我们所需要的项目。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p><br><h3 id="make-介绍："><a href="#make-介绍：" class="headerlink" title="make 介绍："></a>make 介绍：</h3><ul><li>make 是 Linux 自带的构建器。</li><li>构建规则是依据 makefile 文件内容</li></ul><p>代码变成可执行文件，叫做<strong>编译</strong> ；先编译这个，还是先编译那个（即编译的安排），叫做<strong>构建</strong> 。</p><p>更多参考：<a href="https://blog.csdn.net/qq_33154343/article/details/98170236">make、makefile、cmake、qmake都是什么，有什么区别？</a> </p><br><h3 id="makefile-介绍："><a href="#makefile-介绍：" class="headerlink" title="makefile 介绍："></a>makefile 介绍：</h3><h4 id="命名："><a href="#命名：" class="headerlink" title="命名："></a>命名：</h4><ul><li>该文件的名称是唯一：<code>makefile</code> 或 <code>Makefile</code></li></ul><br><h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><ul><li><p>目标，依赖，命令</p></li><li><p>一个完整的 makefile 文件，由多个规则组成</p><ul><li>最上面的一行规则，是<strong>终极目标</strong> ，下面的都是<strong>过程目标</strong> </li></ul><p><font color=#D0087E size=4 face="幼圆">目标: 依赖</font></p><p><font color=#D0087E size=4 face="幼圆">    命令          //此处有 Tab 缩进，不能用多个空格代替</font></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment">#一个规则 eg :</span><span class="token symbol">mainApp</span><span class="token punctuation">:</span> *.cppg++ *.cpp -o mainApp  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><br><h4 id="执行原理："><a href="#执行原理：" class="headerlink" title="执行原理："></a>执行原理：</h4><ul><li>检测依赖是否存在？<ul><li>向下搜索下边的规则，下面的规则通常是用来生成依赖的</li></ul></li><li>判断是否重新编译生成？<ul><li>最终目标文件的创建时间一定是要晚于中间的生成的目标(作为依赖文件)</li></ul></li><li>若是本某条规则没有写依赖<ul><li>那么它永远是最新的目标文件（本条为，分析第五版的 make clean）</li></ul></li></ul><br><h3 id="编写自己的-makefile-文件："><a href="#编写自己的-makefile-文件：" class="headerlink" title="编写自己的 makefile 文件："></a>编写自己的 makefile 文件：</h3><h4 id="准备铺垫："><a href="#准备铺垫：" class="headerlink" title="准备铺垫："></a>准备铺垫：</h4><p>依旧沿用<a href="https://blog.csdn.net/qq_33154343/article/details/104692370">上一篇</a>文章的工程代码，且有讲解 gcc/g++ 的用法，项目代码内容预览如下：</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/81soxRT22.png" width="90%"/ loading="lazy"><p>这里按照想法，以前是执行 <code>g++-9 *.cpp -o mainApp</code> 这一行命令，现在使用 makefile 规则，使用 make 命令执行，就相当于使用另外一个语言（规则），来重写这句话。于是乎，我们使用 vim 创建 makefile 文件，在里面写下如下语句；然后执行 make，即可得到 mainApp 可执行程序（我们的目标），就属于大功告成。</p><br><h4 id="第1版本："><a href="#第1版本：" class="headerlink" title="第1版本："></a>第1版本：</h4><p>讲道理，将 gcc 命令写成符合 makefile 规则（参考上面）的语句就好了，最简单的想法如下，其中 mainApp 的名称是任意的，是最后生成的终极目标的可执行程序的名称。写好后保存，终端执行执行 make ，就得到了我们所需要的。</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token symbol">mainApp</span><span class="token punctuation">:</span> *.cppg++-9 *.cpp -o mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h4 id="第2版本："><a href="#第2版本：" class="headerlink" title="第2版本："></a>第2版本：</h4><ul><li><strong>改进之处：</strong> <ul><li>避免改动一个 .cpp，但是所有 .cpp 文件都要重新编译为 .O 文件</li></ul></li></ul><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token symbol">mainAPP</span><span class="token punctuation">:</span> *.og++-9 *.o -o mainApp<span class="token symbol">*.o</span><span class="token punctuation">:</span> *.cppg++-9 -c *.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="第3版本："><a href="#第3版本：" class="headerlink" title="第3版本："></a>第3版本：</h4><ul><li><strong>改进之处：</strong><ul><li>使用 makefile 里面的变量</li><li><font color=#FF0000  size=4 face="宋体">$( )</font>  表示取变量里面的值</li><li><font color=#FF0000  size=4 face="宋体">%.o: %.cpp</font>  模式匹配，相当于公式，两个百分号是同一个 “量”</li></ul></li></ul><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">val_a <span class="token operator">=</span> ExAdd.o ExDiv.o ExMul.o ExSub.o main.o  <span class="token comment">#赋值给变量 val_a</span>val_app <span class="token operator">=</span> mainAPP<span class="token symbol"><span class="token variable">$</span>(val_app)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>val_a<span class="token punctuation">)</span>g++-9 <span class="token variable">$</span><span class="token punctuation">(</span>val_a<span class="token punctuation">)</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>val_app<span class="token punctuation">)</span>    <span class="token comment">#可替换为 g++-9 $^ -o $(val_app)</span><span class="token symbol">%.o</span><span class="token punctuation">:</span> %.cppg++-9 -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="第4版本："><a href="#第4版本：" class="headerlink" title="第4版本："></a>第4版本：</h4><ul><li><strong>改进之处：</strong><ul><li><strong>使用自动变量：</strong><ul><li><font color=#D0087E size=4 face="幼圆">$@</font> 规则中的目标</li><li><font color=#D0087E size=4 face="幼圆">$ &lt;</font> 规则中的第一个依赖</li><li><font color=#D0087E size=4 face="幼圆">$^</font> 规则中的所有依赖</li><li><font color=#FF0000  size=4 face="幼圆">它们只能够认识本条规则的命令，在本条规则中使用</font> </li></ul></li><li><strong>使用函数：</strong><ul><li><font color=#D0087E size=4 face="幼圆">wildcard</font>  为查找指定文件夹，里面的指定类型的文件，后面为参数</li><li><font color=#D0087E size=4 face="幼圆">patsubst</font>  为字符替换函数</li></ul></li></ul></li></ul><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">val_a <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">wildcard</span> ./*.cpp<span class="token punctuation">)</span>val_b <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">patsubst</span> %.cpp, %.o, <span class="token variable">$</span><span class="token punctuation">(</span>val_a<span class="token punctuation">)</span><span class="token punctuation">)</span>val_app <span class="token operator">=</span> mainAPP<span class="token symbol"><span class="token variable">$</span>(val_app)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>val_b<span class="token punctuation">)</span>g++-9 <span class="token variable">$^</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>val_app<span class="token punctuation">)</span><span class="token symbol">%.o</span><span class="token punctuation">:</span> %.cppg++-9 -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="第5版本："><a href="#第5版本：" class="headerlink" title="第5版本："></a>第5版本：</h4><ul><li><strong>改进之处：</strong><ul><li>添加工程项目清理中间功能，避免手动清理，只需要运行 <code>make clean</code> 这个中间目标即可</li></ul></li><li>若是工程文件夹下，有和 makefile 的中间目标同名的文件。那么依据<strong>检测依赖是否存在的工作原理</strong> ，其会不执行，且冲突。（它认为编译的依赖文件   clean ，最新且存在的）<ul><li>解决：声明为伪目标 .PHONY: </li></ul></li></ul><p>(若是最存在同名文件) ，其目标文件 claen 又没有依赖文件，所以总是最新的，也就不会执行 make clean 的下面命令</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment">#.PHONY: clean   #明伪目标: 不会做依赖和更新检查( 文件日期时间先后判断)</span><span class="token symbol">clean</span><span class="token punctuation">:</span> <span class="token comment">#-mkdir /abc  # 第一个"-"   表示若是执行失败，则执行后面会的命令，</span>-rm <span class="token variable">$</span><span class="token punctuation">(</span>val_b<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>val_app<span class="token punctuation">)</span>   <span class="token comment">#后面-f 是强制执行 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h3><ul><li><p>写好 makefile 文件</p></li><li><p>执行 make 命令</p></li><li><p>不再需要演示，执行清理命令[运行中间规则]：make clean</p> <img src="https://cdn.jsdelivr.net/gh/touwoyimuli/xmuliPic@pic/2020/20200309_183011.png" width="80%"/ loading="lazy"></li></ul><br><h3 id="代码下载："><a href="#代码下载：" class="headerlink" title="代码下载："></a>代码下载：</h3><p><a href="https://github.com/touwoyimuli/linuxExample/tree/master/05_makefile">05_makefile</a> </p><br><p><strong>其它：</strong></p><p>假装有其 ta ，，， （点个赞）？</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人的一生七八十年，到底该如何度过？</title>
      <link href="posts/b7a609d6/"/>
      <url>posts/b7a609d6/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　<strong>二十岁的所困惑所思考：</strong> 人的一生七八十年，到底该如何度过？入社会之前又该如何准备？</p><span id="more"></span><p>​        二十多岁的困惑有很多，先从比较宏观的方面作为切入点。此前每每夜深人静，我经常会思考：<strong>人的一生七八十年，到底该怎么样活度过？怎么样度过或许自己才会没有遗憾？</strong>这个问题，直到后来才清晰了起来。</p><br><p>​        <strong>如何拥有自己独立的意识呢？</strong>上大学之前，一切的都是按部就班，两耳不闻窗外事那种，生活枯燥而又无趣。但是上了大学后，最大的收获是给了我很多时间去思考，开始感受大学这个小的象牙塔，以及它里面的规则。第一年，每一门课都是认真的听老师授课，虽然学习末期考试，所有学科的成绩都是85/90+，与我分数相似高的只有一两人。但是学院多数人基本没怎么听课(部分基本没听过一节讲)，但是也都75/80+，我感觉到了有点气。为什么我花费了大把时间和去做课后习题，和大家分数难以拉开差距呢？并且，我发现在只需要及格就过，<strong>大学的分数好像没有什么重量级的意义。</strong></p><br><p>​        那是我第一次开始思考学习以外的问题，个人意识开始萌芽。<strong>发现所有科目都高强度的学习，是很吃力不讨好的一件事情。关键是一件完全没有必要的事情，于是就只学习和本专业关系比较紧密，和感趣的课程，其它闲杂课程全部划水可以及格即可。</strong>人生此阶段的学习包袱丢掉了一大包。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200318_223754.png" width="30%"/ loading="lazy"><br><p>​        <strong>我开始思考自己的兴趣和爱好，我在大学剩下三年应该做一些什么事情？</strong>我喜欢古风古诗词，传统学术的道与技，听带戏腔的网易云歌曲，我向往沉醉于互联网传奇大佬的神话。想要为大四那年毕业，实习找一份薪水不错的编程工作。于是去图书馆借阅了两本本上几十年前一位台湾老学究写的《论语别裁》，自购《浪潮之巅》《目送》等，报名了一个编程培训班，闲暇之余，听歌逛校门前的一个湖，那会还觉着有挺大。</p><br><p>​        <strong>从书籍中，</strong>在看古论语今新解意中，个人三观正确的框架有了基础的搭建，了解了互联网巨头公司百年流传沉浮和各自的转型应对，还有了一点对家庭情亲母爱的那种理解，附上了一点点的小文艺；还有我的编程语言，也开始入门学习打基础；和朋友一起讨论学习和聚餐也给自己生活带一抹又一抹的彩色。所有行为为两年后实习，找一份待遇较高的实习，回校答辩时候能够和同学谈起待遇之时，满足一下心理，能够嘚瑟一下打下基础，为步入社会走技术人员路线埋下伏笔，万一某一天变成了技术大佬呢？</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200318_223736.png" width="35%"/ loading="lazy"><br><p>​        <strong>工作初，如何能够在工作之外的时间给自己充电？有时间冲突怎么破？</strong> 得益于公司的早九晚六，周末双休，能够让我在晚上继续学习新的知识，和思考很多新的人生困惑和无聊的问题；也得益于公司有开源社区，有着良好的沟通氛围。</p><p>​        <strong>想到人生，不管财富积累多少，外貌差异不想尽同，都约七八十年度过一生，该如何度过自己的一生呢？</strong>才不愧于来这个时间驻足停留看看美丽世间。或有钱于沉醉于物质享受，纸醉金迷，享受人间；或贫困潦倒，繁琐于家中鸡毛蒜皮小事；或彻夜实验室专心科研；或叛逆转向自我封闭；或在底层奋斗拼搏尝试跃进上层社会，至少尝试过；或亦或是白嫖完文章不点赞；亦或是我没见过的一种方式来度过一生。</p><p>​        <strong>这里我已经找了到让我开心的事情，参与 github 开源项目，提交贡献。</strong>可以增进技术，体验跨地域和陌生人组队，提高自己的影响力， 提供稳定可靠的软件给使用者用，让他们开心。使用技术，让科技造福社会。（若是不懂，此相当于义务开发项目，助人乐己，且全凭兴趣做自己喜欢的事情，还可以推荐社会进步）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/IMG_12843.GIF" width="20%"/ loading="lazy"><br><p>​        <strong>或许你暂时还是不能够找到的爱好，来度过人生一个大阶段的事情？</strong>你可以将<strong>自己兴趣 + 专业 + 预想的生活 + 你会感到开心 + 薪酬</strong> (没它不能维持生活)，按照这个公式找到你所想要的生活方式，度过一生的某一阶段。若是遇到了对某件事强烈的心动和想参与，请忽略前文，直接去干；若是尝试发觉不对，后期还可以随着自己的规划去调整。人生虽苦短，却不乏精彩甜甜。</p><p>​        也可看一些非技术类的书籍，感受一下社会的脉搏与跳动，观看社会百态的一角落。尝试理解每一件事件背后深层次的原因。思路跳跃，隔段时间再想这个问题？早晚会发现新大陆。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>刚买的域名怎么绑定自己博客？再白嫖一年的SSL，使用https访问博客</title>
      <link href="posts/7ba1510/"/>
      <url>posts/7ba1510/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　本篇只是说说怎么将刚买的域名绑定到自己的博客； 又如何白嫖一年的 SSL 证书，给你博客网站访问去掉<em>不安全</em> 访问标签，使用 https 访问博客网址。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景铺垫："><a href="#背景铺垫：" class="headerlink" title="背景铺垫："></a>背景铺垫：</h3><p>使用 Hexo + githubPage 搭建的博客，想要绑定域名 + 开启 https 访问。</p><p>将博客绑定域名，启用 SSL 证书，升级为 https 访问，其具体操作步骤如下：</p><ol><li>购买域名</li><li>绑定博客地址和域名（设置域名解析）</li><li>启用白嫖 SSL 证书，设置 https 方式。</li><li>配置 github 博客仓库，勾选中 <code>Enforce HTTPS</code> 功能。</li></ol><br><h3 id="服务商购买域名："><a href="#服务商购买域名：" class="headerlink" title="服务商购买域名："></a>服务商购买域名：</h3><p>选择一个服务商，这里以阿里云的万网为例：<a href="https://wanwang.aliyun.com/domain/">wanwang.aliyun.com</a> ；在这里购买你所想要的域名（极少部分不能够备案，极其不推荐购买）。选好之后，按照流程，创建实名模板，绑定联系邮箱，付钱下单，然后到 <code>控制中心-域名服务中去</code>。 选择你购买的域名下的右侧 <code>解析</code> 设置。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_012701.png" width="70%"/ loading="lazy"><br><h3 id="设置域名解析："><a href="#设置域名解析：" class="headerlink" title="设置域名解析："></a>设置域名解析：</h3><p>以我自己的为例：</p><p>顶级域名: xmuli.tech<br>博客地址: <a href="https://touwoyimuli.github.io/">https://touwoyimuli.github.io</a></p><p>打开终端，ping 一下博客的地址，得到博客服务器的地址：<code>185.199.111.153</code>；</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_013049.png" width="60%"/ loading="lazy"><p>然后将域名解析的设置为如下：</p><p>选择 A 类，将子域名解析到对应的 ip 地址的服务器。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_013736.png" width="100%"/ loading="lazy"><p>这里的 TTL 的含义是，修改一行配置之后，这个解析要十分钟才能够生效。在 10 分钟后，再次在浏览器里面打开此网址。会显示 github 的 404 页面；此时说明解析已经生效，但是还有一步骤没有设置。</p><p>进入到本地电脑的 blog 的文件夹，在 source 文件夹下创建 CNAME 文件，在里面写下你的域名；前面不要加 http ，https ，www 或者最后面还有一个 / 这些符号。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_014715.png" width="70%"/ loading="lazy"><p>在执行如下熟悉的命令，将 blog 文件夹的内容生效且上传到站点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean   //清除旧的缓存数据hexo g -d    //配置和同步上传到 github 仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在此打开访问网址， 会发现成功的打开你的博客网址了（第一次解析会有点慢）。</p><br><h3 id="启用-SSL，设置-https-访问："><a href="#启用-SSL，设置-https-访问：" class="headerlink" title="启用 SSL，设置 https 访问："></a>启用 SSL，设置 https 访问：</h3><p>此时会发现，该网址被标记为不安全，原因是访问的全称<br>是 <a href="http://xmuli.tech/">http://xmuli.tech</a> ，而非是 <a href="https://xmuli.tech/">https://xmuli.tech</a> 这个。</p><p>查询了一下，githubPage 是支持 https 方式，但是不能够直接上传 SSL 证书。被限制住了。</p><p>于是乎你的网址就被标记为不安全；作为文艺青年，这怎么能够容忍，wtf！！！</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_204719.png" width="70%"/ loading="lazy"><p>必须给它安排了，此时的将 http 升级为 https 的解决方式如下：</p><ul><li>借用 CloudFlare CDN 提供商的服务</li><li>使用 SSL 证书（白嫖一年）</li><li>自己价格不菲购买证书，部署到机器，机器部署<code>nginx</code>，<code>stunnel</code>等代理</li></ul><p>作为一个在家蹲了快两个月，躲避疫情的<del>穷且屌丝的</del>工程师，我倾向于第二条，这是无意之中开启的新世界大门；</p><p>钱不是问题，关键是对于咳咳，技术的兴趣的折腾。</p><p>打开阿里云控制台的 <code>基本信息</code>，选择  <code>开启 SSL 证书</code>，</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210418.png" width="60%"/ loading="lazy"><p>然后点击购买 “GeoTrust” 的证书，默认是第一个。。。。。。为何藏起如此之深！！！</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210507.png" width="70%"/ loading="lazy"><p>作为一口气买了 10 年的域名，因为<del>钱不是问题，</del>懒惰管理，选择购买年限最长的 SSL 证书，省去一年年的续费，准备 付款下单一气呵成，等等，，这个有点超出了，，，（数了数费用的小数点，这玩意怎么比域名还贵，还是续费方式的。不能够买断）。不好思思， 我再去看看其他方式加上小绿锁。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210541.png" width="50%"/ loading="lazy"><p>就在这个页面，发现有 <code>个人版的证书 </code> ，且免费，果断下单，完成次笔交易。此刻双方都表示合作很愉快</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_210717.png" width="50%"/ loading="lazy"><p>接下来就是配置证书，点击证书的右侧的 <code>证书申请</code> ，再填写一下，等待大约 10 分钟，会看到上面那张图里面 ，配置域名解析的图，里面多出一行 txt 的配置，看到她出来，就属于配置成功。<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_211124.png" width="100%"/ loading="lazy"></p><br><h3 id="开启-github-blog-仓库的HTTPS："><a href="#开启-github-blog-仓库的HTTPS：" class="headerlink" title="开启 github blog 仓库的HTTPS："></a>开启 github blog 仓库的HTTPS：</h3><p>还差最后一脚，进入到 github 的这个对应的博客的仓库，点击 <code>setitng</code>，往下翻网页， 找到 <code>GitHub Pages </code> 这个标签，勾选中 <code>Enforce HTTPS</code> 这一栏。然后再次在浏览器里面输入网址，会发现 显示为安全的访问。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_023426.png" width="50%"/ loading="lazy"> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_202022.png" width="50%"/ loading="lazy"><p>再次点击网页浏览，会发现为安全的访问，小锁的标记也有了，且无论是输入 http， 域名，旧的 github.io 方式，都会被强制跳转为 https 链接方式浏览。开心。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_20200308_024317.png" width="70%"/ loading="lazy"><br><h3 id="一年之后："><a href="#一年之后：" class="headerlink" title="一年之后："></a>一年之后：</h3><p>不过在 SSL 一年后到期，可以再次购买此证书一年；或者尝试使用 <a href="https://www.cloudflare.com/">CloudFlare</a> 来解决（方式参考文末链接），亦或是那个时候，你已经有个很多个证书。毕竟事情总是在发展和变化的。另外，还白嫖了一篇配置文章，还图文并茂，点个赞留言再留如何？下次一定也可以啊！</p><br><p><strong>参考：</strong></p><p><a href="https://tzhou2018.github.io/2018/04/%E4%B8%BAGitHub-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%B9%B6%E6%B7%BB%E5%8A%A0SSL-%E5%BC%80%E5%90%AFHTTPS%E5%BC%BA%E5%88%B6/">为GitHub Pages自定义域名并添加SSL-开启https强制</a> </p><p><a href="https://juejin.im/post/5a308ae551882540f363879a">为你的hexo博客配置个性域名</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
          <category> 学习 - 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二十岁的所困惑所思考</title>
      <link href="posts/4105a4b6/"/>
      <url>posts/4105a4b6/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>　 楔子，二十岁的所困惑所思考</p><span id="more"></span><p>​        <strong>二十而立，三十不惑</strong> 是一个很多的新人，尤其思维意识刚觉醒的人，在恰好年轻的年龄，在追寻自我意识和钱财的独立的理想阶段标志语。实际过程中却是二十多岁有很多困惑，在探寻解惑的过程。</p><p>​        但很多的博客、书籍和身边人的教导，都只说了那个阶段的会有什么样子的享受，只说需要努力，但却没有说这个奋斗过程中的你，会遇到的那些意识上的困惑？以及怎么自我走出困惑。<strong>所以我分享一下关于编程技术和生活的方方面面的分享，可以互相作为参考借鉴，让你们在迈出自己的下一步前，会有自己的不犹豫，不后悔的选择。</strong></p><br><p>​         一个此阶段的自己的幼稚思想，困惑，认识自我，探寻自己真正所喜好，屡次摸石头尝试的探索，希望可以将有用的方法归纳出来，让复制某一方面成为通用；最终达到每个人得到自己答案后，可以对很多事情不困惑，从而做出决定。也带有自己的不坍塌的三观和强大自信心，感受生活的世界美好。</p><br><p>​        随时间延续，社会意识变化，二十多的大学生和毕业生新人，在经历中学的分数学习，大学的放松学习；一直到最近两年才有时间，来思考和感悟学习之外的事情。也才开始慢慢有了自己意识，思考自己前行的路。开始时候，是单独奋斗，成长中陪伴的更多是许许多多的困惑，或者一些普遍认知无意义的，现在想也没有用的的问题？或者一些遥远的终极问题：</p><p>​         我是谁？我要干什么？我要到哪里去？<strong>但正是这些问题，衍射出来的一些贴近我们每个人的更加具体的问题。</strong> 我是一个什么样的人？我想要成为什么样的人？我向往的生活是什么样的？我要做哪些努力和舍弃？我若是真的实现了我所向往的的生活，我是真的开心吗？这种开心是可持续性的发自你内心的开心？还是仅仅我做了这件事情以后，我本应该感到的开心？</p><br><p>​        这些许许多的问题，都只有每个人在经历过社会的毒打才能在能够得到具体答案。而我所做的分享，就是对一些技术、生活、社会和为人的思考和感悟。其中的相似经历的好的解决方法，用来被复制，运用到美好的生活中。</p><br><p>​        <del>第一篇公众号作</del> 为引出来问题的楔子：二十岁中会遇到哪些困惑？后面的再详细介绍实际生活所遇，以点破面的，讲述这个生活于魔幻现实世界抽象后的一些原理，怎么应对它们就取决自己的 “志” 和 “道” 。最后，这里让我遇见一群志同道合的你们，开心。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下使用gcc生成动态库.so和调用（图文并茂，坑已踩完）</title>
      <link href="posts/7f5979a7/"/>
      <url>posts/7f5979a7/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　 继 <a href="https://blog.csdn.net/qq_33154343/article/details/104692241">上一篇</a>。本篇就继续实践踩坑，实现在Linux上面，使用gcc编译动态库.so，文件，且调用动态库。此处例子实际：使用g++8.3.0在uos20(Linux)平台下完成这个知识点的实践教程。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>UOS20 (即deepin20)</code> 📎 <code>gcc/g++ 8.3.0</code> </p><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p><br><h3 id="动态库概念："><a href="#动态库概念：" class="headerlink" title="动态库概念："></a>动态库概念：</h3><p><strong>动态库</strong> 在程序编译时并不会被连接到目标代码中，而是在<strong>程序运行是才被载入，因此在程序运行时还需要动态库存在</strong> 。动态库的后缀一般是 <code>.so</code>作为后缀。</p><p><strong>库：</strong> 二进制文件；是加密之后的.c/.cpp的文件</p><p><strong>动态库：</strong>  <code>.dll 或 .so</code></p><br><h3 id="前期铺垫："><a href="#前期铺垫：" class="headerlink" title="前期铺垫："></a>前期铺垫：</h3><ul><li><strong>重要提醒：</strong></li></ul><p><font color=#FF0000  size=3 face="幼圆"><strong>本次运行环境是在uos20（Linux）系统上面跑成功的，</strong></font> <font color=#FF0000  size=4 face="幼圆">  在运行之前，添加动态库的（绝对）路径时候，需要执行 <code>export LD_LIBRARY_PATH=动态库的绝对路径:$LD_LIBRARY_PATH</code> </font></p><p>​    </p><p><font color=#FF0000  size=4 face="幼圆">若是在MacOS10.14上面跑成功（已经测试成功），在运行之前，添加动态库的（绝对）路径时候，需要执行 <code>export DYLD_LIBRARY_PATH=动态库的绝对路径:$DYLD_LIBRARY_PATH</code> </font></p><p><font color=#0000FF size=4 face="幼圆">设置环境变量的时候：Linux 的 <code>LD_LIBRARY_PATH</code> 对应的就是 Mac 的 <code>DYLD_LIBRARY_PATH</code> 。（动态链接器会查找）。</font></p><p>下面每个文件里面写的代码如下：<strong>注意此处，其中所有的.cpp文件都没有包含ExHeader.h或者其他的.h头文件</strong>， 是为了验证一个猜想，.cpp生成的.o文件，在到.o生成的.so文件，是单独的二进制文件。只在最后编译和链接main.cpp文件时候，才会包含这个ExHeader.h文件。重最后结果来看，这个结果是✅的。 </p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/81soxRT22.png" width="100%"/ loading="lazy"><p> 创建的几个文件目录结构如图：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_181130.png" width="35%"/ loading="lazy"><br><h3 id="将-cpp文件生成-o文件："><a href="#将-cpp文件生成-o文件：" class="headerlink" title="将.cpp文件生成.o文件："></a>将.cpp文件生成.o文件：</h3><ul><li><p>运行命令 <code>g++-8 -c ExAdd.cpp ExDiv.cpp ExMul.cpp ExSub.cpp -fpic</code>，将除了main.cpp之外的所有.cpp文件，全部制作为二进制文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -fpic(或 FPIC)制作.o文件</span>g++-8 -c ExAdd.cpp ExDiv.cpp ExMul.cpp ExSub.cpp -fpic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><br><h3 id="将-o文件大包为-so文件："><a href="#将-o文件大包为-so文件：" class="headerlink" title="将.o文件大包为.so文件："></a>将.o文件大包为.so文件：</h3><ul><li><p>执行命令 <code>g++-8 -shared ExAdd.o ExDiv.o ExMul.o ExSub.o -o libxxx.so</code> 将上面生成的所有.o文件，打包为一个动态库.so文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -shared,将.o打包为.so文件</span>g++-8 -shared ExAdd.o ExDiv.o ExMul.o ExSub.o -o libxxx.so<span class="token function">mv</span> *.so ./lib       //将.so文件放入lib文件夹<span class="token function">mv</span> *.o ./lib        //将.o文件放入lib文件夹<span class="token function">mv</span> *.h ./include    //将.h文件放入include文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p> 此时该文件的结构如下：</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307181518.png" width="35%"/ loading="lazy"><br><h3 id="调用-so文件："><a href="#调用-so文件：" class="headerlink" title="调用.so文件："></a>调用.so文件：</h3><ul><li><p>执行命令 <code>g++-8 main.cpp -I ./include -L ./lib -lxxx -o mainApp</code> ，使用gcc将main.cpp进行编译链接，其中需要的头文件在include文件夹里面找，需要的动态链接库文件在lib文件夹里面找，调用的动态库的库名叫xxx，最后输出一个名为mainApp的可执行程序</p><ul><li><font color=#D0087E size=4 face="幼圆">注意，所要生成的.a文件的名字前三位必须是lib，否则在链接的时候，就可能导致找不到这个库</font> </li><li><strong>命令规则：</strong> <font color=#FF0000  size=4 face="幼圆">lib</font>xxx<font color=#FF0000  size=4 face="幼圆">.a</font> ；<font color=#D0087E size=4 face="幼圆"><strong>红色部分为固定的格式，中间的xxx才是库名</strong></font></li><li><font color=#D0087E size=4 face="幼圆">-l 为调用的库的名称(-l 后面没有空格，直接加库名)</font> </li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#-I 为指定的库的头文件的路径</span><span class="token comment">#-L 为指定的库的二进制文件文件</span><span class="token comment">#-l 为调用的库的名称(-l 后面没有空格，直接加库名)</span><span class="token comment">#-o 输出文件，生成的可执行程序的名称</span>g++-8 main.cpp -I ./include -L ./lib -lxxx -o mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p> 此时文件夹的结构如下：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307181554.png" width="35%"/ loading="lazy"><br><h3 id="设置-so的运行时的PATH："><a href="#设置-so的运行时的PATH：" class="headerlink" title="设置.so的运行时的PATH："></a>设置.so的运行时的PATH：</h3><ul><li><p>执行命令 <code>export LD_LIBRARY_PATH=库的绝对路径:$LD_LIBRARY_PATH</code> 来设置临时的环境变量；告知系统这里有一个绝对路径的动态库路径，<strong>动态库不能够使用相对路径。</strong> 若是设置绝对路径的环境变量，则程序一定会跑失败。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/home/muli/Desktop/04_02_so/lib:<span class="token variable">$LD_LIBRARY_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="解决-Linux-加载动态库-so-文件失败的方法："><a href="#解决-Linux-加载动态库-so-文件失败的方法：" class="headerlink" title="解决 Linux 加载动态库 .so 文件失败的方法："></a>解决 Linux 加载动态库 .so 文件失败的方法：</h4><ul><li><p>若是<strong>运行之后，若首次未做设置，则就会发现运次失败！！！，会报错误提示，说找不到libxxx.so;</strong> </p><p><strong>原因是：</strong> <font color=#70AD47 size=4 face="幼圆"><strong>因为linux 的工作机制，其加载动态库.so的顺序。要知道所依赖库的.so 的名称，还要知道其绝对路径。</strong> </font></p></li></ul> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307181652.png" width="60%"/ loading="lazy">  <br><ul><li><p><strong>解决 Linux 加载动态库 .so 文件失败的方法：</strong></p><p>思路：添加动态库的（绝对）路径。</p><ul><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法1」拷贝自己制作的共享库：</strong> </font></p><ul><li> 拷贝自己制作的共享库 .so 文件到 <code>/lib</code> 或 <code>/usr/lib</code>[不推荐，容易重名替换让系统崩溃]</li></ul></li><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法2」使用环境变量：</strong> </font></p><ul><li>临时设置：<code>export LD_LIBRARY_PATH=动态库的绝对路径:$LD_LIBRARY_PATH</code>(只添加新值，<em>等号两边不能空格，路径也不需要双引号</em> )</li><li>永久设置：<ul><li>「用户级别」将<code>export LD_LIBRARY_PAT = 动态库的加载路径</code>添加到<code>~/.zshrc</code>文件；然后重新加载，方法为重启终端或者 运行 <code>sources ./zshrc</code>; 即可生效.</li><li>「系统级别」将绝对路径加入到<code>/etc/profile</code>文件，然后用命令<code>source /etc/profile </code>重新加载该文件.</li></ul></li></ul></li><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法3」使用文件列表：</strong> </font></p><ul><li>将动态库的绝对路径添加到<code>/etc/ld.so.conf</code>文件中；然后执行 <code>sudo ldconfig -v</code> </li></ul></li><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法4」使用函数调动态库：</strong> </font></p><ul><li>函数名：<code>dlopen()</code>  <code>dlclose()</code>  <code>dlsym()</code></li></ul></li></ul><br><p><strong>补充一个小的知识点：</strong></p><ul><li><code>file appTest(可执行程序)</code>: 查看文件的类型，可以看到为 elf 类型</li><li>ldd appTest(可执行程序)<code> 查看 appTest 的所需要的加载动态库的文件，以及显示这些文件是否能找到</code> </li><li><code>echo $PATH</code> each 显示一个字符串，这里取 PATH 的值</li></ul></li></ul><br><h3 id="运行可执行程序："><a href="#运行可执行程序：" class="headerlink" title="运行可执行程序："></a>运行可执行程序：</h3><ul><li><p>执行可执行程序 <code>./mainApp</code> ，可以看到程序跑起来的成功结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p> 此时运行效果为（uos20[Linux]下）：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_Snip20200307_182031.png" width="80%"/ loading="lazy"><p> 此时运行效果为（MacOS10.14 [Uinx]下）：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200307183004.png" width="90%"/ loading="lazy"><br><h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><ul><li><a href="https://github.com/xmuli/linuxExample/tree/master/04_make_so_a">04_make_so_a</a></li><li>04_02_so，Linux版：uos20 例子</li><li>04_03_so，Uinx版：MacOS10.14 例</li></ul><br><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>看起来很简单，<strong>殊不知，纸上学来终觉浅，</strong> 还是亲自实现一番才以记忆深刻。若是成功的白嫖到了这篇文章，可以点个赞，给我留个言，鼓励一下。你的加油，我会持续不断的出新的文章，那啥，白嫖一时爽，一直白嫖一直     。🥺</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下使用gcc生成静态库.a和调用（图文并茂，坑已踩完）</title>
      <link href="posts/1661e315/"/>
      <url>posts/1661e315/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong> 　在Linux系统下，使用gcc来编译，生成静态库，且调用静态库.a文件，生成可执行程序。此处例子实际：使用g++9.2在mac平台下完成这个知识点的教程。在 <a href="https://blog.csdn.net/qq_33154343/article/details/104692370">下一篇</a> 踩坑生成动态库的.so制作和使用。</p><span id="more"></span><hr><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p><br><h3 id="静态库概念："><a href="#静态库概念：" class="headerlink" title="静态库概念："></a>静态库概念：</h3><p><strong>静态库</strong> 是在可执行程序运行之前就已经加入到执行代码中，成为执行程序的一部分；静态库的后缀一般是 <code>.a</code>作为后缀。</p><p><strong>库：</strong> 二进制文件；是加密之后的.c/.cpp的文件</p><p><strong>静态库：</strong> <code>.lib 或 .a</code></p><br><h3 id="前期铺垫："><a href="#前期铺垫：" class="headerlink" title="前期铺垫："></a>前期铺垫：</h3><p>创建如下例子几个文件：注意是.cpp文件，里面写的也是c++的语法。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003020.png" width="35%"/ loading="lazy"><br><h3 id="将-cpp生成-o："><a href="#将-cpp生成-o：" class="headerlink" title="将.cpp生成.o："></a>将.cpp生成.o：</h3><ul><li><p>执行命令 <code>g++-9 -c *.cpp</code> 将所有.cpp 文件都编译不链接生成对应的.o；且将.o文件都存放于lib文件夹下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 -c *.cpp  //注意 -c 是小写，非大写<span class="token function">mv</span> *.o ./lib <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br></li></ul><h3 id="将-o生成-a："><a href="#将-o生成-a：" class="headerlink" title="将.o生成.a："></a>将.o生成.a：</h3><ul><li><p>执行命令 <code>ar cr libxxx.a ./lib/*.o</code> 将所有的.o文件全部归档，然后替换创建为一个静态文件.a；<font color=#D0087E size=4 face="幼圆">ar 是GNU 归档工具，rcs 表示（replace and create）</font> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：ar rcs 静态库的名字 原材料  </span><span class="token comment">#ar -archive</span>ar cr libxxx.a ./lib/*.o  //生成静态库文件.a<span class="token function">mv</span> *.h ./include          //将所有的.h文件放在include文件夹下<span class="token function">mv</span> libxxx.a ./lib         //将.a文件也放在lib文件夹下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时的工程结构如下:</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003054.png" width="35%"/ loading="lazy"><br></li></ul><h3 id="链接库，调用静态函数-a："><a href="#链接库，调用静态函数-a：" class="headerlink" title="链接库，调用静态函数.a："></a>链接库，调用静态函数.a：</h3><ul><li><p>执行命令 <code>g++-9 -I ./include -L ./lib -lxxx -o mainApp</code> 调用生成的.a文件，并且链接，生成可执行程序mainApp</p><ul><li><font color=#D0087E size=4 face="幼圆">注意，所要生成的.a文件的名字前三位必须是lib，否则在链接的时候，就可能导致找不到这个库</font> </li><li><strong>命令规则：</strong> <font color=#FF0000  size=4 face="幼圆">lib</font>xxx<font color=#FF0000  size=4 face="幼圆">.a</font> ；<font color=#D0087E size=4 face="幼圆"><strong>红色部分为固定的格式，中间的xxx才是库名</strong></font></li><li><font color=#D0087E size=4 face="幼圆">-l 为调用的库的名称(-l 后面没有空格，直接加库名)</font></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#-I 为指定的库的头文件的路径</span><span class="token comment">#-L 为指定的库的二进制文件文件</span><span class="token comment">#-l 为调用的库的名称(-l 后面没有空格，直接加库名)</span><span class="token comment">#-o 输出文件，生成的可执行程序的名称</span>g++-9 -I ./include -L ./lib -lxxx -o mainApp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>此时工程的结构：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003118.png" width="35%"/ loading="lazy"></li></ul><ul><li><p>运行成功可以查看.a文件里面的内容，本质是把其余的.o文件全部塞到了.a里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#成功之后，可以查看.a里面的包含具体的所有的.o文件 </span>nm libmytest.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003143.png" width="50%"/ loading="lazy">    </li></ul><br><h3 id="运行可执行程序成功："><a href="#运行可执行程序成功：" class="headerlink" title="运行可执行程序成功："></a>运行可执行程序成功：</h3><p>运行命令 <code>./mainApp</code>，执行可执行程序，能够看到结果输出，表示成功。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/20200308003233.png" width="80%"/ loading="lazy"><br><h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/04_make_so_a">04_make_so_a</a></p><br><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>看起来很简单，<strong>殊不知，纸上学来终觉浅，</strong> 还是亲自实现一番才以记忆深刻。若是成功的白嫖到了这篇文章，可以<strong>点个赞，</strong> 给我留个言，鼓励一下。你的加油，我们持续不断的出新的文章，那啥，白嫖一时爽，一直白嫖一直 。🥺</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gcc工作流程：预处理，编译，汇编，链接</title>
      <link href="posts/2fcf9322/"/>
      <url>posts/2fcf9322/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　<font color=#D0087E size=4 face="幼圆"><strong>在 uinx/Linux 下，使用 gcc 的工作流程：预处理，编译，汇编，链接。</strong></font> 这里实际测试，举例分析：使用 g++（用 c++）的编译 main.cpp ，最终得到可执行程序的过程分析。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc/g++ 9.2.0</code> </p><br><h3 id="gcc工作流程："><a href="#gcc工作流程：" class="headerlink" title="gcc工作流程："></a>gcc工作流程：</h3><ul><li><p>预处理(<code>gcc -E</code>;  <strong>预处理器cpp</strong>)  :<code>xxx.c --&gt; xxx.i</code>  (.i 文件本质还是.c 文件)</p><ul><li>宏替换</li><li>头文件展开</li><li>注释去掉</li></ul></li><li><p>编译（<code>gcc -S</code>; <strong>编译器 gcc</strong>）: <code>xxx.i --&gt; xxx.s</code></p><ul><li>生成汇编文件</li></ul></li><li><p>汇编（<code>gcc -c</code>； <strong>汇编器as</strong>）: <code>xxx.s  --&gt;  xxx.o</code></p><ul><li>生成二进制文件</li></ul></li><li><p>链接（<code>gcc</code>； <strong>链接器ld</strong>）</p><ul><li><code>xxx.o  --&gt;  xxx（可执行）</code> </li></ul></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_image-20200118120643285.png"/ loading="lazy"><br><h3 id="gcc常用参数："><a href="#gcc常用参数：" class="headerlink" title="gcc常用参数："></a>gcc常用参数：</h3><ul><li><code>-v/--version：</code> 查看版本</li><li><code>-I：</code> 指定包含头文件路径（推荐相对路径）</li><li><code>-c： </code> 汇编文件生成二进制文件 </li><li><code>-o： </code> 指定生成文件的名字</li><li><code>-g：</code> gcc调试时候，添加的参数</li><li><code>-D： </code> 编译的时候，生成一个你所指定的宏（场景：多使用在测试程序中）</li><li><code>-Wall： </code> gcc 编译时候，添加显示警告⚠️信息</li><li><code>-On：</code> 优化代码，n 是优化级别：1，2，3（3 就是最大，填写 100 也是 3）</li></ul><br><h3 id="例子验证："><a href="#例子验证：" class="headerlink" title="例子验证："></a>例子验证：</h3><ul><li><p><strong>创建c++源文件：</strong></p><p>创建一个 main.cpp 的源文件，内容如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// insert code here...</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><ul><li><p><strong>gcc 预处理：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 -E main.cpp -o main.i <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 原始的 .cpp 文件：</p></li></ul><p>​       <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142044.png" width="50%"/ loading="lazy"></p><ul><li><p><strong>gcc 编译：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 -S main.i -o main.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 头文件展开，宏替换，去掉注释之后的 .cpp 文件。(.i 文件本质还是 .cpp 文件)</p></li></ul><p>​     <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142209.png" width="50%"/ loading="lazy"></p><ul><li><p><strong>gcc 汇编：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 -c main.s -o main.o  //-c 是小写，非大写C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的汇编文件：</p>   <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142314.png" width="50%"/ loading="lazy"></li><li><p><strong>gcc 链接：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++-9 main.s -o main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的二进制文件（打开会看到乱码）：</p>   <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_142338.png" width="50%"/ loading="lazy"></li><li><p><strong>运行可执行程序：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>终端看到输出结果：Hello, World!</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200304_140529.png" width="60%"/ loading="lazy"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gcc和g++的区别，编译.c和.cpp文件的区别</title>
      <link href="posts/61be1e74/"/>
      <url>posts/61be1e74/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在<a href="https://blog.csdn.net/qq_33154343/article/details/104639656">上一篇</a>中，最后为了测试 gcc 9.2.0 版本的安装是否成功。对创建的测试文件 main<font color=#D0087E size=4 face="幼圆">.cpp</font> 文件，执行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code> 命令；虽然最后运行成功了；但是是始终是有一点困惑：</p><ul><li>调用 gcc 和 gcc-9❗️</li><li>能否自动执行 gcc 的时候，去掉 <code>-lstdc++</code>，使得看起来清爽起来 ⁉️</li></ul><p>最后查询一下。发现其中另有一番天地，差点就错过了。 <strong>本章主要讲解 gcc 和 g++的区别，编译.c和.cpp文件的区别</strong> ❓</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code> 📎 <code>gcc 9.2.0</code></p><br><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>因为博主使用的是 MacOS 系统，也就是 Uinx 系统，和 Linux 还是有一点区别的。</p><p>在上面执行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code> 的命令中，-lstdc++ 表示会去链接 STL 库。查询可知，是 gcc 和 g++ 对 .c .cpp 文件的执行严格程度不一样造成的；且还有是否会自动链接 STL 库的区别造成。</p><br><h3 id="MacOS-下-gcc-和-clang-区别："><a href="#MacOS-下-gcc-和-clang-区别：" class="headerlink" title="MacOS 下 gcc 和 clang 区别："></a>MacOS 下 gcc 和 clang 区别：</h3><p>Mac 在是自带 gcc 命令的（安装 xcode 后）。但这并非说真的有 gcc 编译器群，只是将终端里面的命令 gcc 映射调用 clang 编译器。在昨天我下载了真正的 gcc9.2.0 之后，调用它，就必须的使用 gcc-9 这个命令。</p><p><font color=#0000FF size=4 face="幼圆"><strong>为了后面的学习的完整性；后面坚持使用 gcc 9.2.0 在 MacOS 10.14 下进行 Linux 的相关命令学习。偶尔也会将 uos20（Debain 8） 系统作为验证一些命令或者习惯的使用。</strong></font> </p><p><font color=#0000FF size=4 face="幼圆"><strong>以后文章中的 gcc 指代的就是终端中调用的 gcc-9；文章中的 g++ 指代的就是终端中调用的 g++-9；</strong></font></p><p>也就是坚持在终端里面调用 gcc-9 和 g++-9 ；</p><br><h3 id="gcc-和-g-的区别："><a href="#gcc-和-g-的区别：" class="headerlink" title="gcc 和 g++的区别："></a>gcc 和 g++的区别：</h3><p>首先看一下两者的区别：</p><p>GCC:GNU Compiler Collection(GUN 编译器集合)，它可以编译C、C++、JAV、Fortran、Pascal、Object-C、Ada等语言。</p><p>gcc是GCC中的GUN C Compiler（C 编译器）</p><p>g++是GCC中的GUN C++ Compiler（C++编译器）</p><p>一个有趣的事实就是，就本质而言，gcc和g++并不是编译器，也不是编译器的集合，它们只是一种驱动器，根据参数中要编译的文件的类型，调用对应的GUN编译器而已，比如，用gcc编译一个c文件的话，会有以下几个步骤：</p><p>Step1：Call a preprocessor, like cpp.</p><p>Step2：Call an actual compiler, like cc or cc1.</p><p>Step3：Call an assembler, like as.</p><p>Step4：Call a linker, like ld</p><p>由于编译器是可以更换的，所以gcc不仅仅可以编译C文件</p><p>所以，更准确的说法是：<strong>gcc调用了C compiler，而g++调用了C++ compiler</strong></p><p><strong>gcc和g++的主要区别：</strong> </p><ol><li><p>对于 <em>.c和</em>.cpp文件，gcc分别当做c和cpp文件编译（c和cpp的语法强度是不一样的）</p></li><li><p>对于 <em>.c和</em>.cpp文件，g++则统一当做cpp文件编译</p></li><li><p>使用g++编译文件时，<strong>g++会自动链接标准库STL，而gcc不会自动链接STL</strong></p></li><li><p>gcc在编译C文件时，可使用的预定义宏是比较少的</p></li><li><p>gcc在编译cpp文件时/g++在编译c文件和cpp文件时（这时候gcc和g++调用的都是cpp文件的编译器），会加入一些额外的宏，这些宏如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__GXX_WEAK__</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__cplusplus</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__DEPRECATED</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__GNUG__</span> <span class="token expression"><span class="token number">4</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__EXCEPTIONS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__private_extern__</span> <span class="token expression"><span class="token keyword">extern</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在用gcc编译c++文件时，为了能够使用STL，需要加参数 –lstdc++ ，但这并不代表 gcc –lstdc++ 和 g++等价。</p></li></ol><br><h3 id="再次实践："><a href="#再次实践：" class="headerlink" title="再次实践："></a>再次实践：</h3><br><p>创建 main.c 和 main.cpp 两个文件；里面内容都为</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// insert code here...</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-gcc-编译-c-文件："><a href="#使用-gcc-编译-c-文件：" class="headerlink" title="使用 gcc 编译 .c 文件："></a>使用 gcc 编译 .c 文件：</h4><p>运行 <code>gcc-9 main.c </code> 和 <code>gcc-9 main.c -lstdc++</code> 都编译不过。运行结果：</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_204442.png" width="50%"/ loading="lazy"><p><strong>结论：</strong> 即使添加 -lstdc++ 依旧报错，因为 iostream 是属于 c++的内容，*.c 文件使用 gcc 会当做 C语言的严格程度和范围来编译。<font color=#FF0000  size=4 face="幼圆"><strong>c语言</strong> 应该用 stdio.h，<strong>c++</strong> 才用 iostream</font> </p><h4 id="使用-gcc-编译-cpp-文件："><a href="#使用-gcc-编译-cpp-文件：" class="headerlink" title="使用 gcc 编译 .cpp 文件："></a>使用 gcc 编译 .cpp 文件：</h4><p>运行 <code>gcc-9 main.cpp</code> 编译失败；运行 <code>gcc-9 main.cpp -lstdc++</code> 编译运行成功。运行结果如下：</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_205222.png" width="70%" / loading="lazy"><p><strong>结论：</strong>  gcc 都是 将 cpp 按照 c++ 的严格程度和范围来编译，但是不会自动链接 STL 库。</p><h4 id="使用-g-编译-c-文件："><a href="#使用-g-编译-c-文件：" class="headerlink" title="使用 g++ 编译 .c 文件："></a>使用 g++ 编译 .c 文件：</h4><p>运行命令，运行结果：</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_210956.png" width="50%" / loading="lazy"><p><strong>结论：</strong> g++ 将 .c 按照 c++ 的严格程度和范围来编译，且会自动链接 STL 库。</p><h4 id="使用-g-编译-cpp-文件「推荐」："><a href="#使用-g-编译-cpp-文件「推荐」：" class="headerlink" title="使用 g++ 编译 .cpp 文件「推荐」："></a>使用 g++ 编译 .cpp 文件「推荐」：</h4><p>运行 <code>g++-9 main.cpp</code>，简直太清爽了。运行结果：</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200303_210444.png" width="50%" / loading="lazy"><p><strong>结论:</strong>  g++ 用来编译 .cpp 文件是最为清爽的和合适的。</p><br><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>gcc 和 g++ 都是根据 文件的后缀名称 .c .cpp；来判断是否以 C语言 还是 c++ 来编译文件。</p><p>且<strong>g++会自动链接标准库STL，而gcc不会自动链接STL</strong> 。</p><p>以后更推荐使用 g++。</p><br><h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/02_c_cpp">02_c_cpp</a></p><br><p><strong>参考文章：</strong></p><p><a href="https://www.zhihu.com/question/20940822/answer/536826078">https://www.zhihu.com/question/20940822/answer/536826078</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS上面通过brew命令安装gcc编译器集</title>
      <link href="posts/20cab4ae/"/>
      <url>posts/20cab4ae/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 <code>MacOS 10.14.6</code> 里面使用命令 <code>brew</code> 下载、安装 <code>gcc</code> 编译器集。并且写一个小的例子 .cpp 文件来编译运行，下载的 gcc 是否成功。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 (18G103)</code></p><br><h3 id="GCC-简介："><a href="#GCC-简介：" class="headerlink" title="GCC 简介："></a>GCC 简介：</h3><p><font color=#D0087E size=4 face="幼圆">GCC是库和前端的全面集合，使您能够将源代码编译成二进制应用程序。</font> </p><p>GNU 编译器集合（简称<strong>GCC）</strong>包括 C，Objective-C，C ++，Java，Fortran，Go 和 Ada 的前端，以及所提及语言的库。</p><p>GCC 是 GNU 工具链的主要组成部分，它是根据 GNU 通用公共许可证发行的，在自由软件的持续增长中起着核心作用。</p><p>最初，GCC 仅处理 C 编程语言，但是随着其他前端的开发，GCC 扩展到可以编译 C++，Objective-C，Objective-C ++，Go，Fortran，Ada，Java等。</p><p>GCC 还提供对多种处理器体系结构的支持，因此，它经常用作免费和专有应用程序的开发工具。GCC 也可用于大多数嵌入式平台，包括 AMCC，Symbian 和基于 Freescale Power Architecture 的芯片。</p><p>GNU 编译器集合还针对各种平台，例如 Dreamcast 和 PlayStation 等视频游戏机。而且，GCC 是许多类Unix 操作系统的标准编译器，包括 Linux 和 BSD 系列，FreeBSD 和 LLVM 系统。</p><br><h3 id="GCC-官网："><a href="#GCC-官网：" class="headerlink" title="GCC 官网："></a>GCC 官网：</h3><p><a href="https://mac.softpedia.com/get/Development/Compilers/GCC.shtml">GCC for Mac 官网</a> </p><br><h3 id="GCC-命令安装："><a href="#GCC-命令安装：" class="headerlink" title="GCC 命令安装："></a>GCC 命令安装：</h3><ul><li><p><strong>查看 gcc 版本：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew search gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>其中第一个为 gcc 默认的当前最高版本。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230852.png" width="90%"/ loading="lazy"><ul><li><p><strong>安装 gcc :</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认是安装官网里面最高的版本，截图可知是 gcc 9.2</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230913.png" width="90%"/ loading="lazy"></li></ul><br><h3 id="查看-gcc-安装版本"><a href="#查看-gcc-安装版本" class="headerlink" title="查看 gcc 安装版本:"></a>查看 gcc 安装版本:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现显示的 gcc 这个名字，已经被占了，实际是通过映射来调用 clang ；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230933.png" width="90%"/ loading="lazy"><p>但其实是安装成功了的，通过一个命令的安装地址可知是 gcc 9.2 版本，所以，可以看出正确版本的查看命令：<code>gcc-9 -v</code>  （按下 Tab）；其中要调用正真的 gcc 工具就使用用 <code>gcc-9</code> , 而非 gcc（clang）；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230954.png" width="80%"/ loading="lazy"><br><h3 id="验证-gcc-安装是否成功："><a href="#验证-gcc-安装是否成功：" class="headerlink" title="验证 gcc 安装是否成功："></a>验证 gcc 安装是否成功：</h3><p>创建一个名称为 <code>main.cpp</code> 的文本，写入以下内容：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//  Created by muli on 2020/3/2.</span><span class="token comment">//  Copyright © 2020 muli. All rights reserved.</span><span class="token comment">//</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// insert code here...</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!\n"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code>，用 gcc 编译生成 main.cpp 文件生成一个名称为 mainApp 的可执行程序「Linux 下的文件默认是没有后缀名的」；其中编译选项添加 -lstdc++ ，即使用标准C++库，否则你 Mac 下回编译失败。运行命令 <code>./mainApp</code> 执行 mainApp 程序，查看输出结果：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315231018.png" width="40%"/ loading="lazy"><p>结论：使用 gcc 编译生成连接运行程序成功。</p><br><h3 id="其它疑问："><a href="#其它疑问：" class="headerlink" title="其它疑问："></a>其它疑问：</h3><p>关于上面执行 <code>gcc-9 main.cpp -o mainApp -lstdc++</code> 中，执行这个语句带上 <code>-lstdc++</code> 这个参数；始终觉得有点困惑，需要深究一下。 在下一篇中再作探究。</p><br><h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/linuxExample/tree/master/01_test_gcc">01_test_gcc</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QStyle/DTK重绘Qt-GUI已有控件,举例QScrollBar</title>
      <link href="posts/9514c440/"/>
      <url>posts/9514c440/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　使用 QStyle / DTK 来实现重绘 Qt-GUI 已有的控件，此处以重绘 QScrollBar 举例。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="编程环境："><a href="#编程环境：" class="headerlink" title="编程环境："></a>编程环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS10.14 (18G103)</code> 📎 <code>Qt 5.12.6</code></p><p>　　<strong>💻：</strong>  <code>win10 x64 专业版 (1803)</code> 📎 <code>Qt 5.9.8</code></p><p>　　<strong>💻：</strong>  <code>uos20 amd64 专业版 (Kernel 4.19)</code> 📎 <code>Qt 5.11.3</code></p><br><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>　　由<a href="https://blog.csdn.net/qq_33154343/article/details/104367878">上一篇</a> 的文章已经可理解 <code>QStyle</code> 、 <code>QCommonStyle</code> 和自定义的 <code>MyStyle</code> 三者之间的关系；对于基础的风格控件也有所学习了。本篇承接上文，开始尝试，自己绘画一个新的风格（样式）的控件，为了本篇的简洁，这里就以 <code>QScrollBar</code> 为例。</p><br><h3 id="查看-QScrollBar-的构成，如何查找源码？"><a href="#查看-QScrollBar-的构成，如何查找源码？" class="headerlink" title="查看 QScrollBar 的构成，如何查找源码？"></a>查看 QScrollBar 的构成，如何查找源码？</h3><p>　　想要绘画某一个 GUI 控件，必须了解它是由那些小部件组成的，换言之，在前面的重载函数里面，需要的指导重绘哪一些枚举参数❓</p><p>　　此处提供另外一篇比的先写的重绘文章: <a href="https://blog.csdn.net/qq_33154343/article/details/100943187">QStyle自定义重绘QScrollBar</a>，里面是从另外一个角度来解析 <code>QScrollBar</code> 控件的构成；可以结合着来看；</p><br><h3 id="解析绘画控件的步骤："><a href="#解析绘画控件的步骤：" class="headerlink" title="解析绘画控件的步骤："></a><strong>解析绘画控件的步骤：</strong></h3><ol><li><p><strong>打开 QtCreator 此 IDE，在自己的左侧的工程项目中，再打开qt-core–gui-base 源码的工程，便于查找和🔍所需的源码</strong></p><p><code>src</code> 工程打开，只是为了便于在下面搜索框里面查找需要的 qt 源码文件所在的路径在 <code>/Users/muli/Qt5.12.6/5.12.6/Src/qtbase/src/src.pro</code>；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_142504.png"  / loading="lazy"><p>win 系统下的路径也差不多；Linux 系统路径则是在自定义安装 qt 源码地方（<strong>命令安装</strong>）或者默认安装的地方（***.run安装** ）。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_142952.png" width="50%" / loading="lazy"><br></li><li><p><strong>搜索 qcommonstyle.cpp 这个文件，查看缺省风格是如何写成的</strong></p><p>通过查看 qcommonstyle.cpp 这个文件，来🔍  <code>QScrollBar</code> 在默认缺省风格下面的的绘画方式；其中参考最多的就是 <code>qcommonstyle</code> 风格，在某些情况下也可以参考 <code>qfusionstyle</code> 风格的绘画思路；两者可以思路互相印衬，得到聊暗花明又一村的柑橘；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_143821.png" width="50%" / loading="lazy"><br></li><li><p><strong>提取关键元素枚举</strong></p><p>打开上面的文件，点击 command + F 进行🔍 <code>ScrooBar</code> 这个单词，将所有的枚举都绘画记录下来；用来重构这个元素</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_144929.png" width="80%" / loading="lazy"><p>找到对应的 </p><p>CC_ScrollBar， CC_ScrollBar， SC_ScrollBarSubLine ， SC_ScrollBarAddLine， SC_ScrollBarSubPage， SC_ScrollBarAddPage， SC_ScrollBarGroove， SC_ScrollBarSlider，PM_ScrollBarSliderMin， PM_ScrollBarExtent， SH_ScrollBar_ContextMenu， SH_ScrollBar_RollBetweenButtons， SH_ScrollBar_Transient</p><p>这些枚举；初看，这么多的枚举貌似还挺多（划掉貌似）；可以按照你想完成的工足量，其中有些是重要的，属于必不可少；有些是不那么重要的，可以先不用重绘使用到的；<strong>要能按照 CC_ ，SC_， 来组装该控件，组装完成发现各自带边的部分如下；</strong> </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224200.png" style="zoom: 67%;" / loading="lazy"><br></li><li><p><strong>找到对应的重载函数，开始重写此虚函数</strong></p><p>为了比较简单的写出这个🌰，简化处理；只需重新绘画里面的五个枚举，顺着 <code>CE_</code> 的作为参数，逆向推函数，发现需要只要调用 <code>drawControl()</code> 即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br></li><li><p><strong>按照 风格 + 需求，来进行绘画</strong></p><p>这里重绘代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token operator">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CE_ScrollBarAddPage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//增加滑槽</span>        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#bfe9ff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> CE_ScrollBarSubPage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//减少滑槽</span>        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#EC6EAD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> CE_ScrollBarSlider<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑块</span>        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#A8BFFF"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> CE_ScrollBarAddLine<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//增加按钮</span>        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#21d4fd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> CE_ScrollBarSubLine<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//减少按钮</span>        p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#de6161"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br></li><li><p><strong>查看最终效果，若是成功，则项目成功结束🔚</strong></p><p>这里这里最后的效果如下，其同一个控件在 MacOS 和 Linux(uos20) 下面的表现样式是一样的；可以见其已经绘画成功.</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/Snip20200227_152044.png" width="100%" / loading="lazy"></li></ol><h3 id="自定义风格完整代码如下："><a href="#自定义风格完整代码如下：" class="headerlink" title="自定义风格完整代码如下："></a>自定义风格完整代码如下：</h3><p>　　回顾一下代码和绘画流程；创建一个自定义的风格 <code>class MyStyle : public QCommonStyle</code>，其中选择自己需要的继承的函数进行重写；然后重写 虚函数。</p><p><strong>MyStyle：MyStyle 的完整声明：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">MYSTYLE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MYSTYLE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCommonStyle></span></span><span class="token keyword">class</span> <span class="token class-name">MyStyle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QCommonStyle</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// QStyle interface</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// MYSTYLE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="项目分析："><a href="#项目分析：" class="headerlink" title="项目分析："></a>项目分析：</h3><p>　　这里，对整个简单的项目进行分析一下，为后面绘画一个复杂的 Qt 没有的控件做准备，也就是绘画自定义控件；在这里再次梳理一下，下一篇提升就是在此文章基础上进行绘画重写。</p><ul><li><strong>QtStyle</strong><ul><li><strong>QStyleEx.pro：</strong> 用 qmake 来生成的 makefile 文件的配置文件</li><li>myshtyle.h: 自定义风格的类的声明</li><li>myshtyle.cpp: 自定义风格的类的定义</li><li>widget.h: 用来衬托 <code>ScrollBar</code> 的背景控件类的声明</li><li>widget.cpp: 用来衬托 <code>ScrollBar</code> 的背景控件类的定义</li><li>main.cpp: 整个项目启动的入口</li></ul></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200227_153044.png" width="65%" / loading="lazy"><br><h3 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h3><p><a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample02/QtStyleEx">QtExample02</a></p><br><h3 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章:"></a>系列文章:</h3><ol><li><a href="https://blog.csdn.net/qq_33154343/article/details/104367878">QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104537944">QStyle/DTK重绘Qt-GUI已有控件,举例QScrollBar</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104987446">QStyle/DTK重绘自定义需求控件,举例MySwitchButton</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Mac使用Wine运行Windows软件：PanDownload_Beat(非虚拟机)</title>
      <link href="posts/15e60acb/"/>
      <url>posts/15e60acb/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　<strong>在 MacOS10.14.6 中，安装 Wine 运行 Windows 软件百度网盘。详细讲述 Wine 的下载，安装，使用教程。</strong> <font color=#0000FF size=4 face="幼圆"><strong>本篇也是在 Mac下使用破解版不限速百度云 PanDownload_Beat ，直接运行该程序，非安装虚拟机方式使用。</strong></font></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="运行环境："><a href="#运行环境：" class="headerlink" title="运行环境："></a>运行环境：</h3><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>XQuartz &gt;= 2.7.7 </code> 📎 <code>winehq-stable-5.0</code> 📎 <code>PanDownload_Beat2.2.2</code></p><br><h3 id="Wine-简述："><a href="#Wine-简述：" class="headerlink" title="Wine 简述："></a>Wine 简述：</h3><p>　　Wine （“Wine Is Not an Emulator” 的首字母缩写）是一个能够在多种 POSIX-compliant 操作系统（诸如 Linux，macOS 及 BSD 等）上运行 Windows 应用的兼容层。Wine 不是像虚拟机或者模拟器一样模仿内部的 Windows 逻辑，而是將 Windows API 调用翻译成为动态的 POSIX 调用，免除了性能和其他一些行为的内存占用，让你能够干净地集合 Windows 应用到你的桌面。</p><p>　　Wine　通过提供一个兼容层来将　Windows　的系统调用转换成与　POSIX　标准的系统调用。它还提供了　Windows　系统运行库的替代品和一些系统组件的替代品。为了避免著作权问题，Wine　主要使用黑箱测试逆向工程来编写。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_193945.png" width="60%"/ loading="lazy"><p><font color=#D0087E size=5 face="幼圆">其相关官网：</font></p><ol><li><p><strong>wine：</strong></p><p>官网：<a href="https://www.winehq.org/">https://www.winehq.org/</a></p><p>github: <a href="https://github.com/wine-mirror/wine">https://github.com/wine-mirror/wine</a></p></li><li><p><strong>wineBottle:</strong></p><p>官网：<a href="https://winebottler.kronenberg.org/">https://winebottler.kronenberg.org/</a></p></li><li><p><strong>WineSkin：</strong></p><p>官网：<a href="http://wineskin.urgesoftware.com/">http://wineskin.urgesoftware.com/</a></p></li><li><p><strong>PlayOnMac:</strong></p><p><a href="https://www.playonmac.com/en/">https://www.playonmac.com/en/</a></p></li><li><p><strong>CrossOver：</strong></p><p>官网：<a href="https://www.codeweavers.com/">https://www.codeweavers.com/</a></p></li></ol><p>注：CrossOver 若想支持正版，请选择🇺🇸官网网址， 不要误进入某马丁杰克的代理的国内网址；</p><br><h3 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h3><h4 id="xquartz-介绍："><a href="#xquartz-介绍：" class="headerlink" title="xquartz 介绍："></a>xquartz 介绍：</h4><p>　　<font color=#FF0000  size=4 face="幼圆"><strong>xquartz 是苹果系统中支持窗口界面的一个项目；</strong> </font><br><strong>先决条件：</strong></p><ol><li>XQuartz &gt;= 2.7.7</li><li>不能将Gatekeeper设置为阻止未签名的程序包。</li></ol><p><strong>安装：</strong> .pkg文件和tarball存档均可在<a href="https://dl.winehq.org/wine-builds/macosx/download.html">https://dl.winehq.org/wine-builds/macosx/download.html上获得</a>。对于没有经验的用户，建议从.pkg文件安装。</p><p>　　Wine 的运行需要 <code>xquartz</code> 的支持，如果先没有安装 xquartz 就直接安装Wine 程序，就会直接报错。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_113553.png" width="60%" / loading="lazy"><h4 id="安装-xquartz，执行安装命令："><a href="#安装-xquartz，执行安装命令：" class="headerlink" title="安装 xquartz，执行安装命令："></a>安装 xquartz，执行安装命令：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew cask <span class="token function">install</span> xquartz //XQuartz可以使用安装；安装最后一步需要输入密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_114138.png" width="60%" / loading="lazy"><br><h3 id="下载-wine-（MacOS-版）程序："><a href="#下载-wine-（MacOS-版）程序：" class="headerlink" title="下载 wine （MacOS 版）程序："></a>下载 wine （MacOS 版）程序：</h3><p>　　<font color=#FF0000  size=4 face="幼圆">开发和稳定分支的正式WineHQ软件包可用于macOS 10.8至10.14 <em><strong>（Wine不适用于macOS Catalina 10.15）</strong></em>。</font></p><p>官网：<a href="https://dl.winehq.org/wine-builds/macosx/download.html">https://dl.winehq.org/wine-builds/macosx/download.html</a> </p><p>地址：<a href="https://pan.baidu.com/s/1fjoK8BFANtEt5fzyD2Dx_Q">https://pan.baidu.com/s/1fjoK8BFANtEt5fzyD2Dx_Q</a>  密码:4qrz</p><p><strong>版本说明：</strong></p><ul><li>“Wine Stable”：公开的稳定版（推荐）</li><li>“Wine Development”：开发版本</li><li>“Wine Staging”：在发布稳定版之前的最后一个测试版本</li></ul><p>&lt;img src=”<a href="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_120637.png&quot;">https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_120637.png&quot;</a> width=”60%”</p><br><h3 id="安装-wine-程序："><a href="#安装-wine-程序：" class="headerlink" title="安装 wine 程序："></a>安装 wine 程序：</h3><ol><li><p>双击 winehq-stable-5.0.pkg 程序</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_114927.png" width="60%" / loading="lazy"></li><li><p>选择为所有用户安装</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_114953.png" width="60%" / loading="lazy"></li><li><p>勾选 64bit，用于可以安装 windows 的 64 位软件</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115047.png" width="60%" / loading="lazy"></li><li><p>等待安装过程</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115103.png" width="60%" / loading="lazy"> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115117.png" width="60%" / loading="lazy"> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115124.png" width="60%" / loading="lazy"></li><li><p>安装成功</p><p>安装成功会在启动器里面，出现如下如的图标；但是启动之后</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115149.png" style="zoom:50%;" / loading="lazy"></li></ol><br><h3 id="运行-wine-程序："><a href="#运行-wine-程序：" class="headerlink" title="运行 wine 程序："></a>运行 wine 程序：</h3><p>　　Wine Stable 这个软件，启动之后，并不会有常见的 GUI 界面，只有一个终端的界面，并且运行该软件只能够使用命令；幸运的是，命令非常简单</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115313.png" width="70%"/ loading="lazy"> <p>运行我想要安装的 <code>BaiduNetdisk_6.8.9.1.exe</code> （带路径）程序，在终端输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wine /Users/muli/softInstll/BaiduNetdisk_6.8.9.1.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115703.png" width="70%" / loading="lazy"><p>运行之后，会发现没有更新 wine 的配置，要安装 Wine Gecko 安装器，点击安装即可。下载速度非常之慢，挂着梯子耐心等待；若是中间失败，可以点击取消，多次重复安装，一直到等到全部下载和安装成功。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_115800.png" width="70%"/ loading="lazy"> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_120422.png" width="70%"/ loading="lazy"><p>安装成功：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_133245.png" width="70%"/ loading="lazy"><p>也可以执行命令 <code>winecfg</code>，来进行修改配置文件：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_122856.png"  width="50%" / loading="lazy"><p>就是享受使用的成果时候，在 MacOS 里面使用该 windows 的百度网盘， 享受 mac 没有的隐藏空间功能和正常的使用快乐。可以看到，在 svip 的加速下，可以实现高速下载。 </p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_192533.png" width="90%"/ loading="lazy"><br><h3 id="用-wine-运行-win-官网百度网盘-程序："><a href="#用-wine-运行-win-官网百度网盘-程序：" class="headerlink" title="用 wine 运行 win(官网百度网盘) 程序："></a>用 wine 运行 win(官网百度网盘) 程序：</h3><ul><li><p><strong>方式一：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//执行命令wine 路径+xxx.exe  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>方式二：</strong></p><p>鼠标右键执行，如图</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200225_200943.png"  width="70%"/ loading="lazy"></li></ul><br><h3 id="用-wine-运行-win-破解PanDownload-程序【非虚拟机】："><a href="#用-wine-运行-win-破解PanDownload-程序【非虚拟机】：" class="headerlink" title="用 wine 运行 win(破解PanDownload) 程序【非虚拟机】："></a>用 wine 运行 win(破解PanDownload) 程序【非虚拟机】：</h3><p>下载 PanDownload_v2.2.2 版本之后，打开文件，运行如下，然后扫码登录自己的账号，自行下载，可见速度可以没有被线速。</p> <img src="https://i.imgur.com/7qOjcx1.png" width="70%"/ loading="lazy"> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/img/2020/mark_mark_Snip20200306_123148.png" width="90%"/ loading="lazy"><br><h3 id="PanDownload-v2-2-2下载地址："><a href="#PanDownload-v2-2-2下载地址：" class="headerlink" title="PanDownload_v2.2.2下载地址："></a>PanDownload_v2.2.2下载地址：</h3><ul><li><strong>PC 内测版：</strong> <ul><li>链接:<a href="https://pan.baidu.com/s/1FNdXvzoWJX4JfWSsaJsoUw">https://pan.baidu.com/s/1FNdXvzoWJX4JfWSsaJsoUw</a>  密码:87d1</li></ul></li></ul><ul><li><strong>PC 正式版：</strong><ul><li>链接:<a href="https://pan.baidu.com/s/1vSxzgw2wWHb5fQ_OCfoc5w">https://pan.baidu.com/s/1vSxzgw2wWHb5fQ_OCfoc5w</a>  密码:nibj</li></ul></li></ul><ul><li><strong>Android 版本：</strong> <ul><li>链接:<a href="https://pan.baidu.com/s/1DDPwdpBpA0oP7uJgTAdsdw">https://pan.baidu.com/s/1DDPwdpBpA0oP7uJgTAdsdw</a>  密码:k69u</li></ul></li></ul><p>更新时间 20202-03-06</p><br><h3 id="点个赞？"><a href="#点个赞？" class="headerlink" title="点个赞？"></a>点个赞？</h3><p>不看看本小结的小标题？</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS10.14.6中使用Tunnelblick(openVPN)连接内网</title>
      <link href="posts/cdb00c6d/"/>
      <url>posts/cdb00c6d/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　在 MacOS10.14.6 系统里面，使用 Tunnelblick （openVPN） 回到公司内网办公，实现远程办公。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="Tunnelblick-下载、安装、使用："><a href="#Tunnelblick-下载、安装、使用：" class="headerlink" title="Tunnelblick 下载、安装、使用："></a>Tunnelblick 下载、安装、使用：</h3><ol><li><p>下载 Tunnelblick 软件：</p><ul><li>下载地址一：官网：<a href="https://tunnelblick.net/">https://tunnelblick.net/</a></li><li>下载地址二：链接:<a href="https://pan.baidu.com/s/19xTHe-WQ_jjfYQ3n0Ib-NA">https://pan.baidu.com/s/19xTHe-WQ_jjfYQ3n0Ib-NA</a>  密码:i1b0 「下载于 2020-02-24」</li></ul> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_180214.png" width="75%"/ loading="lazy"></li><li><p>安装，双击 Tunnelblick.app </p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_180626.png" width="75%"/ loading="lazy"></li><li><p>去掉勾选的☑️的自动更新</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_180654.png" width="75%" / loading="lazy"></li><li><p>启动软件</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_180715.png" width="75%" / loading="lazy"></li><li><p>查看使用说说明</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_180805.png" width="75%" / loading="lazy"> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_180815.png" width="75%" / loading="lazy"></li><li><p>导入配置文件</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_183841.png" width="75%"/ loading="lazy"></li><li><p>输入账号密码（请从自己的管理员那里获取）</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img02/mark_Snip20200224_181341.png" width="75%" / loading="lazy"></li><li><p>成功使用，登录回内网</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - 科学上网vpn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小技巧：QtCreator用快捷键秒实现，声明在基类中重写的派生类(纯)虚函数</title>
      <link href="posts/e34e1101/"/>
      <url>posts/e34e1101/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>　Qt Creator 5.9+ 的一个使用技巧，使用快捷键在派生类中直接声明重写基类的（纯）虚函数，和快速🔜实现声明类的实现。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="快捷键声明重写的虚函数："><a href="#快捷键声明重写的虚函数：" class="headerlink" title="快捷键声明重写的虚函数："></a>快捷键声明重写的虚函数：</h3><ol><li><p>源文件顶部有 #include  QCommonStyle </p></li><li><p>该派生类 MyStyle 继承于 QCommonStyle</p></li><li><p>光标在单词 QCommonStyle 上 </p></li><li><p>按住 Command + 鼠标右键，弹出菜单栏 </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200220_213755.jpeg" width="90%"/ loading="lazy"></li><li><p>选中插入（继承于父类的）虚函数 ✅</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200220_213843.jpeg" width="90%"/ loading="lazy"> </li></ol><br>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS，在zsh中设置，使用Homebrew具有自动补全功能</title>
      <link href="posts/e5200eb9/"/>
      <url>posts/e5200eb9/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  使用 MacOS 10.14.6 在，在 zsh 里面使用 Homebrew 命令时候，对其设置补全功能🎃。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>📌本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/104424732">在MacOS，在zsh中设置，使用Homebrew具有自动补全功能</a></p></blockquote><br><h4 id="背景说明："><a href="#背景说明：" class="headerlink" title="背景说明："></a>背景说明：</h4><p>　　在 MacOS 10.14 中，在 zsh 中使用 Homebrew 命令，是没有补全功能的。让人不优雅🎁。这里设置 Homebrew 的补全功能。</p><br><h4 id="设置步骤："><a href="#设置步骤：" class="headerlink" title="设置步骤："></a>设置步骤：</h4><ol><li><p>安装 HomeBrew 的补全文件，默认是安装到 <code>/usr/local/Cellar/</code> 路径。执行命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> zsh-completions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 <code>zsh-completions</code> 的路径导入，否则找不到该文件仍无效，执行命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">fpath</span><span class="token operator">=</span><span class="token punctuation">(</span>/usr/local/Cellar/zsh-completions/0.31.0/share/zsh-completions <span class="token variable">$fpath</span><span class="token punctuation">)</span>compinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注：zsh-completions/你实际版本号/</p></blockquote></li><li><p>验证补全生效</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200220_202007.jpeg"/ loading="lazy"></li></ol><br><h4 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h4><p>　　<a href="https://tommy.net.cn/2015/02/24/enable-zsh-completion-of-brew-under-mac-os-x/">在 Mac OS X 系统下为 Brew 开启 Zsh 补全功能</a></p><p>　　<a href="https://zhuanlan.zhihu.com/p/22598799">Homebrew总结</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</title>
      <link href="posts/f6acd9d8/"/>
      <url>posts/f6acd9d8/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  本文章讲解类容如下</p><ul><li><p>讲述绘画自定义风格的 Style 的框架结构；</p></li><li><p>使用 QStyle 设置界面的外观</p></li><li><p>QStyle / QCommonStyle 继承关系图</p></li><li><p>如何继承 QCommonStyle 类来创建自己的自定义的风格样式 xxStyle</p></li><li><p>讲解如下函数：polish()，unpolish()，drawPrimitive()，drawControl()，subElementRect()，drawComplexControl()，subControlRect()，pixelMetric()，styleHint()</p></li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="QStyle-设置界面的外观："><a href="#QStyle-设置界面的外观：" class="headerlink" title="QStyle 设置界面的外观："></a>QStyle 设置界面的外观：</h2><p>　　因 Qt 本身即是跨平台的一个类库，其中 GUI 的控件，在不同的操作系统下，会有着不同的显示效果，就是默认缺省效果。其中 <code>QApplication::style()</code> 可以返回应用程序的缺省样式。Qt 内置了一系列样式，windows 样式和 fusion 样式默认是可用的，而有些样式需在特定平台上才有用，比如 windowsxp 样式、window svisata 样式、gtk 样式、macintosh 样式等。</p><p>　　Qt 内置的界面的控件都是使用 <code>QStyle</code> 来进行绘画的，来确保它们在运行平台的界面效果是一致的。下面以 <code>QTableWidget</code>（含<code>QScrollBar</code>） 在不同的操作系统上面的样式效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_20200216185631.png"/ loading="lazy"><p>　　可以看到，即使是相同的控件，使用同一个主题 Style 在不同的操作系统下，其样式也是一样的。严谨说，有那么一丢丢的细节差异，但是整体风格基本是保持一致的。</p><br><h2 id="QCommonStyle-继承关系图："><a href="#QCommonStyle-继承关系图：" class="headerlink" title="QCommonStyle 继承关系图："></a>QCommonStyle 继承关系图：</h2><p>　　下面给出 <code>QCommonStyle</code> 类的继承关系图；这个类是一个比较完整的基类的「eg：某一具体风格 QWindowsStyle、QMacStyle」的基类。<strong>它非常重要</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200216_231155.jpeg"/ loading="lazy"><br><h2 id="QCommonStyle："><a href="#QCommonStyle：" class="headerlink" title="QCommonStyle："></a>QCommonStyle：</h2><h3 id="Qt-文档理解："><a href="#Qt-文档理解：" class="headerlink" title="Qt 文档理解："></a>Qt 文档理解：</h3><p>首先参看 Qt 官方资料：</p><blockquote><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>这个抽象类实现了一些小部件的外观，这些外观是Qt提供和提供的所有GUI样式所共有的。</p><p>由于QCommonStyle继承了<a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a>，因此其所有功能都在<a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a>文档中进行了充分记录。</p><p><strong>另请参见</strong><a href="https://doc.qt.io/qt-5/qstyle.html">QStyle</a>和<a href="https://doc.qt.io/qt-5/qproxystyle.html">QProxyStyle</a>。</p></blockquote><h3 id="项目中理解："><a href="#项目中理解：" class="headerlink" title="项目中理解："></a>项目中理解：</h3><p><strong>接着，就是实际项目中，对此 QCommonStyle 类的理解：</strong></p><p>　　<code>QCommonStyle</code> 是一个已经比较完备的基础类，言外之意是，已经可以看成某一个具体的样式风格了，但是具体的某些细节还是需要打磨（即再派生一个子类）；但是这并不妨碍什么(🐶头)，可以作为我们在写自定义风格时候的一个 <strong>最重要的、也是最经常翻看源码的参考类</strong> ；像具体的控件 QSlider，QProgressBar、QPushButton 等 GUI 控件的界面样式，都是在这里面实现的。</p><p>　　而 QStyle 是一个纯虚抽象基类。是所有风格的源头祖上，查看他的 .h 文件会收获风格的框架，初看可以看出一个模糊框架，后续有一定实战代码再来反复回味，体会框架。</p><br><h2 id="创建一种自定义-Style-风格："><a href="#创建一种自定义-Style-风格：" class="headerlink" title="创建一种自定义 Style 风格："></a>创建一种自定义 Style 风格：</h2><p>　　觉得所有控件的风格样式都是不满足你的审美，那又如何创建一个自定义的风格类型，属于和 MacOS，Windows，Linux 平级的那种风格该如何创建呢？</p><p>　　<strong>这里我创建一个自定义风格 <font color=#D0087E size=4 face="幼圆">class: MyStyle</font></strong></p><p>　　因为希望能够跨平台使用该风格，由上图的继承关系图可看，一般有三种继承方式：</p><p>　　QCommonStyle 类实现了 GUI 控件的共同界面外观， 因此该类实现的界面并不一定完整，而 QProxyStyle 类则实现了一个 QStyle(通常是默认 的系统样式)，因此该类的实现比较完整。</p><ul><li><p>继承于 QCommonStyle ：</p><ul><li>优点一：接口很全面，不需要写过多地代码（相对直接继承 QStyle 而言）</li><li>优点二：可以跨平台使用该风格（相对直接继承于 QMacStyle）</li></ul></li><li><p>继承于 QProxyStyle ：</p><ul><li>优点：QCommonStyle 的子类 QProxyStyle</li></ul></li><li><p>继承于 QStyle :</p><ul><li>缺点明显：里面虚函数超级多，整个工作量庞大无比</li></ul></li></ul><p>　　然后在该 <font color=#D0087E size=4 face="幼圆">class: MyStyle</font> 里面，重写如下的虚函数即可：👇的是必不可少</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// QStyle interface</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">polish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unpolish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">drawPrimitive</span><span class="token punctuation">(</span>PrimitiveElement pe<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    QRect <span class="token function">subElementRect</span><span class="token punctuation">(</span>SubElement subElement<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">drawComplexControl</span><span class="token punctuation">(</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    QRect <span class="token function">subControlRect</span><span class="token punctuation">(</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span> SubControl sc<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">pixelMetric</span><span class="token punctuation">(</span>PixelMetric metric<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    QSize <span class="token function">sizeFromContents</span><span class="token punctuation">(</span>ContentsType ct<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QSize <span class="token operator">&amp;</span>contentsSize<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">styleHint</span><span class="token punctuation">(</span>StyleHint stylehint<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">,</span> QStyleHintReturn <span class="token operator">*</span>returnData<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="继承-QStyle-QCommonStyle-的虚函数的含义："><a href="#继承-QStyle-QCommonStyle-的虚函数的含义：" class="headerlink" title="继承 QStyle/QCommonStyle 的虚函数的含义："></a>继承 QStyle/QCommonStyle 的虚函数的含义：</h2><p>　　因为需要在 <font color=#D0087E size=4 face="幼圆"><strong>class: MyStyle</strong></font> 里面继承重写如 QStyle/QCommonStyle 的虚函数；这里讲述它们的基本作用。以及调用顺序，犹记得，网上这一块的教程基本没有，只有那么一篇的文章讲解的很棒，反复揣摩十遍以上，也总是是是而非的感觉，朦胧且模糊。这也算是我出该文章的一个很大原因。</p><p>　　这些函数之间的调用顺序如下「并不是是💯的严谨」，为了理解框架和脉络结构，在一个比较短的时间内入门，可以这样理解，在没有大的错误下：</p><h3 id="控件的行为的流程图："><a href="#控件的行为的流程图：" class="headerlink" title="控件的行为的流程图："></a>控件的行为的流程图：</h3><ul><li><strong>插件相关</strong><ol><li>安装指定控件的指定功能</li><li>卸载指定控件的指定功能</li><li>预先预备（开启）指定控件的指定功能，准备开启</li></ol></li></ul><p>　　此三个函数摆放一起，其执行顺序相似，用来初始化控件的附加功能。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%E7%9A%84%E5%89%AF%E6%9C%AC.png"/ loading="lazy"><h3 id="控件的绘画流程："><a href="#控件的绘画流程：" class="headerlink" title="控件的绘画流程："></a>控件的绘画流程：</h3><ul><li><strong>绘画相关：</strong><ol><li><strong>Qt 原生</strong> 或  <strong>自定义需求</strong> 定义好一些基础的宽度，用枚举值记录📝一些基本的像素值（一般 int 类型）</li><li>定义该 GUI 控件的矩形大小，给它一个系统的初始化大小 QSize</li><li>根据该 QRect 大小分为多个小的 QRect（这个是有 Qt 本生就将一个<strong>复杂控件</strong> 用枚举值来划分好了为若干个<strong>简单地控件</strong> ）</li><li>通过<code>drawComplexControl()</code>或<code>drawControl()</code>向下分派划分任务</li><li>对 GUI 控件进行风格的重绘</li></ol></li></ul><p><font color=#FF0000  size=4 face="幼圆">这里的箭黑色→，是指调用顺序，有时候也可以代指 A 调用了 B 的函数；而棕色➡︎表示也可以跳过黑色一部分，直接跳着调用下面的。</font></p><ul><li><font color=#FF0000  size=4 face="幼圆">当遇到简单控件时候，可以直接按照褐色，直接进行具体的绘画，而没有拆分步骤。</font></li><li><font color=#FF0000  size=4 face="幼圆">而遇到复杂控件时候就可以按照黑色→依顺序拆分为多个简单控件，进行绘画</font></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_IMG_1584.PNG"/ loading="lazy"><br><h2 id="虚函数作用-："><a href="#虚函数作用-：" class="headerlink" title="虚函数作用:："></a>虚函数作用:：</h2><p>　　上面继承的一些需要重写的虚函数的，它们大致的功能如下，调用步骤也是如下面所讲。犹记得，当初初看代码懵逼，查阅 Qt 文档 Assistant 里面什么都没写，wtf❓❓❓</p><p>　　再来回顾感受一下官方没有说明外加套娃的骚操作：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200218_003815.jpeg"/ loading="lazy"><br><h3 id="polish"><a href="#polish" class="headerlink" title="polish():"></a>polish():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//polish():</font>  安装 GUI 的某控件的某一功能，启用该行为<br>virtual void polish(QWidget *widget) override;</p></blockquote><p><strong>分析：</strong> </p><p>　　用于初始化部件的外观，会在部件创建完成之后，在第一次显示之前被调用，默 认实现什么也不做。子类化 QStyle 时，可利用以上函数的调用时机，对部件的一些属性 进行初始化。</p><p>　　这个函数理解起来有困难，至少一开始是，那么就举一个实际需求的栗子：</p><p><strong>如果检测到该控件是 QScrollBar 的话，就设置其为透明；</strong></p><p> <font color=#FE7207  size=4 face="幼圆"><em>Qt::WA_OpaquePaintEvent枚举含义：</em></font></p><p><font color=#FE7207  size=4 face="幼圆"> 注意：与WA_NoSystemBackground不同，WA_OpaquePaintEvent努力避免透明的窗口背景。 </font></p><p>注：可以想象为 MacOS 系统的滚动条，鼠标离开就会逐渐消失（隐藏、透明）的效果。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">polish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">polish</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>qobject_cast<span class="token operator">&lt;</span>QComboBox <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>            <span class="token operator">||</span> qobject_cast<span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        w<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>WA_Hover<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> scrollBar <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>        scrollBar<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>WA_OpaquePaintEvent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="unpolish"><a href="#unpolish" class="headerlink" title="unpolish():"></a>unpolish():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//unpolish():</font>  卸载 GUI 的某控件的某一功能，禁用该行为 </p><p>virtual void unpolish(QWidget *widget) override;</p></blockquote><p><strong>分析：</strong> </p><p>　　作用和　polish()　相似，但只有在部件被销毁时才会被调用。举一个实际需求的栗子：</p><p><strong>如果检测到该控件是 QScrollBar 的话，就设置其不透明；</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">unpolish</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">unpolish</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>qobject_cast<span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>      w<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>WA_Hover<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> scrollBar <span class="token operator">=</span> qobject_cast<span class="token operator">&lt;</span>QScrollBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>      scrollBar<span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>WA_OpaquePaintEvent<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="styleHint"><a href="#styleHint" class="headerlink" title="styleHint():"></a>styleHint():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//styleHint():</font>  开启或关闭某一 GUI 的控件的行为，或开启选择指定的某种特性</p><p>virtual int styleHint(StyleHint stylehint, const QStyleOption *opt, const QWidget *widget, QStyleHintReturn *returnData) const override;</p></blockquote><p><strong>分析：</strong></p><p>　　这个同样是不怎么好理解。举一🍐：</p><p><strong>对 QSlider 控件，开启鼠标左键和中键，鼠标🖱的中键(和⬅️键)指滑槽哪一个刻度，其游标就跳转到该刻度值的地方</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token class-name">MyStyle</span><span class="token operator">::</span><span class="token function">styleHint</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>StyleHint sh<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">,</span> QStyleHintReturn <span class="token operator">*</span>shret<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> SH_Slider_AbsoluteSetButtons<span class="token operator">:</span>        <span class="token keyword">return</span> Qt<span class="token operator">::</span>LeftButton <span class="token operator">|</span> Qt<span class="token operator">::</span>MidButton<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">styleHint</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> w<span class="token punctuation">,</span> shret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="subControlRect"><a href="#subControlRect" class="headerlink" title="subControlRect():"></a>subControlRect():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//subControlRect():</font>  返回一个 GUI 的复杂控件 cc 的子控件 subControl 的矩形</p><p>virtual QRect subControlRect(ComplexControl cc, const QStyleOptionComplex *opt, SubControl sc, const QWidget *widget) const override;</p></blockquote><br><h3 id="sizeFromContents"><a href="#sizeFromContents" class="headerlink" title="sizeFromContents():"></a>sizeFromContents():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//sizeFromContents():</font>  返回某一 GUI 控件的中心矩形的大小</p><p>virtual QSize sizeFromContents(ContentsType ct, const QStyleOption *opt, const QSize &amp;contentsSize, const QWidget *w) const override;</p></blockquote><br><h3 id="subElementRect"><a href="#subElementRect" class="headerlink" title="subElementRect():"></a>subElementRect():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//subElementRect():</font>  返回<strong>某一个元素</strong>的矩形大小；由样式选项 option 所描述的控件的子元素 subElement 的矩形；</p><p>virtual QRect subElementRect(SubElement subElement, const QStyleOption *option, const QWidget *widget) const override;</p><p><strong>「补充：某一个元素 ≈ 某一个枚举 ≈ 具体控件的某一个部分」</strong></p></blockquote><br><h3 id="pixelMetric"><a href="#pixelMetric" class="headerlink" title="pixelMetric():"></a>pixelMetric():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//pixelMetric():</font> 返回<strong>某一个元素</strong>的长度</p><p>virtual int pixelMetric(PixelMetric metric, const QStyleOption *option, const QWidget *widget) const override;</p><p><strong>「补充：某一个元素 ≈ 某一个枚举 ≈ 具体控件的某一个部分」</strong></p></blockquote><p><strong>分析：</strong></p><p>　　获取菜单栏的 item 之间的竖直之间的间隔 PM_MenuVMargin = 8 px；**</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">pixelMetric</span><span class="token punctuation">(</span>PixelMetric metric<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>metric<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> PM_MenuVMargin<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>metric<span class="token punctuation">,</span> option<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="drawComplexControl"><a href="#drawComplexControl" class="headerlink" title="drawComplexControl():"></a>drawComplexControl():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//drawComplexControl():</font> 绘画 GUI 某一浮渣控件的元素，将该控件的每一个部分都绘画分派出去，调用 drawControl() 里面对应的枚举。</p><p>virtual void drawComplexControl(ComplexControl cc, const QStyleOptionComplex *opt, QPainter *p, const QWidget *widget) const override;</p></blockquote><p>可参考drawControl();但是是比它更上一层。</p><br><h3 id="drawControl"><a href="#drawControl" class="headerlink" title="drawControl():"></a>drawControl():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//drawControl():</font>  绘画 GUI 某一控件的某一部分(控制元素)</p><p>virtual void drawControl(ControlElement element, const QStyleOption *opt, QPainter *p, const QWidget *w) const override;</p></blockquote><p><strong>分析：</strong></p><p>　　此处以绘画复杂解GUI 控件，进度条 QProgressBar 为例子：</p><p>其为复杂控件，用一张图来表示，</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200217_235136.jpeg"/ loading="lazy"><p>其中实现代码（局部）如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">ChameleonStyle</span><span class="token operator">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> CE_ProgressBar<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//显示进度区域</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span>progBar <span class="token operator">=</span>  qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            QStyleOptionProgressBar progGroove <span class="token operator">=</span> <span class="token operator">*</span>progBar<span class="token punctuation">;</span>            <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span>CE_ProgressBarGroove<span class="token punctuation">,</span> <span class="token operator">&amp;</span>progGroove<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            QStyleOptionProgressBar subopt <span class="token operator">=</span> <span class="token operator">*</span>progBar<span class="token punctuation">;</span>            subopt<span class="token punctuation">.</span>rect <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subElementRect</span><span class="token punctuation">(</span>SE_ProgressBarContents<span class="token punctuation">,</span> progBar<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span>CE_ProgressBarContents<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subopt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>          subopt<span class="token punctuation">.</span>rect <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subElementRect</span><span class="token punctuation">(</span>SE_ProgressBarLabel<span class="token punctuation">,</span> progBar<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">drawControl</span><span class="token punctuation">(</span>CE_ProgressBarLabel<span class="token punctuation">,</span> <span class="token operator">&amp;</span>subopt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> CE_ProgressBarGroove<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑槽显示</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>实际绘画    <span class="token punctuation">&#125;</span>  <span class="token keyword">case</span> CE_ProgressBarContents<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//进度滑块显示</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">case</span> CE_ProgressBarLabel<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处放一个曾经绘画的🌰最终效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224313.png"/ loading="lazy"><br><h3 id="drawPrimitive"><a href="#drawPrimitive" class="headerlink" title="drawPrimitive():"></a>drawPrimitive():</h3><blockquote><p><font color=#D0087E size=4 face="幼圆">//drawPrimitive():</font>  绘画 GUI 某一控件的某一部分（原始元素），通常为详细绘画；表示使用 p，样式选项 opt 绘制元素 pe</p><p>virtual void drawPrimitive(PrimitiveElement pe, const QStyleOption *opt, QPainter *p, const QWidget *w) const override;</p></blockquote><p>实际的具体的一个元素的矩形，在此范围内绘画圆角矩形，圆形，三角形等等等，按照需求绘画即可。</p><br><h2 id="规律归纳："><a href="#规律归纳：" class="headerlink" title="规律归纳："></a>规律归纳：</h2><p>　　以上函数的形参带有 CE_ CC_ PE_ SC_ SE_ 这些前缀开头的。都是表示一个矩形 QRect 的范围。SC_ (子控件)和 SE_ (子元素)是用来返回 subControlRect()和 subElementRect() 的矩形 QRect 的。</p><p>　　 最终，通过这些复杂控件、控件、元素的枚举，可以自己在草纸上面绘画出来一个拼装的完好的控件。</p><br><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章:"></a>系列文章:</h2><ol><li><a href="https://blog.csdn.net/qq_33154343/article/details/104367878">QStyle设置界面的外观和QCommonStyle继承关系图讲解和使用</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104537944">QStyle/DTK重绘Qt-GUI已有控件,举例QScrollBar</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/104987446">QStyle/DTK重绘自定义需求控件,举例MySwitchButton</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用软件在「ous20和MAcOS10.14下」显示应用不同的QStyle「即：所有控件的样式换肤」</title>
      <link href="posts/cd6060a0/"/>
      <url>posts/cd6060a0/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  应用软件在「<code>ous20 和 MAcOS10.14</code> 下」显示应用不同的<code>QStyle</code>「即：所有控件的样式换肤」， 自定义风格 <strong>QStyle</strong>：显示当前 <strong>OS</strong> 的所有支持的风格Style；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/104305154">应用软件在「ous20和MAcOS10.14下」显示应用不同的QStyle「即：所有控件的样式换肤」</a></p></blockquote><br><h2 id="起初背景："><a href="#起初背景：" class="headerlink" title="起初背景："></a>起初背景：</h2><p>创建一个简单地🌰「Qt 的工程项目」，在 uos20 和 MacOS10.14.6 系统上面都跑一边，简单的摆放几个控件在窗口上面，用来查看使用不同的 Style 的时候，用来表现不同的效果，给人以以直观的<strong>软件换肤</strong> 感受。</p><br><h2 id="QStyleFactory-和-QStyle-讲解："><a href="#QStyleFactory-和-QStyle-讲解：" class="headerlink" title="QStyleFactory 和 QStyle 讲解："></a>QStyleFactory 和 QStyle 讲解：</h2><p>QStyleFactory:看做很多风格模式的集合</p><p>QStyle：看做具体操作系统的里面有几种默认的风格</p><p>这次的源码讲解比较少，其中主要就是这一段 <code>QStyleFactory</code> 和 <code>qApp-&gt;setStyle()</code>的使用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//查看当前 OS 下的所有支持风格</span>QStringList listStyle <span class="token operator">=</span> <span class="token class-name">QStyleFactory</span><span class="token operator">::</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foreach</span><span class="token punctuation">(</span>QString val<span class="token punctuation">,</span> listStyle<span class="token punctuation">)</span>  <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>val<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span><span class="token comment">//若为 OS 自带的QStyle，则</span>qApp<span class="token operator">-></span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"系统自带风格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//若为自定义新的QStyle，则</span>qApp<span class="token operator">-></span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">QStyleFactory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"自定义风格"</span>）<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 UOS20 下，该系统支持的风格如下：<ul><li>“chameleon”   </li><li>“dsemilight”   </li><li>“dsemidark”   </li><li>“dlight”   </li><li>“ddark”   </li><li>“Windows”   </li><li>“Fusion”   </li></ul></li></ul><ul><li>在 MacOS10.14.6 下，该系统支持的风格如下：<ul><li>“macintosh”   </li><li>“Windows”   </li><li>“Fusion”   </li></ul></li></ul><br><h2 id="改变-OS-高亮色（活动色）："><a href="#改变-OS-高亮色（活动色）：" class="headerlink" title="改变 OS 高亮色（活动色）："></a>改变 OS 高亮色（活动色）：</h2><p>在 MacOS 和 uos(deepin) 里面是可以改变系统的<strong>高亮色</strong> 「有时候也被称之为<strong>活动色</strong> 」，而默认一般都是蓝色的，且 windows 里面也是在设置里面修改。另外两个其修改设置的地方如下图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_235035.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_235430.png"/ loading="lazy"><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p><h3 id="在-UOS20-下效果图："><a href="#在-UOS20-下效果图：" class="headerlink" title="在 UOS20 下效果图："></a>在 UOS20 下效果图：</h3><h4 id="chameleon"><a href="#chameleon" class="headerlink" title="chameleon:"></a>chameleon:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230443.png"/ loading="lazy"><h4 id="dsemilight"><a href="#dsemilight" class="headerlink" title="dsemilight:"></a>dsemilight:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230504.png"/ loading="lazy"><h4 id="dsemidark"><a href="#dsemidark" class="headerlink" title="dsemidark:"></a>dsemidark:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230544.png"/ loading="lazy"><h4 id="dlight"><a href="#dlight" class="headerlink" title="dlight:"></a>dlight:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230603.png"/ loading="lazy"><h4 id="ddark"><a href="#ddark" class="headerlink" title="ddark:"></a>ddark:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230617.png"/ loading="lazy"><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230633.png"/ loading="lazy"><h4 id="Fusion"><a href="#Fusion" class="headerlink" title="Fusion:"></a>Fusion:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_230646.png"/ loading="lazy"><h3 id="在-MacOS10-14-6-下效果图："><a href="#在-MacOS10-14-6-下效果图：" class="headerlink" title="在 MacOS10.14.6 下效果图："></a>在 MacOS10.14.6 下效果图：</h3><h4 id="macintosh"><a href="#macintosh" class="headerlink" title="macintosh:"></a>macintosh:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_233813.png"/ loading="lazy"><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows:"></a>Windows:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_233823.png"/ loading="lazy"><h4 id="Fusion-1"><a href="#Fusion-1" class="headerlink" title="Fusion:"></a>Fusion:</h4><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200213_233830.png"/ loading="lazy"><br><h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Widget</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTableWidget <span class="token operator">*</span>table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidget</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QScrollBar <span class="token operator">*</span>scrollBarH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QScrollBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarH<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarH<span class="token operator">-></span><span class="token function">setRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarH<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarH<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">380</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarH<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>    QScrollBar <span class="token operator">*</span>scrollBarV <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QScrollBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarV<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarV<span class="token operator">-></span><span class="token function">setRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarV<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarV<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scrollBarV<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>    QProgressBar<span class="token operator">*</span> progreH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QProgressBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreH<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreH<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreH<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreH<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>    QProgressBar<span class="token operator">*</span> progreV <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QProgressBar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreV<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreV<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreV<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    progreV<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    QStringList listStyle <span class="token operator">=</span> <span class="token class-name">QStyleFactory</span><span class="token operator">::</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span><span class="token punctuation">(</span>QString val<span class="token punctuation">,</span> listStyle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//打印当前系统支持的系统风格</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>val<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>        QPushButton <span class="token operator">*</span>btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token operator">++</span> <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">connect</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            qApp<span class="token operator">-></span><span class="token function">setStyle</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/touwoyimuli/QtExamples">https://github.com/touwoyimuli/QtExamples</a> 【QtMyStyleEx/QtExample01/QtStyleEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(uos20)借助Qv2ray工具使用vpn进行科学上网</title>
      <link href="posts/aae858f0/"/>
      <url>posts/aae858f0/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  Linux <code>uos20（deepin20）</code>  系统通过 <code>Qv2ray</code> 配置后，使用 <code>VPN</code> 进行 <code>google</code>。这也是一篇<code>Qv2ray</code> 的使用和配置教程文章（在 Linux 下）。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>uos 20 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.19.0-5-amd64</code></p><p>这里解释一下：uos 和 deepin 现在是☞同一个操作系统的两个版本；其都是由武汉深之度公司（2019-12月后更名为统信软件）开发的；<br>区别如下：</p><ul><li>deepin 20 表示社区版</li><li>uos 20 表示专业版</li><li>两者基本没太大有区别，只是存在 login 和小部分的功能限制差异，但是其他无限制</li></ul><br><h2 id="下载Qv2ray和v2ray-cor："><a href="#下载Qv2ray和v2ray-cor：" class="headerlink" title="下载Qv2ray和v2ray-cor："></a>下载Qv2ray和v2ray-cor：</h2><ul><li><p>下载<code>Qv2ray</code>： <code>Qv2ray-refs.tags.v2.0.1-linux-libqvb.AppImage</code></p><ul><li><a href="https://github.com/Qv2ray/Qv2ray/releases">https://github.com/Qv2ray/Qv2ray/releases</a></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_100614.png" style="zoom:50%;" / loading="lazy"></li><li><p>下载<code>v2ray-cor</code>： <code>v2ray-linux-64.zip</code></p><ul><li>其中 linux-64 就是指 amd-64版本</li><li><a href="https://github.com/v2ray/v2ray-core/releases">https://github.com/v2ray/v2ray-core/releases</a></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_114446.png" style="zoom:50%;" / loading="lazy"></li></ul><br><h2 id="配置Qv2ray步骤："><a href="#配置Qv2ray步骤：" class="headerlink" title="配置Qv2ray步骤："></a>配置Qv2ray步骤：</h2><ul><li><p>解压缩<code>v2ray-linux-64.zip</code>文件得到文件夹📂<code>v2ray-linux-64</code></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_103007.png"/ loading="lazy"></li><li><p>打开📂<code>v2ray-linux-64</code>，将这四个文件<code>geoip.dat   geosite.dat   v2ctl   v2ray</code>都赋予可执行权限「全部勾选☑️如下的“允许以程序执行”」；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_102901.png"/ loading="lazy"></li><li><p>将这四个文件全部都放到<code>~/.qv2ray/vcore</code>文件夹里面，<strong>vcore</strong> 不存在的话就自己创建这个文件夹📂</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_104406.png"/ loading="lazy"><br><h2 id="配置系统的Socks和http的端口代理："><a href="#配置系统的Socks和http的端口代理：" class="headerlink" title="配置系统的Socks和http的端口代理："></a>配置系统的Socks和http的端口代理：</h2></li><li><p>设置让Linux（此处 uos20）本机应用使用代理</p><ul><li>查看本机<code>Qv2ray</code>的<code>Socks</code> 和 <code>Socks</code> 代理的端口</li><li>打开 uos 的<strong>“控制中心-网络-系统代理-手动”</strong> ，按照上面的图的提示进行添加，然后保存</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_113437.png"/ loading="lazy"></li><li><p>打开浏览器，访问 <a href="https://www.google.com/">https://www.google.com</a>这个页面，Linux 借助 Qv2ray 使用 vpn 和成功。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200207_113602.png"/ loading="lazy"></li></ul><br><h2 id="其它补充："><a href="#其它补充：" class="headerlink" title="其它补充："></a>其它补充：</h2><ul><li>第一次使用 Qv2ray 官方教程：<ul><li>官方教程： <a href="https://github.com/Qv2ray/Qv2ray/wiki/Getting-Started-step0_zh">第一次使用 Qv2ray 教程</a></li></ul></li></ul><p>好像这个「新手引导中文页面」页面隐藏的还挺深，想必也是因为一些原因吧。哪有好用，免费，简洁，易上手，无广告，活得久的软件呢？（🐶头，逃）</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - 科学上网vpn </category>
          
          <category> 习惯 - 个人配置习惯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS安装虚拟机Parallels_Desktop，安装UOS20和 QtCreaor，搭建dtk开发环境</title>
      <link href="posts/404b32f/"/>
      <url>posts/404b32f/</url>
      
        <content type="html"><![CDATA[<p><strong>简 述：</strong> 本篇讲述和演示和如下的几个知识📚：</p><ul><li>在 <code>MacOS10.14</code> 上面安装<code>Parallels_Desktop14.0.1</code>虚拟机</li><li>再在 <code>Parallels_Desktop</code> 上面安装<code>uos20 x64</code> </li><li>PD 给虚拟机里面的系统安装 <code>Parallels Tools</code>；解决最大化非全屏的现象（调整分辨率后也是一个正方形的窗口）</li><li>在 <code>uos20</code> 操作系统上，安装和配置最新的 <code>Qt Creator</code> 集成环境IDE</li><li>配置 <strong>dtk</strong> 的开发环境，</li><li>在 <code>uso20</code> 上使用 <code>openVPN</code> 从家庭外网连接到公司内网，实现远程办公</li><li>在 <code>uos20</code> 获取开发者权限，拥有 <code>sudo</code> 命令的权限</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="相关博文："><a href="#相关博文：" class="headerlink" title="相关博文："></a>相关博文：</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/103733327">在win10里面的VMware安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</a> </li></ul><br><h2 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h2><p>所要使用到的一些软件和具体版本号，前期需要准备的工作如下：</p><ul><li><p><strong>硬件：</strong> 一台的笔记本或者一体机</p></li><li><p><strong>软件</strong>：</p><ul><li><strong>系统环境：</strong> <code>MacOS 10.14.6 (18G103)</code>  </li><li>**虚拟机软件： **<code>Parallels_Desktop14.0.1.dmg</code></li><li><strong>uos20 镜像：</strong> <code>uos-20-desktop-amd64.iso</code></li></ul></li><li><p>其它(可选)：</p><ul><li><strong>opnvpn 配置文件：</strong> 联系自己的管理员获取</li><li>或者自备梯子或其他工具</li></ul></li></ul><br><h2 id="安装虚拟机-Parallels-Desktop："><a href="#安装虚拟机-Parallels-Desktop：" class="headerlink" title="安装虚拟机 Parallels_Desktop："></a>安装虚拟机 Parallels_Desktop：</h2><p>查看 MacOS操作系统版本：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194831.png" width="50%"/ loading="lazy"><ul><li>双击<code>Parallels_Desktop14.0.1.dmg</code> 运行程序</li></ul> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200203_120547.png" width="25%" / loading="lazy"><ul><li>再次双击运行程序</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194755.png" width="50%"/ loading="lazy"><br><ul><li>点击 <strong>打开</strong> </li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194740.png" width="50%"/ loading="lazy"><ul><li>点击<strong>跳过该版本</strong></li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194723.png" width="50%"/ loading="lazy"><ul><li><p>还会弹出一个小的窗口，提示建议安装更新的版本，点击<strong>不，使用现有的</strong>，这里这个图截掉了。</p></li><li><p>弹出软件许可协议窗口，点击请<strong>接受</strong>， 等待几秒钟，虚拟机自动安装成功。</p><p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194705.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194653.png" width="50%"/ loading="lazy"> </p></li><li><p>看到安装成功</p></li></ul><br><h2 id="禁止-Parallels-Desktop-🚫更新-，外加优化-PD"><a href="#禁止-Parallels-Desktop-🚫更新-，外加优化-PD" class="headerlink" title="禁止 Parallels_Desktop 🚫更新 ，外加优化 PD"></a>禁止 Parallels_Desktop 🚫更新 ，外加优化 PD</h2><h3 id="优化-PD，赋予权限："><a href="#优化-PD，赋予权限：" class="headerlink" title="优化 PD，赋予权限："></a>优化 PD，赋予权限：</h3><p>第一次启动，会提示如下，按照提示，打开<code>偏好设置</code></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194617.png" width="50%"/ loading="lazy"><p>点击<code>允许</code>即可</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194558.png" width="50%"/ loading="lazy"><p>且这里也赋予 PD 相应的权限，且➕🔐避免被再次更改。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194541.png" width="50%"/ loading="lazy"><ul><li>都操作完成之后，点击查看版本信息，发现已经是激活的版本了。</li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194524.png" width="50%"/ loading="lazy"><h3 id="禁止-PD-更新："><a href="#禁止-PD-更新：" class="headerlink" title="禁止 PD 更新："></a>禁止 PD 更新：</h3><p>这里按照个人喜好，我是不喜欢如下改动的，且不想检测自动更新。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194507.png" width="50%"/ loading="lazy"><br><h2 id="安装-uos20-操作系统："><a href="#安装-uos20-操作系统：" class="headerlink" title="安装 uos20 操作系统："></a>安装 uos20 操作系统：</h2><ul><li><p>将 uos20 的镜像，拖曳于这里点击打开</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194438.png" width="50%"/ loading="lazy"></li><li><p>若是弹出，无法检测到镜像，不予理会即可，实际会检测到</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194414.png" width="50%"/ loading="lazy"></li><li><p>因为 uos20 和 deepin15 都是基于 Debian 系统，选中如下</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194348.png" width="50%"/ loading="lazy"></li><li><p>选择安装路径（可以更改）</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194328.png" width="50%"/ loading="lazy"></li><li><p>点击创建，即可进入安装 uos20 的界面</p></li></ul><br><h2 id="配置uos20操作系统："><a href="#配置uos20操作系统：" class="headerlink" title="配置uos20操作系统："></a>配置uos20操作系统：</h2><ul><li><p>按照提示，选择即可，下面👇只显示出重要的步骤：</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194302.png" width="50%"/ loading="lazy"></li><li><p>这里不会的话，就默认全盘安装，不作任何修改；<strong>加密磁盘</strong> 没有必要勾选☑️，如果你的系统没有存放什么国家机密文件的话，普通人是用不着的。</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194235.png" width="50%"/ loading="lazy"></li><li><p>等待进度条进行 100% 即可</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194205.png" width="50%"/ loading="lazy"></li><li><p>显示安装成功</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194144.png" width="50%"/ loading="lazy"></li></ul><br><h2 id="安装-Parallels-Tools："><a href="#安装-Parallels-Tools：" class="headerlink" title="安装 Parallels Tools："></a>安装 Parallels Tools：</h2><p><font color=#D0087E size=4 face="幼圆">因为在 macOS 系统里面，将 uos20 全屏的话，会发现总是一个正方形的窗口，即使更改分辨率也不可以，反正就是不是全屏效果，让人抓狂💥💥💥；</font></p><p><strong>解决方法如下：</strong></p><ul><li><p>只需要选中当前开启的虚拟机，打开<code>操作-Parallels Tools</code>， 然后在本目录路径下，</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193415.png" width="50%"/ loading="lazy"></li><li><p>打开终端，执行命令</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>即可，会出现如下终端的可视化界面，依次点击<code>确定</code>和<code>下一步</code>，然后耐心等待，等待界面如下图</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193443.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193508.png" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193548.png" width="50%"/ loading="lazy"></li><li><p>再次重启该虚拟机即可，点击最大化（可选择觉得舒服的分辨率），发现窗口已经占满整块屏幕了。 </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193738.png" width="50%"/ loading="lazy"></li></ul><br><h2 id="安装-qtcrator-环境："><a href="#安装-qtcrator-环境：" class="headerlink" title="安装 qtcrator 环境："></a>安装 qtcrator 环境：</h2><p>参考<a href="https://blog.csdn.net/qq_33154343/article/details/103733327">在win10里面的VMware安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</a> 一文， 中间的<a href="https://blog.csdn.net/qq_33154343/article/details/103733327#QtCretordtk_148">在<code>QtCretor</code>里面配置<code>dtk</code>开发环境和工程模板： </a> 部分；此部分有着详细的描述</p><br><h2 id="配置-dtk-的开发环境："><a href="#配置-dtk-的开发环境：" class="headerlink" title="配置 dtk 的开发环境："></a>配置 dtk 的开发环境：</h2><p>运行命令，然后重启QtCretor：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator-template-dt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="配置-openVPN-回到公司内网："><a href="#配置-openVPN-回到公司内网：" class="headerlink" title="配置 openVPN 回到公司内网："></a>配置 openVPN 回到公司内网：</h2><ul><li><p>向管理员获取 openVPN 的配置文件，比如<code>wh-vpn.conf</code></p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193850.png" width="50%"/ loading="lazy"></li><li><p>将其导入到 uos20 系统里面，具体位置如下：<strong>控制中心-网络-vpn-导入</strong> </p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419193938.png" width="50%"/ loading="lazy"></li></ul><p>若是连接成功之后，仍然无法访问内网资源，请将<strong>“使用相对应的网络的资源”</strong> 开启☑️</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194002.png" width="50%"/ loading="lazy"><br><h2 id="打开开发者模式，获取-sudo-权限："><a href="#打开开发者模式，获取-sudo-权限：" class="headerlink" title="打开开发者模式，获取 sudo 权限："></a>打开开发者模式，获取 sudo 权限：</h2><ul><li><p><strong>控制中心-系统信息-关于本机-版本授权</strong> 中，点击激活，若是没有永久激活码，可以点击试用激活，这个有 90 天的时间</p></li><li><p>在<strong>控制中心-通用-开发者模式</strong> 中，点击到处机器码到桌面上，默认是 1.json 文件</p></li><li><p>登录网址 <a href="https://www.chinauos.com/applyfor">https://www.chinauos.com/applyfor</a> ，注册用户为 uos 账号</p></li><li><p><font color=#D0087E size=4 face="幼圆">在登录状态下</font> 点击“<strong>请参与内测-点击<u>这里</u>了解如何开启开发者模式</strong>”，</p></li><li><p>上传机器码文件，点击下载注册码文件，然后<strong>控制中心-通用-开发者模式</strong> 中导入注册码</p> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200419194055.png" width="50%"/ loading="lazy"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习:root，apt，vim，gcc，静动态库制作和使用</title>
      <link href="posts/98696fbd/"/>
      <url>posts/98696fbd/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  Linux学习：root下文件夹含义，apt， vim，gcc，静动态库制作和使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/104081624">Linux学习：root下文件夹含义，apt， vim，gcc，静动态库制作和使用</a></p></blockquote><br><h2 id="磁盘文件夹含义："><a href="#磁盘文件夹含义：" class="headerlink" title="磁盘文件夹含义："></a>磁盘文件夹含义：</h2><blockquote><p><strong>几个比较重要的的文件夹含义，  root根的结构</strong><br>cd<br>.   =&gt; 当前目录<br>..  =&gt; 当前上一级的目录</p><p>-[英文短横] =&gt; 在两个临近的目录之间直接进行切换<br>~   =&gt; /home 里面， 用户的家目录（宿主目录）     pwd直接切换过去</p><p>$: 当前用户为普通用户</p><p>#：超级用户 – root   (使用exit命令退出超级用户)</p></blockquote><p>一些其他的文件夹📂含义：</p><ul><li><code>/dev</code> 一切皆抽象为文件</li><li><code>/etc</code> 全局配置文件</li><li><code>/usr</code> <ul><li><code>/usr/local</code> 第三方软件安装 </li><li><code>/opt</code></li></ul></li><li><code>/bin</code></li><li><code>/lib</code> 作用</li><li><code>~</code> 当前用户的顶层目录，比如：<code>/Users/muli</code> </li><li>创建一个软连接的命令； ln 推荐绝对路径 软连接名称 </li></ul><p><strong>一个 ls -al 命令查看文件夹下所有文件的详细：</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200118_174025.png"/ loading="lazy"><br><h2 id="apt软件-安装卸载："><a href="#apt软件-安装卸载：" class="headerlink" title="apt软件/安装卸载："></a>apt软件/安装卸载：</h2><ul><li><p><code>apt install/remove 软件名</code> 卸载软件</p></li><li><p>/var/cache/apt/archives    <code>apt clean</code> 清空缓存</p></li><li><p><code>sudo dpkg -i xxx.deb</code> 安装 .deb 软件</p></li><li><p><code>sudo dpkg -r 软件的名字</code>  卸载 .deb 软件</p></li></ul><br><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim:"></a>Vim:</h2><h3 id="vim-三种模式切换图："><a href="#vim-三种模式切换图：" class="headerlink" title="vim 三种模式切换图："></a>vim 三种模式切换图：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_20200117000312942.png" style="zoom:50%;" / loading="lazy"><br><h3 id="vim-使用："><a href="#vim-使用：" class="headerlink" title="vim 使用："></a>vim 使用：</h3><ul><li><p>保存之后退出：<code>ZZ</code></p></li><li><p>代码格式化 <code>gg=G</code></p></li><li><p>四个方向 <code>hjkl</code></p></li><li><p>移动光标，行首尾，顶行，末行，跳转指定213行[附：行号n回车]； <code>0， $，gg， D， 213D</code></p></li><li><p>删除一个单词， 删出一行的前后；删除所有：<code>dw, d0, d$(D), dd（删除当前行）， ndd（删除 n行） </code></p></li><li><p>撤销，反撤销：<code>u,  crtl + r</code></p></li><li><p>光标删除前后字母，撤销，删除单词：<code>X，x，u，?</code></p></li></ul><ul><li><p>复制一行，多行，粘贴一行，多行：<code>yy, nyy, p（光标下一行）,P（光标上一行） [视图模式：y 粘贴,d删除,p复制下一行,P复制到上一行]</code></p></li><li><p>替换一个，替换多个；<code>r, R</code></p></li><li><p>查找：当前往下卷一圈 <code>/xxxx</code>； 当前往上卷一圈  <code>?xxxx</code>  关键字切换：<code>n/N</code></p></li><li><p>光标移到单词，<code>#</code></p></li><li><p>vim分屏： :<code>sp</code>（线水平） <code>vsp</code>(线垂直)， <code>crtl+ww</code>（屏幕之间切换）， <code>wqall</code>(保存退出所有)</p></li></ul><br><h3 id="vim-配置文件："><a href="#vim-配置文件：" class="headerlink" title="vim 配置文件："></a><strong>vim 配置文件：</strong></h3><ul><li>「1」用户级别(先)：<code>~/.vimrc</code></li><li>「2」系统级别:<code>/etc/vim/vimrc</code></li></ul><br><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc:"></a>gcc:</h2><h3 id="gcc工作流程："><a href="#gcc工作流程：" class="headerlink" title="gcc工作流程："></a>gcc工作流程：</h3><ul><li><p>预处理(<code>gcc -E</code>;  <strong>预处理器cpp</strong>)  :<code>xxx.c --&gt; xxx.i</code>  (.i 文件本质还是.c 文件)</p><ul><li>宏替换</li><li>头文件展开</li><li>注释去掉</li></ul></li><li><p>编译（<code>gcc -S</code>; <strong>编译器 gcc</strong>）: <code>xxx.i --&gt; xxx.s</code></p><ul><li>生成汇编文件</li></ul></li><li><p>汇编（<code>gcc -c</code>； <strong>汇编器as</strong>）: <code>xxx.s  --&gt;  xxx.o</code></p><ul><li>生成二进制文件</li></ul></li><li><p>链接（<code>gcc</code>； <strong>链接器ld</strong>）</p><ul><li><code>xxx.o  --&gt;  xxx（可执行）</code> </li></ul></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_image-20200118120643285.png"/ loading="lazy"><br><h3 id="gcc常用参数："><a href="#gcc常用参数：" class="headerlink" title="gcc常用参数："></a>gcc常用参数：</h3><ul><li><code>-v/--version：</code> 查看版本</li><li><code>-I：</code> 指定包含头文件路径（推荐相对路径）</li><li><code>-c： </code> 汇编文件生成二进制文件 </li><li><code>-o： </code> 指定生成文件的名字</li><li><code>-g：</code> gcc调试时候，添加的参数</li><li><code>-D： </code> 编译的时候，生成一个你所指定的宏（场景：多使用在测试程序中）</li><li><code>-Wall： </code> gcc 编译时候，添加显示警告⚠️信息</li><li><code>-On：</code> 优化代码，n 是优化级别：1，2，3（3 就是最大，填写 100 也是 3）</li></ul><br><h3 id="静态库和动态库的制作和使用："><a href="#静态库和动态库的制作和使用：" class="headerlink" title="静态库和动态库的制作和使用："></a>静态库和动态库的制作和使用：</h3><ul><li><strong>库是什么？</strong><ul><li>二进制文件</li><li>加密之后的.c/.cpp的文件</li></ul></li><li><strong>库文件制作出来后，如何给用户使用？</strong><ul><li>需要头文件 + 制作出来的库</li><li><strong>动态库：</strong> <code>.dll  或  .so</code></li><li><strong>静态库：</strong> <code>.lib  或   .a</code></li></ul></li></ul><br><h4 id="静态库-a-lib-的制作和使用："><a href="#静态库-a-lib-的制作和使用：" class="headerlink" title="静态库(.a/.lib)的制作和使用："></a>静态库(.a/.lib)的制作和使用：</h4><ul><li><p><strong>命令规则：</strong> <font color=#FF0000 size=4 face="幼圆">lib</font>xxx<font color=#FF0000 size=4 face="幼圆">.a</font> </p></li><li><p><strong>静态库的制作步骤：</strong></p><ul><li><p>原材料：源代码.c .cpp</p></li><li><p>将.cpp 文件生成.o 文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以得到 `test01.o` 和 `test02.o`文件</span><span class="token variable"><span class="token variable">`</span>gcc -C test01.c test02.cpp<span class="token variable">`</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将.o 文件打包为.a 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：ar rcs 静态库的名字 原材料  </span><span class="token comment">#ar -archive</span>ar rcs libmytest.a test01.o test02.o   //所生成静态文件名称为libmytest.a<span class="token comment">#成功之后，可以查看libmytest.a里面的包含具体的所有的*.o文件</span>nm libmytest.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>静态库的使用：</strong></p><p>此刻文件夹的 tree 结构如下：</p><blockquote><p>.</p><p>├─ Test.cpp</p><p>├─ include</p><p>│   └─ xxxx.h</p><p>└─ lib</p><p>​    └─ libmytest.a</p></blockquote><p>然后执行如下命令，就可以在得到本路径下得到可执行程序<code>appTest</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc Test.cpp -I ./include -L ./lib -l mytest -o appTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>Test.cpp：测试静态库的使用的头文件</p></li><li><p>-I：<code>./include/</code>为指定的库的头文件的路径</p></li><li><p>-L：<code>./lib/</code>为指定的库的二进制文件</p></li><li><p>-l：为静态库的库的名称，将要调用的库</p><p>所生成<strong>静态库的文件名称</strong>为 <code>libmytest.a</code>， 按照规则，其<strong>静态库的名称</strong>叫<code>mytest</code></p></li><li><p>-o：所生成的指定名称的为appTest的可执行程序的名称</p></li></ul></li></ul><br><h4 id="动态态库-so-dll-的制作和使用："><a href="#动态态库-so-dll-的制作和使用：" class="headerlink" title="动态态库(.so/.dll)的制作和使用："></a>动态态库(.so/.dll)的制作和使用：</h4><ul><li><p><strong>命令规则：</strong> <font color=#FF0000 size=4 face="幼圆">lib</font>xxx<font color=#FF0000 size=4 face="幼圆">.so</font> </p></li><li><p><strong>动态库的制作步骤</strong></p><ul><li><p>原材料：源代码.c .cpp</p></li><li><p>将.cpp 文件生成.o 文件  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -fpic(或 FPIC)制作.o文件，</span>gcc test01.cpp test02.cpp -C -fpic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将.o 文件打包为.so 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用法：使用 gcc 加参数 -shared,将.o打包为.so文件，</span>gcc -shared test01.o test02.o -o  libmytest.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>动态库的使用</strong></p><ul><li><p>此刻文件夹的 tree 结构如下：</p><blockquote><p>.</p><p>├─ Test.cpp</p><p>├─ include</p><p>│   └─ xxxx.h</p><p>└─ lib</p><p>​    └─ libmytest.so</p></blockquote><p>然后执行如下命令，就可以在得到本路径下得到可执行程序<code>appTest</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc Test.cpp -I ./include/ -L ./lib/ -l mytest -o appTest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**运行之后，若首次未做设置，则就会发现运次失败！！！，会报错误提示，说找不到libmytest.so **; </p><p><strong>原因是：</strong> <font color=#70AD47 size=4 face="幼圆"><strong>因为linux 的工作机制，其加载动态库.so的顺序。要知道所依赖库的.so 的名称，还要知道其绝对路径。</strong> </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200118_164520.png"/ loading="lazy"></li></ul></li></ul><br><ul><li><p><strong>解决 Linux 加载动态库 .so 文件失败的方法：</strong></p><p>思路：添加动态库的（绝对）路径。</p><ul><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法1」拷贝自己制作的共享库：</strong> </font></p><ul><li> 拷贝自己制作的共享库 .so 文件到 <code>/lib</code> 或 <code>/usr/lib</code>[不推荐，容易重名替换让系统崩溃]</li></ul></li><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法2」使用环境变量：</strong> </font></p><ul><li>临时设置：<code>export LD_LIBRARY_PATH = 动态库的绝对路径:$LD_LIBRARY_PATH</code>(只添加新值)</li><li>永久设置：<ul><li>「用户级别」将<code>export LD_LIBRARY_PATH = 动态库的加载路径</code>添加到<code>~/.bashrc</code>文件；然后重新加载，方法为重启终端或者 运行 <code>sources ./bashrc</code>; 即可生效.</li><li>「系统级别」将绝对路径加入到<code>/etc/profile</code>文件，然后用命令<code>source /etc/profile </code>重新加载该文件.</li></ul></li></ul></li><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法3」使用文件列表：</strong> </font></p><ul><li>将动态库的绝对路径添加到<code>/etc/ld.so.conf</code>文件中；然后执行 <code>sudo ldconfig -v</code> </li></ul></li><li><p><font color=#0000FF size=4 face="幼圆"><strong>「方法4」使用函数调动态库：</strong> </font></p><ul><li>函数名：<code>dlopen()</code>  <code>dlclose()</code>  <code>dlsym()</code></li></ul></li></ul><br><p><strong>补充一个小的知识点：</strong></p><ul><li><code>file appTest(可执行程序)</code>: 查看文件的类型，可以看到为 elf 类型</li><li>ldd appTest(可执行程序)<code> 查看 appTest 的所需要的加载动态库的文件，以及显示这些文件是否能找到</code> </li><li><code>echo $PATH</code> each 显示一个字符串，这里取 PATH 的值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分享一下图灵系类电子书籍(彩色)，关于设计和编程等</title>
      <link href="posts/844bcc54/"/>
      <url>posts/844bcc54/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  将自己收藏的一些📚，关于编程和设计类的 <code>pdf</code>，<strong>【电子书】图灵程序设计丛书（彩色原版)</strong> ，整个图灵系列的书籍一共 203本；自己在看的同时，也分享给大家。相遇于本文可自阅读之；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200114_232936.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="图灵系列的系列："><a href="#图灵系列的系列：" class="headerlink" title="图灵系列的系列："></a>图灵系列的系列：</h2><blockquote><p>.</p><p>├── [图灵图书].Django基础教程.pdf</p><p>├── [图灵原创].Go语言编程.pdf</p><p>├── [图灵原创].JavaScript设计模式与开发实践.pdf</p><p>├── [异步图书].NLTK基础教程：用NLTK和Python库构建机器学习应用.pdf</p><p>├── [图灵原创].Node.js开发指南.pdf</p><p>├── [异步图书].Python核心编程.第3版.pdf</p><p>├── [异步图书].Python程序设计.第3版.pdf</p><p>├── [异步图书].Python高性能编程.pdf</p><p>├── [异步图书].Python机器学习实践指南.pdf</p><p>├── [异步图书].Python机器学习：预测分析核心算法.pdf</p><p>├── [图灵原创].React Native入门与实战.pdf</p><p>├── [图灵图书].精通Django：Django 1.8 LTS全解.pdf</p><p>├── [异步图书].精通Python自然语言处理.pdf</p><p>├── [图灵原创].深入React技术栈.pdf</p><p>├── [图灵图书].社会工程 卷2：解读肢体语言.pdf</p><p>├── [图灵图书].用户思维+：好产品让用户为自己尖叫.pdf</p><p>├── [图灵新知].宇宙的历程.pdf</p><p>├── [图灵原创].算法的乐趣.revise7.pdf</p><p>├── [图灵原创].人工智能简史.pdf</p><p>├── [图灵原创].推荐系统实践.pdf</p><p>├── [图灵新知].时间旅行简史.pdf</p><p>├── [图灵新知].统计学七支柱.pdf</p><p>├── [图灵图书].系统化思维导论.pdf</p><p>├── [图灵图书].编程小白的第一本Python入门书.pdf</p><p>├── [图灵图书].写给大家看的设计书.第4版.pdf</p><p>├── [图灵原创].人人都是数据分析师：Tableau应用实战.pdf</p><p>├── [图灵新知].统计学大师之路：乔治·博克斯回忆录.pdf</p><p>├── [图灵图书].写给大家看的项目管理书.第2版.pdf</p><p>├── [图灵图书].社会工程：防范钓鱼欺诈（卷3）.pdf</p><p>├── [图灵新知].从无穷开始：科学的困惑与疆界.pdf</p><p>├── [图灵图书].社会工程：安全体系中的人性漏洞 .pdf</p><p>├── [图灵新知].爱上电子学：创客的趣味电子实验.第2版.pdf</p><p>├── [图灵新知].别拿相关当因果！因果关系简易入门.pdf</p><p>├── [图灵图书].单核工作法图解：事多到事少，拖延变高效.pdf</p><p>├── [图灵程序设计丛书].Android基础教程.第4版.pdf</p><p>├── [图灵程序设计丛书].Android编程权威指南.第3版.pdf</p><p>├── [图灵程序设计丛书].AngularJS权威教程.ng-book.pdf</p><p>├── [图灵程序设计丛书].AngularJS权威教程.ng-book2.pdf</p><p>├── [图灵程序设计丛书].Arduino技术指南.pdf</p><p>├── [图灵程序设计丛书].Bootstrap实战.pdf</p><p>├── [图灵程序设计丛书].Bootstrap用户手册：设计响应式网站.pdf</p><p>├── [图灵程序设计丛书].C#经典实例.第4版.pdf</p><p>├── [图灵程序设计丛书].C#敏捷开发实践.pdf</p><p>├── [图灵程序设计丛书].C#并发编程经典实例.PDF</p><p>├── [图灵程序设计丛书].C++性能优化指南.pdf</p><p>├── [图灵程序设计丛书].CSS揭秘.pdf</p><p>├── [图灵程序设计丛书].CSS重构：样式表性能调优.pdf</p><p>├── [图灵程序设计丛书].Clojure经典实例.pdf</p><p>├── [图灵程序设计丛书].DevOps实践指南.pdf</p><p>├── [图灵程序设计丛书].Docker开发指南.pdf</p><p>├── [图灵程序设计丛书].Docker经典实例.pdf</p><p>├── [图灵程序设计丛书].Elasticsearch服务器开发.第2版.pdf</p><p>├── [图灵程序设计丛书].Erlang ／ OTP并发编程实战.pdf</p><p>├── [图灵程序设计丛书].Erlang程序设计.第2版.pdf</p><p>├── [图灵程序设计丛书].Ext JS实战.第2版.pdf</p><p>├── [图灵程序设计丛书].Flask Web开发：基于Python的Web应用开发实战.pdf</p><p>├── [图灵程序设计丛书].Flink基础教程.pdf</p><p>├── [图灵程序设计丛书].GitHub入门与实践.pdf</p><p>├── [图灵程序设计丛书].Git团队协作.pdf</p><p>├── [图灵程序设计丛书].HTML5与CSS3基础教程.第8版.pdf</p><p>├── [图灵程序设计丛书].HTML5与WebGL编程.pdf</p><p>├── [图灵程序设计丛书].HTML5秘籍.第2版.pdf</p><p>├── [图灵程序设计丛书].HTTPS权威指南：在服务器和Web应用上部署SSL／TLS和PKI.pdf</p><p>├── [图灵程序设计丛书].HTTP／2基础教程.pdf</p><p>├── [图灵程序设计丛书].Hadoop应用架构.pdf</p><p>├── [图灵程序设计丛书].Hadoop数据分析.pdf</p><p>├── [图灵程序设计丛书].Hadoop深度学习.pdf</p><p>├── [图灵程序设计丛书].Head First JavaScript程序设计.pdf</p><p>├── [图灵程序设计丛书].JSON必知必会.pdf</p><p>├── [图灵程序设计丛书].Java 8实战.pdf</p><p>├── [图灵程序设计丛书].Java 8函数式编程.pdf</p><p>├── [图灵程序设计丛书].JavaScript Web应用开发.pdf</p><p>├── [图灵程序设计丛书].JavaScript编程全解.pdf</p><p>├── [图灵程序设计丛书].JavaScript编程精粹.pdf</p><p>├── [图灵程序设计丛书].JavaScript基础教程.第9版.pdf</p><p>├── [图灵程序设计丛书].JavaScript快速全栈开发.pdf</p><p>├── [图灵程序设计丛书].JavaScript高级程序设计.第3版.pdf</p><p>├── [图灵程序设计丛书].JavaScript异步编程：设计快速响应的网络应用.pdf</p><p>├── [图灵程序设计丛书].Java技术手册.第6版.pdf</p><p>├── [图灵程序设计丛书].Java性能权威指南.pdf</p><p>├── [图灵程序设计丛书].Java测试驱动开发.pdf</p><p>├── [图灵程序设计丛书].Kafka权威指南.pdf</p><p>├── [图灵程序设计丛书].Linux Shell脚本攻略.第3版.pdf</p><p>├── [图灵程序设计丛书].Linux命令行与shell脚本编程大全.第3版.pdf</p><p>├── [图灵程序设计丛书].MEAN Web开发.pdf</p><p>├── [图灵程序设计丛书].MySQL与MariaDB学习指南.pdf</p><p>├── [图灵程序设计丛书].MySQL必知必会.pdf</p><p>├── [图灵程序设计丛书].Node.js实战.pdf</p><p>├── [图灵程序设计丛书].Node与Express开发.pdf</p><p>├── [图灵程序设计丛书].Node即学即用.pdf</p><p>├── [图灵程序设计丛书].OpenCV计算机视觉编程攻略.第3版.pdf</p><p>├── [图灵程序设计丛书].Python Web开发：测试驱动方法.pdf</p><p>├── [图灵程序设计丛书].Python数据处理.pdf</p><p>├── [图灵程序设计丛书].Python深度学习.pdf</p><p>├── [图灵程序设计丛书].Python编程导论.第2版.pdf</p><p>├── [图灵程序设计丛书].Python基础教程.第3版.pdf</p><p>├── [图灵程序设计丛书].Python数据分析基础.pdf</p><p>├── [图灵程序设计丛书].Python数据科学手册.pdf</p><p>├── [图灵程序设计丛书].Python网络数据采集.pdf</p><p>├── [图灵程序设计丛书].Python网络编程攻略.pdf</p><p>├── [图灵程序设计丛书].Python语言及其应用.pdf</p><p>├── [图灵程序设计丛书].Python计算机视觉编程.pdf</p><p>├── [图灵程序设计丛书].Python机器学习基础教程.pdf</p><p>├── [图灵程序设计丛书].Python机器学习经典实例.pdf</p><p>├── [图灵程序设计丛书].Python数据挖掘入门与实践.pdf</p><p>├── [图灵程序设计丛书].Python编程：从入门到实践.pdf</p><p>├── [图灵程序设计丛书].Python测试驱动开发：使用Django、Selenium和JavaScript进行Web编程.第2版.pdf</p><p>├── [图灵程序设计丛书].Python数据分析基础教程：NumPy学习指南.第2版.pdf</p><p>├── [图灵程序设计丛书].Python编程快速上手——让繁琐工作自动化.pdf</p><p>├── [图灵程序设计丛书].React Native开发指南.pdf</p><p>├── [图灵程序设计丛书].React Native应用开发实例解析.pdf</p><p>├── [图灵程序设计丛书].React快速上手开发.pdf</p><p>├── [图灵程序设计丛书].React设计模式与最佳实践.pdf</p><p>├── [图灵程序设计丛书].R数据科学.pdf</p><p>├── [图灵程序设计丛书].R语言实战.第2版.pdf</p><p>├── [图灵程序设计丛书].SQL反模式.pdf</p><p>├── [图灵程序设计丛书].SQL进阶教程.pdf</p><p>├── [图灵程序设计丛书].SQL基础教程.第2版.pdf</p><p>├── [图灵程序设计丛书].SQL必知必会.第4版.pdf</p><p>├── [图灵程序设计丛书].SVG精髓.第2版.pdf</p><p>├── [图灵程序设计丛书].Sass与Compass实战.pdf</p><p>├── [图灵程序设计丛书].Scala程序设计.第2版.pdf</p><p>├── [图灵程序设计丛书].Spark机器学习.pdf</p><p>├── [图灵程序设计丛书].Spark高级数据分析.第2版.pdf</p><p>├── [图灵程序设计丛书].Spark快速大数据分析.pdf</p><p>├── [图灵程序设计丛书].Spring Boot实战.pdf</p><p>├── [图灵程序设计丛书].Swift基础教程.第2版.revise2.pdf</p><p>├── [图灵程序设计丛书].Swift编程权威指南.第2版.pdf</p><p>├── [图灵程序设计丛书].TCP Sockets编程.pdf</p><p>├── [图灵程序设计丛书].TensorFlow深度学习.pdf</p><p>├── [图灵交互设计丛书].UX设计师要懂工业设计.pdf</p><p>├── [图灵程序设计丛书].Web安全开发指南.pdf</p><p>├── [图灵程序设计丛书].Web开发权威指南.pdf</p><p>├── [图灵程序设计丛书].Web性能权威指南.pdf</p><p>├── [图灵程序设计丛书].jQuery实战.第2版.pdf</p><p>├── [图灵程序设计丛书].jQuery基础教程.第4版.pdf</p><p>├── [图灵程序设计丛书].嗨翻C语言.pdf</p><p>├── [图灵程序设计丛书].同构JavaScript应用开发.pdf</p><p>├── [图灵程序设计丛书].学习JavaScript数据结构与算法.第2版.pdf</p><p>├── [图灵程序设计丛书].精通Linux.第2版.pdf</p><p>├── [图灵程序设计丛书].深入Linux内核架构.pdf</p><p>├── [图灵程序设计丛书].精通Metasploit渗透测试.第2版.pdf</p><p>├── [图灵程序设计丛书].深入NoSQL.pdf</p><p>├── [图灵程序设计丛书].精通Python设计模式.pdf</p><p>├── [图灵程序设计丛书].学习R.pdf</p><p>├── [图灵程序设计丛书].全端Web开发：使用JavaScript与Java.pdf</p><p>├── [图灵程序设计丛书].高性能Android应用开发.pdf</p><p>├── [图灵程序设计丛书].流畅的Python.revise11.pdf</p><p>├── [图灵程序设计丛书].响应式Web设计：HTML5和CSS3实战.pdf</p><p>├── [图灵程序设计丛书].响应式Web设计：HTML5和CSS3实战.第2版.pdf</p><p>├── [图灵程序设计丛书].高性能iOS应用开发.pdf</p><p>├── [图灵程序设计丛书].算法图解.pdf</p><p>├── [图灵程序设计丛书].深入理解C#.第3版.pdf</p><p>├── [图灵程序设计丛书].深入理解SVG.pdf</p><p>├── [图灵交互设计丛书].移动应用UI设计模式.pdf</p><p>├── [图灵程序设计丛书].深入学习mongodb.pdf</p><p>├── [图灵程序设计丛书].代码的未来.pdf</p><p>├── [图灵程序设计丛书].图解物联网.pdf</p><p>├── [图灵程序设计丛书].自制编译器.pdf</p><p>├── [图灵程序设计丛书].你不知道的JavaScript（上卷）.pdf</p><p>├── [图灵程序设计丛书].你不知道的JavaScript（下卷）.pdf</p><p>├── [图灵程序设计丛书].你不知道的JavaScript（中卷）.pdf</p><p>├── [图灵程序设计丛书].前端架构设计.pdf</p><p>├── [图灵程序设计丛书].数据分析实战.pdf</p><p>├── [图灵程序设计丛书].数据科学入门.pdf</p><p>├── [图灵程序设计丛书].数据科学实战.pdf</p><p>├── [图灵程序设计丛书].机器学习实战.pdf</p><p>├── [图灵程序设计丛书].自制编程语言.pdf</p><p>├── [图灵程序设计丛书].函数式编程思维.pdf</p><p>├── [图灵程序设计丛书].客户端存储技术.pdf</p><p>├── [图灵程序设计丛书].机器学习与优化.pdf</p><p>├── [图灵交互设计丛书].用户体验设计：100堂入门课.pdf</p><p>├── [图灵程序设计丛书].挑战编程技能：57道程序员功力测试题.pdf</p><p>├── [图灵交互设计丛书].设计师要懂沟通术.pdf</p><p>├── [图灵程序设计丛书].两周自制脚本语言.pdf</p><p>├── [图灵程序设计丛书].程序员的算法趣题.pdf</p><p>├── [图灵程序设计丛书].网络是怎样连接的.pdf</p><p>├── [图灵程序设计丛书].数据结构与算法：JavaScript描述.pdf</p><p>├── [图灵程序设计丛书].程序是怎样跑起来的.pdf</p><p>├── [图灵程序设计丛书].深度学习入门：基于Python的理论与实现.pdf</p><p>├── [图灵程序设计丛书].精通机器学习：基于R.第2版.pdf</p><p>├── [图灵程序设计丛书].黑客攻防技术宝典：iOS实战篇.pdf</p><p>├── [图灵程序设计丛书].垃圾回收的算法与实现.pdf</p><p>├── [图灵程序设计丛书].计算机是怎样跑起来的.pdf</p><p>├── [图灵程序设计丛书].数据可视化实战：使用D3设计交互式图表.pdf</p><p>├── [图灵程序设计丛书].学习敏捷：构建高效团队.pdf</p><p>├── [图灵交互设计丛书].无界面交互：潜移默化的UX设计方略.pdf</p><p>├── [图灵程序设计丛书].高效团队开发：工具与方法.pdf</p><p>├── [图灵程序设计丛书].鲜活的数据：数据可视化指南.pdf</p><p>├── [图灵交互设计丛书].简约至上：交互式设计四策略.第2版.pdf</p><p>├── [图灵程序设计丛书].七周七语言：理解多种编程范型.pdf</p><p>├── [图灵程序设计丛书].去中心化应用：区块链技术概述.pdf</p><p>├── [图灵程序设计丛书].代码之外的功夫：程序员精进之路.pdf</p><p>├── [图灵程序设计丛书].干净的数据：数据清洗入门与实践.pdf</p><p>├── [图灵程序设计丛书].统计思维：程序员数学之概率统计.pdf</p><p>├── [图灵程序设计丛书].黑客攻防技术宝典：浏览器实战篇.pdf</p><p>├── [图灵程序设计丛书].高效算法：竞赛、应试与提高必修128例.pdf</p><p>├── [图灵程序设计丛书].持续交付：发布可靠软件的系统方法.pdf</p><p>├── [图灵程序设计丛书].修改软件的艺术：构建易维护代码的9条最佳实践.pdf</p><p>├── [图灵程序设计丛书].父与子的编程之旅：与小卡特一起学Python.pdf</p><p>├── [图灵交互设计丛书].亲爱的界面：让用户乐于使用、爱不释手.pdf</p><p>├── [图灵程序设计丛书].奔跑吧，程序员：从零开始打造产品、技术和团队.pdf</p><p>└── [图灵计算机科学丛书].计算机科学的基础.pdf</p><p>0 directories, 203 files</p></blockquote><br><h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><p><a href="https://github.com/xmuli/books-software/tree/master/books-AlanTuring"><strong>books-AlanTuring</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 技术之外 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QtCreator此IDE的界面基本组成和入门使用讲解(Win,Linux,MacOS搭配不同版本 Qt)</title>
      <link href="posts/a48bc9a4/"/>
      <url>posts/a48bc9a4/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 讲述 <code>Qt Creator</code> 此<strong>IDE</strong>的界面基本组成，和入门使用讲解；这里主要是以 <code>Windows</code> 版本讲述为主，但是 <code>Linux</code> 和 <code>MacOS</code> 版本的会贴出来，这里需要注意的是win版本基本和 Linux版本界面完全一样，而 MacOS 版本的界面和细节部分，则是有着少许的不一样，会标记出来；</p><p>感谢自由软件，感谢开源项目，感谢前辈大家们的分享，感谢 Qt 社区的人们，感谢互联网精神，感谢商业利益的推动，感谢时间的给予发展；是 一部人们让很多很有了使得学习的门槛降低，和系统的学习某一项技能（兴趣爱好）变得容易，使得梦想可能更容易实现，很多事情变得未来可期。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200112_013425.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103942733">QtCreator此IDE的界面基本组成和入门使用讲解(Win,Linux,MacOS搭配不同版本 Qt)</a></p></blockquote><br><h2 id="Qt-Creator的界面组成："><a href="#Qt-Creator的界面组成：" class="headerlink" title="Qt Creator的界面组成："></a>Qt Creator的界面组成：</h2><p><code>Qt Creator</code>这个轻巧的跨平台的 IDE 集成环境，其界面组成主要是以下的几部分给组成：</p><ul><li><strong>Qt Creator：</strong> 主要是用来编写代码工程的界面，也是使用时间最多的地方</li><li><strong>Desiger 设计师:</strong>  用来拖曳窗口；能够短时间生成一个界面出来，开发桌面程序的界面，使用的话会比较便捷</li><li><strong>Assistant 帮助文档：</strong> 可以看做一个离线的帮助手册的文档，遇到不明白的函数或控件时候，会经常查看的一个工具</li><li><strong>Linguist 语言家：</strong>  当程序要写完了，制作成多语言国际化的时候，使用它来“本地化本国语言”</li><li><strong>Qt 5.9.8 for Desktop：</strong> 将项目所需要的.dll系统依赖库全部打包到文件夹，便于只一个文件夹就可以，移植到其它电脑运行</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112004632.png"/ loading="lazy"><br><h2 id="Windows-版本："><a href="#Windows-版本：" class="headerlink" title="Windows 版本："></a>Windows 版本：</h2><h3 id="欢迎界面："><a href="#欢迎界面：" class="headerlink" title="欢迎界面："></a>欢迎界面：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112005004.png"/ loading="lazy"><h3 id="编辑界面："><a href="#编辑界面：" class="headerlink" title="编辑界面："></a>编辑界面：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112005417.png"/ loading="lazy"><h3 id="设计界面："><a href="#设计界面：" class="headerlink" title="设计界面："></a>设计界面：</h3><p>使用 UI 的设计师，拖曳界面时候生成一个简单的界面，及其方便；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010033.png"/ loading="lazy"><h3 id="项目构建界面："><a href="#项目构建界面：" class="headerlink" title="项目构建界面："></a>项目构建界面：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010213.png"/ loading="lazy"><h3 id="帮助界面："><a href="#帮助界面：" class="headerlink" title="帮助界面："></a>帮助界面：</h3><p>或者在光标移动到函数或者类名的单词中间，然后按下 F1 也会出现该结果的小的弹窗</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010446.png"/ loading="lazy"><h3 id="Qt助手："><a href="#Qt助手：" class="headerlink" title="Qt助手："></a>Qt助手：</h3><p>Qt 助手 == Qt 离线文档 == 上图在 QtCreator 中的小窗口的独立窗口</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112010625.png"/ loading="lazy"><br><h2 id="Linux版本："><a href="#Linux版本：" class="headerlink" title="Linux版本："></a>Linux版本：</h2><p>所有界面，都基本和 Windows一毛一样。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_20200114224503.png"/ loading="lazy"><br><h2 id="MacOS-版本："><a href="#MacOS-版本：" class="headerlink" title="MacOS 版本："></a>MacOS 版本：</h2><h3 id="工具栏在顶部（激活状态下）"><a href="#工具栏在顶部（激活状态下）" class="headerlink" title="工具栏在顶部（激活状态下）:"></a>工具栏在顶部（激活状态下）:</h3><p>其主要界面和 Win一样，但是其工具栏在最顶部，只有当前窗口处于激活状态，其工具栏才会显示出来。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200112011018.png"/ loading="lazy"><h3 id="如何运行多个-QtCrator"><a href="#如何运行多个-QtCrator" class="headerlink" title="如何运行多个 QtCrator?"></a>如何运行多个 QtCrator?</h3><p>另外一个就是，这个 QtCreator 刚安装完成，既不会又快捷方式在桌面，也不会有任何图标在启动台里面。</p><p>需要自己手动查找它出来，然后将其固定在 Dock（桌面最下方的任务栏）上面</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200112_011511.png"/ loading="lazy"><h3 id="如何显示快捷方式？"><a href="#如何显示快捷方式？" class="headerlink" title="如何显示快捷方式？"></a>如何显示快捷方式？</h3><blockquote><p>其中我的路径如下：</p><p><code> /Users/muli/Qt5.12.6/Qt Creator.app</code> </p><p>Qt Creator.app：（复制几份，就可以打开几个 QT 的 IDE）</p><p>下面的都在此路径下：<br><code>/Users/muli/Qt5.12.6/5.12.6/clang_64/bin</code></p><p>Assistant.app<br>Designer.app<br>Linguist.app</p></blockquote><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/mark_Snip20200112_011926.png"/ loading="lazy"><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><h3 id="编程环境：-MacOS-10-14-6-18G103"><a href="#编程环境：-MacOS-10-14-6-18G103" class="headerlink" title="编程环境：  MacOS 10.14.6 (18G103)"></a><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code></h3><p><strong>编程软件：</strong> <code>Qt 5.12.6</code>， <code>Qt Creator 4.10.2</code></p><h3 id="编程环境：-win10-x64-专业版-1803"><a href="#编程环境：-win10-x64-专业版-1803" class="headerlink" title="编程环境：  win10 x64 专业版 1803"></a><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code></h3><p><strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p><h3 id="编程环境：-uos-20-x64-专业版-Kernel：-x86-64-Linux-4-19-0-5-amd64"><a href="#编程环境：-uos-20-x64-专业版-Kernel：-x86-64-Linux-4-19-0-5-amd64" class="headerlink" title="编程环境：  uos 20 x64 专业版     Kernel：  x86_64 Linux 4.19.0-5-amd64"></a><strong>编程环境：</strong>  <code>uos 20 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.19.0-5-amd64</code></h3><p><strong>编程软件：</strong>  <code>Qt 5.11.3</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p><br><h2 id="归纳小结："><a href="#归纳小结：" class="headerlink" title="归纳小结："></a>归纳小结：</h2><p>这里因为我会同时使用到windows，Linux，MacOS 三个系统；且使用各种不同的版本环境的 Qt 版本，如此的随心所欲（对了，就是那么巧，我的确是又三台电脑，且有分别各自安装一个系统），也大概是得益于目前的这份工作，以及公司所从事的 Linux系统的开发和开源和软件自由的；晚上在空闲之余，来写一写这些基础的文章，算是一个帮助新手们的入门。因此，无论是你是使用什么系统，使用的哪一个版本的Qt 进行开发，以及是否如何借助第三方工具，比如 VS，或 vscode + 插件的模式，来进行开发c++，都可以在我的这个系列的博客找到blog。最后，这大半夜的，写这篇文章，我是有点脚冷。天冷，脚冷，该钻进被窝了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>制作一根好的六类网线使用</title>
      <link href="posts/ebaa79e8/"/>
      <url>posts/ebaa79e8/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  因为之前购买过一堆60米长的六类网线，但是手上还有着一推五类线的材料；想着趁这个周末，买一个好的一点的水晶头重新制作一下，然后插上我的路由器，嗯，就是感觉心理网络变得强大和稳定了（事实也是如此）；或许是一个坚硬且美感的水晶头能够让人的心理觉得它本身很是稳定，给人一种心安的棒棒的感觉💕</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snip20200106_210009.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103865752">制作一根好的六类网线使用</a></p></blockquote><br><h2 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h2><p>制作一个合格<del>耐用</del> 使用稳定且美观的网线，其需要的工具如下：</p><ul><li>一截比较长的网线🧵</li><li>多个水晶头</li><li>网线钳</li><li>测线仪</li></ul><br><h2 id="「五类网线」-和-「六类网线」-有什么区别"><a href="#「五类网线」-和-「六类网线」-有什么区别" class="headerlink" title="「五类网线」 和 「六类网线」 有什么区别?"></a>「五类网线」 和 「六类网线」 有什么区别?</h2><p><strong>五类网线传输速率是：100Mbps，实际在下载中的网速=100Mbps/8=12.5MB</strong></p><p><strong>六类网线传输速率是：1000Mbps，实际在下载中的网速=1000Mbps/8=125MB</strong></p><p>其它区别参考超五类线和六类线：</p><p>1、<strong>从传输性能上看</strong>：超五类网线的最高带宽为155MHz，用于传输百兆网络；六类网线的最高带宽是250MHz，用于传输千兆网络。超五类网线对于插入损耗、回拨损耗、近端串音等参数的要求低于六类网线。</p><p>2、<strong>从线的使用上看：</strong>超五类网线只利用一根网线中的两对线。分别是1 2线对和3 6线对。1 2线对用于传输数据，3 6线对用于接收数据；4 5 ，7 8线对为备用线。六类网线必须使用四对线。其中，1 2和3 6两对线传输数据，4 5和7 8两对线用于接收数据。</p><p>3、<strong>从材料上看：</strong>超五类网线的线芯直径为0.5mm，六类网线的线芯直径为0.57mm。此外，绝大部分六类网线有十字骨架。</p><p>4、<strong>从生产工艺上看：</strong>六类网线的线对扭绞长度比超五类网线的短。这有利于降低线对间的串音。</p><p>5、<strong>从布线工艺上看：</strong>一般六类网线的弯曲半径大于超五类网线网线的。</p><br><h2 id="网线钳与棘轮网线钳的区别？"><a href="#网线钳与棘轮网线钳的区别？" class="headerlink" title="网线钳与棘轮网线钳的区别？"></a>网线钳与棘轮网线钳的区别？</h2><p>基本上没有什么区别，就是棘轮网线钳中间有一个齿轮，用的习惯的人就觉得那个齿轮可以在你压水晶头的时候卡住一下，方便压紧，要是不习惯的人的话，就会觉得卡紧之后不好打开，棘轮网线钳中间有一个旋钮，每次压了水晶头之后要扭那个旋钮才能拿出网线。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snip20200106_213659.png"/ loading="lazy"><br><h2 id="网线水晶头八根排列的顺序："><a href="#网线水晶头八根排列的顺序：" class="headerlink" title="网线水晶头八根排列的顺序："></a>网线水晶头八根排列的顺序：</h2><p>五类线的水晶头和六类线的水晶头的排线方式其实是一样的，其区别是五类线的8跟是排在一行水平线的；而六类线的上下两排咬合顺序；但是顺序都是一样的，这里放一张六类线的水晶头接口图片：<br><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20200106214852.png"/ loading="lazy"></p><p>制作过程中，网线的两端，一个采用<code>T568B</code>方式，另一个采用<code>T568B</code>方式；其中排线顺序线的颜色顺序如下：</p><p><font color=#D0087E size=4 face="幼圆"> <code>T568B</code>顺序： 橙白，橙，绿白，蓝，蓝白，绿，棕白，棕 </font></p><p><font color=#D0087E size=4 face="幼圆"> <code>T568B</code>顺序：  绿白，绿，橙白，蓝，蓝白，橙，棕白，棕</font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snip20200106_205934.png"/ loading="lazy">按照这个顺序使用网线钳剪整齐之后，然后塞入水晶头（保持顺序不要乱了）；接着网线钳用力压一下，然后觉着没问题之后，使用检测工具测线仪检测一下，发现8根线的灯都依次亮了，那么说明这根网线制作的非常完美。可以正常使用了。<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/202001052049.gif"/ loading="lazy"><p>最后大家看到的成品就是本文的第一张照片啦~</p><br><h2 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h2><p>好像说是现在的网卡接口等已经很智能了，可以自己正反调整顺序，即使网线两端的接口方式都是一样的了，也是可以正常使用了的，不过这个我没有测试过。理论上是可行的。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QNetworkAccessManager，QNetworkReply，QNetworkRequest实现高层网络的操作http</title>
      <link href="posts/9b0e3e4b/"/>
      <url>posts/9b0e3e4b/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解<code>QNetworkAccessManager</code>/<code>QNetworkReply</code>/<code>QNetworkRequest</code>实现高层网络的操作<code>http</code>，书写一个简单地例子；然后写了一个小的 <strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_223624_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="http请求以及应答："><a href="#http请求以及应答：" class="headerlink" title="http请求以及应答："></a>http请求以及应答：</h2><p>将上面的三个类进行一个关系图的梳理，可以得到如下如图，看到网络上面都是一些基本介绍不全，连一个图都没有，理解起来会比较抽象，所以这里画上一个图帮助大家理解他们三者之间的关系：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_225736_mark.png"/ loading="lazy"><h3 id="QNetworkRequest："><a href="#QNetworkRequest：" class="headerlink" title="QNetworkRequest："></a>QNetworkRequest：</h3><p><code>QNetworkRequest</code>通过一个URL地址发送网络请求协议请求，也保存网络请求的信息，目前是支持HTTP，FTP，和局部的URLs的下载和上传；</p><br><h3 id="QNetworkAccessManager："><a href="#QNetworkAccessManager：" class="headerlink" title="QNetworkAccessManager："></a>QNetworkAccessManager：</h3><p><code>QNetworkAccessManager</code>类用于协调网络操作，在<code>QNetworkRequest</code>发送一个网络请求之后，<code>QNetworkAccessManager</code>类负责发送网络请求，创建网络响应。</p><br><h3 id="QNetworkReply："><a href="#QNetworkReply：" class="headerlink" title="QNetworkReply："></a>QNetworkReply：</h3><p><code>QNetworkReply</code>类表示网络请求的响应。由<code>QNetworkAccessManager</code>在发送一个网络请求后创建一个网络响应；<code>QNetworkReply</code>提供信号finish(), readyRead(), downloadProgress()可以监测网络执行的情况，执行响应的操作。其<code>QNetworkReply</code>也是<code>QIODevice</code>的子类，所以<code>QNetworkReply</code>支持流读写功能，也支持异步或者同步的工作模式。</p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里先放一张运行效果图：</p><p>此例子下载的是qtcretor的校验文件.txt；其中若是将下载链接替换为QtCreator的下载·连接（本是想下载exe、dmg文件的）；但是却会发现下载不是预料中，而是另外一个文件，指向另外的一个真实地址的下载文件；但是浏览器可以识别们直接跳转下载之后的地址，但若是这个程序想要直接下载从定向的文件的真实地址的文件，就需要再次做处理。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191230_224505.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下：</p><p>其中.h头文件源码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXHTTP_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXHTTP_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QNetworkAccessManager></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QNetworkReply></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QUrl></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDir></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExHttp</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExHttp</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExHttp</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_btnDown_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下载文件</span>    <span class="token keyword">void</span> <span class="token function">on_btnFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//默认的保存路径</span>    <span class="token keyword">void</span> <span class="token function">on_lineEditUrl_textChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//网络响应结束</span>    <span class="token keyword">void</span> <span class="token function">onReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//读取下载的数据</span>    <span class="token keyword">void</span> <span class="token function">onDownloadProgress</span><span class="token punctuation">(</span>qint64 bytesRea<span class="token punctuation">,</span> qint64 totalBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//下载进程</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExHttp <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QNetworkAccessManager<span class="token operator">*</span> m_networkManager<span class="token punctuation">;</span>   <span class="token comment">//网络管理</span>    QNetworkReply<span class="token operator">*</span> m_reply<span class="token punctuation">;</span>                    <span class="token comment">//网络响应</span>    QFile<span class="token operator">*</span> m_file<span class="token punctuation">;</span>                             <span class="token comment">//下载保存的临时文件</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXHTTP_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中.cpp源文件源码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExHttp.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExHttp.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMessageBox></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDir></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDesktopServices></span></span><span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">ExHttp</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExHttp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"QNetworkAccessManager 网络管理使用 Http 协议下载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_networkManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QNetworkAccessManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_reply <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    m_file <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//下载文件</span><span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">on_btnDown_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString urlSpec <span class="token operator">=</span> ui<span class="token operator">-></span>lineEditUrl<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//去掉字符串的首尾的空格</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>urlSpec<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"下载地址URL为NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QUrl url <span class="token operator">=</span> <span class="token class-name">QUrl</span><span class="token operator">::</span><span class="token function">fromUserInput</span><span class="token punctuation">(</span>urlSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"无效URL: %1 \n 错误信息: %2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>urlSpec<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">errorString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QString dir <span class="token operator">=</span> ui<span class="token operator">-></span>lineEditFile<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"保存地址为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QString fileFileName <span class="token operator">=</span> dir <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">fileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//文件保存地址 + 文件名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">QFile</span><span class="token operator">::</span><span class="token function">exists</span><span class="token punctuation">(</span>fileFileName<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token class-name">QFile</span><span class="token operator">::</span><span class="token function">remove</span><span class="token punctuation">(</span>fileFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QFile</span><span class="token punctuation">(</span>fileFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建临时文件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_file<span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>WriteOnly<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"提示"</span><span class="token punctuation">,</span> <span class="token string">"打开临时文件错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ui<span class="token operator">-></span>btnDown<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_reply <span class="token operator">=</span> m_networkManager<span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">QNetworkRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发送get网络请求，创建网络响应</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_reply<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_reply<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_reply<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">downloadProgress</span><span class="token punctuation">(</span>qint64<span class="token punctuation">,</span>qint64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onDownloadProgress</span><span class="token punctuation">(</span>qint64<span class="token punctuation">,</span>qint64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//默认的保存路径</span><span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">on_btnFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString currPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QDir <span class="token function">dir</span><span class="token punctuation">(</span>currPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    dir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEditFile<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currPath <span class="token operator">+</span> <span class="token string">"/temp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//网络响应结束</span><span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">onFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFileInfo fileInfo<span class="token punctuation">;</span>    fileInfo<span class="token punctuation">.</span><span class="token function">setFile</span><span class="token punctuation">(</span>m_file<span class="token operator">-></span><span class="token function">fileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_file<span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> m_file<span class="token punctuation">;</span>    m_file <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    m_reply<span class="token operator">-></span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_reply <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">//勾选了，下载完成之后，打开下载的文件               //absoluteFilePath() 返回包含文件名的绝对路径。</span>        <span class="token class-name">QDesktopServices</span><span class="token operator">::</span><span class="token function">openUrl</span><span class="token punctuation">(</span><span class="token class-name">QUrl</span><span class="token operator">::</span><span class="token function">fromLocalFile</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">absoluteFilePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用默认软件的打开下载的文件</span>    ui<span class="token operator">-></span>btnDown<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//读取下载的数据</span><span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">onReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_file<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span>m_reply<span class="token operator">-></span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将返回的数据进行读取，写入到临时文件中</span><span class="token punctuation">&#125;</span><span class="token comment">//下载进程</span><span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">onDownloadProgress</span><span class="token punctuation">(</span>qint64 bytesRea<span class="token punctuation">,</span> qint64 totalBytes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span>totalBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>bytesRea<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExHttp</span><span class="token operator">::</span><span class="token function">on_lineEditUrl_textChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>arg1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtHttpEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Upd通信之QUdpSocket的unicast单播、broadcast广播、multicast组播</title>
      <link href="posts/26bdcc49/"/>
      <url>posts/26bdcc49/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解<code>Upd</code>通信之<code>QUdpSocket</code>的<code>unicast</code>单播、<code>broadcast</code>广播、<code>multicast</code>组播，书写一个简单地例子；然后写了一个小的<code>Qt</code>例子，用来实现和验证它的空间的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_205857_mark.png"  / loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_214149_mark.png" / loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="QUdpSocket讲解"><a href="#QUdpSocket讲解" class="headerlink" title="QUdpSocket讲解:"></a>QUdpSocket讲解:</h2><p><code>UDP</code>通信是轻量的，不可靠（表示有概率会丢包），面向数据报，无连接的协议。用途可以比如：远程视频等</p><p>对于UDP通信而言，其实是没有区分客户端或者服务端的，应为任何一个UdpSocket既可以看做客户端，也可以看做服务端；这点与TCP的不一样的。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_222351_mark.png"/ loading="lazy"><p>另外就是<code>QUdpSocket</code>是以数据报的形式传输数据，而非连续的数据流。发送的数据报一般也都是<code>QByteArray</code></p><p>类型的字节数组；数据报的长度一般是低于512字节的，且每一个数据报都是要包含有发送者和接受者的<code>IP</code>和<code>port</code>等信息。</p><p>其中udp的消息传播方式有如下三种：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_215944_mark.png"/ loading="lazy"><ul><li><p><strong>unicast单播：</strong></p><p>  一个udp客户端只能够发送数据报到另外一个指定的地址和端口的udp客户端，是一对一的数据传输</p></li><li><p><strong>broadcast广播：</strong></p><p>  一个udp客户端发送的数据报，在同一网络范围内其他所有的udp客户端都可以收到。其支持<code>IPV4</code>广播📢，只需要将接收对象设置为<code>QHostAddress::Broadcast</code>，且<code>ip</code>地址为<code>255.255.255.255</code>(代表整个地址段的所有ip)</p></li><li><p><strong>multicast组播：</strong></p><p>  也被称为多播。就是相当于群聊功能。udp客户端加入到 <strong>另一个组播IP地址指定的</strong>多播组，成员向组播地址发送的数据报组内成员都可以接收到，使用<code>QUdpSocket::joinMuliticastGroup()</code>函数实现加入多播功能；加入多播后，UDP的发送和正常的UDP数据收发一样。</p></li></ul><p><strong>而关于组播IP地址，是有着一些约定的：</strong></p><p>综上：若是在家庭或者办公室或局域网中进行udp的测试，可以使用的组播地址是范围是：239.0.0.0~238.255.255.255</p><p><strong>QUdpSocket的主要常用接口：</strong></p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>bool bind(quint16 port = 0)</td><td>为udp通信绑定一个端口</td></tr><tr><td>qint64 writeDatagram(QByteArray kdatagram, QHostAddress &amp;host, quint16 port)</td><td>向目标地址和端口的udp客户端发送数据报，返回成功发送的字节数</td></tr><tr><td>bool hasPendingDatagrams()</td><td>至少有一个数据报需要读取的时，返回true</td></tr><tr><td>qint64 pendingDatagramSize()</td><td>返回第一个待读取数据报的大小</td></tr><tr><td>qint64 readDatagram(char *data, qint64 maxSize)</td><td>读取一个数据报，返回成功读取的数据报的字节数</td></tr><tr><td>bool joinMulticastGroup(QHostAddress &amp;groupAddress）</td><td>加入一个多播组</td></tr><tr><td>bool leaveMulticastGroup(QHostAddress &amp;groupAddress)</td><td>离开一个多播组</td></tr></tbody></table><br><h2 id="unicast单播-broadcast广播："><a href="#unicast单播-broadcast广播：" class="headerlink" title="unicast单播/broadcast广播："></a>unicast单播/broadcast广播：</h2><p>其中单播和组播的图解如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_221822_mark.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_221804_mark.png"/ loading="lazy"><br><h2 id="multicast组播："><a href="#multicast组播：" class="headerlink" title="multicast组播："></a>multicast组播：</h2><p>其中组播的关系图如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191230_221740_mark.png"/ loading="lazy"><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里先放一张运行效果图：</p><p><strong>unicast单播/broadcast广播：</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191230_211005.gif"/ loading="lazy"><p><strong>multicast组播:</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191230_221005.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p><strong>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下</strong></p><h3 id="unicast单播-broadcast广播：-1"><a href="#unicast单播-broadcast广播：-1" class="headerlink" title="unicast单播/broadcast广播："></a>unicast单播/broadcast广播：</h3><p>其中.h头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTRANS_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTRANS_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QUdpSocket></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QString></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExTrans</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*! * \class ExTrans 一个UDP的Deam测试，同时测试单播和广播 * \brief 因为是在同一台电脑测试，所以IP相同，需要绑定两个不同端口的，这样不会冲突； * 若是两台电脑进行测试，那么可以约定使用相同的端口号，使用不同的IP；来进行通讯 */</span><span class="token keyword">class</span> <span class="token class-name">ExTrans</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExTrans</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_actBind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//绑定端口</span>    <span class="token keyword">void</span> <span class="token function">on_actDisbind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//解除绑定</span>    <span class="token keyword">void</span> <span class="token function">on_actClean_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清除文本信息</span>    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//关闭程序</span>    <span class="token keyword">void</span> <span class="token function">on_btnUnicast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//单播消息</span>    <span class="token keyword">void</span> <span class="token function">on_btnBroadcast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//广播消息</span>    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//socket 状态发生变化</span>    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取 socket 传入的数据</span><span class="token keyword">private</span><span class="token operator">:</span>    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取本机IP</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExTrans <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QLabel<span class="token operator">*</span> m_labSocketState<span class="token punctuation">;</span>    QUdpSocket<span class="token operator">*</span> m_udpSocket<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXTRANS_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中.cpp源文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExTrans.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExTrans.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span><span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">ExTrans</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExTrans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"Udp通信：unicast(单播) + broadcast(广播)的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString ip <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"主机名称："</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n主机IP："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocketState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"Socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocketState<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocketState<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QUdpSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//绑定端口</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">on_actBind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxBind<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//本机UDP端口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//端口绑定成功</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"端口绑定成功："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">localPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actBind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actDisbind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"端口绑定失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//解除绑定</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">on_actDisbind_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_udpSocket<span class="token operator">-></span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//断开，中止套接字</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"端口解除绑定成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actBind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actDisbind<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//清除文本信息</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">on_actClean_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭程序</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//单播消息</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">on_btnUnicast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString targetIp <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostAddress <span class="token function">targetAddr</span><span class="token punctuation">(</span>targetIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//目标 Ip</span>    quint16 targetPort <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxPort<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//目标 port</span>    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//发送的消息</span>    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_udpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> targetAddr<span class="token punctuation">,</span> targetPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发送数据报</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[Send: ] %1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//广播消息</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">on_btnBroadcast_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    quint16 targetPort <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxPort<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//目标 port</span>    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//发送的消息</span>    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_udpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> QHostAddress<span class="token operator">::</span>Broadcast<span class="token punctuation">,</span> targetPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//发送 数据报 给所有IP</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[广播: ] %1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//socket 状态发生变化</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>UnconnectedState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>HostLookupState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectingState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectedState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>BoundState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ClosingState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ListeningState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//读取 socket 传入的数据</span><span class="token keyword">void</span> <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">hasPendingDatagrams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QByteArray datagram<span class="token punctuation">;</span>        datagram<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">pendingDatagramSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QHostAddress peerAddr<span class="token punctuation">;</span>        quint16 peerPort<span class="token punctuation">;</span>        m_udpSocket<span class="token operator">-></span><span class="token function">readDatagram</span><span class="token punctuation">(</span>datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datagram<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读取数据包，消息+来自的Ip和port</span>        QString str <span class="token operator">=</span> datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QString peer <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[From: %1  %2] %3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>peerAddr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取本机IP</span>QString <span class="token class-name">ExTrans</span><span class="token operator">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString Ip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Ip <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> Ip<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="multicast组播"><a href="#multicast组播" class="headerlink" title="multicast组播:"></a>multicast组播:</h3><p>其中.h头文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXMULTICAST_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXMULTICAST_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QUdpSocket></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostAddress></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExMulticast</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExMulticast</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExMulticast</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExMulticast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//socket 状态发生变化</span>    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//读取 socket 传入的数据</span>    <span class="token keyword">void</span> <span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取本机IP</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExMulticast <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QUdpSocket<span class="token operator">*</span> m_udpSocket<span class="token punctuation">;</span>      <span class="token comment">//用于通讯的 socket</span>    QLabel<span class="token operator">*</span> m_labSocketState<span class="token punctuation">;</span>    QHostAddress m_groupAddress<span class="token punctuation">;</span>  <span class="token comment">//组播地址</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXMULTICAST_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中.cpp源文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExMulticast.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExMulticast.h"</span></span><span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">ExMulticast</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExMulticast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"Udp通信：multicate(组播)的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString ip <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"主机名称："</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n主机IP："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocketState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"Socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocketState<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocketState<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_udpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QUdpSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//用于通讯使用的 Socket</span>    <span class="token comment">//Multicast路由层次，1表示只在同一局域网内</span>    <span class="token comment">//组播TTL: 生存时间，每跨1个路由会减1，多播无法跨过大多数路由所以为1</span>    <span class="token comment">//默认值是1，表示数据包只能在本地的子网中传送。</span>    m_udpSocket<span class="token operator">-></span><span class="token function">setSocketOption</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>MulticastTtlOption<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_udpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExMulticast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString ip <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxIp<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_groupAddress <span class="token operator">=</span> <span class="token function">QHostAddress</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxBind<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span>QHostAddress<span class="token operator">::</span>AnyIPv4<span class="token punctuation">,</span> port<span class="token punctuation">,</span> QUdpSocket<span class="token operator">::</span>ShareAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//绑定端口</span>        m_udpSocket<span class="token operator">-></span><span class="token function">joinMulticastGroup</span><span class="token punctuation">(</span>m_groupAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//加入多播组</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[用户："</span> <span class="token operator">+</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]  加入组播(组播地址："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">" 端口："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[用户："</span> <span class="token operator">+</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]  加入组播(组播地址："</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">" 端口："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_udpSocket<span class="token operator">-></span><span class="token function">leaveMulticastGroup</span><span class="token punctuation">(</span>m_groupAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//退出组播</span>    m_udpSocket<span class="token operator">-></span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//解除绑定</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[用户："</span> <span class="token operator">+</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"]  退出组播成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>UnconnectedState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>HostLookupState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectingState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectedState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>BoundState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ClosingState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ListeningState<span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        m_labSocketState<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">hasPendingDatagrams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QByteArray datagram<span class="token punctuation">;</span>        datagram<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>m_udpSocket<span class="token operator">-></span><span class="token function">pendingDatagramSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QHostAddress peerAddr<span class="token punctuation">;</span>        quint16 peerPort<span class="token punctuation">;</span>        m_udpSocket<span class="token operator">-></span><span class="token function">readDatagram</span><span class="token punctuation">(</span>datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> datagram<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//读取数据包，消息+来自的Ip和port</span>        QString str <span class="token operator">=</span> datagram<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QString peer <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"[From: %1  %2] %3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>peerAddr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>peerPort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>QString <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString Ip <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Ip <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> Ip<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMulticast</span><span class="token operator">::</span><span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxBind<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString  msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QByteArray  datagram <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_udpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>datagram<span class="token punctuation">,</span> m_groupAddress<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    m_udpSocket->writeDatagram(datagram.data(), datagram.size(), m_groupAddress, port);</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[multicst] "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtUdpEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP通信之QTcpServer和QTcpSocket，服务器和客户端通讯</title>
      <link href="posts/f283a311/"/>
      <url>posts/f283a311/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解<code>TCP</code>通信之<code>QTcpServer</code>和<code>QTcpSocket</code>，服务器和客户端通讯，书写一个简单地例子；然后写了一个小的 <strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191225_232206_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="Tcp通信概述："><a href="#Tcp通信概述：" class="headerlink" title="Tcp通信概述："></a>Tcp通信概述：</h2><p>我想能够看到网络这一部分的人，基本都是有着基本的网络认知；这里为了这一个系列的完整性，还是决定将本系列的基本知识仍旧写出来。万一之前的你是没有怎么接触过这类篇文章的鸭鸭呢？就算是完全不知，但是一些基础的还是能够让你能够有所了解，再具体的就进行自行goole和专业📚进行扩展深入扩展学习，博文尽量都提一笔，其余更多待你自行发掘。</p><p><strong>TCP特点：</strong></p><p>可靠，面向流传播，面向协议的一种传输协议；特别适合用于连续数据传输。实际🌰：QQ的在线发送文件，就是为了确保文件发送的完整性，使用的TCP协议。</p><br><h2 id="QTcpServer属性："><a href="#QTcpServer属性：" class="headerlink" title="QTcpServer属性："></a>QTcpServer属性：</h2><p>TCP通信，必须先进行TCP连接，通信端口分为服务器端口和客户端。</p><p><code>QTcpServer</code>是从<code>QObject</code>继承的类，主要是用于服务器建立网络监听，创立<code>Socket</code>连接的；其中主要的一些常用接口，提供·如下：</p><table><thead><tr><th>类型</th><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>公共函数</td><td>void close()</td><td>关闭服务器，停止网络监听</td></tr><tr><td></td><td>bool listen()</td><td>在给定IP地址和端口上开始监听，若是成功，就返回true</td></tr><tr><td></td><td>bool isListening()</td><td>返回true表示服务器处于监听状态</td></tr><tr><td></td><td>QTcpSocket * nextPendingConnection()</td><td>返回下一个等待接入的连接</td></tr><tr><td></td><td>QHostAddres serverAddress()</td><td>如果服务器处于监听状态，返回服务器地址</td></tr><tr><td></td><td>quint16 serverPort()</td><td>如果服务器处于监听状态，返回服务器端口</td></tr><tr><td></td><td>bool waitForNewConnection()</td><td>以阻塞方式等待新的连接</td></tr><tr><td></td><td></td><td></td></tr><tr><td>信号</td><td>void acceptError( QAbstractSocket::SocketError socketError )</td><td>当接受一个新的连接时大声了错误，就发射此信号；参数socketError描述错误信息</td></tr><tr><td></td><td>void new Connection()</td><td>当有新的信号连接时候，发射此信号</td></tr><tr><td></td><td></td><td></td></tr><tr><td>保护函数</td><td>void incomingConnection(qintptr socketDescriptor)</td><td>当有一个新的连接可用时，QTcpServer内部调用此函数，创建一个QTcpSocket对象，添加到内部可用新连接列表，然后发射newConnetion()信号，用户若是从QTcpServer继承定义类，可以重定义此函数，但是必须调用QtcpSocket继承定义类，可以重新定义此函数，但是必须调用addPendingConnetion()</td></tr><tr><td></td><td>void addPendingConnection(QTcp Socket *socket)</td><td>由incomingtion()调用，将创建的QTcpSocket添加到内部新可用连接列表</td></tr></tbody></table><p>服务器的程序首先是需要调用QTcpServer进行监听的【这个时候，是指定监听的IP和port的】，然后当QScoket连接的时候，会发射信号📶，<code>newConnection()</code>，在<code>newConnection()</code>的对应好的槽函数中，可以用nextPendingConnetion()接收客户端的连接，然后使用QSocket与客户端进行通信。</p><h2 id="QTcp-QUdp继承关系图："><a href="#QTcp-QUdp继承关系图：" class="headerlink" title="QTcp/QUdp继承关系图："></a>QTcp/QUdp继承关系图：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191229_181530_mark.png"/ loading="lazy"><br><h2 id="QAbstractSocket接口讲解："><a href="#QAbstractSocket接口讲解：" class="headerlink" title="QAbstractSocket接口讲解："></a>QAbstractSocket接口讲解：</h2><p><strong>其中主要的<code>QAbstractSocket</code>的主要的接口函数如下：</strong></p><table><thead><tr><th>类型</th><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>公共函数</td><td>void connectToHost(QHostAddress headdress, quint16 port,)</td><td>以异步的方式连接到指定的IP地址和端口的TCP服务器，连接成功会发射connected()信号</td></tr><tr><td></td><td>void disconnectFromHost()</td><td>断开sokcet，关闭成功后发射disconnection()信号</td></tr><tr><td></td><td>bool waitForConnected()</td><td>等待直到建立socket连接</td></tr><tr><td></td><td>bool waitForDisconnected()</td><td>等待直到断开socket连接</td></tr><tr><td></td><td>QHostAddress localAddress()</td><td>返回本socket的地址</td></tr><tr><td></td><td>quint16 localPort()</td><td>返回本socket的端口</td></tr><tr><td></td><td>QHostAddress peerAddress()</td><td>在已经连接状态下，返回对方socket的地址</td></tr><tr><td></td><td>QString peerName()</td><td>返回connetToHost()连接到对方的主机的名</td></tr><tr><td></td><td>quint16 peerPort()</td><td>在已连接的状态下，返回对方的socket的port</td></tr><tr><td></td><td>qint64 readBuffer Size()</td><td>返回内部读取缓冲区的大小的数据的字节数；该大小决定了read()和readAll()函数能够读取出来的数据的大小</td></tr><tr><td></td><td>void setReadBuAerSize(qint64 size)</td><td>数据内部读取缓冲区的数据的字节数</td></tr><tr><td></td><td>qint64 bytesAvailable()</td><td>返回需要读取的缓冲区的字节数字</td></tr><tr><td></td><td>bool canReadLine()</td><td>如果有行数据要从socket缓冲区读取，就返回true</td></tr><tr><td></td><td>SocketState state()</td><td>返回当前socket状态</td></tr><tr><td></td><td></td><td></td></tr><tr><td>信号📶</td><td>void connected()</td><td>connectionToHost()成功连接到服务器后发射此信号</td></tr><tr><td></td><td>void disconnected()</td><td>当socket断开连接时，发射此信号</td></tr><tr><td></td><td>void error(QAbstractSocket::SocketError socketError)</td><td>当socket发生错误时，发射此信号</td></tr><tr><td></td><td>void hostFound()</td><td>调用connectToHost()找到主机后发射此信号</td></tr><tr><td></td><td>void stateChanged(QAbstractSocket::SocketState socketState)</td><td>当socket的状态变化时候发射此信号，参数socketState表示了socket当前的状态</td></tr><tr><td></td><td>void ready Read()</td><td>当缓冲区的数据需要读取时候，发射此信号，在此信号的槽函数里面读取缓冲区的数据</td></tr></tbody></table><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里先放一张运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191216_232611.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>这里将TCP通信的服务器和客户端拆分为两个小的项目来写，其结构如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191225_232719_mark.png" style="zoom:67%;" / loading="lazy"><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下：</p><h3 id="其中服务器端："><a href="#其中服务器端：" class="headerlink" title="其中服务器端："></a>其中服务器端：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * Copyright (C)  2019 ~ 2019 touwoyimuli.  All rights reserved. * * Author:  touwoyimuli &lt;touwoyimuli@gmai.com> * * github:  https://github.com/touwoyimuli * blogs:   https://touwoyimuli.github.io/ * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see &lt;https://touwoyimuli.github.io/>. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTCPSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTCPSERVER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTcpServer></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTcpSocket></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExTcpServer</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExTcpServer</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExTcpServer</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取本机 IP</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent<span class="token operator">*</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span><span class="token comment">//UI的槽函数</span>    <span class="token keyword">void</span> <span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//开始监听</span>    <span class="token keyword">void</span> <span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//停止监听</span>    <span class="token keyword">void</span> <span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//清除文本框内容</span>    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//退出程序</span>    <span class="token keyword">void</span> <span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//发送消息</span><span class="token comment">//自定义的槽函数</span>    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//读取 socket 传入时候的数据</span>    <span class="token keyword">void</span> <span class="token function">onClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//client socket conneted</span>    <span class="token keyword">void</span> <span class="token function">onClientDisonnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//client socket disconneted</span>    <span class="token keyword">void</span> <span class="token function">onNewConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//QTcpServer 的 newConnect() 信号</span>    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExTcpServer <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QLabel<span class="token operator">*</span> m_labListen<span class="token punctuation">;</span>    QLabel<span class="token operator">*</span> m_labSocket<span class="token punctuation">;</span>    QTcpServer<span class="token operator">*</span> m_tcpServer<span class="token punctuation">;</span>    QTcpSocket<span class="token operator">*</span> m_tcpSocket<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXTCPSERVER_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExTcpServer.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExTcpServer.h"</span></span><span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">ExTcpServer</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExTcpServer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labListen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"监听状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labListen<span class="token operator">-></span><span class="token function">setMidLineWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocket<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labListen<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString localeIp <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token function">windowTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---IP地址："</span> <span class="token operator">+</span> localeIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>localeIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTcpServer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpServer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onNewConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExTcpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>QString <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机名称："</span> <span class="token operator">+</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString locaIp<span class="token punctuation">;</span>    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">"null QString"</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            locaIp <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> locaIp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span>   <span class="token comment">//关闭窗口时候停止监听</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_tcpServer<span class="token operator">-></span><span class="token function">isListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        m_tcpServer<span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token operator">-></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">on_actStart_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString Ip <span class="token operator">=</span> ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBox<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostAddress <span class="token function">addr</span><span class="token punctuation">(</span>Ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpServer<span class="token operator">-></span><span class="token function">listen</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//监听指定的 IP 和指定的 port</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"服务器地址为:"</span> <span class="token operator">+</span> m_tcpServer<span class="token operator">-></span><span class="token function">serverAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"   服务器端口："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_tcpServer<span class="token operator">-></span><span class="token function">serverPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"开始监听..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labListen<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"监听状态：正在监听..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">on_actStop_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_tcpServer<span class="token operator">-></span><span class="token function">isListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    m_tcpServer<span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//停止监听</span>    ui<span class="token operator">-></span>actStart<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labListen<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"监听状态：监听已经停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[服务器:]"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">hasFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpSocket<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">//读取缓冲区行文本</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">canReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[客户端:]"</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">onClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//客户端连接时</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"客户端套接字连接\n对等(peer)地址："</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">peerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                       <span class="token operator">+</span> <span class="token string">"    对等(peer)端口："</span> <span class="token operator">+</span>  <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">peerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">onClientDisonnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//客户端断开连接时</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"客户端套接字断开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpSocket<span class="token operator">-></span><span class="token function">deleteLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">onNewConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_tcpSocket <span class="token operator">=</span> m_tcpServer<span class="token operator">-></span><span class="token function">nextPendingConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建 socket</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onClientConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">disconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onClientDisonnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpServer</span><span class="token operator">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>UnconnectedState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>HostLookupState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectingState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectedState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>BoundState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ClosingState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ListeningState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其中客户端："><a href="#其中客户端：" class="headerlink" title="其中客户端："></a>其中客户端：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXTCPCLIENT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXTCPCLIENT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTcpSocket></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExTcpClient</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExTcpClient</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExTcpClient</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    QString <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取本本机 IP</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token comment">//UI 定义的槽函数</span>    <span class="token keyword">void</span> <span class="token function">on_actConnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//请求连接到服务器</span>    <span class="token keyword">void</span> <span class="token function">on_actDisconnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//断开与服务器的连接</span>    <span class="token keyword">void</span> <span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//清除内容</span>    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//退出程序</span>    <span class="token keyword">void</span> <span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//发送文本消息</span>    <span class="token comment">//自定义的槽函数</span>    <span class="token keyword">void</span> <span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//从socket读取传入的数据</span>    <span class="token keyword">void</span> <span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExTcpClient <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QLabel<span class="token operator">*</span> m_labSocket<span class="token punctuation">;</span>    QTcpSocket<span class="token operator">*</span> m_tcpSocket<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXTCPCLIENT_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExTcpClient.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExTcpClient.h"</span></span><span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">ExTcpClient</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExTcpClient<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"socket状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labSocket<span class="token operator">-></span><span class="token function">setMidLineWidth</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTcpSocket</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString localIp <span class="token operator">=</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token function">windowTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"----本机IP:"</span> <span class="token operator">+</span> localIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>localIp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">disconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">stateChanged</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_tcpSocket<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">readyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExTcpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>QString <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">getLocalIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机名称："</span> <span class="token operator">+</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString localIp<span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress addr<span class="token punctuation">,</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>IPv4Protocol <span class="token operator">==</span> addr<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            localIp <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> localIp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token operator">::</span>ConnectedState<span class="token punctuation">)</span>        m_tcpSocket<span class="token operator">-></span><span class="token function">disconnectFromHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token operator">-></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">onConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"已经连接到服务器\n客户端套接字连接\n对等(peer)地址："</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">peerAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                       <span class="token operator">+</span> <span class="token string">"    对等(peer)端口："</span> <span class="token operator">+</span>  <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">peerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actConnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actDisconnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"已经断开与服务器的连接\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actConnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actDisconnect<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">onSocketReadyRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">canReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[服务器:]"</span> <span class="token operator">+</span> m_tcpSocket<span class="token operator">-></span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">onSocketStateChange</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>SocketState socketState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>socketState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>UnconnectedState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：UnconnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>HostLookupState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：HostLookupState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectingState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ConnectedState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ConnectedState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>BoundState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：BoundState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ClosingState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ClosingState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>ListeningState<span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：ListeningState"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        m_labSocket<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"socket状态：其他未知状态..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">on_actConnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString addr <span class="token operator">=</span> ui<span class="token operator">-></span>comboBox<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    quint16 port <span class="token operator">=</span> ui<span class="token operator">-></span>spinBox<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpSocket<span class="token operator">-></span><span class="token function">connectToHost</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">on_actDisconnect_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m_tcpSocket<span class="token operator">-></span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QAbstractSocket<span class="token operator">::</span>ConnectedState<span class="token punctuation">)</span>        m_tcpSocket<span class="token operator">-></span><span class="token function">disconnectFromHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">on_actClear_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExTcpClient</span><span class="token operator">::</span><span class="token function">on_btnSend_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"[客户端:]"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QByteArray str <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_tcpSocket<span class="token operator">-></span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtTcpEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在win10里面的VMware安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</title>
      <link href="posts/4914a5ac/"/>
      <url>posts/4914a5ac/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在<strong>UOS20</strong> （Linux系统）安装  <strong>Qt Creator 5.11.3， 64bit</strong>的开发教程，并且配置好 <strong>dtk</strong>的开发环境；其中本篇文章主要内容，介绍如下</p><ul><li>在<code>win10</code>的机器里面使用<code>VMware15.5</code>安装<code>UOS20（Linux）</code>操作系统</li><li>在<code>uos20</code>里面安装<code>QtCreator</code></li><li>在<code>QtCretor</code>里面配置<code>dtk</code>开发环境和工程模板</li></ul><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103733327">在win10里面的VMware安装UOS20，在uos20里面安装QtCreator，配置dtk开发环境</a></p></blockquote><br><h2 id="背景缘由："><a href="#背景缘由：" class="headerlink" title="背景缘由："></a>背景缘由：</h2><p>某笔记本一台，已经安装win10，且已经在VMware虚拟机里面，安装好了UOS20操作系统（一款颜值在线的Linux系统）；然后为了实际工作中为uos20添砖加瓦，需要安装QtCretor此IDE作为开发环境，且配置好那些的dtk的开发环境（写应用开发的开发人员），因他们是有所需要的；而我，作为是给他们写dtk库的人，表示是不需要设置的此环境的。但写应用的开发者们，有时候会使用dtk控件的时候，会有一些诡异的bug，我就需要测试一下，故此搭建 <strong>Dtk Widgets Application</strong>模版环境。</p><p><strong>ps: uos20 的前一个大版本是deepin15， 都是同一家操作系统公司研发，是一个国际排名稳定在10左右的Linux的版本，衍生于Debian</strong></p><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p><p><strong>&amp;&amp;</strong></p><p><strong>编程环境：</strong>  <code>uos 20 x64 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.19.0-5-amd64</code></p><p><strong>编程软件：</strong>  <code>Qt 5.11.3</code>，<code>Qt Creator 4.8.2 </code></p><br><h2 id="win10里面的VMware安装UOS20系统："><a href="#win10里面的VMware安装UOS20系统：" class="headerlink" title="win10里面的VMware安装UOS20系统："></a>win10里面的VMware安装UOS20系统：</h2><ul><li>选择新创建一个虚拟机，选择 <strong>自定义（高级）</strong>点击 <strong>下一步</strong>：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227141804.png" loading="lazy"></p><ul><li>直接 <strong>下一步</strong>，不用修改什么</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227141952.png" loading="lazy"></p><ul><li>选择 <strong>稍后安装操作系统</strong>， 点击 <strong>下一步</strong>：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142130.png" loading="lazy"></p><ul><li>选择 <strong>Ubuntun x64（这点很重要）</strong>, 点击 <strong>下一步</strong>，</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142326.png" loading="lazy"></p><ul><li>选择安装目录， 点击下一步：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142713.png" loading="lazy"></p><ul><li>建议还是多分配几颗，这是我的个人配置颗数，越多越好</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227142809.png" loading="lazy"></p><ul><li>选择分配内存数，然后点击下一步（后面也可以修改内存数大小）</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143137.png" loading="lazy"></p><ul><li>选择网络模式<ul><li><strong>桥接网络</strong>：虚拟机里面的系统会有一个独立IP，不和物理主机的系统公用一个IP</li><li><strong>NAT网络</strong>：虚拟机里面的系统不会有一个独立IP，和物理主机的系统公用一个IP</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143407.png" loading="lazy"></p><ul><li>接下来几个步骤不用修改什么，直接选择下一步：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143623.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143726.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143749.png" loading="lazy"></p><ul><li>选择磁盘大小，然后点击下一步：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143852.png" loading="lazy"></p><ul><li>直接下一步：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227143938.png" loading="lazy"></p><ul><li>选择镜像源之后，点击开启，便会自动安装好虚拟机</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227144542.png" loading="lazy"></p><ul><li>常规的选择用户名，设置密码等，然后等待之后，就会安装成功</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227144915.png" loading="lazy"></p><p>经过前面一些列操作，uos20已经成功运行成功；接下来就是安装QtCretor了；不过在此之前，先建议更换源：</p><p>【方式一】可以在 <strong>“控制中心-更新-更新设置“</strong>，GUI界面手动选择换源；</p><p>【方式二】也可以去官网找稳定的更新的源，添加到<code>/etc/apt/sources.list</code>这个文件里面）；</p><p>然后执行下面更新的命令，更新一下系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> dist-upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="在uos20里面安装QtCreator："><a href="#在uos20里面安装QtCreator：" class="headerlink" title="在uos20里面安装QtCreator："></a>在<code>uos20</code>里面安装<code>QtCreator</code>：</h2><p>直接执行以下语句:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator     //安装Craetor IDE<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qt5-default   //安装qt的配置<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev  //安装dtk开发所需要环境<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token builtin class-name">source</span> qt5-default    //qt源码包，此会安装在当前所处目录下，建议更换目录再执行，推荐放在//<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>//也可以将上面的合成一个命令<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libdtkwidget-dev qt5-default qtcreator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中安qt源码学习的时候，会出现如下提示，蛋蛋蛋蛋蛋是，并不影响😎😎😎😎，进到当前文件夹下查看，所需要的文件已经被下载下来了：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227150930.png" loading="lazy"></p><p>我们所需啊都在这里</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227151528.png" loading="lazy"></p><ul><li>创建一个空的工程项目，验证安装成功</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227151730.png" style="zoom:80%;" / loading="lazy"><br><h2 id="在QtCretor里面配置dtk开发环境和工程模板："><a href="#在QtCretor里面配置dtk开发环境和工程模板：" class="headerlink" title="在QtCretor里面配置dtk开发环境和工程模板："></a>在<code>QtCretor</code>里面配置<code>dtk</code>开发环境和工程模板：</h2><p>在没有设置之前打开新建工程项目，是这样的，没有 <strong>”Dtk Widgets Application“</strong>这个选项的：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227152000.png" loading="lazy"></p><h3 id="安装-Dtk-Widgets-Application工程模板："><a href="#安装-Dtk-Widgets-Application工程模板：" class="headerlink" title="安装 Dtk Widgets Application工程模板："></a>安装 <strong>Dtk Widgets Application</strong>工程模板：</h3><h4 id="【方式一】：命令安装"><a href="#【方式一】：命令安装" class="headerlink" title="【方式一】：命令安装"></a>【方式一】：命令安装</h4><p>运行命令，然后重启QtCretor：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtcreator-template-dtk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="【方式二】：手动安装"><a href="#【方式二】：手动安装" class="headerlink" title="【方式二】：手动安装"></a>【方式二】：手动安装</h4><p>下载此文件：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227153249.png" loading="lazy"></p><p>链接：<a href="https://pan.baidu.com/s/1GD7ky9iFjYQ5NZBIU9kjOw">https://pan.baidu.com/s/1GD7ky9iFjYQ5NZBIU9kjOw</a><br>提取码：8q0b</p><blockquote><p>下载之后，将此压缩包解压到 /usr/share/qtcreator/templates/wizards/projects 目录下，之后重启 QtCreator，在创建项目的向导中即可选择“Dtk Widgets Application”</p></blockquote><p>重启之后，会发现有如下，且运行一个新的工程运行验证安装：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227152501.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191227153749.png" loading="lazy"></p><br>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows10环境下安装QtCreator+VisualStudio2015作为c++的IDE开发工具</title>
      <link href="posts/fee889d4/"/>
      <url>posts/fee889d4/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  <code>windows</code>环境下安装<code>Qt Creator</code> + <code>Visual Studio 2015</code>作为<code>c++</code>的<code>IDE</code>开发工具，学习和使用<strong>qt</strong> (备选)； <strong>本文详细介绍安装VS2015的过程和安装番茄助手Visual Assist X；以及如何配置QtCreator的环境和插件</strong>，使得可以在VS2015里面运行Qt的程序，使用Qt自带的设计师等。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103755569">windows10环境下安装QtCreator+VisualStudio2015作为c++的IDE开发工具</a></p></blockquote><br><h2 id="相关博文："><a href="#相关博文：" class="headerlink" title="相关博文："></a>相关博文：</h2><p><strong>有着一些关联的博文其他参考：</strong></p><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/103674579">在win10环境下安装QtCreator5.9.8作为c++的IDE开发工具</a></li></ul><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1903</code>  </p><p><strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code>， <code>Visual Studio 2015(专业版)</code></p><br><h2 id="下载安装QtCreator"><a href="#下载安装QtCreator" class="headerlink" title="下载安装QtCreator:"></a>下载安装QtCreator:</h2><p>参考本篇详细文章：<a href="https://blog.csdn.net/qq_33154343/article/details/103674579">在win10环境下安装QtCreator5.9.8作为c++的IDE开发工具</a></p><br><h2 id="下载Visual-Studio-2015专业版："><a href="#下载Visual-Studio-2015专业版：" class="headerlink" title="下载Visual Studio 2015专业版："></a>下载Visual Studio 2015专业版：</h2><p>官网纯净版下载，推荐地址：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223230926.png" loading="lazy"></p><p>其中详细链接如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">文件名：cn_visual_studio_professional_2015_with_update_3_x86_x64_dvd_8923256.iso校验文件完整性SHA1值：99E6C061FFB3194D28682D75D5F2F0F12A8D614F文件大小：<span class="token number">7</span>.21GB发布时间：<span class="token number">2016</span>-06-27磁力链接：ed2k://<span class="token operator">|</span><span class="token function">file</span><span class="token operator">|</span>cn_visual_studio_professional_2015_with_update_3_x86_x64_dvd_8923256.iso<span class="token operator">|</span><span class="token number">7745202176</span><span class="token operator">|</span>DD35D3D169D553224BE5FB44E074ED5E<span class="token operator">|</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="安装VS2015专业版："><a href="#安装VS2015专业版：" class="headerlink" title="安装VS2015专业版："></a>安装VS2015专业版：</h2><p><font color=#D0087E size=5 face="幼圆"><strong>下载好完整的离线安装包之后，建议断开网络运行安装程序;避免联网下载新更新文件，导致安装时间变得更长；</strong> </font></p><p>以管理员身份运行VS2015的运行程序：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223232608.png" loading="lazy"></p><ul><li>选择 <strong>自定义（安装功能）</strong>，然后点击 <strong>下一步</strong>：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223233207.png" loading="lazy"></p><ul><li>选择所需要的的模块（<strong>Visual C++</strong> 模块全选）</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223233754.png" loading="lazy"></p><ul><li>点击 <strong>安装</strong>：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223234550.png" loading="lazy"></p><ul><li>耐心等待，一般固态约20min左右即可安装完成：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223234705.png" loading="lazy"></p><ul><li>启动：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224001504.png" loading="lazy"></p><br><h2 id="安装VS小番茄助手Visual-Assist-X-10-9-2248："><a href="#安装VS小番茄助手Visual-Assist-X-10-9-2248：" class="headerlink" title="安装VS小番茄助手Visual Assist X 10.9.2248："></a>安装VS小番茄助手Visual Assist X 10.9.2248：</h2><p>番茄小助手，搭配VS使用，使用起来，不仅会港剧编码效率有所提高，效率变快，且会感觉寿命都在增加；</p><p> <strong>分享一个破解版本：链接: <a href="https://pan.baidu.com/s/1ZHKufAQ6IzbdIcUT-7k5kg">https://pan.baidu.com/s/1ZHKufAQ6IzbdIcUT-7k5kg</a> 提取码: h4c2</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224002041.png" loading="lazy"></p><p><strong>正常安装和破解方法：</strong></p><ul><li><p><strong>第一步：安装2248版本</strong><br>（1）解压缩。共有两个文件（ <strong>VA_X_Setup_10-9-2248.exe</strong> 和  <strong>readMe.txt</strong>）和一个文件夹（Crack）。<br>（2）关闭VS所有打开界面。<br>（3）双击 <strong>VA_X_Setup_10-9-2248.exe</strong>安装Visual Assist 2248版本。</p></li><li><p><strong>第二步：破解</strong><br>（1）打开C盘。地址栏中输入：<code>C:\Users\</code>用户名，如果没看到<code>AppData</code>目录，直接在地址栏中输入<code>\AppData</code>再回车确认进入该目录。<br>（2）寻找目标位置。打开<code>Local\Microsoft\VisualStudio\15.0_281df2b7\Extensions\</code>一个目录。<br>注意：<br>1.本地安装的VS版本为2017，所以本地的文件夹名称为15.0_281df2b7。若是VS其他版本可能会有差异。<br>2.“一个目录”为安装时自动生成的，名称随机。<br>3.因为“一个目录”的名称不固定，建议到Extension目录下时，搜索名称为 <strong>“VA_X.dll”</strong>的文件，然后确定目标位置。<br>（3）重命名。找到 <strong>“VA_X.dll”</strong>文件后，不要随便删除。重命名为<code>VA_X_old.dll</code>作为备份（ps:避免以下步骤4之后导致VS打不开的尴尬局面！）<br>（4）替换。拷贝Crack文件夹中的 <strong>VA_X.dll</strong>到该文件夹中。</p></li></ul><p><strong>注意：比较懒或者实在找不到目标位置，请参考以下通用方法：</strong><br>（1）下载Everything.exe，一路下一步安装完。<br>（2）在搜索框中输入VA_X.dll，回车。<br>（3）用解压文件夹Crack中的VA_X.dll替换掉搜索出来的VA_X.dll。（一般这里会有两个VA_X.dll，通过看路径判断哪个是破解版，哪个是安装的原版） </p><ul><li><strong>第三步：重启VS</strong></li></ul><br><h2 id="安装“VS-Qt插件”："><a href="#安装“VS-Qt插件”：" class="headerlink" title="安装“VS-Qt插件”："></a>安装“VS-Qt插件”：</h2><p>打开VS2015，选中 <strong>“工具-扩展和更新”</strong>，（此时保证电脑处于联网状态）</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224002217.png" loading="lazy"></p><ul><li>在搜索栏里面输入“qt”，然后选中如下图这个，点击下载和安装：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224002912.png" loading="lazy"></p><ul><li>点击配置，添加生成的Qt的文件夹目录：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004107.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004155.png" loading="lazy"></p><br><h2 id="验证安装成功："><a href="#验证安装成功：" class="headerlink" title="验证安装成功："></a>验证安装成功：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004530.png" loading="lazy"></p><ul><li>点击下一步，按照如下图所示的方式，创建一个新的Qt的工程项目（后面会单独写一篇，介绍QtCraetor和使用VS2015创建一个项目，和解析深究这些IDE里面常用的功能和区分模块等）：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004609.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191224004728.png" loading="lazy"></p><ul><li>运行成功：</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191226203330.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>主机信息查询QHostInfo和QNetworkInterface查询IP等</title>
      <link href="posts/b79e1b5c/"/>
      <url>posts/b79e1b5c/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解主机信息查询<code>QHostInfo</code>和<code>QNetworkInterface</code>查询IP等函数接口的使用，书写一个简单地例子；然后写了一个小的 <strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191225_214953_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="网络相关知识："><a href="#网络相关知识：" class="headerlink" title="网络相关知识："></a>网络相关知识：</h2><p>终于讲解到了我之前就心心恋恋的网络模块的知识了，有几个点一直是很想涉及的知识模块👏👏👏；一个是网络，另外一个就是多线程的相关知识；柑橘🍊现在很多电脑💻的应用程序都会使用到这两个部分的知识模块，再➕一个数据库📚就是==App？  成为一个独立的开发者，可以写一个自己喜欢的exe或者app，慢慢打磨；人生易短，做自己喜欢的事情，💰不￥$$💰的都是无所谓的。谁都有离开的一天，die是不可避免的，可我们如何证明自己来这这里玩过几十载呢？总的留下一些什么的痕迹吧~</p><p><strong>或许朝闻道，夕死可矣~       ???</strong></p><p>来自一个<code>12-25</code>🎄🎄🎄🎄：夜间没人约会的+上班的孤独狗 ➜ 🐶👨 的一篇博客📝</p><p>有点跑偏了：</p><p>网络模块的相关知识，主要就是七层协议原理 和它们衍生出来的网络协议，有N多种，其中经过时间的检验和筛选，现在常用的就是<code>TCP/IP</code>协议族，展开就是TCP，UDP，HTTP，HTTPS，ftp，socket等等</p><h3 id="网络相关："><a href="#网络相关：" class="headerlink" title="网络相关："></a>网络相关：</h3><p>建议开始之前，先问问自己如下问题，自己能够区分概念是什么，自己懂了吗❓❓❓</p><ul><li>mac地址</li><li>IP地址</li><li>port端口</li><li>主机名</li><li>子网掩码，A/B/C/D四类地址</li><li>数据包？ 报文？自定义协议？</li><li>通信协议有哪些？</li><li>三次握手🤝，四次挥手👋？</li><li>TCP/UDP/Http区别</li><li>数据包经过路由器如何转到下一台设备？</li><li>一款程序是怎么在局域网之间通信的？</li><li>一款程序是怎么在互联网之间通信的？</li></ul><p>关于网络更底层的协议和实现的原理的相关学习知识，可以多看看👀下面这两个视频链接，我就是之前学习的此mooc网络课，觉得讲解的很棒，故此口口相传的推荐出来：</p><ul><li><p><strong>华南理工大学 计算机网络 MOOC</strong> </p><p>  <a href="https://www.bilibili.com/video/av40766904">https://www.bilibili.com/video/av40766904</a></p></li><li><p>**州电子科技大学 计算机网络自学笔记 MOOC  **<a href="https://www.bilibili.com/video/av40761275">https://www.bilibili.com/video/av40761275</a> </p></li></ul><br><h2 id="QHostInfo属性："><a href="#QHostInfo属性：" class="headerlink" title="QHostInfo属性："></a>QHostInfo属性：</h2><p>得益于<code>Qt</code>强大的封装库，上面的很多细节都不用深究，只需要创建一两个对象，然后调用他们的函数，就可以获得他们的网络相关的信息；</p><p><code>QHostInfo</code>类可以通过静态函数localHostName()获取 <strong>本机的主机名</strong> 再通过fromName()函数可以获取到 <strong>IP地址</strong>，而lookupHost()则是通过异步方式查询到这个主机的IP地址。</p><table><thead><tr><th align="center">类别</th><th align="left">函数原型</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">公共函数</td><td align="left">QList<QHostAddress> addresses()</td><td align="left">返回与hostName()关联的IP地址列表</td></tr><tr><td align="center">公共函数</td><td align="left">HostInfoError error()</td><td align="left">如果主机查找失败，返回失败类型</td></tr><tr><td align="center">公共函数</td><td align="left">QString errorString()</td><td align="left">如果主机查找失败，返回错误描述字符串</td></tr><tr><td align="center">公共函数</td><td align="left">QString hostName()</td><td align="left">返回通过IP查找的主机名称</td></tr><tr><td align="center">公共函数</td><td align="left">int lookupld()</td><td align="left">返回本次查找的id</td></tr><tr><td align="center">静态函数</td><td align="left">void abortHostLookup(int id)</td><td align="left">中断主机查找</td></tr><tr><td align="center">静态函数</td><td align="left">QHostInfo fromName(QString &amp;name)</td><td align="left">返回指定主机名IP的地址</td></tr><tr><td align="center">静态函数</td><td align="left">QString localDomainName()</td><td align="left">返回本机DNS域名</td></tr><tr><td align="center">静态函数</td><td align="left">QString localHostName()</td><td align="left">返回本机主机名</td></tr><tr><td align="center">静态函数</td><td align="left">int lookupHost(QString byname, QObject *receiver, char *member)</td><td align="left">以异步方式根据主机名查找主机的IP地址，并返回一个表示本次查找的ID，可用于abortHostLookup()</td></tr></tbody></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QHostInfo 获取主机信息</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本地主机名称:"</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> bIPv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>            bIPv4 <span class="token operator">=</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol <span class="token operator">==</span> var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            bIPv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机IP地址"</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="QNetworkInterface属性："><a href="#QNetworkInterface属性：" class="headerlink" title="QNetworkInterface属性："></a>QNetworkInterface属性：</h2><p><code>QNetworkInterface</code>类是可以获得应用程序的主机的所有IP地址和网络地址接口的列表。静态函数allInterfaces()返回主机上所有网络接口的列表，一个网络接口可能包含多个IP地址，每个IP地址与地址掩码或广播地址的关联；当然也有一个简版的获取函数allAddresses()可以获取到，但是不会返回子网掩码和广播的IP地址。</p><table><thead><tr><th>类别</th><th>函数原型</th><th>作用</th></tr></thead><tbody><tr><td>公共函数</td><td>QList<QNetworkAddress Entry> addressEntries()</td><td>返回该网络接口（包含子网掩码+广播地址）的IP地址列表</td></tr><tr><td>公共函数</td><td>QString hardwareAddress()</td><td>返回该接口的低级硬件地址，以太网里就是MAC地址</td></tr><tr><td>公共函数</td><td>QString humanReadableName()</td><td>返回可以读懂的接口名称没如果名称不确定，得到的就是name()的返回值</td></tr><tr><td>公共函数</td><td>bool isValid()</td><td>如果接口信息有效就返回true</td></tr><tr><td>公共函数</td><td>QString name()</td><td>返回主机上所有IP地址的列表</td></tr><tr><td>静态函数</td><td>QList<QHostAddress> allAddresses()</td><td>返回主机上面的所有IP地址的列表</td></tr><tr><td>静态函数</td><td>QList<QNetworklnterface> allInterfaces()</td><td>返回主机上面的所有接口的网络列表</td></tr></tbody></table><br><h2 id="QAbstractSocket属性："><a href="#QAbstractSocket属性：" class="headerlink" title="QAbstractSocket属性："></a>QAbstractSocket属性：</h2><p><strong>QAbstractSocket::NetworkLayerProtocol 枚举</strong>:</p><p>该枚举描述了Qt中使用的网络层协议值。</p><table><thead><tr><th>Constant</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>QAbstractSocket::IPv4Protocol</td><td>0</td><td>IPv4</td></tr><tr><td>QAbstractSocket::IPv6Protocol</td><td>1</td><td>IPv6</td></tr><tr><td>QAbstractSocket::AnyIPProtocol</td><td>2</td><td>Either IPv4 or IPv6</td></tr><tr><td>QAbstractSocket::UnknownNetworkLayerProtocol</td><td>-1</td><td>Other than IPv4 and IPv6</td></tr></tbody></table><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里上一张运行效果图：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191216_201205_GIF.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下</p><p><strong>其中.h头文件如下：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQHOSTINFO_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQHOSTINFO_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QAbstractSocket></span></span><span class="token keyword">class</span> <span class="token class-name">QHostInfo</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExQHostInfo</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExQHostInfo</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExQHostInfo</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExQHostInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    QString <span class="token function">protocolName</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>NetworkLayerProtocol protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通过协议类型返回协议名称</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_btnGetHostInfo_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//QHostInfo查询主机名和IP</span>    <span class="token keyword">void</span> <span class="token function">on_btnAllAddresses_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//QNetworkInterface::allAddresses()</span>    <span class="token keyword">void</span> <span class="token function">on_btnAllInterfaces_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//QNetworkInterface::allInterfaces()</span>    <span class="token keyword">void</span> <span class="token function">on_btnFindIP_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//QHostInfo查询左侧域名IP地址</span>    <span class="token keyword">void</span> <span class="token function">on_btnClean_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//清空文本框信息</span>    <span class="token keyword">void</span> <span class="token function">onLookedUpHostInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> QHostInfo<span class="token operator">&amp;</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查询主机信息的槽函数</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExQHostInfo <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQHOSTINFO_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其中.cpp源文件如下：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQHostInfo.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQHostInfo.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QHostInfo></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QNetworkInterface></span></span><span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">ExQHostInfo</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExQHostInfo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"QHostInfo/QNetworkInterface查询主机网络状态："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExQHostInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//通过协议类型返回协议名称</span>QString <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">protocolName</span><span class="token punctuation">(</span>QAbstractSocket<span class="token operator">::</span>NetworkLayerProtocol protocol<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"IPv4 Protocol"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>IPv6Protocol<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"IPv6 Protocol"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> QAbstractSocket<span class="token operator">::</span>AnyIPProtocol<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"Any IP Protocol"</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token string">"Unknow Network Layer Protocol"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//QHostInfo 获取主机信息</span><span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">on_btnGetHostInfo_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString hostName <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">localHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本地主机名称:"</span> <span class="token operator">+</span> hostName <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QHostInfo hostInfo <span class="token operator">=</span> <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">fromName</span><span class="token punctuation">(</span>hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> hostInfo<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> bIPv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>            bIPv4 <span class="token operator">=</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol <span class="token operator">==</span> var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            bIPv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机IP地址"</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">on_btnAllAddresses_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> <span class="token class-name">QNetworkInterface</span><span class="token operator">::</span><span class="token function">allAddresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QHostAddress var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> bIPv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>            bIPv4 <span class="token operator">=</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol <span class="token operator">==</span> var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            bIPv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIPv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>var<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"本机IP地址"</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">on_btnAllInterfaces_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QList<span class="token operator">&lt;</span>QNetworkInterface<span class="token operator">></span> list <span class="token operator">=</span> <span class="token class-name">QNetworkInterface</span><span class="token operator">::</span><span class="token function">allInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">foreach</span> <span class="token punctuation">(</span>QNetworkInterface var<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>var<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"设备名称："</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">humanReadableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"硬件地址："</span> <span class="token operator">+</span> var<span class="token punctuation">.</span><span class="token function">hardwareAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QList<span class="token operator">&lt;</span>QNetworkAddressEntry<span class="token operator">></span> entry <span class="token operator">=</span> var<span class="token punctuation">.</span><span class="token function">addressEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">foreach</span> <span class="token punctuation">(</span>QNetworkAddressEntry ent<span class="token punctuation">,</span> entry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"  IP 地址："</span> <span class="token operator">+</span> ent<span class="token punctuation">.</span><span class="token function">ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"  子网掩码："</span> <span class="token operator">+</span> ent<span class="token punctuation">.</span><span class="token function">netmask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"  子网广播："</span> <span class="token operator">+</span> ent<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">on_btnFindIP_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString hostName <span class="token operator">=</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//域名</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"正在查找域名的服务器的主机信息："</span> <span class="token operator">+</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QHostInfo</span><span class="token operator">::</span><span class="token function">lookupHost</span><span class="token punctuation">(</span>hostName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onLookedUpHostInfo</span><span class="token punctuation">(</span>QHostInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">on_btnClean_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//查询主机信息的槽函数</span><span class="token keyword">void</span> <span class="token class-name">ExQHostInfo</span><span class="token operator">::</span><span class="token function">onLookedUpHostInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> QHostInfo <span class="token operator">&amp;</span>host<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QList<span class="token operator">&lt;</span>QHostAddress<span class="token operator">></span> list <span class="token operator">=</span> host<span class="token punctuation">.</span><span class="token function">addresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QHostAddress host <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> bIpv4 <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//只显示IPv4</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIpv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//只显示 IPv4</span>            bIpv4 <span class="token operator">=</span> QAbstractSocket<span class="token operator">::</span>IPv4Protocol <span class="token operator">==</span> host<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            bIpv4 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//显示 IPv4 和 IPv6</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bIpv4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"协议："</span> <span class="token operator">+</span> <span class="token function">protocolName</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQHostInfoEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在win10环境下安装QtCreator5.9.8作为c++的IDE开发工具</title>
      <link href="posts/e2b9bdb5/"/>
      <url>posts/e2b9bdb5/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 在 <code>windows10</code>环境下安装<code>Qt Creator5.9.8</code>作为<code>c++</code>的 <strong>IDE</strong>开发工具，学习和使用 <strong>qt框架学习</strong></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103674579">在win10环境下安装QtCreator5.9.8作为c++的IDE开发工具</a></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1903</code>   <strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p><br><h2 id="下载QtCreator："><a href="#下载QtCreator：" class="headerlink" title="下载QtCreator："></a>下载QtCreator：</h2><p><strong>qt官网下载地址：</strong> <a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></p><p>推荐下载⬇️的版本：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223210408.png" style="zoom:80%;" / loading="lazy"><br><h2 id="安装QtCreator："><a href="#安装QtCreator：" class="headerlink" title="安装QtCreator："></a>安装QtCreator：</h2><ul><li>点击下一步（Next）：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223210928.png" style="zoom:80%;" / loading="lazy"><ul><li>点击跳过（SKip）：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223211028.png" style="zoom:80%;" / loading="lazy"><ul><li>点击下一步：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223211130.png" style="zoom:80%;" / loading="lazy"><ul><li>安装就选择默认位置，不建议更换其它盘，点击下一步：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223211201.png" style="zoom:80%;" / loading="lazy"><ul><li>选中所需要的模块，勾选即可，如下是我的个人安装目录和所需要的模块；以及解释每一个模块的含义</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223212933.png" style="zoom:80%;" / loading="lazy"><ul><li>选中同意协议，然后点击下一步：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213305.png" style="zoom:80%;" / loading="lazy"><ul><li>点击下一步：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213240.png" style="zoom:80%;" / loading="lazy"><ul><li>点击安装：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213339.png" style="zoom:80%;" / loading="lazy"><ul><li>耐心等待安装完成，约10分钟即可安装完成：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213412.png" style="zoom:80%;" / loading="lazy"><ul><li>点击完成，到此，该软件成功安装完成：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213527.png" style="zoom: 80%;" / loading="lazy"><h2 id="验证安装成功："><a href="#验证安装成功：" class="headerlink" title="验证安装成功："></a>验证安装成功：</h2><p>打开<code>Qt Creator 4.8.2 (Enterprise)</code>图标：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223213821.png" loading="lazy"></p><p>然后点新建一个空的项目工程，</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223221307.png" loading="lazy"></p><p>然后运行（那个播放按钮），看到如下界面，即表示安装成功，可以开始新的编码之旅：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191223221201.png" loading="lazy"></p><h2 id="推荐关闭插件："><a href="#推荐关闭插件：" class="headerlink" title="推荐关闭插件："></a>推荐关闭插件：</h2><p>这里推荐关闭右侧的标红提醒，详细参考此博文：<a href="https://blog.csdn.net/qq_33154343/article/details/102943623">Qt Creator 关闭.cpp文件右侧的黄色警告</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>多文档界面MDI(Multi-document Interface)的实现，QMdiArea使用</title>
      <link href="posts/bf7cb4a7/"/>
      <url>posts/bf7cb4a7/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解 <strong>多文档界面MDI(Multi-document Interface)<strong>的实现，<code>QMdiArea</code>使用，书写一个简单地例子；然后写了一个小的</strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191218_220755_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="MDI-Multi-document-Interface-控件："><a href="#MDI-Multi-document-Interface-控件：" class="headerlink" title="MDI(Multi-document Interface)控件："></a>MDI(Multi-document Interface)控件：</h2><p><code>MDI(Multi-document Interface)</code>是传统的多文档界面应用程序，而Qt为此提供了支持；他们可以共享一个主窗口，以及菜单栏，工具栏等。而 <strong>设计一个MDI的应用程序就是需要在主窗口的工作去放一个QMdiArea控件作为子窗口的容器。</strong></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这里放下一张运行的图片</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-12-18%2022.19.10.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>两个头文件的类如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">lass ExMDI <span class="token operator">:</span> <span class="token keyword">public</span> QWidget<span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExMDI</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">loadFromFile</span><span class="token punctuation">(</span>QString<span class="token operator">&amp;</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//打开文件</span>    QString <span class="token function">currentFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//返回当前文件名</span>    <span class="token keyword">bool</span> <span class="token function">isFileOpended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//文件已经打开</span>    <span class="token keyword">void</span> <span class="token function">setEditFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">textCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">textCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">textPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExMDI <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QString m_currentFile<span class="token punctuation">;</span>  <span class="token comment">//当前文件</span>    <span class="token keyword">bool</span>    m_fileOpened<span class="token punctuation">;</span>   <span class="token comment">//true 打开；false 未打开</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>lass ExMainWindow <span class="token operator">:</span> <span class="token keyword">public</span> QMainWindow<span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExMainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//打开文档</span>    <span class="token keyword">void</span> <span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//退出程序</span>    <span class="token keyword">void</span> <span class="token function">on_actNew_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//新建MDI的子窗口</span>    <span class="token keyword">void</span> <span class="token function">on_actFont_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置字体</span>    <span class="token keyword">void</span> <span class="token function">on_actCut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//剪切文本</span>    <span class="token keyword">void</span> <span class="token function">on_actCopy_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//复制文本</span>    <span class="token keyword">void</span> <span class="token function">on_actPaste_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//粘贴文本</span>    <span class="token keyword">void</span> <span class="token function">on_actView_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//MDI显示： Table 和 子窗口页面显示</span>    <span class="token keyword">void</span> <span class="token function">on_actCascade_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//级联显示</span>    <span class="token keyword">void</span> <span class="token function">on_actTile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//平铺显示</span>    <span class="token keyword">void</span> <span class="token function">on_actClose_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭所有子窗口</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//主窗口关闭时关闭所有子窗口</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExMainWindow <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其对应的源文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExMDI.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExMDI.h"</span></span><span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">ExMDI</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExMDI<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token string">"多文档界面MDI (Multi-dociment Interface) 的介绍和使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setAttribute</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>WA_DeleteOnClose<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//无论是否设置关闭时候删除；在MDI中关闭一个MDI子窗口都会删除子窗口对象</span>    <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">setWindowIcon</span><span class="token punctuation">(</span><span class="token function">QIcon</span><span class="token punctuation">(</span><span class="token string">"/Users/yuanyi/picture/发布、头像、测试图片/icon.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//打开文件</span><span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span>QString <span class="token operator">&amp;</span>fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//文件以读的方式读出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//以文本流方式读取文件</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setPlainText</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_currentFile <span class="token operator">=</span> fileName<span class="token punctuation">;</span>        QFileInfo <span class="token function">fileInfo</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文件信息</span>        <span class="token function">setWindowTitle</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span><span class="token function">fileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m_fileOpened <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>QString <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">currentFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> m_currentFile<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">isFileOpended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> m_fileOpened<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">setEditFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFont font <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok<span class="token punctuation">;</span>    font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token operator">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> font<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">textCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">textCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMDI</span><span class="token operator">::</span><span class="token function">textPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">paste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExMainWindow.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExMainWindow.h"</span></span><span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">ExMainWindow</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExMainWindow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>mdiArea<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>WindowMaximized<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">setToolButtonStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExMainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">closeAllSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭所有子窗口</span>    e<span class="token operator">-></span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> needNew <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    ExMDI <span class="token operator">*</span>mdi <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">subWindowList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//如果有打开的主窗口，获取活动窗口</span>        mdi <span class="token operator">=</span>  <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        needNew <span class="token operator">=</span> mdi<span class="token operator">-></span><span class="token function">isFileOpended</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//文件已经打开，需要新建窗口</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        needNew <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QString curPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString fileName <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开一个文件"</span><span class="token punctuation">,</span> curPath<span class="token punctuation">,</span> <span class="token string">"C程序文件(*.h *cpp);;文本文件(*.txt);;所有文件(*.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>needNew<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mdi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">addSubWindow</span><span class="token punctuation">(</span>mdi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    mdi<span class="token operator">-></span><span class="token function">loadFromFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    mdi<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actCopy<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actCut<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actPaste<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actFont<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actQuit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actNew_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ExMDI <span class="token operator">*</span>mdi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExMDI</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">addSubWindow</span><span class="token punctuation">(</span>mdi<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//添加一个子窗口MDI</span>    mdi<span class="token operator">-></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actCopy<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actCut<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actPaste<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actFont<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actFont_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mdi<span class="token operator">-></span><span class="token function">setEditFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置编写的字体文档</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actCut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mdi<span class="token operator">-></span><span class="token function">textCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actCopy_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mdi<span class="token operator">-></span><span class="token function">textCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actPaste_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ExMDI<span class="token operator">*</span> mdi <span class="token operator">=</span> <span class="token punctuation">(</span>ExMDI <span class="token operator">*</span><span class="token punctuation">)</span>ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">activeSubWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mdi<span class="token operator">-></span><span class="token function">textPaste</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actView_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span>   <span class="token comment">//MDI 模式设置</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checked<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//Tab多页显示模式</span>        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">setViewMode</span><span class="token punctuation">(</span>QMdiArea<span class="token operator">::</span>TabbedView<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">setTabsClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//页面可以关闭</span>        ui<span class="token operator">-></span>actCascade<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actTile<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">setViewMode</span><span class="token punctuation">(</span>QMdiArea<span class="token operator">::</span>SubWindowView<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//子窗口模式</span>        ui<span class="token operator">-></span>actCascade<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actTile<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actCascade_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">cascadeSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//窗口级联展开</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actTile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">tileSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//平铺展开</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExMainWindow</span><span class="token operator">::</span><span class="token function">on_actClose_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>mdiArea<span class="token operator">-></span><span class="token function">closeAllSubWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭全部子窗口</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtMDIEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义和标准对话框的用法</title>
      <link href="posts/f3962578/"/>
      <url>posts/f3962578/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解自定义风格控件样式，书写一个简单地例子；然后写了一个小的<strong>Qt</strong>例子，用来实现和验证它的空间的一些属性和功能的用法。且主要是讲解一些模态和给非模态的知识讲解，本篇比较推荐直接看本例只有知识行的源码，会更加简洁和清晰。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191216_201058_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="模态-非模态对话框："><a href="#模态-非模态对话框：" class="headerlink" title="模态/非模态对话框："></a>模态/非模态对话框：</h2><h3 id="模态对话框："><a href="#模态对话框：" class="headerlink" title="模态对话框："></a>模态对话框：</h3><p>必须关闭此对话框才可以返回主窗口操作；</p><p>使用方式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="非模态对话框："><a href="#非模态对话框：" class="headerlink" title="非模态对话框："></a>非模态对话框：</h3><p>关闭（单机关闭按钮或者关闭对话框）后只是隐藏（缺省的），并不算删除对象（并没有从内存中删除），下载再调用时候，只是打开已经创建的对话框对象。使用方式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="窗口中的事件："><a href="#窗口中的事件：" class="headerlink" title="窗口中的事件："></a>窗口中的事件：</h2><p><font color=#FE7207 size=4 face="幼圆"> <strong>在对话框和主窗口之间互相操作的关键是要有对方的指针，方才能够传递参数兵并且调用对方函数。</strong> </font></p><p>事件(event)是由窗口系统产生的由某些触发的特殊函数，例如鼠标操作，键盘操作的一些事件，还比如说有窗口的显示，关闭，绘画等相关事件。从QWidget继承的窗口部件常用的时间函数有如下几种：</p><ul><li><strong>closeEvent（）</strong>                      窗口关闭时候触发的事件；此时可以加入操作：询问是否关闭窗口</li><li><strong>ShowEvent（）</strong>                     窗口显示的时候触发的事件</li><li><strong>paintEvent （）</strong>                    窗口绘画的事件，</li><li><strong>mouseMoveEvent（）</strong>        鼠标移动事件</li><li><strong>mousePressEvent（）</strong>        鼠标按下事件</li><li><strong>mouseReleaseEvent（）</strong>    鼠标释放事件</li><li><strong>keyPressEvent（）</strong>              键盘按下事件</li><li><strong>keyReleaseEvent（）</strong>          键盘释放事件</li></ul><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191216_201205.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>因为其中使用到了上面的模态和非模态知识，以及窗口之中的一些事件消息，加上这个例子一看代码就明白了，比我单独话费笔墨来写介绍，有点废话的感觉，所以，本篇更加推荐大家直接看源码即可。</p><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_20191216_203214_mark.png"/ loading="lazy"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExCustomMainWin</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExCustomMainWin</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExCustomMainWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setACellText</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> QString text<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//定位到单元格，并设置字符串</span>    <span class="token keyword">void</span> <span class="token function">setActLocateEnable</span><span class="token punctuation">(</span><span class="token keyword">bool</span> enable<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置actLocatee的enabled属性</span>    <span class="token keyword">void</span> <span class="token function">setDlgLocateNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//将ExDlgLocate指针设置为NULL</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_actSetHeader_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_actSetSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_actLocate_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_currentChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>current<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExCustomMainWin <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QStandardItemModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>                        <span class="token comment">//数据模型</span>    QItemSelectionModel <span class="token operator">*</span>m_seleModel<span class="token punctuation">;</span>                   <span class="token comment">//item选择模型</span>    ExDlgSetHeaders <span class="token operator">*</span>m_dlgSetHeaders<span class="token punctuation">;</span>    ExDlgLocate <span class="token operator">*</span>m_dlglocate<span class="token punctuation">;</span>    QLabel  <span class="token operator">*</span>m_labCellPos<span class="token punctuation">;</span>                              <span class="token comment">//当前单元格行列号</span>    QLabel  <span class="token operator">*</span>m_labCellText<span class="token punctuation">;</span>                             <span class="token comment">//当前单元格内容</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ExDlgLocate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExDlgLocate</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExDlgLocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setSpinRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowCount<span class="token punctuation">,</span> <span class="token keyword">int</span> colCount<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置spin的设定(最大)值</span>    <span class="token keyword">void</span> <span class="token function">setSpinValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowNo<span class="token punctuation">,</span> <span class="token keyword">int</span> colNo<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//设置spin的初始值</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_btnSetText_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnClose_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExDlgLocate <span class="token operator">*</span>ui<span class="token punctuation">;</span>    <span class="token comment">// QWidget interface</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent <span class="token operator">*</span>event<span class="token punctuation">)</span> override<span class="token punctuation">;</span>  <span class="token comment">//窗口关闭事件，关闭时释放本窗口</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">showEvent</span><span class="token punctuation">(</span>QShowEvent <span class="token operator">*</span>event<span class="token punctuation">)</span> override<span class="token punctuation">;</span>    <span class="token comment">//窗口显示事件</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ExDlgSetHeaders</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExDlgSetHeaders</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExDlgSetHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setHeaderList</span><span class="token punctuation">(</span>QStringList<span class="token operator">&amp;</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    QStringList <span class="token function">headerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExDlgSetHeaders <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QStringListModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>          <span class="token comment">//管理字符串列表数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ExDlgSize</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExDlgSize</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExDlgSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getRowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getColCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setRowCol</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExDlgSize <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtCustomDialogEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QTableView和QStandardItemModel(以及代理的例子)的用法</title>
      <link href="posts/43c8e40a/"/>
      <url>posts/43c8e40a/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  继续学习<code>QTableView</code>和<code>QStandardItemModel</code>的用法，以及这里例子里面有具体使用代理的例子（<strong>模型-视图-代理）</strong>，其中专门给代理写一成一个类来实现他们；书写一个简单的<code>Qt</code>例子🌰，用来实现和验证它的控件的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_23-59-14_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>相关博文：</strong>   <a href="https://blog.csdn.net/qq_33154343/article/details/103501667">Model-View-Delegate:”模型-视图-代理”的讲解</a></p><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="QStandardItemModel："><a href="#QStandardItemModel：" class="headerlink" title="QStandardItemModel："></a>QStandardItemModel：</h2><p><code>QStandardItemModel</code>是<font color=#D0087E size=4 face="幼圆">标准的以<strong>项数据（item data）</strong>为基础</font>的 <strong>数据模型类</strong>；</p><br><h2 id="QTableView："><a href="#QTableView：" class="headerlink" title="QTableView："></a>QTableView：</h2><p><code>QTableView</code>是一个二维数据表视图组件，当通过<code>setModel（）</code>的设置一个<code>QStandardItemModel</code>的时候，一个单元格显示<code>QStandardItemModel</code>数据模型的一个项。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">m_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItemModel</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//设置数据模型，一开始设置为默认的2行6列表的一个表</span>m_selectModet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QItemSelectionModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置选择模型</span>ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">//设置数据模型</span>ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionModel</span><span class="token punctuation">(</span>m_selectModet<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置选择模型</span>ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionMode</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>ExtendedSelection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置选择模式</span>ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>SelectItems<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置选择行为</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="QItemSelectionModel"><a href="#QItemSelectionModel" class="headerlink" title="QItemSelectionModel:"></a>QItemSelectionModel:</h2><p><code>QItemSelectionModel</code>是一个用于跟踪视图组建的单元格选择状态类；当在QTableView选择某一个或者一些单元格的时候，可以通过<code>QItemSelectionModel</code>获取选中的单元格的模型索引，为单元格的选择系统方便；</p><br><h2 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h2><p>在 <strong>ExQStandardItemModel.h</strong>和 <strong>ExQStandardItemModel.cpp</strong>里面，使用中规中矩的Table视图和数据进行修改，可以显示出来下面的这些数据等；然后再就单独设计一个代理来实现，在 <strong>ExDelegate.h</strong>和  <strong>ExDelegate.cpp</strong> 里面，单独写一个代理组件（eg：创建用于编辑的模型数据的widget组件，如一个QComboBox组件），将QComboBox插入到Table控件里面。这样就可以将所有“视图-模型-代理”这三个全部都使用小例子的方式显示出来。</p><p><font color=#FE7207 size=4 face="幼圆">若是想要使用代理部分，就必须重在如下的4个函数</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> QWidget<span class="token operator">*</span> <span class="token function">createEditor</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>      <span class="token comment">//创建用于编辑的模型数据的widget组件，如一个QComboBox组件</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setEditorData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>                                             <span class="token comment">//从数据模型获取数据，显示在代理组件editor之中，让其编辑</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setModelData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> QAbstractItemModel <span class="token operator">*</span>model<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>                   <span class="token comment">//代理组件editor上的数据更新到数据模型</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">updateEditorGeometry</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>  <span class="token comment">//用于给widget组件设置一个合适的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191213_00.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下:</p><h3 id="模型-视图部分："><a href="#模型-视图部分：" class="headerlink" title="模型-视图部分："></a>模型-视图部分：</h3><p>在 <strong>.h</strong>头文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExQStandardItemModel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>QStringList<span class="token operator">&amp;</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//从list初始化数据模型</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">onCurrentChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex<span class="token operator">&amp;</span> current<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex<span class="token operator">&amp;</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前单元格发生变化时</span>    <span class="token keyword">void</span> <span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//打开和导入文件，并且在plainTextEdit里面显示</span>    <span class="token keyword">void</span> <span class="token function">on_actAppend_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//在表格的最后一行添加一行</span>    <span class="token keyword">void</span> <span class="token function">on_actSave_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//保存文件</span>    <span class="token keyword">void</span> <span class="token function">on_actInsert_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//在当前选中的一行，其前面插入一行</span>    <span class="token keyword">void</span> <span class="token function">on_actDelete_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//删除一行</span>    <span class="token keyword">void</span> <span class="token function">on_actExit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关闭退出</span>    <span class="token keyword">void</span> <span class="token function">on_actModelData_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//预览模型</span>    <span class="token keyword">void</span> <span class="token function">on_actAlignLeft_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//左对齐</span>    <span class="token keyword">void</span> <span class="token function">on_actAlignCenter_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//文本居中</span>    <span class="token keyword">void</span> <span class="token function">on_actAlingRight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//文本右对齐</span>    <span class="token keyword">void</span> <span class="token function">on_actBold_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//文本加粗</span><span class="token keyword">private</span><span class="token operator">:</span>    QLabel  <span class="token operator">*</span>m_labCurrFile<span class="token punctuation">;</span>                 <span class="token comment">//当前文件</span>    QLabel <span class="token operator">*</span>m_labCellPos<span class="token punctuation">;</span>                   <span class="token comment">//当前单元格行列号</span>    QLabel <span class="token operator">*</span>m_labCellText<span class="token punctuation">;</span>                  <span class="token comment">//当前单元格数据内容</span>    QStandardItemModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>            <span class="token comment">//数据模型</span>    QItemSelectionModel <span class="token operator">*</span>m_selectModet<span class="token punctuation">;</span>     <span class="token comment">//选择模型</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <strong>.cpp</strong>源文件里面</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COLUMN</span> <span class="token expression"><span class="token number">6</span>  </span><span class="token comment">//数据表的列数</span></span><span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">ExQStandardItemModel</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExQStandardItemModel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTableView和QStandardItemModel的用法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>mainToolBar<span class="token operator">-></span><span class="token function">setToolButtonStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置主工具栏的图标样式风格</span>    m_labCurrFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前文件："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置状态栏</span>    m_labCellPos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前单元格："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"单元格内容："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCurrFile<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellPos<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellText<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCurrFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellPos<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellText<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItemModel</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> COLUMN<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//设置数据模型，一开始设置为默认的2行6列表的一个表</span>    m_selectModet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QItemSelectionModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置选择模型</span>    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">//设置数据模型</span>    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionModel</span><span class="token punctuation">(</span>m_selectModet<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置选择模型</span>    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionMode</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>ExtendedSelection<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置选择模式</span>    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>SelectItems<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置选择行为</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_selectModet<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">currentChanged</span><span class="token punctuation">(</span>QModelIndex<span class="token punctuation">,</span> QModelIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onCurrentChanged</span><span class="token punctuation">(</span>QModelIndex<span class="token punctuation">,</span> QModelIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//选择当前单元格变化时的信号与槽</span><span class="token punctuation">&#125;</span><span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExQStandardItemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从list初始化数据模型QTableView里面</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>QStringList <span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rowCount <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment">//文本行数，第一行为表头</span>    m_model<span class="token operator">-></span><span class="token function">setRowCount</span><span class="token punctuation">(</span>rowCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString header <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QStringList headerList <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QString<span class="token operator">::</span>SkipEmptyParts<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过一个或者多个空格或者tab按键切割</span>    m_model<span class="token operator">-></span><span class="token function">setHorizontalHeaderLabels</span><span class="token punctuation">(</span>headerList<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//设置表头</span>    QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                                        <span class="token comment">//此处开始，设置表格数据</span>    QStringList tempList<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QString aLineText <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        tempList <span class="token operator">=</span> aLineText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token function">QRegExp</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> QString<span class="token operator">::</span>SkipEmptyParts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正则表达式中\s匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \f\n\r\t\v]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> COLUMN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                     <span class="token comment">//设置前5列的item</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ExDelegate <span class="token operator">*</span>itemDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ExDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setItemDelegateForColumn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> itemDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>tempList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_model<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>tempList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//最后一列的item</span>        item<span class="token operator">-></span><span class="token function">setCheckable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                          <span class="token comment">//设置有检查框</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> tempList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"https://www.google.com"</span><span class="token punctuation">)</span>            item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>        m_model<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> COLUMN <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//当前单元格发生变化时</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">onCurrentChanged</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>current<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>previous<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                               <span class="token comment">//当前模型索性有效</span>        m_labCellPos<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前单元格：%1行, %2列"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//从模型索引获得Item</span>        m_labCellText<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前文件：%1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//显示item的文字内容</span>        QFont font <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actBold<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>font<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//更新actFontBold的check状态</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//action+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//打开和导入文件，并且在plainTextEdit里面显示</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actOpen_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString currPath <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString fileName <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"打开一个文件"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> <span class="token string">"导入数据文件(*txt);;所有文件(*.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QStringList list<span class="token punctuation">;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//只读形式打开文本文件</span>        QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">//用文本流读取文件</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stream<span class="token punctuation">.</span><span class="token function">atEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                          <span class="token comment">//读取文本中文本的内容</span>            QString str <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                      <span class="token comment">//关闭</span>        m_labCurrFile<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前文件："</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//设置状态栏</span>        ui<span class="token operator">-></span>actAppend<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//设置action的Enabled的属性</span>        ui<span class="token operator">-></span>actInsert<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actDelete<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>actSave<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">init</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                            <span class="token comment">//初始化.txt的数据</span><span class="token punctuation">&#125;</span><span class="token comment">//在表格的最后一行添加一行</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actAppend_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QList<span class="token operator">&lt;</span>QStandardItem <span class="token operator">*</span><span class="token operator">></span> list<span class="token punctuation">;</span>    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>    <span class="token comment">//获取表头前五列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COLUMN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span><span class="token string">"添加一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取最后一列</span>    QString str <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">headerData</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">,</span> Qt<span class="token operator">::</span>DisplayRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"添加一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setCheckable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>    m_model<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    QModelIndex currIndex <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">index</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建最后一行的ModelIndex</span>    m_selectModet<span class="token operator">-></span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_selectModet<span class="token operator">-></span><span class="token function">setCurrentIndex</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">,</span> QItemSelectionModel<span class="token operator">::</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//保存文件</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actSave_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString fileName <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"选择一个文件"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">"另存数据(*.txt);;所有数据(*.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>ReadWrite <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Truncate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//读写，文本，覆盖原有内容打开</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//用文本流读取文件</span>    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取表头文字</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item <span class="token operator">=</span>  m_model<span class="token operator">-></span><span class="token function">horizontalHeaderItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>                                 <span class="token comment">//以TAB按键隔开</span>    <span class="token punctuation">&#125;</span>    stream<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数据区文字</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stream<span class="token operator">&lt;&lt;</span>str<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//在当前选中的一行，其前面插入一行</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actInsert_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QList<span class="token operator">&lt;</span>QStandardItem <span class="token operator">*</span><span class="token operator">></span> list<span class="token punctuation">;</span>    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COLUMN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span><span class="token string">"插入一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QString str <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">headerData</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">,</span> Qt<span class="token operator">::</span>DisplayRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QStandardItem</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"插入一行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setCheckable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;&lt;</span>item<span class="token punctuation">;</span>    QModelIndex currIndex <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">currentIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_model<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//在当前行的前面插入一行</span>    m_selectModet<span class="token operator">-></span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_selectModet<span class="token operator">-></span><span class="token function">setCurrentIndex</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">,</span> QItemSelectionModel<span class="token operator">::</span>Select<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除一行</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actDelete_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QModelIndex currIndex <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">currentIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_model<span class="token operator">-></span><span class="token function">removeRow</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//关闭退出</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actExit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//预览数据模型:模型数据导出到PlainTextEdit显示</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actModelData_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                          <span class="token comment">//用文本流读取文件</span>    QStandardItem <span class="token operator">*</span>item<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取表头文字</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item <span class="token operator">=</span>  m_model<span class="token operator">-></span><span class="token function">horizontalHeaderItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>                                 <span class="token comment">//以TAB按键隔开</span>    <span class="token punctuation">&#125;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数据区文字</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m_model<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">=</span> str <span class="token operator">+</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t\t"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//左对齐</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actAlignLeft_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获得选中的List&lt;item></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//设置文本左对齐</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//文本居中</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actAlignCenter_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//获得选中的List&lt;item></span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//获取一个模型索引</span>        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设置文本居中</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//文本右对齐</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actAlingRight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignRight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//文本加粗</span><span class="token keyword">void</span> <span class="token class-name">ExQStandardItemModel</span><span class="token operator">::</span><span class="token function">on_actBold_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m_selectModet<span class="token operator">-></span><span class="token function">hasSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QModelIndexList list <span class="token operator">=</span> m_selectModet<span class="token operator">-></span><span class="token function">selectedIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QModelIndex index <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        QStandardItem <span class="token operator">*</span>item <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">itemFromIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        QFont font <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理部分："><a href="#代理部分：" class="headerlink" title="代理部分："></a>代理部分：</h3><p>在 <strong>.h</strong>头文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXDELEGATE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXDELEGATE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QStyledItemDelegate></span></span><span class="token keyword">class</span> <span class="token class-name">ExDelegate</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QStyledItemDelegate</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ExDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//若是写代理的组件，那么必须要有下面这是个重写这四个函数</span>    <span class="token keyword">virtual</span> QWidget<span class="token operator">*</span> <span class="token function">createEditor</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>      <span class="token comment">//创建用于编辑的模型数据的widget组件，如一个QComboBox组件</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setEditorData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>                                             <span class="token comment">//从数据模型获取数据，显示在代理组件editor之中，让其编辑</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">setModelData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> QAbstractItemModel <span class="token operator">*</span>model<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>                   <span class="token comment">//代理组件editor上的数据更新到数据模型</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">updateEditorGeometry</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span>  <span class="token comment">//用于给widget组件设置一个合适的大小</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXDELEGATE_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <strong>.cpp</strong>头文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExDelegate.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QComboBox></span></span><span class="token class-name">ExDelegate</span><span class="token operator">::</span><span class="token function">ExDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建用于编辑的模型数据的widget组件，如一个QComboBox组件</span>QWidget <span class="token operator">*</span><span class="token class-name">ExDelegate</span><span class="token operator">::</span><span class="token function">createEditor</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    QComboBox <span class="token operator">*</span>comboBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QComboBox</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"github：https://github.com/touwoyimuli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"csdn博客：https://blog.csdn.net/qq_33154343"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"github.io博客：https://touwoyimuli.github.io/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">"https://www.google.com/ qt 学习 加油 2019-09-30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  comboBox<span class="token punctuation">;</span>                      <span class="token comment">//返回此编辑器</span><span class="token punctuation">&#125;</span><span class="token comment">//从数据模型获取数据，显示在代理组件之中，让其编辑</span><span class="token keyword">void</span> <span class="token class-name">ExDelegate</span><span class="token operator">::</span><span class="token function">setEditorData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    QString str <span class="token operator">=</span> index<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> Qt<span class="token operator">::</span>EditRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QComboBox <span class="token operator">*</span>comboBox <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>QComboBox <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>    comboBox<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//其他组件的话， 此处可以设定写的值一类，eg：setText(str)  setValue()</span><span class="token punctuation">&#125;</span><span class="token comment">//将widget上的数据更新到数据模型</span><span class="token keyword">void</span> <span class="token class-name">ExDelegate</span><span class="token operator">::</span><span class="token function">setModelData</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> QAbstractItemModel <span class="token operator">*</span>model<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    QComboBox <span class="token operator">*</span>comboBox <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>QComboBox <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>editor<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> comboBox<span class="token operator">-></span><span class="token function">currentText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> str<span class="token punctuation">,</span> Qt<span class="token operator">::</span>EditRole<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//用于给widget组件设置一个合适的大小</span><span class="token keyword">void</span> <span class="token class-name">ExDelegate</span><span class="token operator">::</span><span class="token function">updateEditorGeometry</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>editor<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionViewItem <span class="token operator">&amp;</span>option<span class="token punctuation">,</span> <span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    editor<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置组件的大小</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQStandardItemModelEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>getOpenFileName标准对话框和自定义对话框的使用</title>
      <link href="posts/e996031c/"/>
      <url>posts/e996031c/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  了解标准对话框和自定义的对话框的使用，书写一个简单地例子；然后写了一个小的<code>Qt</code>例子，用来实现和验证它的空间的一些属性和功能的用法。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-54-52_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>     <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>   <strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p><br><h2 id="标准对话框："><a href="#标准对话框：" class="headerlink" title="标准对话框："></a>标准对话框：</h2><p>一个软件的设计，最后包含着很多的很多个窗体之间的交互，而且会有很多自定义的对话框和系统的标准消息对话框等出现，比如说：文件对话框，颜色对话框，字体对话框，消息对话框和确认对话框等等。</p><br><ul><li><input checked="" disabled="" type="checkbox"> <code>QFileDialog</code>  <strong>文件对话框</strong></li><li><input checked="" disabled="" type="checkbox"> <code>QColorDialog</code>  <strong>颜色对话框</strong></li><li><input checked="" disabled="" type="checkbox"> <code>QFontDialog</code>  <strong>字体对话框</strong></li><li><input checked="" disabled="" type="checkbox"> <code>QInputDialog</code>  <strong>输入对话框</strong></li><li><input checked="" disabled="" type="checkbox"> <code>QMessageBox</code>  <strong>消息对话框</strong></li></ul><p>下面展示一下上面这些在<code>windows</code>和<code>macOS</code>上面的样式：</p><h3 id="标准消息对话框："><a href="#标准消息对话框：" class="headerlink" title="标准消息对话框："></a>标准消息对话框：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"信息消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"information对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"警告消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"warning对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"危机消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"critical对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"abou 作者: 投我以木李，报之以琼玖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">aboutQt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于Qt消息对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mac样式：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-11-51_mark.png"/ loading="lazy"><ul><li>win样式：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191013_162030_17_mark.jpg"/ loading="lazy"><br><h3 id="QFileDialog文件对话框："><a href="#QFileDialog文件对话框：" class="headerlink" title="QFileDialog文件对话框："></a>QFileDialog文件对话框：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个目录【非文件】"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> QFileDialog<span class="token operator">::</span>ShowDirsOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最后一个参数，表示只显示路径</span>QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"保存文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="QColorDialog颜色对话框"><a href="#QColorDialog颜色对话框" class="headerlink" title="QColorDialog颜色对话框:"></a>QColorDialog颜色对话框:</h3><p>颜色对话框如下图所示</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QColor color <span class="token operator">=</span> <span class="token class-name">QColorDialog</span><span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>initColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-53-18_mark.png"/ loading="lazy">     <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191014_000359_1_mark.jpg"/ loading="lazy"></p><br><h3 id="QFontDialog字体对话框"><a href="#QFontDialog字体对话框" class="headerlink" title="QFontDialog字体对话框:"></a>QFontDialog字体对话框:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>QFont font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token operator">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> initFont<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-12_21-53-29_mark.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191212223615.png"/ loading="lazy"></p><br><h3 id="标准消息输入对话框："><a href="#标准消息输入对话框：" class="headerlink" title="标准消息输入对话框："></a>标准消息输入对话框：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入文字对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个字符串"</span><span class="token punctuation">,</span> QLineEdit<span class="token operator">::</span>Normal<span class="token punctuation">,</span> <span class="token string">"默认输入的字符串"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>QStringList list<span class="token punctuation">;</span>    list<span class="token operator">&lt;&lt;</span><span class="token string">"2019-10-02"</span><span class="token operator">&lt;&lt;</span><span class="token string">"04:28"</span><span class="token operator">&lt;&lt;</span><span class="token string">"在武汉的卧室"</span><span class="token operator">&lt;&lt;</span><span class="token string">"敲代码"</span><span class="token operator">&lt;&lt;</span><span class="token string">"这会没有困意"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> editable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//ComboBox是否可编辑</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入item对话框"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个item"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> editable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入整数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> stepVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入浮点数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191208_225638.gif"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191212_214919.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>其中核心部分的源码，重点和一些难点以及需要注意的一些地方，贴出来如下，</p><p>其中  <strong>.h</strong> 文件如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXDIALOG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXDIALOG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDialog></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExDialog</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExDialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExDialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_btnOpenFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打开一个文件</span>    <span class="token keyword">void</span> <span class="token function">on_btnOpenFiles_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//打开多个文件</span>    <span class="token keyword">void</span> <span class="token function">on_btnExistingDir_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//选择已有目录</span>    <span class="token keyword">void</span> <span class="token function">on_btnGetColor_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//选择颜色</span>    <span class="token keyword">void</span> <span class="token function">on_btnGetFont_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//选择字体</span>    <span class="token keyword">void</span> <span class="token function">on_btnSaveFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存文件</span>    <span class="token keyword">void</span> <span class="token function">on_btnQuestion_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnInformation_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnWarning_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnCritical_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnAbout_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnAboutQt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">on_btnGetString_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//输入字符串</span>    <span class="token keyword">void</span> <span class="token function">on_btnGetItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//item选择输入</span>    <span class="token keyword">void</span> <span class="token function">on_btnInt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//输入整数</span>    <span class="token keyword">void</span> <span class="token function">on_btnDouble_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//输入浮点数</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExDialog <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXDIALOG_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中  <strong>.cpp</strong> 文件如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExDialog.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExDialog.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QColorDialog></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFontDialog></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QInputDialog></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMessageBox></span></span><span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">ExDialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExDialog<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"文件、颜色、字体、保存、消息、输入等对话框使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//标准文件对话框QFileDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnOpenFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnOpenFiles_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>    QStringList fileNmaeList <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileNmaeList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmaeList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnExistingDir_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString currPath <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取应用程序当前目录</span>    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个目录【非文件】"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> QFileDialog<span class="token operator">::</span>ShowDirsOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最后一个参数，表示只显示路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetColor_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QPalette pal <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//获取条调色板</span>    QColor initColor <span class="token operator">=</span> pal<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    QColor color <span class="token operator">=</span> <span class="token class-name">QColorDialog</span><span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>initColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">//因为没有.isEmpty(),故而使用.isValid()来判断</span>        pal<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Text<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>pal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetFont_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFont initFont <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QFont font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token operator">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> initFont<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnSaveFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>    QString fileter <span class="token operator">=</span> <span class="token string">"头文件(*.h);;源文件(*.cpp);;所有文件(*.*)"</span><span class="token punctuation">;</span>    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"保存文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//标准消息对话框+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnQuestion_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QMessageBox<span class="token operator">::</span>StandardButton ret <span class="token operator">=</span> <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"问题消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"question对话框的内容"</span><span class="token punctuation">,</span>  QMessageBox<span class="token operator">::</span>Yes <span class="token operator">|</span> QMessageBox<span class="token operator">::</span>No <span class="token operator">|</span> QMessageBox<span class="token operator">::</span>Close<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QMessageBox<span class="token operator">::</span>Yes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::yes 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> QMessageBox<span class="token operator">::</span>No<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::No 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> QMessageBox<span class="token operator">::</span>Close<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::Close 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"这是 switch 的default 的选项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnInformation_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"信息消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"information对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnWarning_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"警告消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"warning对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnCritical_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"危机消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"critical对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnAbout_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"abou 作者: 投我以木李，报之以琼玖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnAboutQt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">aboutQt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于Qt消息对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//标准输入对话框QInputDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetString_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入文字对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个字符串"</span><span class="token punctuation">,</span> QLineEdit<span class="token operator">::</span>Normal<span class="token punctuation">,</span> <span class="token string">"默认输入的字符串"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QStringList list<span class="token punctuation">;</span>    list<span class="token operator">&lt;&lt;</span><span class="token string">"2019-10-02"</span><span class="token operator">&lt;&lt;</span><span class="token string">"04:28"</span><span class="token operator">&lt;&lt;</span><span class="token string">"在武汉的卧室"</span><span class="token operator">&lt;&lt;</span><span class="token string">"敲代码"</span><span class="token operator">&lt;&lt;</span><span class="token string">"这会没有困意"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> editable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//ComboBox是否可编辑</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入item对话框"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个item"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> editable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnInt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stepVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pointSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入整数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> stepVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QFont font <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"字体大小已经被设置为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnDouble_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//小数点的位数</span>    <span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入浮点数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"浮点数大小为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQDialogEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QFileSystemModel数据模型获取本机文件系统的使用</title>
      <link href="posts/7273b472/"/>
      <url>posts/7273b472/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  <code>QFileSystemModel</code>是可<strong>用于访问本机系统的文件系统</strong>的<strong>数据模型</strong>；其的属性和功能的使用介绍；然后写了一个例子，用来实现和验证它的功能的一些属性和功能的用法。这里主要是数据的读取部分是使用到了<code>QFileSystemModel</code>类，然后分别使用<code>QTreeView</code>和<code>QListView</code>和<code>ColumnView</code>和<code>QTableView</code>这四种视图控件来显示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191208_233142_5.jpg"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>相关博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/103501667">Model-View-Delegate:”模型-视图-代理”的讲解</a></p><br><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>   <strong>编程软件：</strong>  <code>Qt 5.9.8，Qt Creator 4.8.2 (Enterprise)</code></p><p><strong>编程软件：</strong>  <code>Qt 5.9.8</code>，<code>Qt Creator 4.8.2 (Enterprise)</code></p><br><h2 id="QFileSystemModel属性："><a href="#QFileSystemModel属性：" class="headerlink" title="QFileSystemModel属性："></a>QFileSystemModel属性：</h2><p> <code>QFileSystemModel</code>是可<strong>用于访问本机系统的文件系统</strong>的<strong>数据模型</strong>；一开始是需要使用设置一个根目录的；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString currPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前路径</span>m_model<span class="token operator">-></span><span class="token function">setRootPath</span><span class="token punctuation">(</span>currPath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//设置根目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和<code>QFileSystemModel</code>一样，可以获取磁盘文件目录的数据模型的还有<code>QDirModel</code>，但是<code>QFileSystemModel</code>是使用单独的线程来获取目录的文件的结构的，而<code>QDirModel</code>不是采用的单独的线程</p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191208_233142.gif"/ loading="lazy"><br><h2 id="源码分析："><a href="#源码分析：" class="headerlink" title="源码分析："></a>源码分析：</h2><p>这个例子，主要是根据<strong>”Mode-View-Delegate（模型-视图-代理）”</strong> 来实现，我会在前面将其仔细的写出来；这个例子得益于Qt自带的这些模型的强大，看起来需要写好多代码，但是实际只需要的代码量不算多，所以这里我就是将实现的部分源码，直接放在下面：</p><p><strong>.h</strong>头文件的实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQFILESYSTEMMODEL_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQFILESYSTEMMODEL_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QCheckBox></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileSystemModel></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExQFileSystemModel</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExQFileSystemModel</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//初始化，以及初始化状态栏</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_treeView_clicked</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单击treeView，会在状态栏显示当前节点的信息</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExQFileSystemModel <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QLabel<span class="token operator">*</span> m_labFileName<span class="token punctuation">;</span>       <span class="token comment">//文件名</span>    QLabel<span class="token operator">*</span> m_labFileSize<span class="token punctuation">;</span>       <span class="token comment">//文件大小</span>    QLabel<span class="token operator">*</span> m_labFileType<span class="token punctuation">;</span>       <span class="token comment">//文件类型</span>    QLabel<span class="token operator">*</span> m_labPath<span class="token punctuation">;</span>           <span class="token comment">//路径</span>    QCheckBox<span class="token operator">*</span> m_chkBoxIsFile<span class="token punctuation">;</span>   <span class="token comment">//当前是否为文件或文件夹</span>    QFileSystemModel<span class="token operator">*</span> m_model<span class="token punctuation">;</span>   <span class="token comment">//设置文件系统的模型</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQFILESYSTEMMODEL_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.cpp文件的实现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQFileSystemModel.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQFileSystemModel.h"</span></span><span class="token class-name">ExQFileSystemModel</span><span class="token operator">::</span><span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExQFileSystemModel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"文件系统模型QFileSystemModel的介绍和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTreeView<span class="token operator">::</span>clicked<span class="token punctuation">,</span> ui<span class="token operator">-></span>listView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QListView<span class="token operator">::</span>setRootIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTreeView<span class="token operator">::</span>clicked<span class="token punctuation">,</span> ui<span class="token operator">-></span>tableView<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QTableView<span class="token operator">::</span>setRootIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExQFileSystemModel</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExQFileSystemModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化，以及初始化状态栏</span><span class="token keyword">void</span> <span class="token class-name">ExQFileSystemModel</span><span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//设置数据模型，且加载到各个视图上面</span>    m_model <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QFileSystemModel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString currPath <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前路径</span>    m_model<span class="token operator">-></span><span class="token function">setRootPath</span><span class="token punctuation">(</span>currPath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//设置根目录</span>    ui<span class="token operator">-></span>treeView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置数据模型</span>    ui<span class="token operator">-></span>listView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>columnView<span class="token operator">-></span><span class="token function">setModel</span><span class="token punctuation">(</span>m_model<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化状态栏</span>    m_labFileName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"名称："</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFileName<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFileSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"大小："</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFileSize<span class="token operator">-></span><span class="token function">setFixedWidth</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFileType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"类型："</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFileType<span class="token operator">-></span><span class="token function">setFixedWidth</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"路径："</span> <span class="token operator">+</span> currPath<span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_chkBoxIsFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QCheckBox</span><span class="token punctuation">(</span><span class="token string">"当前为文件夹"</span><span class="token punctuation">,</span> ui<span class="token operator">-></span>statusBar<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_chkBoxIsFile<span class="token operator">-></span><span class="token function">setFixedWidth</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//各种QLable添加到状态栏</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFileType<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_chkBoxIsFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//单击treeView，会在状态栏显示当前节点的信息</span><span class="token keyword">void</span> <span class="token class-name">ExQFileSystemModel</span><span class="token operator">::</span><span class="token function">on_treeView_clicked</span><span class="token punctuation">(</span><span class="token keyword">const</span> QModelIndex <span class="token operator">&amp;</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_chkBoxIsFile<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">isDir</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//是否是目录</span>    m_labFileName<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"名称："</span> <span class="token operator">+</span> m_model<span class="token operator">-></span><span class="token function">fileName</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//文件名称</span>    <span class="token keyword">double</span> size <span class="token operator">=</span> m_model<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024.0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span>        m_labFileSize<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">&lt;=</span> size <span class="token operator">&amp;&amp;</span> size <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span>        m_labFileSize<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        m_labFileSize<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>size <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"GB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFileType<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labPath<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>m_model<span class="token operator">-></span><span class="token function">filePath</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQFileSystemModelEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Model-View-Delegate:&quot;模型-视图-代理&quot;的讲解</title>
      <link href="posts/4a7ed5d1/"/>
      <url>posts/4a7ed5d1/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在Qt中，有一种将数据和和视图进行串通起来，就像网页和数据库的关系一样；而这就是<strong>“Model-View-Delegate”</strong>（<strong>模型-视图-代理</strong>）的结构。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-09_22-34-00_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103501667">Model-View-Delegate:”模型-视图-代理”的讲解</a></p></blockquote><br><h2 id="Model-View-模型-视图"><a href="#Model-View-模型-视图" class="headerlink" title="Model/View(模型/视图):"></a>Model/View(模型/视图):</h2><p>在GUI界面交互的时候，用户在（软件/网页的）界面进行查看数据的时候，看到这个这个就被称之为<strong>视图</strong>；而视图展示出来的数据，是从<strong>模型</strong>里面取出来的，你可以将它看做看做一个专门存放数据的容器（黑匣子）；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-10_23-53-09_mark.png"/ loading="lazy"><br><h3 id="数据（Data）："><a href="#数据（Data）：" class="headerlink" title="数据（Data）："></a>数据（Data）：</h3><p>实际的数据，比如是数据表里面的一个项，也或许是一个QStringList，也许只是一个数字或者字母或者字符串:abc:</p><br><h3 id="视图（或视图组件-View）："><a href="#视图（或视图组件-View）：" class="headerlink" title="视图（或视图组件 View）："></a>视图（或视图组件 View）：</h3><p>客户端的界面，用来查看数据的控件，比如表格Table或者树形图目录结构Tree；<strong>视图从数据模型获取得到每一个数据项的模型索引（modelindex），然后通过模型索引获取数据；</strong> Qt提供一些现成的数据模型视图组件：  </p><ul><li><p><strong>主要的数据模型：</strong> QListView / QTreeView / QTableView</p></li><li><p> <strong>其对应的简便利类：</strong>  QListWidget / QTreeWidget / QTableWidget</p></li></ul><br><h3 id="模型（数据模型-Model）"><a href="#模型（数据模型-Model）" class="headerlink" title="模型（数据模型 Model）:"></a>模型（数据模型 Model）:</h3><p>与实际数据数据进行同行，并且为视图组件提供数据结构</p><br><h2 id="代理-Delegate"><a href="#代理-Delegate" class="headerlink" title="代理(Delegate):"></a>代理(Delegate):</h2><p>代理是可以让用户，自己更加细致定义绘画自己所需要的窗口的；比如说，可以在一个Table的控件里面，将一个item的项替换成一个QCheckBox或者一个下拉列表表框的控件之类的（eg：让你填表时候，选择年龄等）</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-09_23-03-07_mark.png"/ loading="lazy"><p><font color=#D0087E size=4 face="幼圆">由于数据和模型实际相互分离开，所以是<strong>可以一个数据模型对应⇒多个数据模型</strong>的</font></p><br><h2 id="数据模型："><a href="#数据模型：" class="headerlink" title="数据模型："></a>数据模型：</h2><p>所有基于<strong>项数据</strong>（item Data）的<strong>数据模型</strong>（Model）都是基于<code>QAbstractItemModel</code>这个抽象类的。</p><p>其几个主要的类的层次结构如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-10_23-39-22_mark.png"/ loading="lazy"><p>其中：</p><ul><li><code>QStringList Model：</code>用于处理字符串列表数据的数据模型类</li><li><code>QStandardltem Model：</code>标准的基于项数据的数据模型类，每个数据项数据都可以是任意数据类型</li><li><code>QFileSystem Model：</code>计算机上文件系统的数据模型类</li><li><code>QSortFilterProxy Model：</code> 用于其他数据模型的结合，提供排序和过滤功能的数据模型类</li><li><code>QSqlQuery Model:</code> 用于数据库SQL查询结果的数据模型类</li><li><code>QSqlTable Model:</code>  用于数据库的一个数据表的数据模型类</li><li><code>QSqlRelationalTable Model：</code>用于关系型数据表的数据模型类</li></ul><br><h2 id="视图模型："><a href="#视图模型：" class="headerlink" title="视图模型："></a>视图模型：</h2><p>其中它们的关系如下，在使用的时候，往往只是需要调用setModel()，就可以实现一个数据模型和视图组件和数据模型之间的关联；<strong>对视图组件的数据修改，将会直到自动保存到关联的数据模型里面，且一个数据模型是可以在多个视图组件里面显示数据的。</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-10_23-44-41_mark.png"/ loading="lazy"><p>其中的详细说明如下：</p><ul><li><code>QListView:</code> 用于显示单列的列表数据模型，适用于一维数据的操作</li><li><code>QTreeView:</code>  用于显示树状结构，使用与树状结构数据的操作</li><li><code>QTableView:</code>  用于显示表格状数据，适用于二维型数据的操作</li><li><code>QColumnView:</code>  用于多个QListView显示树状层次结构，树状结构的一层用一个QLIstView显示</li><li><code>QHeaderView:</code>  提供行表头或者列表头的视图组件</li></ul><br><h2 id="模型索引："><a href="#模型索引：" class="headerlink" title="模型索引："></a>模型索引：</h2><p><strong>模型索引（Model Index）</strong>：是来保证数据和其存取方式的隔离。</p><p><code>QModeIndex</code>是（临时的）一个索引类。模型索引提供数据存取的一个临时指针，用于通过数据模型的提取或者修改，因为模型内部组织结构的数据很容易变化，所以这个模型索引是临时的；</p><p><code>QPersistentModeIndex</code>是持久性的模型索引。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QTableWidget表格组件的属性介绍和使用</title>
      <link href="posts/61173bfc/"/>
      <url>posts/61173bfc/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  <code>QTableWidget</code>表格，组件的属性介绍和使用，这里写一个简单小例子的使用介绍它的基本属性的使用</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-08_22-42-50_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code></p><br><h2 id="QTableWidget属性："><a href="#QTableWidget属性：" class="headerlink" title="QTableWidget属性："></a>QTableWidget属性：</h2><p><code>QTableWidget</code>是 <strong>表格组件</strong> ；其属于显示窗口的控件，只是将数据以表格的形式展示出来， </p><p>其主要属性是：</p><ul><li>row行</li></ul><p>行号</p><ul><li>Colum列</li></ul><p>列号</p><ul><li>Item项</li></ul><p><code>QTableWidgetItem</code>是具体的某一个项item，就是表格中间的具体一个项（小长方块）；还可以用来存储数据（但是在界面该数据是不显示的），每一个item都可以存储一个自己的<code>QVariant</code>数据；</p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>来一张运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-12-08-22-56-38.gif"/ loading="lazy"><br><h2 id="核心源码讲解："><a href="#核心源码讲解：" class="headerlink" title="核心源码讲解："></a>核心源码讲解：</h2><p>因为这个控件属于比较简单，所以此处直接将部分**.h**源码贴出来:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExQTableWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">void</span> <span class="token function">createItemsARow</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> QString name<span class="token punctuation">,</span> QString sex<span class="token punctuation">,</span> QDate birth<span class="token punctuation">,</span> QString nation<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">,</span> <span class="token keyword">bool</span> isAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//为某一行创建items</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_btnSetHeader_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//设置表头</span>    <span class="token keyword">void</span> <span class="token function">on_btnInitTable_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//初始化数据表</span>    <span class="token keyword">void</span> <span class="token function">on_btnSetRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//设置表格的行数</span>    <span class="token keyword">void</span> <span class="token function">on_btnInsertRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//插入行</span>    <span class="token keyword">void</span> <span class="token function">on_btnAddRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//在最后一行添加一行</span>    <span class="token keyword">void</span> <span class="token function">on_btnDelRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//删除当前行</span>    <span class="token keyword">void</span> <span class="token function">on_btnAutoHeight_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//自动设置行高</span>    <span class="token keyword">void</span> <span class="token function">on_btnAutoWidth_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//自动设置列高</span>    <span class="token keyword">void</span> <span class="token function">on_btnReadToEdit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//读取表格内容到文本</span>    <span class="token keyword">void</span> <span class="token function">on_chkBoxHeadEdit_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//表格可编辑模式</span>    <span class="token keyword">void</span> <span class="token function">on_chkBoxRowColor_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//间隔行底色</span>    <span class="token keyword">void</span> <span class="token function">on_chkBoxHeadRow_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//显示行表头</span>    <span class="token keyword">void</span> <span class="token function">on_chkBoxHeadCol_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//显示列表头</span>    <span class="token keyword">void</span> <span class="token function">on_radioBtnSelectItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//单元格选择</span>    <span class="token keyword">void</span> <span class="token function">on_radioBtnSelectRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//行选择</span>    <span class="token keyword">void</span> <span class="token function">on_tableWidget_currentCellChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentRow<span class="token punctuation">,</span> <span class="token keyword">int</span> currentColumn<span class="token punctuation">,</span> <span class="token keyword">int</span> previousRow<span class="token punctuation">,</span> <span class="token keyword">int</span> previousColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取当前item和前一个(点击)item的行列号</span><span class="token keyword">private</span><span class="token operator">:</span>    QLabel <span class="token operator">*</span>m_labCellIndex<span class="token punctuation">;</span>                              <span class="token comment">//状态栏上用来显示单元格的行号、列号</span>    QLabel <span class="token operator">*</span>m_labCellType<span class="token punctuation">;</span>                               <span class="token comment">//状态栏上用来显示单元格的type</span>    QLabel <span class="token operator">*</span>m_labStudID<span class="token punctuation">;</span>                                 <span class="token comment">//状态栏上用来显示单元格的学号</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其对应的**.cpp**文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">ExQTableWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExQTableWidget<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTableWidget的讲解和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前单元格坐标："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//状态栏初始化</span>    m_labCellIndex<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前单元格类型："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellType<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labStudID <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"学生ID："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labStudID<span class="token operator">-></span><span class="token function">setMinimumWidth</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labCellType<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labStudID<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>chkBoxHeadEdit<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>splitter_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">on_btnSetHeader_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//为某一行创建items</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">createItemsARow</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> QString name<span class="token punctuation">,</span> QString sex<span class="token punctuation">,</span> QDate birth<span class="token punctuation">,</span> QString nation<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">,</span> <span class="token keyword">bool</span> isAnime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stunID <span class="token operator">=</span> <span class="token number">20190913</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cellType<span class="token operator">::</span>ctName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建name 坐标为(0, 0)的item</span>    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token operator">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//文本显示居中</span>    stunID <span class="token operator">+=</span> row<span class="token punctuation">;</span>                                                  <span class="token comment">//学号 = 基数 + 行号</span>    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>stunID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//设置stunID为data</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colName<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//插入item到tableWidget里面</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> cellType<span class="token operator">::</span>ctSex<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//性别</span>    QIcon icon<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token string">"男"</span><span class="token punctuation">)</span>        icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/Image002.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/Image003.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token operator">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colSex<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>birth<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cellType<span class="token operator">::</span>ctBirth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出生日期</span>    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token operator">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colBirth<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>nation<span class="token punctuation">,</span> cellType<span class="token operator">::</span>ctNation<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//籍贯</span>    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token operator">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colNation<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> cellType<span class="token operator">::</span>ctScore<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//成绩</span>    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token operator">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colScore<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span><span class="token string">"喜欢"</span><span class="token punctuation">,</span> cellType<span class="token operator">::</span>ctLikeAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//喜欢二次元否?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isAnime<span class="token punctuation">)</span>        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setTextAlignment</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>AlignHCenter <span class="token operator">|</span> Qt<span class="token operator">::</span>AlignVCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colLikeAnime<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//设置表头</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnSetHeader_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    QStringList list<span class="token punctuation">;</span>    list <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"性别"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"出生日期"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"籍贯"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"分数"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"是否喜欢二次元"</span><span class="token punctuation">;</span><span class="token comment">//    ui->tableWidget->setHorizontalHeaderLabels(list);            //只是初始化表头的每一列的名字</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setColumnCount</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//创建一个item</span>        QFont font<span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">//设置item的字体，颜色，粗体，大小</span>        item<span class="token operator">-></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setHorizontalHeaderItem</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//添加item到tableWidget</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据表</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnInitTable_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTime time<span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token class-name">QTime</span><span class="token operator">::</span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsrand</span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>uint<span class="token operator">></span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">msec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> time<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString name <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>    QString sex <span class="token operator">=</span> <span class="token string">"保密"</span><span class="token punctuation">;</span>    QDate <span class="token function">birth</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString nation <span class="token operator">=</span> <span class="token string">"武汉"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isAnime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">clearContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//清除工作区，不清除表头</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">//初始化一行行的数据</span>        name <span class="token operator">=</span> <span class="token string">"学生"</span><span class="token punctuation">;</span>        name <span class="token operator">+=</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n  <span class="token operator">=</span> <span class="token function">qrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>                                      <span class="token comment">//产生随机数小于2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>            isAnime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            sex <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">;</span>            isAnime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        score <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>        birth <span class="token operator">=</span> birth<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">createItemsARow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> birth<span class="token punctuation">,</span> nation<span class="token punctuation">,</span> score<span class="token punctuation">,</span> isAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置表格的行数</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnSetRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setRowCount</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//插入行</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnInsertRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> currRow <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>currRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//插入一行，不会自动为单元格创建item</span>    <span class="token function">createItemsARow</span><span class="token punctuation">(</span>currRow<span class="token punctuation">,</span> <span class="token string">"插入学生"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token function">QDate</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"楚国"</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//在最后一行添加一行</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnAddRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">createItemsARow</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token string">"添加学生"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token function">QDate</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">07</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"唐朝"</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除当前行</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnDelRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> currRow <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">removeRow</span><span class="token punctuation">(</span>currRow<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//删除当前行以及其他items</span><span class="token punctuation">&#125;</span><span class="token comment">//自动设置行高</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnAutoHeight_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">resizeRowsToContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//自动调整所有行的内容，以适应内容高度</span><span class="token punctuation">&#125;</span><span class="token comment">//自动设置列高</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnAutoWidth_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">resizeColumnsToContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//自动调整所有列的内容，以适应内容宽度</span><span class="token punctuation">&#125;</span><span class="token comment">//读取表格内容到文本</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_btnReadToEdit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">columnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            item <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            str <span class="token operator">+=</span> item<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        item <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colLikeAnime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span>            str <span class="token operator">+=</span> <span class="token string">"喜欢二次元"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            str <span class="token operator">+=</span> <span class="token string">"不喜欢二次元"</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//表格可编辑模式</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_chkBoxHeadEdit_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>checked<span class="token punctuation">)</span>        ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setEditTriggers</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>DoubleClicked <span class="token operator">|</span> QAbstractItemView<span class="token operator">::</span>SelectedClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setEditTriggers</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>DoubleClicked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//间隔行底色</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_chkBoxRowColor_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setAlternatingRowColors</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//显示行表头</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_chkBoxHeadRow_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">horizontalHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//显示列表头</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_chkBoxHeadCol_clicked</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">verticalHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//单元格选择</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_radioBtnSelectItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>SelectItems<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//行选择</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_radioBtnSelectRow_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">setSelectionBehavior</span><span class="token punctuation">(</span>QAbstractItemView<span class="token operator">::</span>SelectRows<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取当前item和前一个(点击)item的行列号</span><span class="token keyword">void</span> <span class="token class-name">ExQTableWidget</span><span class="token operator">::</span><span class="token function">on_tableWidget_currentCellChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> currentRow<span class="token punctuation">,</span> <span class="token keyword">int</span> currentColumn<span class="token punctuation">,</span> <span class="token keyword">int</span> previousRow<span class="token punctuation">,</span> <span class="token keyword">int</span> previousColumn<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_labCellIndex<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前单元格坐标：["</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>currentRow<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"行, "</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>currentColumn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"列]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>currentRow<span class="token punctuation">,</span> currentColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labCellType<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"当前单元格类型："</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QTableWidgetItem<span class="token operator">*</span> item2 <span class="token operator">=</span> ui<span class="token operator">-></span>tableWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>currentRow<span class="token punctuation">,</span> fieldColNum<span class="token operator">::</span>colName<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labStudID<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"学生ID："</span> <span class="token operator">+</span> item2<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>UserRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQTableWidgetEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>目录树组件QTreeWidget和停靠区域组件QDockWidget的用法</title>
      <link href="posts/9e077eb6/"/>
      <url>posts/9e077eb6/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  目录树组件<code>QTreeWidget</code>和停靠区域组件<code>QDockWidget</code>的和<code>QScrollArea</code>用法；然后写的一个小的相册查看器例子</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-08_18-38-19_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="QTreeWidget组件："><a href="#QTreeWidget组件：" class="headerlink" title="QTreeWidget组件："></a>QTreeWidget组件：</h2><p><code>QTreeWidget</code>是 <strong>目录树组件</strong> 控件，用来创建和管理树形结构的类的</p><br><h2 id="QDockWidget组件："><a href="#QDockWidget组件：" class="headerlink" title="QDockWidget组件："></a>QDockWidget组件：</h2><p><code>QDockWidget</code>是可以在<code>QMainWindow</code>窗口停靠，或者在桌面最上层浮动的界面组件；在本文里面的例子里面，将<code>QTreeWidget</code>控件存放在<code>QDockWidget</code>上面，设置其可以在主窗口的左或右侧，也是可以浮动的，还可以浮动；还可以设置其为隐藏/显示不显示窗体的效果</p><h3 id="allowedAreas属性，设置允许停靠区域"><a href="#allowedAreas属性，设置允许停靠区域" class="headerlink" title="allowedAreas属性，设置允许停靠区域"></a><strong>allowedAreas</strong>属性，设置允许停靠区域</h3><p>使用setAllowedAreas()设置允许停靠区域（上下左右的区域）</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-12-08_21-58-56_mark.png"/ loading="lazy"><h3 id="feat属性，设置停靠区组件的特性"><a href="#feat属性，设置停靠区组件的特性" class="headerlink" title="feat属性，设置停靠区组件的特性"></a><strong>feat</strong>属性，设置停靠区组件的特性</h3><p>由<code>setFeatures()</code>函数来设置停靠区域组件的特性，其参数是如下的枚举类型的组合值的使用</p><table><thead><tr><th>Constant</th><th>Description</th></tr></thead><tbody><tr><td>QDockWidget::DockWidgetClosable</td><td>停靠区域可关闭</td></tr><tr><td>QDockWidget::DockWidgetMovable</td><td>停靠区域可移动</td></tr><tr><td>QDockWidget::DockWidgetFloatable</td><td>停靠区域可浮动</td></tr><tr><td>QDockWidget::DockWidgetVerticalTitleBar</td><td>在停靠区域左侧显示垂直标题栏</td></tr><tr><td>QDockWidget::AllDockWidgetFeatures</td><td>使用以上所有特征</td></tr><tr><td>QDockWidget::NoDockWidgetFeatures</td><td>不能停靠，移动和关闭</td></tr></tbody></table><br><h2 id="QScrollArea组件："><a href="#QScrollArea组件：" class="headerlink" title="QScrollArea组件："></a>QScrollArea组件：</h2><p><code>QScrollArea</code>是一个<strong>自动滚区域组件</strong>的控件，可以用来实现有比较长的显示内容。</p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>这种<code>gif</code>录制了一下午（N多次，就是没有特别满意，要么太大要么不清晰），但是<code>gif</code>好像录制的并不算太好，录制这张图，但是总是体积太大或者不清晰，在<code>mac</code>上面暂时没有找到比较好的录制和压缩<strong>gif</strong>的软件来代替<code>win10</code>上面的(<strong>ScreenGif</strong>  + <strong>FSREsizer</strong> + <strong>FSCapture</strong>)这三个软件，有合适的话，可以知道的可以留言推荐一下，合适和录gif工具也在尝试中；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-12-08-17.27.31.gif"/ loading="lazy"><br><h2 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h2><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>   <strong>编程软件：</strong> <code>Qt 5.9.8</code>， <code>Qt Creator 4.8.2</code>;</p><p>在**.h**头文件里面，实现非部分代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQTREEWIDGET_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQTREEWIDGET_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTreeWidgetItem></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">enum</span> <span class="token class-name">treeItemType</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//枚举，节点类型</span>        itemRoot<span class="token punctuation">,</span>        itemFile<span class="token punctuation">,</span>        itemImage    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">treeColNum</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//目录树列表的编号</span>        colItem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        colItemType <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">//初始化根节点（唯一）</span>    <span class="token keyword">void</span> <span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加目录</span>    <span class="token keyword">void</span> <span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加图片文件</span>    QString <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>    <span class="token keyword">void</span> <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> parItem<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//遍历item下面的所有节点</span>    <span class="token keyword">void</span> <span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//显示当前item的图片（默认以适配高度）</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//增加文件夹</span>    <span class="token keyword">void</span> <span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//添加图片文件</span>    <span class="token keyword">void</span> <span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//删除节点</span>    <span class="token keyword">void</span> <span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span>    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//图片自动适应高度</span>    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//图片自动适应宽度</span>    <span class="token keyword">void</span> <span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//放大</span>    <span class="token keyword">void</span> <span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//缩小</span>    <span class="token keyword">void</span> <span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//还原</span>    <span class="token keyword">void</span> <span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//设置Dock窗口是否浮动</span>    <span class="token keyword">void</span> <span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设置Dock窗口是否隐藏不显示</span>    <span class="token keyword">void</span> <span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//退出</span>    <span class="token keyword">void</span> <span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前节点变化的时候，自动加载当前图片</span>    <span class="token keyword">void</span> <span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span>    <span class="token keyword">void</span> <span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExQTreeWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QLabel <span class="token operator">*</span>m_labFlie<span class="token punctuation">;</span>      <span class="token comment">//状态栏显示当前文件路径</span>    QPixmap m_curPixmap<span class="token punctuation">;</span>    <span class="token comment">//显示当前文件图片</span>    <span class="token keyword">float</span>   m_ratio<span class="token punctuation">;</span>        <span class="token comment">//图片缩放比例</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQTREEWIDGET_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的**.cpp**文件：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQTreeWidget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQTreeWidget.h"</span></span><span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExQTreeWidget<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTreeWidget和QDockWidget的讲解和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置scrollArea为中心控件</span>    <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFlie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前文件的路径:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFlie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//初始化根节点（只能够有唯一）</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//准备工作</span>    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString dataStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image001.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建唯一root的节点</span>    QTreeWidgetItem<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"相簿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加顶层节点</span>    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">addTopLevelItem</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加目录节点</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image006.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加一个新的节点</span>    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token operator">::</span>itemFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加图片节点</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image014.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加一个新的节点</span>    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token operator">::</span>itemImage<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>QString <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> pathName<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>cnt <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历传进来的父节点下的所有子节点；每遍历过该节点，就在其节点的信息加一个#</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString str <span class="token operator">=</span> <span class="token string">"# "</span> <span class="token operator">+</span> parItem<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    parItem<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//回调，调用自己</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//显示当前item的图片（默认以适配高度）</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString fileName <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFlie<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_curPixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//从文件载入图片</span>    <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//自动适应高度显示</span>    ui<span class="token operator">-></span>actAmplification<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actShrink<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actZoomRealSize<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actAdaptiveHeight<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actAdaptiveWidth<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//增加文件夹</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//选择目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token function">addFolderItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加图片</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QStringList list <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个将要加载的图片"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Images(*.jpg, *.png, *.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//选择目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemImage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//获得父节点</span>            parItem <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            parItem <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            QString strName <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//获得文件名称</span>            <span class="token function">addImageItem</span><span class="token punctuation">(</span>parItem<span class="token punctuation">,</span> strName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//添加图片文件到文件节点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除节点</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span>        parItem <span class="token operator">=</span> currItem<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//只能够由其父节点删除</span><span class="token comment">//    else</span><span class="token comment">//        ui->treeFiles->takeTopLevelItem(0);                      //删除顶层节点使用这个</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    parItem<span class="token operator">-></span><span class="token function">removeChild</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//移除没有从内存中删除，所以delete删除</span>    <span class="token keyword">delete</span> currItem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//顶层item</span>        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//图片自动适应高度</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//得到scrollArea的高度</span>    <span class="token keyword">int</span> realHeight <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//原始图片的实际高度</span>    m_ratio <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realHeight<span class="token punctuation">;</span>                          <span class="token comment">//当前显示比例，必须转换为浮点数</span>    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//图片缩放到指定高度</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//设置Label的PixMap</span><span class="token punctuation">&#125;</span><span class="token comment">//图片自动适应宽度</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> realWidth <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_ratio <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realWidth<span class="token punctuation">;</span>    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当前节点变化的时候，自动加载当前图片</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> previous <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">displayImage</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//放大</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_ratio <span class="token operator">*=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>                                             <span class="token comment">//在当前比例基础上乘以0.8</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                <span class="token comment">// 显示宽度</span>    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                  <span class="token comment">// 显示宽度</span>    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//图片缩放到指定高度和宽度，保持长宽比例</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//缩小</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_ratio <span class="token operator">*=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//还原</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_ratio <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置Dock窗口是否浮动</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setFloating</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置Dock窗口是否隐藏不显示</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token operator">!</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//退出</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>actDockVisible<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>actDockFloating<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQTreeWidgetEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用开源协议图解区别</title>
      <link href="posts/4742dffc/"/>
      <url>posts/4742dffc/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  关于一些常用的开源的协议，用一个图就可以清楚的表示出来了（该图片来源于网络）；其中使用比较多的就是<code>Apache</code>和<code>LGPL</code>这两个协议</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/image_mark.png"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br>]]></content>
      
      
      <categories>
          
          <category> 学习 - 技术之外 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo框架Maupassant主题设置:归纳不分页(或分页数),设定rss订阅，开启本地搜索</title>
      <link href="posts/8e5dbeea/"/>
      <url>posts/8e5dbeea/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  这是之前，将博客迁移过来的时候，一些个人个性化的操作📒设置，在此存一下，用来以后自己备查；在<code>hexo</code>中，使用的<code>Maupassant</code>主题，主要记录📝是以下的几个操作：</p><ul><li>主题设置归纳不分页（或者指定分页数）</li><li>设置<code>rss</code>订阅</li><li>开启本地搜索， 关闭<code>google</code>和<code>baidu</code>搜索</li></ul><span id="more"></span><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103285926">hexo框架Maupassant主题设置:归纳不分页(或分页数),设定rss订阅，开启本地搜索</a></p></blockquote><br><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="hexo中Maupassant主题设置归纳不分页"><a href="#hexo中Maupassant主题设置归纳不分页" class="headerlink" title="hexo中Maupassant主题设置归纳不分页"></a><code>hexo</code>中<code>Maupassant</code>主题设置归纳不分页</h2><h3 id="方法一（设置归纳不分页，或归纳分页数）："><a href="#方法一（设置归纳不分页，或归纳分页数）：" class="headerlink" title="方法一（设置归纳不分页，或归纳分页数）："></a>方法一（设置归纳不分页，或归纳分页数）：</h3><p><strong>如下是我在（2019-11-03 时候搭建的<code>hexo</code>框架时候，有的效果）；</strong></p><p>查看了一下相关的配置文件<code>hexo/_config.yml</code>在2019-11-01下载更新的一份， 会比2019-06-08下载初始化的<code>hexo/_config.yml</code>要多几行文件，其中隔一段多几行;</p><ul><li><strong>实现不分页方法：</strong></li></ul><p>将<code>hexo/_config.yml</code>的这一段代码， 默认的10 修改为0， 即便是不翻页</p><p><strong>[设置归档，若是为0， 则不用翻页]</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Pagination </span><span class="token comment">## Set per_page to 0 to disable pagination</span>per_page: <span class="token number">0</span>pagination_dir: page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="方法二（设置归纳不分页，或归纳分页数）："><a href="#方法二（设置归纳不分页，或归纳分页数）：" class="headerlink" title="方法二（设置归纳不分页，或归纳分页数）："></a>方法二（设置归纳不分页，或归纳分页数）：</h3><p>参考： <a href="https://www.nickyam.com/tech/hexo-maupassant-archives-show-all-in-one-page.html">Hexo 博客 Maupassant 主题下归档页显示的高级设置</a>  </p><p><strong>如下是我在（2019-06-08 时候搭建的<code>hexo</code>框架时候，有的效果）；</strong></p><p>先执行下面三个命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-archive --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-tag --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再在<code>hexo</code>的<code>_config.yml</code>里面配置文件, 新增加如下片段：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置首页分页之前默认就有，这里就不额外加了</span><span class="token comment"># index_generator:</span><span class="token comment">#   per_page: 7</span>archive_generator:  per_page: <span class="token number">0</span>  <span class="token comment">#值为0表示不分页，按需填写</span>  yearly: <span class="token boolean">true</span>  <span class="token comment">#是否按年生成归档</span>  monthly: <span class="token boolean">false</span>  <span class="token comment">#为了加快生成速度，按月归档就不要了</span><span class="token comment"># 依葫芦画瓢，我们也可以对分类展示页、标签页等进行改造，以期与首页独立控制分页条数</span>tag_generator:  per_page: <span class="token number">40</span>  <span class="token comment">#值为0表示不分页，按需填写</span>category_generator:  per_page: <span class="token number">40</span>  <span class="token comment">#值为0表示不分页，按需填写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后效果会遮蔽如下(自带的)这端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Pagination</span><span class="token comment">## Set per_page to 0 to disable pagination</span>per_page: <span class="token number">10</span>pagination_dir: page<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="hexo中Maupassant主题设置rss订阅"><a href="#hexo中Maupassant主题设置rss订阅" class="headerlink" title="hexo中Maupassant主题设置rss订阅"></a><code>hexo</code>中<code>Maupassant</code>主题设置rss订阅</h2><p><strong>本身就是自带支持 RSS 订阅的:</strong></p><ol><li><p>安装<code>hexo-generator-feed</code></p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改 <code>hexo</code> 配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">  <span class="token comment">#RSS订阅</span>  <span class="token key atrule">plugin</span><span class="token punctuation">:</span><span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed  <span class="token comment">#Feed Atom</span>  <span class="token key atrule">feed</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> atom    <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml    <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 其中，feed 配置是可选项</p></li><li><p>修改主题配置</p> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">page</span><span class="token punctuation">:</span> rss    <span class="token key atrule">directory</span><span class="token punctuation">:</span> atom.xml    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>rss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><br><h2 id="开启本地搜索，-关闭google和baidu搜索"><a href="#开启本地搜索，-关闭google和baidu搜索" class="headerlink" title="开启本地搜索， 关闭google和baidu搜索:"></a>开启本地搜索， 关闭google和baidu搜索:</h2><p>执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 然后在<strong>themes/maupassant/_config.yml</strong>文件，把下面几行的数值的参数修改为如下：                  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">google_search: <span class="token boolean">false</span> <span class="token comment">## Use Google search, true/false.</span>baidu_search: <span class="token boolean">false</span> <span class="token comment">## Use Baidu search, true/false.</span>self_search: <span class="token boolean">true</span> <span class="token comment">## Use a jQuery-based local search engine, true/false.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git设置全局代理，使得git clone能够稳定的提速800KB/S</title>
      <link href="posts/4add1970/"/>
      <url>posts/4add1970/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  设置<code>git </code>会走全局代理，从而让<code>git clon</code>提高下载速度，下载速度稳定在<code>800KB/S</code>，不再是<code>几KB/S</code>的速度，让人揪心‘</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="背景需求："><a href="#背景需求：" class="headerlink" title="背景需求："></a>背景需求：</h2><p><strong>使用<code>git</code>或者<code>brew</code>或者<code>apt</code>时候，<code>几KB/S</code>的网速用的落下了眼泪；</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/EIn5WzKUUAEq74G.png"/ loading="lazy"><p><strong>还经常判断为网络错误为断开；又是更换源，又是架<code>vps</code>，又是代理研究，为了下载安装一个软件，通常要耗巨时来做前期准备工作；无意思看到<code>zhihu</code>的时候，我真的忍不住的想哭，就不能让我们潜心的研究设计和<code>code</code>的原理，变得更加方便一些否?</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/EIn5WzLUEAAKed9_mark.png"/ loading="lazy"><p>实际体验<code>git+github</code>几个月之后的测速：一般是为<code>20~40KB/S</code>；晚上容易<code>小于10KB/S</code>的速度；小概率无法打开被墙；小于前者的概率为稳定的<code>几M/S</code></p><br><h2 id="网上需求它法"><a href="#网上需求它法" class="headerlink" title="网上需求它法:"></a>网上需求它法:</h2><p>首先想到的就是，看看其他人都是怎么提高<code>git clone</code>的下载速度的，查询一番，方法一共如下，若是有我未知的方法，欢迎补充和评论：</p><ul><li>仅修改<code>hosts</code>文件</li><li>使用<code>vpn</code>，开启pac代理或者全局代理</li><li>使用服务器，搭建公司的私有<code>gitLab</code>，然后同步自己所需要的部分<code>github</code>仓库</li></ul><p>经过实际的测试与使用体验，发现第一个很难起到作用，遇到被墙的仍然是徒劳，且存在不同区域的网络有各自的成功或失败，此方法难以复制；方法二而分为两种。一种是自己购买vps搭建，另外是直接购买现成的线路来使用，属于我比较推荐的一个，花点小钱钱💰，可以避免很多无用的生气，心平气和的敲代码不好吗？方法三，我公司就是这样操作的，此处不做探究</p><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><h3 id="查看所有git配置"><a href="#查看所有git配置" class="headerlink" title="查看所有git配置:"></a>查看所有git配置:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="只是针对github进行代理："><a href="#只是针对github进行代理：" class="headerlink" title="只是针对github进行代理："></a>只是针对github进行代理：</h3><p><code>git</code>提供的下载方式有两种，一种是<code>ssh</code>，另外一种是<code>https</code>的下载方式；应该是一次对应着网上的教程中的<code>socks5</code>和<code>https + http</code>的两种下载模式；</p><p><font color=#FE7207 size=4 face="幼圆"><strong>设置之前，一定要查看自己的IP和端口是也是如下，具体IP和端口以自己的为准，下面是一般的默认数值</strong></font></p><h4 id="设置全局代理（https-http）："><a href="#设置全局代理（https-http）：" class="headerlink" title="设置全局代理（https + http）："></a>设置全局代理（https + http）：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy http://127.0.0.1:1080<span class="token function">git</span> config --global https.proxy https://127.0.0.1:1080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置全局代理（socks5）："><a href="#设置全局代理（socks5）：" class="headerlink" title="设置全局代理（socks5）："></a>设置全局代理（socks5）：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global http.https://github.com.proxy socks5://127.0.0.1:1086<span class="token function">git</span> config --global https.https://github.com.proxy socks5://127.0.0.1:1086<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="取消设置的代理"><a href="#取消设置的代理" class="headerlink" title="取消设置的代理:"></a>取消设置的代理:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="设置之后"><a href="#设置之后" class="headerlink" title="设置之后:"></a>设置之后:</h2><p><strong>说明一下，我已经开启了全局代理模式的，因为今天，在不开代理和仅仅只开pac代理模式下，都是无法访问<code>github</code>的，可能是阶段性的此片<code>IP</code>被墙了吧！！</strong>！真的让人火大~；在终端测试<code>git clon</code>自己一个仓库，下载速度为<strong>700-800KB/S</strong>左右，<strong>比较稳定</strong>；网多传的达到稳定的几M/S的速度，我只是峰值达到过，然后就降速下来了，也不知道部分博文是否截图来误导性？？？ 嗯？？<br>我设置之后，配置截图：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_19-41-32_mark.png" width="60%"/ loading="lazy"><p>比较稳定的速度：</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_19-41-33_mark.png" width="80%"/ loading="lazy"><br><h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><p>前两天，IP被墙的原因过了两天找到了，居然被我猜中了，还真的是。。。。。</p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/IMG_9254_mark.JPEG" width="50%"/ loading="lazy"><br><p><strong>参考：</strong></p><p><a href="https://tding.top/archives/cbef72d4">GitHub 代理设置</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 科学上网vpn </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS解决&quot;修改“Applications”需要输入管理员名称和密码&quot;的方法</title>
      <link href="posts/65d36fa4/"/>
      <url>posts/65d36fa4/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在<code>MacOS10.14.6</code>上面，安装一些网站（或官网）的下载的离线安装包，经常会遇到安装过程中会遇到<font color=#D0087E size=4 face="幼圆">“修改“Applications”需要输入管理员名称和密码”</font>的问题，下面提供一种简单的解决方法：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/download.jpg"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/103265804">在MacOS解决”修改“Applications”需要输入管理员名称和密码”的方法</a></p></blockquote><br><h2 id="出现原因"><a href="#出现原因" class="headerlink" title="出现原因:"></a>出现原因:</h2><p><code>apple系统</code>出于安全性的考量，对于非 <code>AppStore</code> 官方的都是建议慎重下载和警告示的阻止安装，但是并非一点机会都不给安装；</p><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ul><li><font color=#D0087E size=4 face="幼圆">最佳解决：</font></li></ul><p>直接将 <code>xxx.dmg</code> 下载好的应用程序安装，双击打开:（若下载就是<code>xxx.app</code>更好，直接进入下一步骤）</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_18-25-34_mark.png"/ loading="lazy"><p>在下图中，直接将<code>xxx.app</code>直接拖入到 <code>应用程序</code>中，如下图 :</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124182943.png"/ loading="lazy"><p>然后再<code>启动</code>中就可以正常运行了此项目了</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124183126.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - 科学上网vpn </category>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS环境下安装QtCreator作为c++的IDE开发工具，学习和使用qt</title>
      <link href="posts/35a6c6f4/"/>
      <url>posts/35a6c6f4/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在<code>MacOS10.14.6</code>环境下安装<code>QtCreator5.9.8</code>作为<code>c++</code>的<strong>IDE</strong>开发工具，学习和使用<strong>qt</strong></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/103231202">在MacOS环境下安装QtCreator作为c++的IDE开发工具，学习和使用qt</a></p></blockquote><br><h2 id="下载QtCreator："><a href="#下载QtCreator：" class="headerlink" title="下载QtCreator："></a>下载QtCreator：</h2><p><strong>qt官网下载地址：</strong> <a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></p><p>推荐下载⬇️的版本：使用的<code>Neat Download manager</code>多线程工具下载，相当于<strong>win</strong>的<strong>IDM</strong>下载工具，有此工具，何愁速度不满带宽下限？</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124232717.png"/ loading="lazy"><br><h2 id="安装QtCreator步骤："><a href="#安装QtCreator步骤：" class="headerlink" title="安装QtCreator步骤："></a>安装QtCreator步骤：</h2><p>下载之后，直接双击，打开，按照如下的操作运行即可，下面为完成的每一每一个详细所有的步骤截图</p><ul><li>点击<strong>Next</strong>下一步</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124232821.png"/ loading="lazy"><ul><li>点击<code>Skip</code>跳过，可以不用填写注册信息的</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124232838.png"/ loading="lazy"><ul><li>点击<code>继续</code></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191125000735.png"/ loading="lazy"><ul><li>点击<code>继续</code>，使用默认安装路径即可【后面会用到这个路径】</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191125000750.png"/ loading="lazy"><ul><li>勾选如下图所示的模块，一般安装<strong>MacOS+Sources+QtCreator</strong>（我所认为的必须安装）学习使用够了，但是为了系统的学习一些新的模块，推荐将如下的也都勾选项上</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_23-38-36.png"/ loading="lazy"><ul><li>点击<code>同意</code>和<code>继续</code>，认同这些没有人会仔细看的这些条款</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124234217.png"/ loading="lazy"><ul><li>已经正式开始安装了，点击<code>显示详细信息</code>可以查看当前安装到哪里细节的部分（等待时间可以去喝杯咖啡）</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124234353.png"/ loading="lazy"><ul><li>安装完成，点击<code>完成</code>，即可成功运行QtCreaot来愉快的编码了</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191124234538.png"/ loading="lazy"><br><h2 id="启动QtCreator"><a href="#启动QtCreator" class="headerlink" title="启动QtCreator:"></a>启动QtCreator:</h2><p>打开启动，发现并没有我熟悉的那个图标，搜索🔍也没有看到；打开<code>/Users/yuanyi/Qt5.9.8/Qt Creator.app</code>，其中yuanyi为你自己电脑的用户名</p><p><strong>启动QtCreator和多开QtCreator的方法在下图中</strong>：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_23-52-09_mark.png"/ loading="lazy"><p>开始编码：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-24_23-59-56_mark.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 删除刚提交到远程分支的push commint</title>
      <link href="posts/16f585f3/"/>
      <url>posts/16f585f3/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  刚刚使用另外一个账号在本地<code>commit</code>， 然后<code>push self</code>了，然后想要删除此次的远程提交；但是全部代码和工作区内容， 然后更换一个正确的git账号（ <strong>user.name</strong> 和 <strong>user.email</strong> ）,再次生成一次<code>commit</code>，再<code>push self</code>；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>这次比较简单， 但是感觉会比较实用，网上教程写的比较繁琐，我的步骤如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset HEAD^                  //等价于git reset -–mixed HEAD^，撤回本地上一次的commit提交，但是保留改动代码和工作区内容 <span class="token function">git</span> push self master -f          //因为版本落后远程分支，故加上-f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git clone后，在本地切换到远程仓库的非master分支</title>
      <link href="posts/30b0d888/"/>
      <url>posts/30b0d888/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> 因为有一个需求， 在<code>github</code>上面的仓库有两个分支（<code>master</code>和<code>markdown</code>），且两个分支的内容完全不相同，现在需要另外一台电脑上面，克隆下来本地仓库，且同时能够在两个分支上面都进行不同的开发</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="下面为自己的仓库为示范："><a href="#下面为自己的仓库为示范：" class="headerlink" title="下面为自己的仓库为示范："></a>下面为自己的仓库为示范：</h2><ul><li><code>git clone</code>远程仓库拷贝到本地仓库：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:touwoyimuli/touwoyimuli.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行的时候， 其实是将<strong>touwoyimuli.github.io仓库</strong>的所有分支全部都拷贝下来的</p><ul><li>查看本地所有分支<code>git branch -a</code>，默认是<code>本地master</code>+<code>远程origin: master </code>+<code>远程origin: 非master分支等 </code></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-11-06_10-39_mark.png"/ loading="lazy"><ul><li>切换到本地新建的分支<code>markdown</code>（也可以为其他名）；<code>markdown</code>为本地新分支，后面对应远程的origin/markdown为远程仓库的非master分支</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b markdown origin/markdown   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/2019-11-06_10-41_mark.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 关闭.cpp文件右侧的黄色警告</title>
      <link href="posts/63940372/"/>
      <url>posts/63940372/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在<code>Qt Creator</code>里面，默认打开一个项目文件，点开一个<code>*.cpp</code>文件里面，是很容易在右侧看到成片的黄色警告⚠️或者红颜色的<code>error</code>提示， 总是让看的人比较恐慌，然后在此文章中，给出如何关闭这个黄色、红色警告的的方法</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="关闭黄色警告（和红色）提示："><a href="#关闭黄色警告（和红色）提示：" class="headerlink" title="关闭黄色警告（和红色）提示："></a>关闭黄色警告（和红色）提示：</h2><h3 id="未修改之前："><a href="#未修改之前：" class="headerlink" title="未修改之前："></a>未修改之前：</h3><p><strong>编程环境：</strong>  <code>MacOS 10.14.6 (18G103)</code>  </p><p><strong>编程软件：</strong> <code>Qt 5.12.5</code>， <code>Qt Creator 4.10.0</code></p><p>有着比较多的黄色（红色）警告，虽然不影响编译， 但是看起来很不爽：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-06_20-06-30_mark.png"/ loading="lazy"><h3 id="修改方法和效果："><a href="#修改方法和效果：" class="headerlink" title="修改方法和效果："></a>修改方法和效果：</h3><p><strong>步骤：</strong> 点击屏幕左上角的<code>Qt Cretor - 关于插件 - Name - c++: ClangcodeModel </code>，将这一栏的对钩✔️取消掉，然后重启<code>Qt Cretor</code>，再次打开之后， 就好了</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191106203719.png"/ loading="lazy"><p><strong>成功重启后：</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191106203852.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS安装切换到zsh</title>
      <link href="posts/2ee37ecb/"/>
      <url>posts/2ee37ecb/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  之前看旁边的<del>同事</del>大佬，在<code>deepin</code>里面的终端，和我用的终端有些不一样，那会大概是以为是使用了什么插件之类的吧。和浏览器插件相似，觉得安装之类的，可能会比较麻烦，于是乎没有压下去好奇心；但时间久了，总会心里痒痒难耐，一询问，告知是<code>zsh</code>，google一波，然后就在Linux上面也给布置了一套，还选用一套自己喜欢的主题， 美滋滋；回家再自己的mac上面，今天也想着也给换上<code>zsh</code>；习惯统一。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102905596">macOS安装切换到zsh</a></li></ul><br><h2 id="zsh介绍："><a href="#zsh介绍：" class="headerlink" title="zsh介绍："></a>zsh介绍：</h2><p><strong>全名称：</strong><code>oh my zsh</code></p><p><strong>官网：</strong><a href="https://github.com/robbyrussell/oh-my-zsh">https://github.com/robbyrussell/oh-my-zsh</a> </p><p><strong>个人评价：</strong>相当于平行于<code>bash</code>的东西，或者是给加了一个漂亮的主题外壳，使用起来会看起来很舒服，且会有这很智能提示，当按下<code>Tab</code>按键后；主题很多，也可以喜欢自己搭配</p><p><strong>其他：</strong>或许有那种使用高级东西，尝试新鲜没有试过的工具，遇到一个喜欢的会很开心，在新人面前可以<del>秀一把</del>（显得专业）；<strong>最主要的自己使用的舒服，就会一直用下去，喜欢就好</strong></p><br><h2 id="检查是否已安装zsh："><a href="#检查是否已安装zsh：" class="headerlink" title="检查是否已安装zsh："></a>检查是否已安装zsh：</h2><ul><li>检查电脑是否有安装<code>zsh</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zsh</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到我的<code>MacOS 10.14.6 (18G103)</code>默认安装有的，其版本为<code>zsh 5.3 (x86_64-apple-darwin18.0)</code>;</p><ul><li>查看配置文件，在<code>~/.zshrc</code>是否存在；我使用<code>ls -a</code>查看，是没有的；于是<code>git clone</code>后，想着复制文件到<code>~/</code>下面， 但是经过下载之后， 发现里面并没有这个文件； 于是乎我决定自己重新安装（下图为重新安装<code>zsh</code>之后的截图）</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191104204548.png"/ loading="lazy"><br><h2 id="官网安装zsh"><a href="#官网安装zsh" class="headerlink" title="官网安装zsh:"></a>官网安装zsh:</h2><p>运行如下命令：随后需要按一次<code>回车</code>， 和一次<code>Y + 回车</code>；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装成功， 查看<code>~/.zshrc</code>配置文件;</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/20191104204427.png"/ loading="lazy"><br><h2 id="更换zsh主题："><a href="#更换zsh主题：" class="headerlink" title="更换zsh主题："></a>更换zsh主题：</h2><p>官方自带的100多个主题，可以直接预览 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a> ，其中博主比较喜欢的一款主题是<code>cloud</code>；</p><ul><li>使用<code>vim</code>编辑主题配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>将<code>ZSH_THEME=</code>设置为你喜欢的主题名称后， 保存退出；<strong>重启终端，即可见到主题切换成功</strong></p><blockquote><p>ZSH_THEME=”robbyrussell”  修改为 ZSH_THEME=”cloud “</p></blockquote></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-04_20-57-22_mark.png"/ loading="lazy"><br><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p>没有切换之前的<code>bash</code>效果，感觉前缀太长：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-04_21-03-47_mark.png"/ loading="lazy"><p>切换后，当进入到含有<code>.git</code>的文件夹中，若是文件有修改或增加部分，但是没有<code>git stash</code>或者<code>git add .</code>里面的时候，是会有一个闪电提示；且时刻会一个小的<code>[branch]</code>当前分支的提醒，很是简介，但我想要的信息都给显示出来了，</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/blog-imange/img/Snipaste_2019-11-04_20-51-37_mark.png"/ loading="lazy"><br><h2 id="查看zsh安装位置"><a href="#查看zsh安装位置" class="headerlink" title="查看zsh安装位置:"></a>查看zsh安装位置:</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会发现安装是在<code>/bin/zsh</code>里面的；所以下面的理解</p><br><h2 id="从bash切换到zsh："><a href="#从bash切换到zsh：" class="headerlink" title="从bash切换到zsh："></a>从bash切换到zsh：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="从zsh切换到bash："><a href="#从zsh切换到bash：" class="headerlink" title="从zsh切换到bash："></a>从zsh切换到bash：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS执行npm install -g hexo-cli失败的解决方法</title>
      <link href="posts/e8ddf53b/"/>
      <url>posts/e8ddf53b/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  按照官网安装<code>hexo</code>的教程命令；执行命令<code>npm install -g hexo-cli</code>时候， <strong>报错</strong>如下的解决方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/local/lib/node_modules/hexo-cli<span class="token function">npm</span> WARN checkPermissions Missing <span class="token function">write</span> access to /usr/local/lib/node_modules/hexo-cli/node_modules/chokidar<span class="token function">npm</span> ERR<span class="token operator">!</span> code EACCES<span class="token function">npm</span> ERR<span class="token operator">!</span> syscall access<span class="token function">npm</span> ERR<span class="token operator">!</span> path /usr/local/lib/node_modules/hexo-cli<span class="token function">npm</span> ERR<span class="token operator">!</span> errno -13<span class="token function">npm</span> ERR<span class="token operator">!</span> Error: EACCES: permission denied, access <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span><span class="token function">npm</span> ERR<span class="token operator">!</span>  <span class="token punctuation">[</span>Error: EACCES: permission denied, access <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token function">npm</span> ERR<span class="token operator">!</span>   stack: <span class="token string">"Error: EACCES: permission denied, access '/usr/local/lib/node_modules/hexo-cli'"</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   errno: -13,<span class="token function">npm</span> ERR<span class="token operator">!</span>   code: <span class="token string">'EACCES'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   syscall: <span class="token string">'access'</span>,<span class="token function">npm</span> ERR<span class="token operator">!</span>   path: <span class="token string">'/usr/local/lib/node_modules/hexo-cli'</span><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token punctuation">&#125;</span><span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> The operation was rejected by your operating system.<span class="token function">npm</span> ERR<span class="token operator">!</span> It is likely you <span class="token keyword">do</span> not have the permissions to access this <span class="token function">file</span> as the current user<span class="token function">npm</span> ERR<span class="token operator">!</span> <span class="token function">npm</span> ERR<span class="token operator">!</span> If you believe this might be a permissions issue, please double-check the<span class="token function">npm</span> ERR<span class="token operator">!</span> permissions of the <span class="token function">file</span> and its containing directories, or try running<span class="token function">npm</span> ERR<span class="token operator">!</span> the <span class="token builtin class-name">command</span> again as root/Administrator.<span class="token function">npm</span> ERR<span class="token operator">!</span> A complete log of this run can be found in:<span class="token function">npm</span> ERR<span class="token operator">!</span>     /Users/yuanyi/.npm/_logs/2019-10-30T11_43_55_100Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102887721">macOS执行npm install -g hexo-cli失败的解决方法</a></li></ul><br><h2 id="安装背景："><a href="#安装背景：" class="headerlink" title="安装背景："></a>安装背景：</h2><p><code>hexo</code>官网：<a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p><p>使用<code>macOS10.14.6</code>安装<code>hexo</code>的时候，采用官方的命令：<code>npm install -g hexo-cli</code>,安装出现，如下错误；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/ss.png"/ loading="lazy"><br><h2 id="报错原因："><a href="#报错原因：" class="headerlink" title="报错原因："></a>报错原因：</h2><h3 id="错误一-通常是这个原因-："><a href="#错误一-通常是这个原因-：" class="headerlink" title="错误一(通常是这个原因)："></a>错误一(通常是这个原因)：</h3><ul><li><p>错误原因❎：没有使用管理员权限安装</p><p>  注意：<strong>需要注意的点</strong>: 在安装<code>hexo</code>时,不要用 <code>sudo</code> 命令.</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>  第一步,赋予目录权限:</p><p>  第二步，安装<code>hexo</code>：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span> /usr/local/lib/node_modules<span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="错误二："><a href="#错误二：" class="headerlink" title="错误二："></a>错误二：</h3><ul><li><p>错误原因❎：由于<code>npm</code>的官方镜像源在国外,而由于国内”众所周知的”的网络原因,访问默认的官方镜像源常常会出问题.我们可以更改为国内的镜像源来加速软件的安装.</p><h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4></li></ul><p>更换<code>npm</code>镜像源，根据众多网友推荐， 推荐使用<strong>taobao</strong>的镜像源：</p><p><strong>永久替换<code>npm</code>为<code>taobao</code>的方法:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>永久替换<code>npm</code>为<code>官方源</code>的方法:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看设置是的<code>npm</code>源否生效：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="提醒：使用淘宝源和使用官方源具有可能会请求失败，-这里推荐两种都尝试一下，根据自己的情况而定"><a href="#提醒：使用淘宝源和使用官方源具有可能会请求失败，-这里推荐两种都尝试一下，根据自己的情况而定" class="headerlink" title="提醒：使用淘宝源和使用官方源具有可能会请求失败， 这里推荐两种都尝试一下，根据自己的情况而定"></a>提醒：使用淘宝源和使用官方源具有可能会请求失败， 这里推荐两种都尝试一下，根据自己的情况而定</h4><p>结合上面，附上一张安装成功的图片（因为之前安装过， 所以如下）：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/Snipaste_2019-10-30_20-26-41_mark.png"/ loading="lazy"><br><h2 id="错误三："><a href="#错误三：" class="headerlink" title="错误三："></a>错误三：</h2><p>忘记是哪里看到的一篇文章，结合我自己的上一篇关于hexo安装的教程经验， 也的确示发现有可能是权限不足够，在macOS系统下， 运行需要添加sudo命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处解决方案三为以上两种方法均失败下， 可以一试； 原理还有很多不懂，望各网友见笑， 此处此文到此，权当一处记录，但倘若能够给你启发， 帮助到你， 我也是很高兴的。 朝闻道，夕可死！ 且学海无涯， 愿所见所闻有所记录，不曾叹叹息在此间走一遭；数风流人物， 不过百载，时间逝，仍然记几许？野草于群星，各自精彩，愿今后皆可以望</p><br><p>下面这一篇文章， 真的写的很棒，也很是清晰，相比网上的其他一大都是一抄十，十传百，百传遍全网；但是都是不符合，或者无法解决实际， 且没有说原因， 直接几个命令，令我痛惜， 下面放一篇比较精雕细琢的文章，花了心思写的，在此参考，表示感谢</p><p>参考文章：<a href="https://www.itfanr.cc/2017/10/27/problems-for-configuring-hexo-blog-in-mac/">Mac系统下配置Hexo博客运行环境遇到的问题</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS10.14.6下设置git命令自动补全</title>
      <link href="posts/3bf51f9f/"/>
      <url>posts/3bf51f9f/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  这周不久前， 更换了<code>MacBook Por</code>的本子，才上手不到一周， 越加喜爱此系统，且很多的喜欢也是要从<code>windows 10</code>上面迁移过来，包裹很多的习惯都是；在公司里面，因为是使用<code>Linux</code>系统，也经常使用<code>git</code>,在<code>macOS 10 .14.6</code>上面，发现git是自带的，都不用自己下载安装的，但是实际过程中却发现， 是没有代码补全功能的比如<code>git clo + Tab按键</code>不会自动变成<code>git clone</code>；本篇就是解决这个问题，</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102887559">macOS10.14.6下设置git命令自动补全</a></li></ul><br><h2 id="安装bash-completion"><a href="#安装bash-completion" class="headerlink" title="安装bash-completion:"></a>安装bash-completion:</h2><p>打开终端，运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> bash-completion<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/Snipaste_2019-10-30_19-18-21_mark.png"/ loading="lazy"><br><h2 id="编辑-bash-profile"><a href="#编辑-bash-profile" class="headerlink" title="编辑~/.bash_profile:"></a>编辑~/.bash_profile:</h2><p>运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bash_profile <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件结尾处添加如下代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token variable"><span class="token variable">$(</span>brew --prefix<span class="token variable">)</span></span>/etc/bash_completion <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">.</span> <span class="token variable"><span class="token variable">$(</span>brew --prefix<span class="token variable">)</span></span>/etc/bash_completion<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/Snipaste_2019-10-30_19-19-01_mark.png"/ loading="lazy"><br><h2 id="安装git-completion-bash"><a href="#安装git-completion-bash" class="headerlink" title="安装git-completion.bash:"></a>安装git-completion.bash:</h2><p>运行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span>brew --prefix<span class="token variable">)</span></span>/etc/bash_completion.d<span class="token function">curl</span> -L -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash<span class="token function">chmod</span> a+x git-completion.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/Snipaste_2019-10-30_19-22-03_mark.png"/ loading="lazy"><br><h2 id="重启终端："><a href="#重启终端：" class="headerlink" title="重启终端："></a>重启终端：</h2><p>重启终端之后， 使用 <code>git</code> + <code>Tab按键</code>, 即可有补全命令功能</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/Snipaste_2019-10-30_19-25-47_mark.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>doxygen添加枚举在生成的文档里面显示</title>
      <link href="posts/53427761/"/>
      <url>posts/53427761/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  类里面有着<strong>枚举</strong>；想要在生成的文件<code>html</code>文件可以直接预览</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102809718">doxygen添加枚举在生成的文档里面显示</a></li></ul><br><p>在类里面有<strong>枚举</strong>数值, 但是需要在生成html里面显示出来; 其中类里面的枚举如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">DFloatingMessage</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">DFloatingWidget</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">enum</span> <span class="token class-name">MessageType</span> <span class="token punctuation">&#123;</span>        TransientType<span class="token punctuation">,</span>  <span class="token comment">//临时的消息</span>        ResidentType    <span class="token comment">//常驻的消息</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对应的项目工程中, 可以写下如下的注释代码:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * * \~chinese \enum DFloatingMessage::MessageType * \~chinese DFloatingMessage::MessageType 定义了 DFloatingMessage 通知类型 * \~chinese \var DFloatingMessage:MessageType DFloatingMessage::TransientType * \~chinese 临时的消息 * \~chinese \var DDFloatingMessage:MessageType DFloatingMessage::ResidentType * \~chinese 常驻的消息 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的效果图如下:</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/20191029220402.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Doxygen </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>doxygen生成截图和注释图片在文档里面查看</title>
      <link href="posts/9bb474b0/"/>
      <url>posts/9bb474b0/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在生成的文件<code>html</code>文件可以直接预览到插入的截图图片可以被查看，且手写的注释文档图片也可以被查看</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="添加注释型图片"><a href="#添加注释型图片" class="headerlink" title="添加注释型图片:"></a>添加注释型图片:</h3><p>添加的代码注释如下:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!* \~chinese \class QTest* \~chinese \brief 在此处描述这个类的详细介绍** \~chinese \htmlonly* &lt;pre style="font-family: FreeMono, Consolas, Menlo, 'Noto Mono', 'Courier New', Courier, monospace;line-height: 100%;">* 　　　┏┓　　　┏┓* 　　┏┛┻━━━┛┻┓* 　　┃　　　　　　　 ┃* 　　┃　　　━　　　 ┃* 　　┃　＞　　　＜┃* 　　┃　　　　　　　 ┃* 　　┃ . ⌒　..┃* 　　┃　　　　　　　 ┃* 　　┗━┓　　　┏━┛* 　　　　┃　　　┃　Codes are far away from bugs with the animal protecting* 　　　　┃　　　┃ 神兽保佑,代码无bug* 　　　　┃　　　┃* 　　　　┃　　　┃* 　　　　┃　　　┃* 　　　　┃　　　┃* 　　　　┃　　　┗━━━┓* 　　　　┃　　　　　　　┣┓* 　　　　┃　　　　　　　┏┛* 　　　　┗┓┓┏━┳┓┏┛* 　　　　　┃┫┫　┃┫┫* 　　　　　┗┻┛　┗┻┛* &lt;/pre>* \endhtmlonly* \~chinese 这里什么都不想写.... know, 且和你说, 写代码注释很容易犯困*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果图片</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/20191029215730.png"/ loading="lazy"><br><h3 id="添加真实型图片"><a href="#添加真实型图片" class="headerlink" title="添加真实型图片:"></a>添加真实型图片:</h3><ul><li>修改<code>Doxyfile</code>文件, 将存放图片的路径添加到<code>IMAGE_PATH = </code> 后面</li></ul><p>添加放入图片的路径; 若是存放父路径 “./doc” 也可以;  向下遍历查询到放的图片. 这里的路径是你存放静态图片的路径,  博主为”当前工程项目/doc/images”这个路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">IMAGE_PATH             <span class="token operator">=</span> ./doc/images <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在工程项目里面,  具体的<code>*.cpp</code> 文件里面, 添加符合(doxygen)规范的注释,  便于生成</li></ul><p>实际用法:</p><blockquote><p>cd doc/image<br>用法: image htmp 图片.png</p></blockquote><p>eg:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \~chinese \class QTest * \~chinese \brief 这是一个演示的类的详细描述 * \chiinese \image html gril.png */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后执行生成文件即可,  查看预览效果</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img2/20191029215808.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Doxygen </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>doxygen介绍和安装和在Linux下使用</title>
      <link href="posts/5350627/"/>
      <url>posts/5350627/</url>
      
        <content type="html"><![CDATA[<p>　　<strong>简  述：</strong>  <code>Doxygen</code>是一个程序的文档产生工具，可以将程序中的注释转换成说明文档或者说是API参考手册，从而减少程序员整理文档的时间。当然这里程序中的注释需要遵循一定的规则书写，才能让<code>Doxygen</code>识别和转化。</p><p>目前<code>Doxygen</code>可处理的程序语言包含<code>C/C++</code>、<code>Java</code>、<code>Objective-C</code>、<code>IDL</code>等，可产生出来的文档格式有<code>HTML</code>、<code>XML</code>、<code>LaTeX</code>、<code>RTF</code>等，此外还可衍生出不少其它格式，如<code>HTML</code>可以打包成<code>CHM</code>格式，而<code>LaTeX</code>可以通过一些工具产生出<code>PS</code>或是<code>PDF</code>文档等。</p><p>即: 通过代码里面的注释,生成<code>html</code> 或 <code>chm</code>这一类的手册说明,极其类似于qt帮助文档</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102809157">doxygen介绍和安装和在Linux下使用</a></li></ul><br><h2 id="下载doxygen"><a href="#下载doxygen" class="headerlink" title="下载doxygen:"></a>下载doxygen:</h2><p>官网: <a href="http://www.doxygen.nl/download.html">http://www.doxygen.nl/download.html</a></p><p>支持<strong>Windows</strong>/<strong>macOS</strong>/<strong>Linux</strong>平台(简直就是好人)</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191029213518.png"/ loading="lazy"><br><h2 id="Linux下使用dexygen生成文档"><a href="#Linux下使用dexygen生成文档" class="headerlink" title="Linux下使用dexygen生成文档:"></a>Linux下使用dexygen生成文档:</h2><p>这里在<code>deepin v20( Linux) </code>演示:</p><ul><li>安装命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> doxygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>截止到我安装的时候, 最新的版本是<strong>1.8.13</strong> (2019-10-29官网Linux版下载)</li><li>进入到工程项目文件夹下<code>~/projects/dtkwidget</code>, 使用如下命令生成<code>Doxyfile</code>文件(这是一个配置文件)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen -g      //生成带详细注释的Doxyfile文件 约2120行//或doxygen -s -g   //生成不带详细注释的Doxyfile文件  约374行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>编辑使用<code>vim</code>编辑如下的<code>Doxyfile</code>文件;  其中这几点必须修改, 不然可能和预期的效果不一样<blockquote><p>//必须要填写:<br>OUTPUT_DIRECTORY       =/home/yuanyi/projects/out     //输出存放文档的路径<br>RECURSIVE                           = YES                          //文件递归,包括子文件也要输出为文档<br>IMAGE_PATH                        = ./doc/images      //若是想要文档里面插入图片,需要存放图片路径</p><p>//推荐修改<br>PROJECT_NAME                 = “My Project”               //生成文档的名称<br>OUTPUT_LANGUAGE        = Chinese                          //生成文档为中/英文  English<br>PROJECT_NUMBER           =1.0.0                                //项目文档的版本号码</p></blockquote></li><li>生成的<code>Doxyfile</code>文件是必须放在工程项目的根目录下<code>~/[projects/dtkwidget](file:///home/yuanyi/projects/dtkwidget)</code>,默认也是生成在这里的<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── dtkwidget    ├── <span class="token punctuation">..</span>.很多文件及文件夹    ├── doc    ├── Doxyfile    ├── LICENSE    └── README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在项目里面,  添加符合doxygen规则的代码注释,  便于生成文档</li><li>运行命令生成文档的<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen     //默认是等价于下面的doxygen Doxyfile,也可执行自定义Doxyfile文件//或doxygen Doxyfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>到输出目录查看生成的<code>html</code>文件夹,使用浏览器打开<code>index.html</code>文件,  其像动态网站一样,  帮助你早日熟悉项目工程的结构</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191029213442.png"/ loading="lazy"><br><h2 id="生成其他格式如chm和注意"><a href="#生成其他格式如chm和注意" class="headerlink" title="生成其他格式如chm和注意:"></a>生成其他格式如chm和注意:</h2><p>这里是可以很多其他格式的, 一些常用的设置,  参考下图:</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191029213604.png"/ loading="lazy"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是制作 C 程序文档，该选项必须设为 YES，否则默认生成 C++ 文档格式</span>OPTIMIZE_OUTPUT_FOR_C  <span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Doxygen </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在macOS 10.14的虚拟机VMware Fusionlimian里面安装deepin15.11（Linux）</title>
      <link href="posts/129bf9f1/"/>
      <url>posts/129bf9f1/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  在<code>macOS 10.14.6 (18G103)</code> 的虚拟机<code> VMware Fusionlimian</code> 里面安装<code>deepin v15.11</code>。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102789047">在macOS 10.14的虚拟机VMware Fusionlimian里面安装deepin15.11（Linux）</a></li></ul><br><h2 id="下载镜像："><a href="#下载镜像：" class="headerlink" title="下载镜像："></a>下载镜像：</h2><p>破解<code> VMware Fusionlimian</code>下载：<a href="https://xclient.info/s/vmware-fusion.html">VMware Fusion Pro 11.5.0 强大的虚拟机应用</a></p><p>官方<code>deepin</code>镜像下载：<a href="https://www.deepin.org/download/">https://www.deepin.org/download/</a></p><p>不过鉴于<code>deepin</code>的服务器是在国外， 推荐（在官方网页上）使用选择 <code>ios仓库 - 清华大学 http  </code>提供的镜像下载；也可以直接选择链接：<a href="https://www.deepin.org/mirrors/releases/">https://www.deepin.org/mirrors/releases</a></p><br><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><ul><li>打开虚拟机<code> VMware Fusionlimian</code>：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028194117.png"/ loading="lazy"><ul><li>选择悬着安装介质<code>从光盘裹着映像中安装</code></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193511.png"/ loading="lazy"><ul><li>打开访达（文件资源管理器），选中前面下载的<strong>deepin</strong>的 <strong>.ios</strong>镜像</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193720.png"/ loading="lazy"><ul><li>选择操作系统，我其他一台机器使用<strong>deepin v20</strong>查了一下， 还没有发布的<strong>deepin20</strong>是基于<code>Debian 8.x </code>的操作系统，所以这里我选择的这个</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193738.png"/ loading="lazy"><ul><li>选择默认启动方<code>传统BIOS</code>：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193755.png"/ loading="lazy"><ul><li>选择所需要的语言<code>简体中文</code>， 有英文需求也可以选择英文；国人开发的，翻译还是很到位的</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193901.png"/ loading="lazy"><ul><li>直接点击继续，后期系统安装完成了， 配置和硬盘空间不够，也是可以扩展（处于关闭状态才能更改）</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193911.png"/ loading="lazy"><ul><li>等待中间的安装过程（这期间会内置安装一些常用的软件，google浏览器，网易云音乐等，搜狗输入法）；是的你开机即可使用</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193945.png"/ loading="lazy"><ul><li>提示安装成功</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028193953.png"/ loading="lazy"><ul><li>开始享受这个新的Linux系统， 带给你清爽，专注于注意力和好看的系统的不一样享受</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191028194007.png"/ loading="lazy"><br><h2 id="其他软件下载："><a href="#其他软件下载：" class="headerlink" title="其他软件下载："></a>其他软件下载：</h2><p>若是还有一些其他的软件需要自己下载， 直接在在系统商店下载安装即可；若是开发人员， 可以自己来，我再说也是就有点废话了</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架hexo从win10迁移到新的电脑macOS10.14.6，重新设置环境变量</title>
      <link href="posts/b331566b/"/>
      <url>posts/b331566b/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> <strong>将我自己的博客框架<code>hexo</code>从<code>win10</code>迁移到新的电脑<code>macOS10.14.6</code>，重新设置环境变量，以便后面更好继续的写博客；</strong>之前一直都是在win10上面工作和写任务，现在前移到了macOS环境，所以以前的所有环境（IDE、图床、github本地用户配置、vim颜色配置、hexo命令等）的这些个环境变量等等，都是需要我自己来重新配置；还有很多软件都是重新寻找替代品；习惯也都是需要在新的系统（向往一个好看的Linux/Uinx环境已经很久了）来适应的；讲真，想用苹果的MacOS已经很久，之前只是在虚拟机感受体验一下过， 界面很好看，但是黑苹果毕竟体验不佳（没有预料的如丝绸一般的体验），这不，新的MacBook Pro 13到手，就迁移新机；嘿嘿;</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102750585">框架hexo从win10迁移到新的电脑macOS10.14.6，重新设置环境变量</a></li></ul><br><h2 id="当前背景："><a href="#当前背景：" class="headerlink" title="当前背景："></a>当前背景：</h2><p>之前一直是在<code>win10</code>上面，发布和维护我的博客<a href="https://touwoyimuli.github.io/">https://touwoyimuli.github.io</a> ，其中<code>hexo</code>工具命令，这会直接将整个文件夹（主要是<code>*.md</code>文件）拷贝过来了；现在需要的就是，参考以前的文章，将<code>hexo</code>在<code>macOS</code>上面再次安装一下，以及一些插件等等，阿西吧！想着就头疼（安装好了，以后用新笔记本写博客，也一定是爽歪歪~），全部就当是复习一遍咯，<strong>系统版本是win10迁移到macOS10.14.6</strong></p><br><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js:"></a>安装node.js:</h2><p>Node.js的官网：<a href="https://nodejs.org/en/">https://nodejs.org/en</a> ,可以自行下载，推荐下载LTS（长期支持版本）版本；截止2019-10-24 22:55时刻，作者官网最新的LTS下载的版本是12.13.0；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191024235102.png"/ loading="lazy"><br><h2 id="安装git："><a href="#安装git：" class="headerlink" title="安装git："></a>安装git：</h2><p>貌似macOS是自带的git，不过这里还是查询一下node.js是否安装成功，以及git的版本号；</p><p>若是没有安装git话，可以自己去git官网下载安装：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191024235547.png"/ loading="lazy"><br><h2 id="安装Hexo框架："><a href="#安装Hexo框架：" class="headerlink" title="安装Hexo框架："></a>安装Hexo框架：</h2><p>先检查一下，本机器有没有安装hexo，确认一番；再上述两个都安装好了之后，即可以安装<code>nmp</code>，来安装<code>Hexo</code>的安装。(推荐开启全局代理，速度更快运行以下命令)</p><p>使用官方<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs</a>的推荐命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 使用官方命令安装，却发现一直会安装失败？？？出现如下错误提示。。。这是么样个烫饭？？？待我google一番，再回来，哼哼~，报错如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191025004530.png"/ loading="lazy"><p>实际过程中，会直接编译失败，通过参考<a href="https://www.itfanr.cc/2017/10/27/problems-for-configuring-hexo-blog-in-mac/">Mac系统下配置Hexo博客运行环境遇到的问题</a>一篇，虽然没有得到针对我的没有起效，但是却有启发我；<strong>最终在先尝试解决方法一无效之后，感悟出了解决方法二，安装成功。</strong> 在此，仍然把两种方法都再写此处，万一有一种可以适合你捏~</p><br><h3 id="解决方法一（会继续报其它报错，失败）："><a href="#解决方法一（会继续报其它报错，失败）：" class="headerlink" title="解决方法一（会继续报其它报错，失败）："></a>解决方法一（会继续报其它报错，失败）：</h3><ul><li>第一步,赋予目录权限:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span> /usr/local/lib/node_modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第二步,安装hexo:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>需要注意的点</strong>: 在安装hexo时,不要用 <code>sudo</code> 命令.</p><p>安装过程会报其他<code>ERROR</code>：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191025004349.png"/ loading="lazy"><br><h3 id="解决方法二-成功安装-："><a href="#解决方法二-成功安装-：" class="headerlink" title="解决方法二(成功安装)："></a>解决方法二(成功安装)：</h3><p>或许是方法一有了铺垫吧（开启了第一个文件路径夹得权限）？，当我尝试运行如下命令时候(反着来方法一)，却安装成功了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191025004615.png"/ loading="lazy"><br><h2 id="验证迁移成功："><a href="#验证迁移成功：" class="headerlink" title="验证迁移成功："></a>验证迁移成功：</h2><p>终端进入到自己的文件夹下面的路径下，运行熟悉的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>cao,怎么没有成功，看了一眼报错error没想起来，应该是里面的配置数据没有修改（运行推送到github.io仓库）的秘钥不正确（实际不是，原因见下）；大概是如此吧。不过这之前，还是先查查看；我再去改改；报错如下：</p><h3 id="node-sass报错拦路虎："><a href="#node-sass报错拦路虎：" class="headerlink" title="node-sass报错拦路虎："></a>node-sass报错拦路虎：</h3><blockquote><p>Error: Missing binding /Users/yuanyi/touwoyimulier/node_modules/node-sass/vendor/darwin-x64-72/binding.node</p><p>Node Sass could not find a binding for your current environment: OS X 64-bit with Node.js 12.x</p><p>Found bindings for the following environments:</p><p>- Windows 64-bit with Node.js 10.x</p><p>This usually happens because your environment has changed since running <code>npm install</code>.</p><p>Run <code>npm rebuild node-sass</code> to download the binding for your current environment.</p><p>at module.exports (/Users/yuanyi/touwoyimulier/node_modules/node-sass/lib/binding.js:15:13)</p><p>at Object.<anonymous> (/Users/yuanyi/touwoyimulier/node_modules/node-sass/lib/index.js:14:35)</p></blockquote><h3 id="node-sass解决参考："><a href="#node-sass解决参考：" class="headerlink" title="node-sass解决参考："></a>node-sass解决参考：</h3><p><strong>解决方法</strong>(对我无效，只能另寻它法)：</p><ul><li><p>删除<code>/Users/yuanyi/touwoyimulier/node_modules/</code>下面的<code>node-sass</code>文件夹</p></li><li><p>运行命令:</p></li><li><p>```bash<br>  npm i node-sass</p>  <pre class="line-numbers language-none"><code class="language-none">这个等待的时间有点长，起码二十分钟，进度条才走了20%的样子;其那面的卡住时间比较长，后面会很快（相对而言）；意意识到可能是网络原因，下载和上传都为速度为1~2KB&#x2F;S，开了代理，也试过全局，干其他下载都没有问题，就只这个命令运行好慢，好晚了，先去睡觉，明天一早看结果，或者后面再试试; 我搽，运行结束了，但是报错了。。。。。。难过。。。。然后又参考了文末的一些参考文章，柑橘是最后一篇的这来两句命令产生了效果(最后一句产生了效果)；因为运行的其他的，全部都失产生了各种各样的错误，**但是总结下来，应该&#96;npm&#96;和&#96;node-sass&#96;这两个鬼东西没有安装好**吧。**若是你也一样， 可以尝试运行下面这些命令（试一下加上&#96;sudo&#96;，或许会OK）；**&#x2F;&#x2F;半夜02：37更新：因为我还没睡(明天还要上班),晕### node-sass解决成功：#### 以下为最后成功的解决方法全过程：我依次运行如下命令，供大家参考，也给自己一个日后查看：- 运行&#96;hexo clean&#96;报错：    &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;touwoyimuli&#x2F;FigureBed&#x2F;dev&#x2F;img&#x2F;20191025021732.png&quot;&#x2F;&gt;- 运行&#96;hexo -v&#96;，报错：&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;touwoyimuli&#x2F;FigureBed&#x2F;dev&#x2F;img&#x2F;20191025021958.png&quot;&#x2F;&gt;- 运行&#96;cd &#x2F;Users&#x2F;yuanyi&#x2F;touwoyimulier&#x2F;node_modules&#96;和&#96;ls&#96;,查看和想要删除&#96;node-sass&#96;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;touwoyimuli&#x2F;FigureBed&#x2F;dev&#x2F;img&#x2F;20191025022240.png&quot;&#x2F;&gt;- 卸载&#96;npm uninstall node-sass&#96;,报错，和错误提示的最后几行，没有提示怎么做？比如修复代码&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;touwoyimuli&#x2F;FigureBed&#x2F;dev&#x2F;img&#x2F;20191025022417.png&quot;&#x2F;&gt;- 运行&#96;npm i node-sass --sass_binary_site&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass&#x2F;&#96;（**对的，就是这一句，运行成功了）**,再碰碰运气。&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;touwoyimuli&#x2F;FigureBed&#x2F;dev&#x2F;img&#x2F;20191025023004.png&quot;&#x2F;&gt;- 去github看一下，确认一下，是彻底成功了；但是github没有那个绿色的小方块格子，应该是没有本地&#96;.git&#96;文件夹，还是用的以前的配置，所以不算贡献，后面有空初始化，再配置一下下；就完美了&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;touwoyimuli&#x2F;FigureBed&#x2F;dev&#x2F;img&#x2F;20191025023420.png&quot;&#x2F;&gt;&lt;br&gt;#### 最后解决方法，此处小结一下：&#96;&#96;&#96;bashnpm uninstall node-sassnpm i node-sass --sass_binary_site&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass&#x2F;  （应该是这句成功了）npm audit fix     &#x2F;&#x2F;再修复一下hexo clean        &#x2F;&#x2F;清理缓存hexo g -d         &#x2F;&#x2F;发布到github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><br><p><strong>参考博文</strong>：</p><ul><li><a href="%5Bhttps://touwoyimuli.github.io/2019/06/29/hexo%E5%8D%9A%E5%AE%A2-Maupassant%E4%B8%BB%E9%A2%98-%E6%97%A7%E7%94%B5%E8%84%91%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/%5D(https://touwoyimuli.github.io/2019/06/29/hexo%E5%8D%9A%E5%AE%A2-Maupassant%E4%B8%BB%E9%A2%98-%E6%97%A7%E7%94%B5%E8%84%91%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/)">hexo博客 Maupassant主题 旧电脑迁移到新电脑</a> (win10-&gt;win10)自己参考自己的文章哈哈哈哈哈哈哈</li><li><a href="https://www.itfanr.cc/2017/10/27/problems-for-configuring-hexo-blog-in-mac/">Mac系统下配置Hexo博客运行环境遇到的问题</a> </li><li><a href="http://www.is17.com/96/">nodejs8.x hexo-renderer-sass报错解决方法</a></li><li><a href="https://www.fangr.cc/2017/09/27/hexo-workflow.html">博客迁移到 Hexo 遇到的一些问题 | Hexo</a></li><li><a href="https://segmentfault.com/a/1190000010984731">整理 node-sass 安装失败的原因及解决办法</a> (重点参考)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关联macOS10.14.6的git本地环境和自己的github仓库</title>
      <link href="posts/f879ecd2/"/>
      <url>posts/f879ecd2/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  关联<code>macOS10.14.16</code>的<code>git</code>本地环境和自己的<code>github</code>仓库,出现<code>Key is invalid. You must supply a key in OpenSSH public key format</code>的解决方法。是因为vim复制出来的格式有问题导致</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="macOS配置git，在github生成ssh"><a href="#macOS配置git，在github生成ssh" class="headerlink" title="macOS配置git，在github生成ssh:"></a>macOS配置git，在github生成ssh:</h2><p><strong>编程环境：</strong> <code>macOS 10.14.6</code>, 在此出记录一个坑；</p><p>步骤按照之前写的这篇教程来<a href="%5Bhttps://touwoyimuli.github.io/2019/08/25/%E5%85%B3%E8%81%94windows%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%92%8C%E8%87%AA%E5%B7%B1%E7%9A%84github%E4%BB%93%E5%BA%93/%5D(https://touwoyimuli.github.io/2019/08/25/%E5%85%B3%E8%81%94windows%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E5%92%8C%E8%87%AA%E5%B7%B1%E7%9A%84github%E4%BB%93%E5%BA%93/)">关联windows10的git本地环境和自己的github仓库</a> 来进行配置，其中在本地生成秘钥的时候，复制到github的时候，采用的<code>vim</code>打开文件 <code>vim ~/.ssh/id_rsa.pub</code>, 来进行复制到new ssh里面， 但是出现了如下错误信息：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/dev/img/20191025222414.png"/ loading="lazy"><blockquote><p>Key is invalid. You must supply a key in OpenSSH public key format</p></blockquote><br><h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><p>使用<code>vim</code>复制出来，会发生格式变化，所以会一直不成功；</p><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>使用其他任意的文本编辑器， 打开这个隐藏文件夹下面的文件， 然后进行复制出来，粘贴到github即可成功。</p><ul><li><code>Command+Shift+.</code> 可以显示隐藏文件、文件夹，再按一次，恢复隐藏；</li><li>finder下使用<code>Command+Shift+G</code> 可以前往任何文件夹，包括隐藏文件夹。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v2ray官网客户端</title>
      <link href="posts/3448f0ff/"/>
      <url>posts/3448f0ff/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  <code>v2ray</code>官网客户端：<a href="https://v2ray.com/">https://v2ray.com</a> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>摘抄于【v2ray官网】<a href="https://www.v2ray.com/awesome/tools.html">https://www.v2ray.com/awesome/tools.html</a><br>摘抄时间：2019-10-15  09:17</p><p>神一样的工具们图形客户端</p><br><h2 id="windows："><a href="#windows：" class="headerlink" title="windows："></a>windows：</h2><h3 id="V2RayW"><a href="#V2RayW" class="headerlink" title="V2RayW"></a>V2RayW</h3><p>V2RayW 是一个基于 V2Ray 内核的 Windows 客户端。用户可以通过界面生成配置文件，并且可以手动更新 V2Ray 内核。<br>下载：<a href="https://github.com/Cenmrev/V2RayW">https://github.com/Cenmrev/V2RayW</a></p><h3 id="V2RayN"><a href="#V2RayN" class="headerlink" title="V2RayN"></a>V2RayN</h3><p>V2RayN 是一个基于 V2Ray 内核的 Windows 客户端。<br>下载：<a href="https://github.com/2dust/v2rayN">https://github.com/2dust/v2rayN</a></p><h3 id="V2RayS"><a href="#V2RayS" class="headerlink" title="V2RayS"></a>V2RayS</h3><p>下载：<a href="https://github.com/Shinlor/V2RayS">https://github.com/Shinlor/V2RayS</a></p><p>Clash for Windows<br>下载：<a href="https://github.com/Fndroid/clash_for_windows_pkg">https://github.com/Fndroid/clash_for_windows_pkg</a></p><br><h2 id="MacOS："><a href="#MacOS：" class="headerlink" title="MacOS："></a>MacOS：</h2><h3 id="V2RayX"><a href="#V2RayX" class="headerlink" title="V2RayX"></a>V2RayX</h3><p>V2RayX 是一个基于 V2Ray 内核的 Mac OS X 客户端。用户可以通过界面生成配置文件，并且可以手动更新 V2Ray 内核。V2RayX 还可以配置系统代理。<br>下载：<a href="https://github.com/Cenmrev/V2RayX">https://github.com/Cenmrev/V2RayX</a></p><h3 id="V2RayU"><a href="#V2RayU" class="headerlink" title="V2RayU"></a>V2RayU</h3><p>V2rayU,基于v2ray核心的mac版客户端,界面友好,使用swift4.2编写,支持vmess,shadowsocks,socks5等服务协议,支持订阅, 支持二维码,剪贴板导入,手动配置,二维码分享等。<br>下载：<a href="https://github.com/yanue/V2rayU">https://github.com/yanue/V2rayU</a></p><h3 id="V2RayC"><a href="#V2RayC" class="headerlink" title="V2RayC"></a>V2RayC</h3><p>下载：<a href="https://github.com/gssdromen/V2RayC">https://github.com/gssdromen/V2RayC</a></p><h3 id="ClashX"><a href="#ClashX" class="headerlink" title="ClashX"></a>ClashX</h3><p>下载：<a href="https://github.com/yichengchen/clashX">https://github.com/yichengchen/clashX</a></p><br><h2 id="windows-MacOS-Linux："><a href="#windows-MacOS-Linux：" class="headerlink" title="windows/MacOS/Linux："></a>windows/MacOS/Linux：</h2><h3 id="Qv2ray"><a href="#Qv2ray" class="headerlink" title="Qv2ray"></a>Qv2ray</h3><p>Qv2ray：使用 Qt 编写的 v2ray 跨平台 GUI （MacOS, Windows, Linux）支持连接导入和编辑，中英文切换<br>下载：<a href="https://github.com/lhy0403/Qv2ray">https://github.com/lhy0403/Qv2ray</a><br>官网：<a href="https://lhy0403.github.io/Qv2ray">https://lhy0403.github.io/Qv2ray</a></p><br><h2 id="ios-Android："><a href="#ios-Android：" class="headerlink" title="ios/Android："></a>ios/Android：</h2><h3 id="Kitsunebi"><a href="#Kitsunebi" class="headerlink" title="Kitsunebi"></a>Kitsunebi</h3><p>Kitsunebi 是一个基于 V2Ray 核心的移动平台应用 (iOS, Android)。它可以创建基于 VMess 或者 Shadowsocks 的 VPN 连接。Kitsunebi 支持导入和导出与 V2Ray 兼容的 JSON 配置。<br>由于使用 V2Ray 核心，Kitsunebi 几乎支持 V2Ray 的所有功能，比如 Mux 和 mKCP。<br>下载：<br>[iTunes:] <a href="https://itunes.apple.com/us/app/kitsunebi-proxy-utility/id1446584073?mt=8">https://itunes.apple.com/us/app/kitsunebi-proxy-utility/id1446584073?mt=8</a><br>[Play Store:] <a href="https://play.google.com/store/apps/details?id=fun.kitsunebi.kitsunebi4android&amp;hl=en_US">https://play.google.com/store/apps/details?id=fun.kitsunebi.kitsunebi4android&amp;hl=en_US</a></p><br><h2 id="ios："><a href="#ios：" class="headerlink" title="ios："></a>ios：</h2><h3 id="i2Ray"><a href="#i2Ray" class="headerlink" title="i2Ray"></a>i2Ray</h3><p>i2Ray 是另一款基于 V2Ray 核心的iOS应用。界面简洁易用，适合新手用户使用。同时兼容Shadowrocket和Quantumult格式的规则导入。<br>下载：<a href="https://apps.apple.com/us/app/i2ray/id1445270056">https://apps.apple.com/us/app/i2ray/id1445270056</a></p><h3 id="Shadowrocket"><a href="#Shadowrocket" class="headerlink" title="Shadowrocket"></a>Shadowrocket</h3><p>Shadowrocket 是一个通用的 iOS VPN 应用，它支持众多协议，如 Shadowsocks、VMess、SSR 等。<br>下载：<a href="https://apps.apple.com/us/app/shadowrocket/id932747118">https://apps.apple.com/us/app/shadowrocket/id932747118</a></p><h3 id="Pepi（原名ShadowRay）"><a href="#Pepi（原名ShadowRay）" class="headerlink" title="Pepi（原名ShadowRay）"></a>Pepi（原名ShadowRay）</h3><p>Pepi 是一个兼容 V2Ray 的 iOS 应用，它可以创建基于 VMess 的 VPN 连接，并与 V2Ray 服务器通信。<br>下载：<a href="https://apps.apple.com/us/app/pepi/id1283082051">https://apps.apple.com/us/app/pepi/id1283082051</a></p><p>Quantumult<br>下载：<a href="https://apps.apple.com/us/app/quantumult/id1252015438">https://apps.apple.com/us/app/quantumult/id1252015438</a></p><br><h2 id="Android："><a href="#Android：" class="headerlink" title="Android："></a>Android：</h2><h3 id="BifrostV"><a href="#BifrostV" class="headerlink" title="BifrostV"></a>BifrostV</h3><p>BifrostV 是一个基于 V2Ray 内核的 Android 应用，它支持 VMess、Shadowsocks、Socks 协议。<br>下载：<br>Play Store:<a href="https://play.google.com/store/apps/details?id=com.github.dawndiy.bifrostv">https://play.google.com/store/apps/details?id=com.github.dawndiy.bifrostv</a><br>APK Pure:<a href="https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv">https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv</a></p><h3 id="V2RayNG"><a href="#V2RayNG" class="headerlink" title="V2RayNG"></a>V2RayNG</h3><p>V2RayNG 是一个基于 V2Ray 内核的 Android 应用，它可以创建基于 VMess 的 VPN 连接。<br>下载：<br>Play Store:<a href="https://play.google.com/store/apps/details?id=com.v2ray.ang">https://play.google.com/store/apps/details?id=com.v2ray.ang</a><br>GitHub:<a href="https://github.com/2dust/v2rayNG">https://github.com/2dust/v2rayNG</a></p><br><h2 id="在线工具-资源："><a href="#在线工具-资源：" class="headerlink" title="在线工具/资源："></a>在线工具/资源：</h2><h3 id="VeekXT-V2Ray配置生成"><a href="#VeekXT-V2Ray配置生成" class="headerlink" title="VeekXT V2Ray配置生成"></a>VeekXT V2Ray配置生成</h3><p>支持 4.x 版本的配置文件生成器 veekxt.com<br><a href="https://www.veekxt.com/utils/v2ray_gen">https://www.veekxt.com/utils/v2ray_gen</a></p><h3 id="V2Ray-配置生成器"><a href="#V2Ray-配置生成器" class="headerlink" title="V2Ray 配置生成器"></a>V2Ray 配置生成器</h3><p>静态 V2Ray 配置文件生成页面 GitHub<br><a href="https://github.com/htfy96/v2ray-config-gen">https://github.com/htfy96/v2ray-config-gen</a></p><p>UUID Generator<br>VMess User ID 生成工具 uuidgenerator.net<br><a href="https://www.uuidgenerator.net/">https://www.uuidgenerator.net/</a></p><p>vTemplate 项目仓库<br>一个 V2Ray 配置文件模板收集仓库 GitHub<br><a href="https://github.com/KiriKira/vTemplate">https://github.com/KiriKira/vTemplate</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 科学上网vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt官方编码Style</title>
      <link href="posts/a46fc447/"/>
      <url>posts/a46fc447/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  <code>Qt_Coding_Style</code>；<code>Qt</code>官方编码风格；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102568045">Qt官方编码Style</a></li></ul><br><h2 id="缩进："><a href="#缩进：" class="headerlink" title="缩进："></a>缩进：</h2><ul><li>4个空格用于缩进</li><li>空格，而不是制表符！</li></ul><br><h2 id="声明变量："><a href="#声明变量：" class="headerlink" title="声明变量："></a>声明变量：</h2><ul><li> 在单独的行中声明每个变量</li><li>避免使用简短或无意义的名称（例如“ a”，“ rbarr”，“ nughdeget”）</li><li>单字符变量名称仅适用于计数器和临时变量，其中变量的用途显而易见</li><li>在声明变量之前等待，直到需要它为止</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token keyword">char</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token operator">*</span>d<span class="token punctuation">;</span> <span class="token comment">// Correct</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span> <span class="token keyword">char</span> <span class="token operator">*</span>nameOfThis<span class="token punctuation">;</span> <span class="token keyword">char</span> <span class="token operator">*</span>nameOfThat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>变量和函数以小写字母开头。变量名称中的每个连续单词均以大写字母开头<br>避免缩写</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">short</span> Cntr<span class="token punctuation">;</span><span class="token keyword">char</span> ITEM_DELIM <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span class="token comment">// Correct</span><span class="token keyword">short</span> counter<span class="token punctuation">;</span><span class="token keyword">char</span> itemDelimiter <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类始终以大写字母开头。<code>Public classes</code> 以“ Q”（QRgb）开头，后跟一个大写字母。<code> Public functions</code>通常以“ q”（qRgb）开头。<br>首字母缩写使用驼峰式（例如QXmlStreamReader，而不是QXMLStreamReader）。</li></ul><br><h2 id="空格："><a href="#空格：" class="headerlink" title="空格："></a>空格：</h2><ul><li>使用空行将语句组合在一起</li><li>始终只使用一个空白行</li><li>始终在关键字之后和花括号前使用一个空格：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于指针或引用，请始终在类型和’<em>‘或’＆’之间使用单个空格，但在’</em>‘或’＆’与变量名称之间请勿使用空格：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>myString<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>带空格的二进制运算符</li><li>在每个逗号后留一个空格</li><li>投放后没有空间</li><li>尽可能避免使用C型转换</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">char</span><span class="token operator">*</span> blockOfMemory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Correct</span><span class="token keyword">char</span> <span class="token operator">*</span>blockOfMemory <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">malloc</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不要在一行上放置多个语句</li><li>通过扩展，对控制流语句的主体使用新行：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span>    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="大括号："><a href="#大括号：" class="headerlink" title="大括号："></a>大括号：</h2><ul><li>使用附带的括号：开头的括号与语句的开头在同一行。如果右括号后面紧跟着另一个关键字，则它也会进入同一行：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>codec<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>codec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例外：函数实现（但不包括lambdas）和类声明始终在行首处使用左括号：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"foo: %i"</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Moo</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>仅当条件语句的主体包含多行时才使用花括号：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"%i"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"%i"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例外1：如果父语句包含多行/自动换行，也请使用花括号：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">||</span> <span class="token operator">!</span>codec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例外2：花括号对称：在if-then-else块中，如果if代码或else代码覆盖几行，也要使用花括号：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token function">qPrintable</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    it<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"empty!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token function">qPrintable</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    it<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    …<span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        …<span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    …<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>        …<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件语句的主体为空时使用花括号</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Correct</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="括号："><a href="#括号：" class="headerlink" title="括号："></a>括号：</h2><ul><li>使用括号将表达式分组：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">||</span> c<span class="token punctuation">)</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">||</span> c<span class="token punctuation">)</span><span class="token comment">// Wrong</span>a <span class="token operator">+</span> b <span class="token operator">&amp;</span> c<span class="token comment">// Correct</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="切换语句："><a href="#切换语句：" class="headerlink" title="切换语句："></a>切换语句：</h2><ul><li><code>case</code>标签与开关在同一列中</li><li>每个<code>case</code>的末尾都必须有一个<code>break</code>（或<code>return</code>）语句，或者Q_FALLTHROUGH()用来表明没有故意的中断，除非立即发生另一<code>case</code>。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">switch</span> <span class="token punctuation">(</span>myEnum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> Value1<span class="token operator">:</span>  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> Value2<span class="token operator">:</span><span class="token keyword">case</span> Value3<span class="token operator">:</span>  <span class="token function">doSomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Q_FALLTHROUGH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>  <span class="token function">defaultHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="跳转语句（中断，继续，返回和跳转）："><a href="#跳转语句（中断，继续，返回和跳转）：" class="headerlink" title="跳转语句（中断，继续，返回和跳转）："></a>跳转语句（中断，继续，返回和跳转）：</h2><ul><li>不要在跳转语句后加上“ else”：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>thisOrThat<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">else</span>    <span class="token function">somethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>thisOrThat<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token function">somethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例外：如果代码本质上是对称的，则允许使用“ else”来可视化该对称性</li></ul><br><h2 id="换行："><a href="#换行：" class="headerlink" title="换行："></a>换行：</h2><ul><li>保持少于100个字符的行；必要时包裹</li><li>注释/ apidoc行应保留在实际文本的80列以下。适应周围的环境，并尝试以避免出现“锯齿状”段落的方式使文本流畅。</li><li>逗号放在换行符的末尾；运算符从新行的开头开始。如果编辑器太窄，则很容易错过该行末尾的运算符。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Wrong</span><span class="token keyword">if</span> <span class="token punctuation">(</span>longExpression <span class="token operator">+</span>    otherLongExpression <span class="token operator">+</span>    otherOtherLongExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Correct</span><span class="token keyword">if</span> <span class="token punctuation">(</span>longExpression    <span class="token operator">+</span> otherLongExpression    <span class="token operator">+</span> otherOtherLongExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="一般例外："><a href="#一般例外：" class="headerlink" title="一般例外："></a>一般例外：</h2><ul><li>当严格遵循规则会使您的代码看起来很糟糕时，请随意破坏它。</li><li>如果在任何给定的模块中存在争议，则维护者对接受的样式拥有最终决定权（根据Qt管治模型）。</li></ul><br><h2 id="艺术风格："><a href="#艺术风格：" class="headerlink" title="艺术风格："></a>艺术风格：</h2><ul><li>以下代码片段可以按艺术风格用于重新格式化代码。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">--</span>style<span class="token operator">=</span>kr <span class="token operator">--</span>indent<span class="token operator">=</span>spaces<span class="token operator">=</span><span class="token number">4</span> <span class="token operator">--</span>align<span class="token operator">-</span>pointer<span class="token operator">=</span>name <span class="token operator">--</span>align<span class="token operator">-</span>reference<span class="token operator">=</span>name <span class="token operator">--</span>convert<span class="token operator">-</span>tabs <span class="token operator">--</span>attach<span class="token operator">-</span>namespaces<span class="token operator">--</span>max<span class="token operator">-</span>code<span class="token operator">-</span>length<span class="token operator">=</span><span class="token number">100</span> <span class="token operator">--</span>max<span class="token operator">-</span>instatement<span class="token operator">-</span>indent<span class="token operator">=</span><span class="token number">120</span> <span class="token operator">--</span>pad<span class="token operator">-</span>header<span class="token operator">--</span>pad<span class="token operator">-</span>oper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意“ unlimited” –max-instatement-indent仅用于因为如果后续行需要缩进限制，那么astyle不够聪明，无法包装第一个参数。建议您手动将语句内缩进限制为大约50个列：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> foo <span class="token operator">=</span> <span class="token function">some_really_long_function_name</span><span class="token punctuation">(</span><span class="token function">and_another_one_to_drive_the_point_home</span><span class="token punctuation">(</span>        first_argument<span class="token punctuation">,</span> second_argument<span class="token punctuation">,</span> third_arugment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>翻译于英文官网：<a href="https://wiki.qt.io/Qt_Coding_Style">https://wiki.qt.io/Qt_Coding_Style</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>讲解自定义和标准对话框的使用，以及多窗口之间的交互解决</title>
      <link href="posts/7211e855/"/>
      <url>posts/7211e855/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  写一个自定义和标准对话框的使用；还有关于模态对话框和非模态对话框的区别；以及多个<code>Dialog</code>对象之间，如何传递数据；</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="对话框的生存期："><a href="#对话框的生存期：" class="headerlink" title="对话框的生存期："></a>对话框的生存期：</h2><p>对话框的生存期是指它从创建到删除的存续区间。</p><br><h2 id="模态对话框："><a href="#模态对话框：" class="headerlink" title="模态对话框："></a>模态对话框：</h2><p>对话框是以<strong>模态</strong>（<strong>Modal</strong>)方式显示的，即用<code>QDialog:exec()</code>函数显示。模态显示的对话框不允许鼠标再去单击其他窗口，直到对话框退出。</p><p><strong>模态方式显示：</strong>必须关闭此对话框才可以返回主窗口操作</p><br><h2 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框:"></a>非模态对话框:</h2><p>使用<code>QDialog::show()</code>，则能以<strong>非模态</strong>（<strong>Modeless</strong>)方式显示对话框。非模态显示的对话框在显示后继续运行主程序，还可以在主窗口上操作，主窗口和非模态对话框之间可以交互控制，典型的例子是文字编辑软件里的“查找/替换”对话框。</p><br><h2 id="运行环境如下："><a href="#运行环境如下：" class="headerlink" title="运行环境如下："></a>运行环境如下：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><p>写了一个小的例子，源码见下面，上一个最终的运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008001023.gif"/ loading="lazy"><br><h2 id="窗口之间的交互："><a href="#窗口之间的交互：" class="headerlink" title="窗口之间的交互："></a>窗口之间的交互：</h2><p>这里提供两个思路：</p><blockquote><p>如本例子设计的<strong>ExDlgLocate</strong>和<strong>ExCustomMainWin</strong>之间的交互，均是<strong>有着对方对象的指针</strong></p></blockquote><p>在<code>ExDlgLocate</code>类里面函数实现， <code>ExCustomMainWin* parWind = (ExCustomMainWin*)parentWidget()</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//设置文字</span><span class="token keyword">void</span> <span class="token class-name">ExDlgLocate</span><span class="token operator">::</span><span class="token function">on_btnSetText_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//定位到单元格，并且设置字符串</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> ui<span class="token operator">-></span>spinBoxCol<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ExCustomMainWin<span class="token operator">*</span> parWind <span class="token operator">=</span> <span class="token punctuation">(</span>ExCustomMainWin<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">parentWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//向具体的item中填写字符串</span>    parWind<span class="token operator">-></span><span class="token function">setACellText</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> ui<span class="token operator">-></span>lineEdit<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxRow<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> ui<span class="token operator">-></span>spinBoxRow<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxCol<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>spinBoxCol<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> ui<span class="token operator">-></span>spinBoxCol<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的， 在<code>ExCustomMainWin</code>类里面，也可以找到</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ExCustomMainWin</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token operator">:</span>    QStandardItemModel <span class="token operator">*</span>m_model<span class="token punctuation">;</span>                        <span class="token comment">//数据模型</span>    QItemSelectionModel <span class="token operator">*</span>m_seleModel<span class="token punctuation">;</span>                   <span class="token comment">//item选择模型</span>    ExDlgSetHeaders <span class="token operator">*</span>m_dlgSetHeaders<span class="token punctuation">;</span>    ExDlgLocate <span class="token operator">*</span>m_dlglocate<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个思路：</p><blockquote><p>利用Qt优秀的信号与槽机制</p></blockquote><p>无需再在<code>ExCustomMainWin</code>类里面，保持<code>ExDlgLocate</code>对话框的指针。而是在ExCustomMainWin和ExDlgLocate的类里面，定义一些信号和槽来使用<code>connect</code>代替实现。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>标准对话框之文件、颜色、字体、保存、消息、输入等对话框使用</title>
      <link href="posts/da2c7d6d/"/>
      <url>posts/da2c7d6d/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  使用<strong>自定义对话框</strong>和<strong>标准对话框</strong>： <code>QFileDialog</code> <code>QInputDialog</code> and <code>QMessageDialog</code>等的使用：文件、颜色、字体、保存、消息、输入等对话框使用</p><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="标准对话框："><a href="#标准对话框：" class="headerlink" title="标准对话框："></a>标准对话框：</h2><p>下面列举一些，常用的系统提供的标准对话框，<strong>下面都是静态函数</strong>：</p><h3 id="QFileDialog-文件对话框："><a href="#QFileDialog-文件对话框：" class="headerlink" title="QFileDialog 文件对话框："></a>QFileDialog 文件对话框：</h3><table><thead><tr><th align="left">常用静态函数</th><th align="left">函数功能</th></tr></thead><tbody><tr><td align="left">QString getOpenFileName()</td><td align="left">选择打开一个文件</td></tr><tr><td align="left">QStringList getOpenFileNames()</td><td align="left">选择打开<strong>多</strong>个文件</td></tr><tr><td align="left">QString getSaveFileName()</td><td align="left">选择保存一个文件</td></tr><tr><td align="left">QString getExistingDirectory()</td><td align="left">选择<strong>一个已有的</strong>目录</td></tr><tr><td align="left">QUrl getOpenFileUrl()</td><td align="left">选择打开一个文件，可选择远程网络文件</td></tr></tbody></table><p>选择已有的目录，通常可以使还是用<code>QDir::currentPath()</code> 来获取当前应用程序的目录</p><br><h3 id="QColorDialog-颜色对话框"><a href="#QColorDialog-颜色对话框" class="headerlink" title="QColorDialog  颜色对话框:"></a>QColorDialog  颜色对话框:</h3><table><thead><tr><th>常用静态函数</th><th>函数功能</th></tr></thead><tbody><tr><td>QColor gstColor()</td><td>选择颜色</td></tr></tbody></table><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191014000417.png"/ loading="lazy"><br><h3 id="QFontDialog-字体对话框"><a href="#QFontDialog-字体对话框" class="headerlink" title="QFontDialog  字体对话框:"></a>QFontDialog  字体对话框:</h3><table><thead><tr><th>常用静态函数</th><th>函数功能</th></tr></thead><tbody><tr><td>QString get Text()</td><td>输入单行文字</td></tr></tbody></table><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191014000534.png"/ loading="lazy"><br><h3 id="QInputDialog-输入对话框"><a href="#QInputDialog-输入对话框" class="headerlink" title="QInputDialog    输入对话框:"></a>QInputDialog    输入对话框:</h3><table><thead><tr><th>常用静态函数</th><th>函数功能</th></tr></thead><tbody><tr><td>QString get Text()</td><td>输入单行文字</td></tr><tr><td>int getInt()</td><td>输入整数</td></tr><tr><td>double getDouble()</td><td>输入浮点数</td></tr><tr><td>Qsring getltem()</td><td>从一个下拉列表框中选择输入</td></tr><tr><td>QString getMultiLine Text()</td><td>输入多行字符串</td></tr></tbody></table><br><h3 id="QMessageBox-消息对话框"><a href="#QMessageBox-消息对话框" class="headerlink" title="QMessageBox  消息对话框:"></a>QMessageBox  消息对话框:</h3><table><thead><tr><th>常用静态函数</th><th>函数功能</th></tr></thead><tbody><tr><td>StandardButon information()</td><td>信息提示对话框</td></tr><tr><td>StandardButton question()</td><td>询问并获取是否确认的对话框</td></tr><tr><td>StandardButton warning()</td><td>警告信息提示对话框</td></tr><tr><td>StandardButton critical()</td><td>错误信息提示对话框</td></tr><tr><td>void about()</td><td>设置自定义信息的关于对话框</td></tr><tr><td>void aboutQt()</td><td>关于Qt的对话框</td></tr></tbody></table><p>其在代码中的效果如如下：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013162112.png"/ loading="lazy"> 和</p><p>和 Qt 的</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013162203.png"/ loading="lazy"><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>写了一个小的项目来演示这几种标准对话框，编译环境如下：</p><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><p>上一个最终的运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013164633.gif"/ loading="lazy"><br><h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><p>因为运用比较简单， 所以就只是没有单据列举来说明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//标准文件对话框QFileDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnOpenFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnOpenFiles_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>    QString fileter <span class="token operator">=</span> <span class="token string">"文本文件(*.txt);;图片文件(*.jpg *.gif);;所有文件(*.*)"</span><span class="token punctuation">;</span>    QStringList fileNmaeList <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fileNmaeList<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmaeList<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnExistingDir_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString currPath <span class="token operator">=</span> <span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">applicationDirPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取应用程序当前目录</span>    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择一个目录【非文件】"</span><span class="token punctuation">,</span> currPath<span class="token punctuation">,</span> QFileDialog<span class="token operator">::</span>ShowDirsOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//最后一个参数，表示只显示路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetColor_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QPalette pal <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//获取条调色板</span>    QColor initColor <span class="token operator">=</span> pal<span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>    QColor color <span class="token operator">=</span> <span class="token class-name">QColorDialog</span><span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>initColor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择颜色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                    <span class="token comment">//因为没有.isEmpty(),故而使用.isValid()来判断</span>        pal<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Text<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>pal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetFont_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFont initFont <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QFont font <span class="token operator">=</span> <span class="token class-name">QFontDialog</span><span class="token operator">::</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> initFont<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnSaveFile_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QDir</span><span class="token operator">::</span><span class="token function">currentPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//获取应用程序当前目录</span>    QString fileter <span class="token operator">=</span> <span class="token string">"头文件(*.h);;源文件(*.cpp);;所有文件(*.*)"</span><span class="token punctuation">;</span>    QString fileNmae <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"保存文件"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> fileter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileNmae<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>fileNmae<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//标准消息对话框+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnQuestion_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QMessageBox<span class="token operator">::</span>StandardButton ret <span class="token operator">=</span> <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"问题消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"question对话框的内容"</span><span class="token punctuation">,</span>  QMessageBox<span class="token operator">::</span>Yes <span class="token operator">|</span> QMessageBox<span class="token operator">::</span>No <span class="token operator">|</span> QMessageBox<span class="token operator">::</span>Close<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> QMessageBox<span class="token operator">::</span>Yes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::yes 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> QMessageBox<span class="token operator">::</span>No<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::No 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> QMessageBox<span class="token operator">::</span>Close<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"QMessageBox::Close 按钮被选中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"这是 switch 的default 的选项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnInformation_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">information</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"信息消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"information对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnWarning_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"警告消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"warning对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnCritical_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">critical</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"危机消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"critical对话框的内容"</span><span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>Ok<span class="token punctuation">,</span> QMessageBox<span class="token operator">::</span>NoButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnAbout_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于消息对话框"</span><span class="token punctuation">,</span> <span class="token string">"abou 作者: 投我以木李，报之以琼玖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnAboutQt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">aboutQt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"关于Qt消息对话框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//标准输入对话框QInputDialog+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetString_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入文字对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个字符串"</span><span class="token punctuation">,</span> QLineEdit<span class="token operator">::</span>Normal<span class="token punctuation">,</span> <span class="token string">"默认输入的字符串"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnGetItem_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QStringList list<span class="token punctuation">;</span>    list<span class="token operator">&lt;&lt;</span><span class="token string">"2019-10-02"</span><span class="token operator">&lt;&lt;</span><span class="token string">"04:28"</span><span class="token operator">&lt;&lt;</span><span class="token string">"在武汉的卧室"</span><span class="token operator">&lt;&lt;</span><span class="token string">"敲代码"</span><span class="token operator">&lt;&lt;</span><span class="token string">"这会没有困意"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> editable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">//ComboBox是否可编辑</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    QString text <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入item对话框"</span><span class="token punctuation">,</span> <span class="token string">"请选择一个item"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> index<span class="token punctuation">,</span> editable<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>text<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnInt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stepVal <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pointSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入整数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> stepVal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QFont font <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setPointSize</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"字体大小已经被设置为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExDialog</span><span class="token operator">::</span><span class="token function">on_btnDouble_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                 <span class="token comment">//小数点的位数</span>    <span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ret <span class="token operator">=</span> <span class="token class-name">QInputDialog</span><span class="token operator">::</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"输入浮点数对话框"</span><span class="token punctuation">,</span> <span class="token string">"请输入一个整数改变字体大小"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ok<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span><span class="token string">"浮点数大小为:"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQDialogEx】</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 提交两次commit到同一分支，被糅合为一次Marge Request的解决方法:cherry-pick</title>
      <link href="posts/868626a3/"/>
      <url>posts/868626a3/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong> <code>git</code> 提交两次<code>commit</code>到同一分支，且也<code>push</code>到同一个远程仓库的分支，会被糅合为一次<strong>Marge Request</strong>的解决方法：使用<code>cherry-pick</code>解决</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h2><p>我在本地分支master进行编码完成，然后请求合并代码，进行了如下行为：</p><blockquote><ol><li>commit  A1 ， 然后 push1 到 self 仓库；</li><li>网页gitLab上请求合并到公共分支origion；</li><li>commit  A2 ， 然后 push2 到 self 仓库；</li></ol></blockquote><p>然后我写A3的时候，意识到有如下情况会发生，赶紧新建一个新的分支branch_a3 临时保存一下A3修改</p><p>【问题】这个时候， 问题就产生了，origion 的 master 会自动将A1 +A2 的两次修改看做一次 Marge Request ；但是我想要的是，当做两次Marge Request 提交记录 ？现在的各个分支，情况如下图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013100800.png"/ loading="lazy"><br><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>先来看一些远程仓库名称，作为背景：origion 是所有人请求合并的公共远程仓库，self 是自己从origion 进行 fork的个人远程仓库，如图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191013102554.png"/ loading="lazy"><br><h3 id="可行思路："><a href="#可行思路：" class="headerlink" title="可行思路："></a>可行思路：</h3><blockquote><ol><li>———-以下为单独抽取A2进行一次提交请求合并———–</li><li>先进行回退到 A0 版本： reset A0</li><li>新建分支和跳转到 newBranch</li><li>使用 cherry-pick A2  ; <strong>只获取A2 的代码改动</strong> 添加到 newBranch 分支的 A0上面</li><li>再次推送到self的新的newBranch分支  （到这里已经把A2单独作为新的分支，提交一次改动）</li><li>网页进行请求合并</li><li>———–以下为A1+A2 恢复为 A1———–</li><li>checkout 跳转到 master 分支</li><li>先进行回退到 A1 版本：reset A1</li><li>再次推送到self的旧的master分支 （origion 的A1 提交也会自动刷新覆盖，只有A1提交）</li></ol></blockquote><br><h3 id="命令实现："><a href="#命令实现：" class="headerlink" title="命令实现："></a>命令实现：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">466e5d0  A073e40aa  A1b7a3dc5  A2<span class="token function">git</span> reset --hard 466e5d0<span class="token function">git</span> checkout  -b newBranch<span class="token function">git</span> cherry-pick 73e40aa<span class="token function">git</span> push self newBranch -f网页进行请求合并<span class="token function">git</span> checkout master<span class="token function">git</span> reset --hard b7a3dc5<span class="token function">git</span> push self master -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux中apt与apt-get命令的区别与解释</title>
      <link href="posts/bd2df255/"/>
      <url>posts/bd2df255/</url>
      
        <content type="html"><![CDATA[<p><strong>简  述：</strong>  讲述Linux中<code>apt</code>与<code>apt-get</code>命令的区别与解释</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102512268">Linux中apt与apt-get命令的区别与解释</a> </li></ul><br><blockquote><p><strong>简单来说就是：apt = apt-get、apt-cache 和 apt-config 中最常用命令选项的集合。</strong></p></blockquote><h3 id="apt和apt-get命令之间的区别"><a href="#apt和apt-get命令之间的区别" class="headerlink" title="apt和apt-get命令之间的区别:"></a>apt和apt-get命令之间的区别:</h3><p>虽然 <code>apt</code> 与 <code>apt-get</code> 有一些类似的命令选项，但它并不能完全向下兼容 apt-get 命令。也就是说，可以用 apt 替换部分 apt-get 系列命令，但不是全部。</p><table><thead><tr><th align="center">apt 命令</th><th align="center">取代的命令</th><th align="center">命令的功能</th></tr></thead><tbody><tr><td align="center">apt install</td><td align="center">apt-get install</td><td align="center">安装软件包</td></tr><tr><td align="center">apt remove</td><td align="center">apt-get remove</td><td align="center">移除软件包</td></tr><tr><td align="center">apt purge</td><td align="center">apt-get purge</td><td align="center">移除软件包及配置文件</td></tr><tr><td align="center">apt update</td><td align="center">apt-get update</td><td align="center">刷新存储库索引</td></tr><tr><td align="center">apt upgrade</td><td align="center">apt-get upgrade</td><td align="center">升级所有可升级的软件包</td></tr><tr><td align="center">apt autoremove</td><td align="center">apt-get autoremove</td><td align="center">自动删除不需要的包</td></tr><tr><td align="center">apt full-upgrade</td><td align="center">apt-get dist-upgrade</td><td align="center">在升级软件包时自动处理依赖关系</td></tr><tr><td align="center">apt search</td><td align="center">apt-cache search</td><td align="center">搜索应用程序</td></tr><tr><td align="center">apt show</td><td align="center">apt-cache show</td><td align="center">显示装细节</td></tr></tbody></table><p>当然，<code>apt</code> 还有一些自己的命令：</p><table><thead><tr><th align="center">新的apt命令</th><th align="center">命令的功能</th></tr></thead><tbody><tr><td align="center">apt list</td><td align="center">列出包含条件的包（已安装，可升级等）</td></tr><tr><td align="center">apt edit-sources</td><td align="center">编辑源列表</td></tr></tbody></table><p>需要大家注意的是：<code>apt</code> 命令也还在不断发展， 因此，你可能会在将来的版本中看到新的选项。</p><br><h2 id="apt-get已弃用？"><a href="#apt-get已弃用？" class="headerlink" title="apt-get已弃用？"></a>apt-get已弃用？</h2><p>目前还没有任何 Linux 发行版官方放出 apt-get 将被停用的消息，至少它还有比 apt 更多、更细化的操作功能。对于低级操作，仍然需要 apt-get。</p><br><h2 id="我应该使用apt还是apt-get？"><a href="#我应该使用apt还是apt-get？" class="headerlink" title="我应该使用apt还是apt-get？"></a>我应该使用apt还是apt-get？</h2><p>既然两个命令都有用，那么我该使用 apt 还是 apt-get 呢？作为一个常规 Linux 用户，系统极客建议大家尽快适应并开始首先使用 apt。不仅因为广大 Linux 发行商都在推荐 apt，更主要的还是它提供了 Linux 包管理的必要选项。</p><p>最重要的是，apt 命令选项更少更易记，因此也更易用，所以没理由继续坚持 apt-get。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后结大家提供两点使用上的建议：</p><ul><li><code>apt</code> 可以看作 <code>apt-get</code> 和 <code>apt-cache</code> 命令的子集, 可以为包管理提供必要的命令选项。</li><li><code>apt-get</code> 虽然没被弃用，但作为普通用户，还是应该首先使用 <code>apt</code>。</li></ul><p>参考文章：<a href="https://www.sysgeek.cn/apt-vs-apt-get/">Linux中apt与apt-get命令的区别与解释</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QTreeWidget和QDockWidget的讲解和使用</title>
      <link href="posts/945f8d10/"/>
      <url>posts/945f8d10/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong>  目录树组件<code>QTreeWidget</code>和停靠区域组件<code>QDockWidget</code>的讲解和使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="QTreeWidget属性："><a href="#QTreeWidget属性：" class="headerlink" title="QTreeWidget属性："></a>QTreeWidget属性：</h2><p><strong><code>QTreeWidget</code>类是创建和管理目录树结构的类；</strong></p><p><font color=#FF0000  size=4 face="幼圆">QTreeWidget的每个节点都是一个QTreeWidgetltem对象，添加一个节点前需先创建它，并做<br>好相关设置。</font></p><p><strong>创建节点的语句是：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>Mainwindow<span class="token operator">::</span>itTopItem<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>QTreeWidgetltem的 **setlcon()<strong>和</strong>setText()**都需要传递一个列号作为参数，指定对哪个列进行设置。列号可以直接用数字，但是为了便于理解代码和统一修改，在MainWindow里定义了枚举类型treeColNum，colltem表示第1列，colltemlype表示第2列。setFlags0函数设置节点的一些属性标记，是Qt:ltemFlag枚举类型常量的组合。setData()函数为节点的某一列设置一个角色数据，setData（）函数原型为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">QTreewidgetItem</span><span class="token operator">::</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">int</span> column<span class="token punctuation">,</span><span class="token keyword">int</span> role<span class="token punctuation">,</span><span class="token keyword">const</span> QVariant <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，column是列号，role是角色的值，value是一个QVariant类型的数。</p><p><strong>代码中设置节点数据的语句是：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>Mainwindow<span class="token operator">::</span>colItem<span class="token punctuation">,</span>Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span><span class="token function">QVariant</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它为节点的第1列，角色<strong>Qt：UserRole</strong>，设置了一个字符串数据dataStr。Qt:UserRole是枚举类型Qt::ItemDataRole中一个预定义的值，关于节点的角色和Qt:ItemDataRole在后面文章详细介绍。<br>创建并设置好节点后，<strong>用QTreeWidget::addTopLevelltem()函数将节点作为顶层节点添加到目录树。</strong></p><br><h2 id="QDockWidget-属性："><a href="#QDockWidget-属性：" class="headerlink" title="QDockWidget 属性："></a>QDockWidget 属性：</h2><p><code>QDockWidget</code> 是可以在<strong>QMainWindow</strong> 窗口停靠，或在桌面最上层浮动的界面组件。本实例将一个<br><strong>QTreeWidget</strong>组件放置在<code>QDockWidget</code>区域上，设置其可以在主窗口的左或右侧停靠，也可以浮动。</p><p><strong>主要属性如下：</strong></p><ul><li><strong>allowedAreas</strong>属性，设置允许停靠区域。由函数setAllowedAreas(Qt：:DockWidgetAreas areas)设置允许停靠区，参数areas是枚举类型</li><li><strong>Qt:DockWidgetArea</strong>的值的组合，可以设置在窗口的左、右、顶、底停靠，或所有区域都可停靠，<br>  或不允许停靠。<br>  本实例设置为允许左侧和右侧停靠。</li><li><strong>features</strong>属性，设置停靠区组件的特性。由setFeatures（Dock WidgetFeatures features)函数设置停靠区组件的特性，参数features是枚举类型QDockWidget::DockWidgetFeature的值的组合，枚举值如下。</li></ul><blockquote><p>QDockWidget::DockWidgetClosable:停靠区可关闭。<br>QDockWidget:DockWidgetMovable:停靠区可移动。<br>QDock Widget:DockWidgetFloatable:停靠区可浮动。<br>QDock Widget:Dock Widget VerticalTitleBar:在停靠区左侧显示垂直标题栏。<br>QDock Widget::AlDockWidgetFeatures:使用以上所有特征。<br>QDock Widget::NoDockWidgetFeatures:不能停靠、移动和关闭。</p></blockquote><br><h2 id="ScrollArea属性："><a href="#ScrollArea属性：" class="headerlink" title="ScrollArea属性："></a>ScrollArea属性：</h2><p><code>ScrollArea</code>是一个提供了一个滚动视图到另一个部件。</p><p>滚动区域用于显示一个画面中的子部件的内容。如果部件超过画面的大小，视图可以提供滚动条，这样就都可以看到部件的整个区域。</p><br><h2 id="细节注意："><a href="#细节注意：" class="headerlink" title="细节注意："></a>细节注意：</h2><p>在主窗口构造函数里将ScrollArea组件设置为主窗口工作区的中心组件后，<code>DockWidget</code>与<code>ScrollArea</code>之间自动出现分割条，可以分割两个组件的大小。</p><br><h2 id="部分源码："><a href="#部分源码：" class="headerlink" title="部分源码："></a>部分源码：</h2><p>其中核心部分的源码，功能实现如下：</p><p>其中<strong>ExQTreeWidget.h</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXQTREEWIDGET_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXQTREEWIDGET_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMainWindow></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QLabel></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTreeWidgetItem></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExQTreeWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">enum</span> <span class="token class-name">treeItemType</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//枚举，节点类型</span>        itemRoot<span class="token punctuation">,</span>        itemFile<span class="token punctuation">,</span>        itemImage    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token class-name">treeColNum</span> <span class="token punctuation">&#123;</span>           <span class="token comment">//目录树列表的编号</span>        colItem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>        colItemType <span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">//初始化根节点（唯一）</span>    <span class="token keyword">void</span> <span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加目录</span>    <span class="token keyword">void</span> <span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//添加图片文件</span>    QString <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>    <span class="token keyword">void</span> <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> parItem<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//遍历item下面的所有节点</span>    <span class="token keyword">void</span> <span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//显示当前item的图片（默认以适配高度）</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//增加文件夹</span>    <span class="token keyword">void</span> <span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//添加图片文件</span>    <span class="token keyword">void</span> <span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//删除节点</span>    <span class="token keyword">void</span> <span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span>    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//图片自动适应高度</span>    <span class="token keyword">void</span> <span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//图片自动适应宽度</span>    <span class="token keyword">void</span> <span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//放大</span>    <span class="token keyword">void</span> <span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//缩小</span>    <span class="token keyword">void</span> <span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//还原</span>    <span class="token keyword">void</span> <span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//设置Dock窗口是否浮动</span>    <span class="token keyword">void</span> <span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设置Dock窗口是否隐藏不显示</span>    <span class="token keyword">void</span> <span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//退出</span>    <span class="token keyword">void</span> <span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//当前节点变化的时候，自动加载当前图片</span>    <span class="token keyword">void</span> <span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span>    <span class="token keyword">void</span> <span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token operator">::</span>ExQTreeWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span>    QLabel <span class="token operator">*</span>m_labFlie<span class="token punctuation">;</span>      <span class="token comment">//状态栏显示当前文件路径</span>    QPixmap m_curPixmap<span class="token punctuation">;</span>    <span class="token comment">//显示当前文件图片</span>    <span class="token keyword">float</span>   m_ratio<span class="token punctuation">;</span>        <span class="token comment">//图片缩放比例</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// EXQTREEWIDGET_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<strong>ExQTreeWidget.cpp</strong>：如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExQTreeWidget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_ExQTreeWidget.h"</span></span><span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QMainWindow</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>ExQTreeWidget<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QTreeWidget和QDockWidget的讲解和使用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCentralWidget</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//设置scrollArea为中心控件</span>    <span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFlie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"当前文件的路径:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>statusBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>m_labFlie<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">ExQTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//初始化根节点（只能够有唯一）</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">initTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//准备工作</span>    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString dataStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image001.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建唯一root的节点</span>    QTreeWidgetItem<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"相簿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加顶层节点</span>    ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">addTopLevelItem</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加目录节点</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">addFolderItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString dirName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image006.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加一个新的节点</span>    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token operator">::</span>itemFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>dirName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加图片节点</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">addImageItem</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">,</span> QString fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/image/Image014.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加一个新的节点</span>    QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>treeItemType<span class="token operator">::</span>itemImage<span class="token punctuation">)</span><span class="token punctuation">;</span>    QString folderName <span class="token operator">=</span> <span class="token function">getFinalFolderName</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> icon<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> folderName<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItemType<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"treeItemType"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsAutoTristate<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span><span class="token function">setData</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">,</span> <span class="token function">QVariant</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token comment">//若是文件节点</span>        parItem<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//若是唯一root节点</span>        QTreeWidgetItem <span class="token operator">*</span>root <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span><span class="token function">addChild</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//从完整的路径里面，获取最后的文件夹名称</span>QString <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">getFinalFolderName</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>pathName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> pathName<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QString str <span class="token operator">=</span> pathName<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>cnt <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历传进来的父节点下的所有子节点；每遍历过该节点，就在其节点的信息加一个#</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">changeItemCaption</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>parItem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString str <span class="token operator">=</span> <span class="token string">"# "</span> <span class="token operator">+</span> parItem<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    parItem<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parItem<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>parItem<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//回调，调用自己</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//显示当前item的图片（默认以适配高度）</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">displayImage</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString fileName <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">data</span><span class="token punctuation">(</span>treeColNum<span class="token operator">::</span>colItem<span class="token punctuation">,</span> Qt<span class="token operator">::</span>UserRole<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_labFlie<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    m_curPixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//从文件载入图片</span>    <span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//自动适应高度显示</span>    ui<span class="token operator">-></span>actAmplification<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actShrink<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actZoomRealSize<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actAdaptiveHeight<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>actAdaptiveWidth<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//增加文件夹</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAddFolder_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString path <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getExistingDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//选择目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token function">addFolderItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加图片</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAddFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QStringList list <span class="token operator">=</span> <span class="token class-name">QFileDialog</span><span class="token operator">::</span><span class="token function">getOpenFileNames</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"选择多个将要加载的图片"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"Images(*.jpg, *.png, *.*)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//选择目录</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        QTreeWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//获取当前节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> treeItemType<span class="token operator">::</span>itemImage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//获得父节点</span>            parItem <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            parItem <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            QString strName <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//获得文件名称</span>            <span class="token function">addImageItem</span><span class="token punctuation">(</span>parItem<span class="token punctuation">,</span> strName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//添加图片文件到文件节点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//删除节点</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actDeleFile_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTreeWidgetItem<span class="token operator">*</span> parItem <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">currentItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> treeItemType<span class="token operator">::</span>itemRoot<span class="token punctuation">)</span>        parItem <span class="token operator">=</span> currItem<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//只能够由其父节点删除</span><span class="token comment">//    else</span><span class="token comment">//        ui->treeFiles->takeTopLevelItem(0);                      //删除顶层节点使用这个</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currItem <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> parItem <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    parItem<span class="token operator">-></span><span class="token function">removeChild</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">//移除没有从内存中删除，所以delete删除</span>    <span class="token keyword">delete</span> currItem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历所有的顶层节点(本处只有一个root顶层节点)</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actScanItems_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTreeWidgetItem<span class="token operator">*</span> currItem <span class="token operator">=</span> ui<span class="token operator">-></span>treeFiles<span class="token operator">-></span><span class="token function">topLevelItem</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//顶层item</span>        <span class="token function">changeItemCaption</span><span class="token punctuation">(</span>currItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//图片自动适应高度</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAdaptiveHeight_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//得到scrollArea的高度</span>    <span class="token keyword">int</span> realHeight <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//原始图片的实际高度</span>    m_ratio <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realHeight<span class="token punctuation">;</span>                          <span class="token comment">//当前显示比例，必须转换为浮点数</span>    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>height <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//图片缩放到指定高度</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//设置Label的PixMap</span><span class="token punctuation">&#125;</span><span class="token comment">//图片自动适应宽度</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAdaptiveWidth_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> ui<span class="token operator">-></span>scrollArea<span class="token operator">-></span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> realWidth <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_ratio <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> realWidth<span class="token punctuation">;</span>    QPixmap pixmap <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaledToHeight</span><span class="token punctuation">(</span>width <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当前节点变化的时候，自动加载当前图片</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_treeFiles_currentItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QTreeWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> previous <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">displayImage</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//放大</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actAmplification_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_ratio <span class="token operator">*=</span> <span class="token number">1.2</span><span class="token punctuation">;</span>                                             <span class="token comment">//在当前比例基础上乘以0.8</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                <span class="token comment">// 显示宽度</span>    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>                  <span class="token comment">// 显示宽度</span>    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//图片缩放到指定高度和宽度，保持长宽比例</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//缩小</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actShrink_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_ratio <span class="token operator">*=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_ratio<span class="token punctuation">;</span>    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//还原</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actZoomRealSize_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_ratio <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> widht <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPixmap pix <span class="token operator">=</span> m_curPixmap<span class="token punctuation">.</span><span class="token function">scaled</span><span class="token punctuation">(</span>widht<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setPixmap</span><span class="token punctuation">(</span>pix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置Dock窗口是否浮动</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actDockFloating_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> check<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setFloating</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置Dock窗口是否隐藏不显示</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actDockVisible_triggered</span><span class="token punctuation">(</span><span class="token keyword">bool</span> checked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>dockWidget<span class="token operator">-></span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token operator">!</span>checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//退出</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_actQiut_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//单击DockWidget组件的标题栏的关闭按钮时候，会隐藏在停靠区域，并且发射信号visibilityChanged;  停靠区域可见性变化</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_dockWidget_visibilityChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> visible<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>actDockVisible<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>visible<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//当拖动DockWidget组件，使其浮动或者停靠时候，会发射信号topLevelChanged;  更新其Action的状态</span><span class="token keyword">void</span> <span class="token class-name">ExQTreeWidget</span><span class="token operator">::</span><span class="token function">on_dockWidget_topLevelChanged</span><span class="token punctuation">(</span><span class="token keyword">bool</span> topLevel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>actDockFloating<span class="token operator">-></span><span class="token function">setChecked</span><span class="token punctuation">(</span>topLevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQTreeWidgetEx】</p><br><h2 id="Deam运行效果："><a href="#Deam运行效果：" class="headerlink" title="Deam运行效果："></a>Deam运行效果：</h2><p>先上最终的效果图:</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191007212020.gif"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>根据给定(任意)的QString文本, 获取其矩形大小</title>
      <link href="posts/618ad839/"/>
      <url>posts/618ad839/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  再进行空间的重绘时候，绘画进度条<code>QProgressBar</code>，需要在中间显示（可以根据opt-&gt;）进度的百分比文字，且刻度为文字中间的时候，需要左右两侧有着不一样的颜色（左边白色，右边黑色），即：进度条到达的位置文字百分比为白色显示。根据给定(任意)的<code>QString</code>文本, 获取其最小矩形。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="需求背景："><a href="#需求背景：" class="headerlink" title="需求背景："></a>需求背景：</h2><p>绘画进度条，需要在中间显示进度的百分比文字，且刻度为文字中间的时候，需要左右两侧有着不一样的颜色（左边白色，右边黑色），即：进度条到达的位置文字百分比为白色显示。</p><p><strong>希望达到的预期效果如下：</strong></p><p>静态图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224313.png" width="80%"/ loading="lazy"><p>动图<strong>注意中间文字和百分比的颜色变化</strong>（因为gif帧数，故实连续渐变色际参考上图）：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008231012.gif" width="80%"/ loading="lazy"><br><p>源码没修改之前：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span>progBar <span class="token operator">=</span>  qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            QRect rect <span class="token operator">=</span> progBar<span class="token operator">-></span>rect<span class="token punctuation">;</span>            rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.57</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> val <span class="token operator">=</span> progBar<span class="token operator">-></span>progress <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>progBar<span class="token operator">-></span>maximum <span class="token operator">-</span> progBar<span class="token operator">-></span>minimum<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token operator">::</span>HighlightedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            QString str <span class="token operator">=</span> <span class="token string">"已经下载"</span> <span class="token operator">+</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>val <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"%(点击暂停)"</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">drawText</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> Qt<span class="token operator">::</span>AlignCenter<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>NoBrush<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">drawRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果缺陷如图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008223907.png" width="80%"/ loading="lazy"><br><h2 id="根据QString文本获取其矩形fontMetrics："><a href="#根据QString文本获取其矩形fontMetrics：" class="headerlink" title="根据QString文本获取其矩形fontMetrics："></a>根据QString文本获取其矩形fontMetrics：</h2><p>修改之后代码:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> val <span class="token operator">=</span> progBar<span class="token operator">-></span>progress <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>progBar<span class="token operator">-></span>maximum <span class="token operator">-</span> progBar<span class="token operator">-></span>minimum<span class="token punctuation">)</span><span class="token punctuation">;</span> QString strPercent <span class="token operator">=</span> <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span>val <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">;</span>               QString str <span class="token operator">=</span> <span class="token string">"已下载"</span> <span class="token operator">+</span> strPercent <span class="token operator">+</span> <span class="token string">"(点击暂停)"</span><span class="token punctuation">;</span>                                  QSize size <span class="token operator">=</span> progBar<span class="token operator">-></span>fontMetrics<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>TextSingleLine<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>              QRect <span class="token function">rect</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">topLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据给定(任意)的QString, 获取其矩形大小，其效果如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224525.jpg" width="80%"/ loading="lazy"><br><h2 id="设置画笔渐变色-文字渐变色-："><a href="#设置画笔渐变色-文字渐变色-：" class="headerlink" title="设置画笔渐变色(文字渐变色)："></a>设置画笔渐变色(文字渐变色)：</h2><p>文字有渐变的需求(画笔采用渐变色)：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPointF <span class="token function">pointStart</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              QPointF <span class="token function">pointEnd</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               QLinearGradient <span class="token function">linear</span><span class="token punctuation">(</span>pointStart<span class="token punctuation">,</span> pointEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token operator">::</span>HighlightedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span>division<span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token operator">::</span>HighlightedText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span>division <span class="token operator">+</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token operator">::</span>ButtonText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> DPalette<span class="token operator">::</span>ButtonText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       linear<span class="token punctuation">.</span><span class="token function">setSpread</span><span class="token punctuation">(</span>QGradient<span class="token operator">::</span>PadSpread<span class="token punctuation">)</span><span class="token punctuation">;</span>                                          p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">QPen</span><span class="token punctuation">(</span><span class="token function">QBrush</span><span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置画笔渐变 【重点】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="设置画刷渐变色-图案渐变色-："><a href="#设置画刷渐变色-图案渐变色-：" class="headerlink" title="设置画刷渐变色(图案渐变色)："></a>设置画刷渐变色(图案渐变色)：</h2><p>图片有渐变的需求(画刷采用渐变色)：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//顺变 此处贡献出, 渐变配色方案:</span>QPointF <span class="token function">pointStart</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPointF <span class="token function">pointEnd</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QLinearGradient <span class="token function">linear</span><span class="token punctuation">(</span>pointStart<span class="token punctuation">,</span> pointEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#ff6e7f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linear<span class="token punctuation">.</span><span class="token function">setColorAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">QColor</span><span class="token punctuation">(</span><span class="token string">"#bfe9ff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linear<span class="token punctuation">.</span><span class="token function">setSpread</span><span class="token punctuation">(</span>QGradient<span class="token operator">::</span>PadSpread<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span>linear<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置画刷渐变 【重点】</span>p<span class="token operator">-></span><span class="token function">drawPath</span><span class="token punctuation">(</span>inter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="QFontMetrics-boundingRect-获取文本的矩形位置："><a href="#QFontMetrics-boundingRect-获取文本的矩形位置：" class="headerlink" title="QFontMetrics::boundingRect()获取文本的矩形位置："></a>QFontMetrics::boundingRect()获取文本的矩形位置：</h2><p>相当于计算 （没修改的源码） 中的2-5行 的计算rect  的一种快捷方法：</p><blockquote><p>//获取字符窜的最小矩形,和其在指定矩形的相对位置QFontMetrics::boundingRect()</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span>progBar <span class="token operator">=</span>  qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionProgressBar <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> val <span class="token operator">=</span> progBar<span class="token operator">-></span>progress <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>progBar<span class="token operator">-></span>maximum <span class="token operator">-</span> progBar<span class="token operator">-></span>minimum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> drawWidth <span class="token operator">=</span> val <span class="token operator">*</span> opt<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此rect矩形大小是通过文本得到最小的矩形; 其位置是相对于progBar->rect的</span>QRect rect <span class="token operator">=</span> progBar<span class="token operator">-></span>fontMetrics<span class="token punctuation">.</span><span class="token function">boundingRect</span><span class="token punctuation">(</span>progBar<span class="token operator">-></span>rect<span class="token punctuation">,</span> progBar<span class="token operator">-></span>textAlignment<span class="token punctuation">,</span> progBar<span class="token operator">-></span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191008224956.jpg" width="80%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++中的单例模式</title>
      <link href="posts/45c008a3/"/>
      <url>posts/45c008a3/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  介绍<code>c++</code>的<strong>23</strong>中设计模式之一，<font color=#D0087E size=4 face="幼圆"><strong>单例模式</strong></font>；这是我目前实际工作中，遇到第一个设计模式，让我采用一种设计模式来在项目中使用。在网上看了很篇博客之后，发觉这一篇非常的易懂（但是也是需要自己自己琢磨，慢慢品味的）。热心网友将自己学习过程的分享出来；此刻（实际是前一段使用使用时候）成了我的脚手架，非常感谢；在此转载此文，以后设计模式自己有了更深的体悟，也会整理成自己的个人原创一篇，帮助大家入门了解，目前经验稍有不足，日后再出续篇</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/102151247"><strong>C++中的单例模式</strong></a></li></ul><br><p>博客原文链接：<a href="https://blog.csdn.net/Hackbuteer1/article/details/7460019">C++中的单例模式</a></p><h2 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h2><p>单例模式也称为单件模式、单子模式，可能是使用最广泛的设计模式。<font color=#C62F2F  size=4 face="幼圆"><strong>其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。</strong></font>有很多地方需要这样的功能模块，如系统的日志输出，GUI应用必须是单鼠标，MODEM的联接需要一条且只需要一条电话线，操作系统只能有一个窗口管理器，一台PC连一个键盘。<br>       单例模式有许多种实现方法，在C++中，甚至可以直接用一个全局变量做到这一点，但这样的代码显的很不优雅。 使用全局对象能够保证方便地访问实例，但是不能保证只声明一个对象——也就是说除了一个全局实例外，仍然能创建相同类的本地实例。<br>《设计模式》一书中给出了一种很不错的实现，定义一个单例类，使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。<br>       单例模式通过类本身来管理其唯一实例，这种特性提供了解决问题的方法。唯一的实例是类的一个普通对象，但设计这个类时，让它只能创建一个实例并提供对此实例的全局访问。唯一实例类Singleton在静态成员函数中隐藏创建实例的操作。习惯上把这个成员函数叫做Instance()，它的返回值是唯一实例的指针。<br>定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//构造函数是私有的</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> CSingleton <span class="token operator">*</span>m_pInstance<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> CSingleton <span class="token operator">*</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_pInstance <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">//判断是否第一次调用</span>m_pInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> m_pInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户访问唯一实例的方法只有GetInstance()成员函数。如果不通过这个函数，任何创建实例的尝试都将失败，因为类的构造函数是私有的。GetInstance()使用<font color=#0000FF size=4 face="幼圆">懒惰初始化，也就是说它的返回值是当这个函数首次被访问时被创建的。**</font>这是一种防弹设计——所有GetInstance()之后的调用都返回相同实例的指针：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">CSingleton<span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token class-name">CSingleton</span> <span class="token operator">::</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CSingleton<span class="token operator">*</span> p2 <span class="token operator">=</span> p1<span class="token operator">-></span><span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CSingleton<span class="token operator">&amp;</span> ref <span class="token operator">=</span> <span class="token operator">*</span> <span class="token class-name">CSingleton</span> <span class="token operator">::</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对GetInstance稍加修改，这个设计模板便可以适用于可变多实例情况，如一个类允许最多五个实例。</p><p><font color=#FF0000 size=4 face="幼圆">单例类<code>CSingleton</code>有以下特征：</font><br>它有一个<font color=#FF0000  size=4 face="幼圆">指向唯一实例的静态指针<code>m_pInstance</code>，并且是私有的；</font><br>它有一个公有的函数，可以获取这个唯一的实例，并且在需要的时候创建该实例；<br>它的构造函数是私有的，这样就不能从别处创建该类的实例。<br>大多数时候，这样的实现都不会出现问题。有经验的读者可能会问，m_pInstance指向的空间什么时候释放呢？更严重的问题是，该实例的析构函数什么时候执行？<br>如果在类的析构行为中有必须的操作，比如关闭文件，释放外部资源，那么上面的代码无法实现这个要求。我们需要一种方法，正常的删除该实例。<br>可以在程序结束时调用GetInstance()，并对返回的指针掉用delete操作。这样做可以实现功能，但不仅很丑陋，而且容易出错。因为这样的附加代码很容易被忘记，而且也很难保证在delete之后，没有代码再调用GetInstance函数。<br><font color=#FF0000  size=4 face="幼圆"><strong>一个妥善的方法是让这个类自己知道在合适的时候把自己删除，或者说把删除自己的操作挂在操作系统中的某个合适的点上，</strong></font>使其在恰当的时候被自动执行。<br>我们知道，程序在结束的时候，<font color=#0000FF size=4 face="幼圆">系统会自动析构所有的全局变量</font>。事实上，<font color=#0000FF size=4 face="幼圆">系统也会析构所有的类的静态成员变量，就像这些静态成员也是全局变量一样</font>。利用这个特征，我们可以在单例类中定义一个这样的<font color=#FF0000  size=4 face="幼圆">静态成员变量</font>，而它的<font color=#FF0000  size=4 face="幼圆">唯一工作</font>就是在析构函数中删除单例类的实例。如下面的代码中的CGarbo类（Garbo意为垃圾工人）：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> CSingleton <span class="token operator">*</span>m_pInstance<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CGarbo</span>   <span class="token comment">//它的唯一工作就是在析构函数中删除CSingleton的实例</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token operator">~</span><span class="token function">CGarbo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>CSingleton<span class="token operator">::</span>m_pInstance<span class="token punctuation">)</span><span class="token keyword">delete</span> CSingleton<span class="token operator">::</span>m_pInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">static</span> CGarbo Garbo<span class="token punctuation">;</span>  <span class="token comment">//定义一个静态成员变量，程序结束时，系统会自动调用它的析构函数</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> CSingleton <span class="token operator">*</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>m_pInstance <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">//判断是否第一次调用</span>m_pInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> m_pInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类CGarbo被定义为CSingleton的<font color=#0000FF size=4 face="幼圆">私有内嵌类</font>，以防该类被在其他地方滥用。<br>程序运行结束时，系统会调用CSingleton的静态成员Garbo的析构函数，该析构函数会删除单例的唯一实例。<br>使用这种方法释放单例对象有以下特征：<br><font color=#0000FF size=4 face="幼圆">在单例类内部定义专有的嵌套类；</font><br><font color=#0000FF size=4 face="幼圆">在单例类内定义私有的专门用于释放的静态成员；</font><br><font color=#0000FF size=4 face="幼圆">利用程序在结束时析构全局变量的特性，选择最终的释放时机；</font><br><font color=#0000FF size=4 face="幼圆">使用单例的代码不需要任何操作，不必关心对象的释放。</font></p><p><strong>进一步的讨论</strong><br>但是添加一个类的静态对象，总是让人不太满意，所以有人用如下方法来重新实现单例和解决它相应的问题，代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//构造函数是私有的</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> CSingleton <span class="token operator">&amp;</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> CSingleton instance<span class="token punctuation">;</span>   <span class="token comment">//局部静态变量</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<font color=#0000FF size=4 face="幼圆"><strong>局部静态变量</strong></font>，非常强大的方法，完全实现了单例的特性，而且代码量更少，也不用担心单例销毁的问题。<br>但使用此种方法也会出现问题，当如下方法使用单例时问题来了，<br><code>Singleton singleton = Singleton :: GetInstance();</code><br>这么做就出现了一个<font color=#0000FF size=4 face="幼圆">类拷贝的问题</font>，这就违背了单例的特性。产生这个问题<font color=#0000FF size=4 face="幼圆">原因在于</font>：编译器会为类生成一个默认的构造函数，来支持类的拷贝。<br>最后没有办法，我们要禁止类拷贝和类赋值，禁止程序员用这种方式来使用单例，当时领导的意思是GetInstance()函数返回一个指针而不是返回一个引用，函数的代码改为如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//构造函数是私有的</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> CSingleton <span class="token operator">*</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> CSingleton instance<span class="token punctuation">;</span>   <span class="token comment">//局部静态变量</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但我总觉的不好，为什么不让编译器不这么干呢。这时我才想起可以显示的声明类拷贝的构造函数，和重载 = 操作符，新的单例类如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CSingleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//构造函数是私有的</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">CSingleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> CSingleton <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>CSingleton <span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> CSingleton <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> CSingleton <span class="token operator">&amp;</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> CSingleton instance<span class="token punctuation">;</span>   <span class="token comment">//局部静态变量</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>Singleton(const Singleton);</code>和 <code>Singleton &amp; operate = (const Singleton&amp;);</code>函数，需要声明成私有的，并且只声明不实现。这样，如果用上面的方式来使用单例时，不管是在友元类中还是其他的，编译器都是报错。<br>不知道这样的单例类是否还会有问题，但在程序中这样子使用已经基本没有问题了。</p><p>考虑到线程安全、异常安全，可以做以下扩展</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Lock</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>       CCriticalSection m_cs<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Lock</span><span class="token punctuation">(</span>CCriticalSection  cs<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_cs</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_cs<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>m_cs<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token keyword">const</span> Singleton <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Singleton<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Singleton <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">static</span> Singleton <span class="token operator">*</span><span class="token function">Instantialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> Singleton <span class="token operator">*</span>pInstance<span class="token punctuation">;</span><span class="token keyword">static</span> CCriticalSection cs<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Singleton<span class="token operator">*</span> Singleton<span class="token operator">::</span>pInstance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Singleton<span class="token operator">*</span> <span class="token class-name">Singleton</span><span class="token operator">::</span><span class="token function">Instantialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>pInstance <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//double check</span>Lock <span class="token function">lock</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//用lock实现线程安全，用资源管理类，实现异常安全</span><span class="token comment">//使用资源管理类，在抛出异常的时候，资源管理类对象会被析构，析构总是发生的无论是因为异常抛出还是语句块结束。</span><span class="token keyword">if</span><span class="token punctuation">(</span>pInstance <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> pInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以在Instantialize函数里面对pInstance 是否为空做了两次判断，因为该方法调用一次就产生了对象，pInstance == NULL 大部分情况下都为false，如果按照原来的方法，每次获取实例都需要加锁，效率太低。而改进的方法只需要在第一次 调用的时候加锁，可大大提高效率。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
          <category> 学习 - 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt绘画扇形drawPie()和反三角函数qAcos()</title>
      <link href="posts/32d0bfe0/"/>
      <url>posts/32d0bfe0/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <strong>qt</strong>绘画扇形<code>drawPie()</code>，绘画出弧线； 和由三角形的长度计算出角度，利用反三角函数<code>qAcos()</code></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/101694145">qt绘画扇形drawPie()和反着三角函数qAcos()</a> </li></ul><br><h2 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h2><p>在绘画进度条控件中，进度滑块当处于一开始和快完成，有弧度部分的时候,想要看的过程比较自然，就要自己手动填充这一部分”梯形(腰是两个段圆弧)”;而一开始想到的居然是：直接求直线于弧线(圆角矩形的弧线部分)的交点的函数，我觉得应该是没有的。</p><br><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><p>将**”腰是圆弧梯形”**拆分为一个两个圆弧和一个(标准)等腰梯形来进行拆分，从而进行填。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190929233536.png"/ loading="lazy">其中需要计算角度<br><h2 id="绘画扇形drawPie-："><a href="#绘画扇形drawPie-：" class="headerlink" title="绘画扇形drawPie()："></a>绘画扇形drawPie()：</h2><blockquote><p>void QPainter::drawPie(const QRect &amp;, int a, int alen)<br>参数1: 圆弧的圆心所处于矩形<br>参数2: 圆弧的开始始的角度°(单位1/16度)<br>参数3: 圆弧的转动的角度°(单位1/16度)</p></blockquote><p><strong>实际使用</strong>，注意其单位是<strong>1/16角度</strong>，而不是<strong>弧度</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">p<span class="token operator">-></span><span class="token function">drawPie</span><span class="token punctuation">(</span>topPointRect<span class="token punctuation">,</span><span class="token number">41</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> <span class="token number">41</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="反三角计算角度qAcos-："><a href="#反三角计算角度qAcos-：" class="headerlink" title="反三角计算角度qAcos()："></a>反三角计算角度qAcos()：</h2><p>由三角形的边计算角度；需要包含头文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtMath></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外一个计算角度的函数</p><blockquote><p>qreal qAcos(qreal v)<br>Returns the arccosine of v as an angle in radians. Arccosine is the inverse operation of cosine.<br>参数: 直角边/斜边  (注意用double)<br>返回结果: 是<strong>弧度</strong>为单位</p></blockquote><p>使用:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">qreal raw <span class="token operator">=</span> <span class="token function">qAcos</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//=41.4096弧度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="弧度和角度转换公式"><a href="#弧度和角度转换公式" class="headerlink" title="弧度和角度转换公式:"></a>弧度和角度转换公式:</h2><blockquote><p>弧度 = 角度  *  π  / 180   </p></blockquote><p>π所对应的宏为:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//M_PIThe ratio of a circle's circumference to diameter, π</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绘画上图的黑色圆弧代码:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">qreal raw <span class="token operator">=</span> <span class="token function">qAcos</span><span class="token punctuation">(</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> startRadius <span class="token operator">=</span> raw <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">/</span> M_PI<span class="token punctuation">;</span>p<span class="token operator">-></span><span class="token function">drawPie</span><span class="token punctuation">(</span>topPointRect<span class="token punctuation">,</span>startRadius <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> startRadius<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h2 id="最后的效果："><a href="#最后的效果：" class="headerlink" title="最后的效果："></a>最后的效果：</h2><p>如图：然后同理，只需要将左侧的两个角都这样计算，然后同样填充蓝色，即可以做到圆角处的完美（当进度增加时候，加载想的自然）</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190929233601.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt之proxy()代理探究</title>
      <link href="posts/ff318565/"/>
      <url>posts/ff318565/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <strong>qt:</strong>  <code>proxy()</code>代理探究</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/101571843">qt之proxy()代理探究</a> </li></ul><br><h2 id="查看源码："><a href="#查看源码：" class="headerlink" title="查看源码："></a>查看源码：</h2><p><strong>qt</strong>中源码查阅可看到：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*!    \since 4.6    \fn const QStyle *QStyle::proxy() const    This function returns the current proxy for this style.    By default most styles will return themselves. However    when a proxy style is in use, it will allow the style to    call back into its proxy.*/</span><span class="token keyword">const</span> QStyle <span class="token operator">*</span> <span class="token class-name">QStyle</span><span class="token operator">::</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_D</span><span class="token punctuation">(</span><span class="token keyword">const</span> QStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> d<span class="token operator">-></span>proxyStyle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="问题起因："><a href="#问题起因：" class="headerlink" title="问题起因："></a>问题起因：</h2><p>在封装函数的时候，<br><code>int radius = proxy()-&gt;pixelMetric(PM_FrameRadius, opt, w);</code>    //为什么这里使用<code>proxy()-&gt;</code>会显示报错，没有匹配到的相应的函数<br><code>//    int radius = DStyle::pixelMetric(PM_FrameRadius, opt, w);</code>　　　　　//而下面的可以通过</p><br><h2 id="尝试分析："><a href="#尝试分析：" class="headerlink" title="尝试分析："></a>尝试分析：</h2><p>检索Qt帮助手册：<code>pixelMetric</code>；发现一共有如下<font color=#D0087E size=4 face="幼圆"><strong>QStyle–&gt;QCommonStyle–&gt;QProxyStyle (只有这三个，依次为重写上一个)</strong></font></p><blockquote><p>int       QStyle::pixelMetric(QStyle::PixelMetric metric, const QStyleOption *option = nullptr, const QWidget *widget = nullptr) const</p><p>int QCommonStyle::pixelMetric(QStyle::PixelMetric m,      const QStyleOption *opt = nullptr,    const QWidget *widget = nullptr) const</p><p>int  QProxyStyle::pixelMetric(QStyle::PixelMetric metric, const QStyleOption *option = nullptr, const QWidget *widget = nullptr) const</p><p>int       DStyle::pixelMetric(QStyle::PixelMetric m,      const QStyleOption *opt = nullptr,    const QWidget *widget = nullptr) const override;</p></blockquote><br><h2 id="正确回答："><a href="#正确回答：" class="headerlink" title="正确回答："></a>正确回答：</h2><p>然而，上面的分析实际上，并没有什么卵用，用下面一句话解决：</p><p><code>proxy()</code>实际上就是返回它自己，相当于当前类的<code>this</code>指针；通过自己实际工程中的验证，也的确是这样这理解</p><p><strong>其源码英文的注释翻译如下：</strong></p><blockquote><p>此函数返回此样式的当前代理。 默认情况下，大多数样式都会返回。 然而当使用代理样式时，它将允许样式回调它的代理．</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的csdn的排名突然变化靠前</title>
      <link href="posts/9e45b8b8/"/>
      <url>posts/9e45b8b8/</url>
      
        <content type="html"><![CDATA[<p>​      昨天还稍微吐槽了一下<strong>csdn</strong>，然后今天突然看到了排名改版，之前都是按照积分来排版的；及今天白天还看到排名<code>20000</code>多名出头，然后这会无意识的登陆一下网站，，突然看到排名居然是变成了<code>1000</code>多名？</p><p><strong>我的这个塑料博文是怎么排名占到了这么高的？？？</strong></p><span id="more"></span><p><strong>2019-09-27:</strong> 官网的排名变化说明</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190927203830.png"/ loading="lazy"><p>然后更新之后，我的排名跳跃到这个名次；之前还一直以为最快也要一两年，或者三四年，能够进前几千就不错了</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190927204028.png"/ loading="lazy"><p><strong>更新： 2019-10-02</strong> </p><p>想起来之前几天的时候，排名算法突然按照“活跃”占了很大的比重，同时削弱几年前的旧文章；恰好那上一个月，写的文章比较多一点，然后就有一千多的排名吧！！！ 但是感觉很是德不配位，睡觉心中不安，跑到官帖子下留了评论，希望可以更改回原来的算法：<a href="https://blogdev.blog.csdn.net/article/details/101446074">https://blogdev.blog.csdn.net/article/details/101446074</a></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191002162829.png"/ loading="lazy"><p>过了几天们后， 大概评论区很多接大多和我一样的想法；于是乎把排名算法又基本改回了原来了的；今天国庆第二天；来看；想起来09-30号放假时候，上午看排名是2221名（记得很清楚），然后下午就是一万八九多样子；感觉这才是比较正常的样子；毕竟之前的权重极其的不合理，把好多前辈们都给刷下来了，好几万开后</p><p>现在放一张，我觉得回归正常的排名，2019-10-02日16:10的截图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20191002160559.gif"/ loading="lazy"><p><strong>同步博文：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/101559875">我的csdn的排名突然变化靠前</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++类型转换`static_cast`，`dynamic_cast`，`const_cast`，`reinterpret_cast`</title>
      <link href="posts/c05841ac/"/>
      <url>posts/c05841ac/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  **c++**类型转换<code>static_cast</code>，<code>dynamic_cast</code>，<code>const_cast</code>，<code>reinterpret_cast</code>这四种类型转换的区别</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="思维导图："><a href="#思维导图：" class="headerlink" title="思维导图："></a>思维导图：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190927000813.png"/ loading="lazy"><br><h2 id="static-cast："><a href="#static-cast：" class="headerlink" title="static_cast："></a>static_cast：</h2><ul><li><p>静态类型转换:内置、自定义数据类型</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//++++++++++++++++++++++++</span><span class="token comment">//内置数据类型</span><span class="token keyword">char</span> a  <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//++++++++++++++++++++++++</span><span class="token comment">//自定义类型</span>Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Son<span class="token operator">*</span> son <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//向下类型转换  不安全</span>Son<span class="token operator">*</span> son <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>Son<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上类型转换   安全</span>Base<span class="token operator">*</span> base <span class="token operator">=</span> static_cast<span class="token operator">&lt;</span>Base<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <br></li></ul><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast:"></a>static_cast:</h2><ul><li><p>动态类型转换：内置、自定义数据类型</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//++++++++++++++++++++++++</span><span class="token comment">//内置数据类型， 不可以转换</span>有精度损失的，都不可以转换<span class="token keyword">char</span> c  <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">//++++++++++++++++++++++++</span><span class="token comment">//自定义类型</span>Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Son<span class="token operator">*</span> son <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//向下类型转换  不安全   失败</span>Son<span class="token operator">*</span> son <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>Son<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向上类型转换   安全   成功</span>Base<span class="token operator">*</span> base <span class="token operator">=</span> dynamic_cast<span class="token operator">&lt;</span>Base<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <br></li></ul><h2 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast:"></a>const_cast:</h2><ul><li><p>常量转换：指针之间的转换</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//将const int * 转换为 int*</span><span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将 p2 转换为const int*</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <br></li><li><p>常量转换：引用之间的转换</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> aRef <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> aRef2 <span class="token operator">=</span> const_cast<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span>aRef<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不可以对 非指针 或者 非引用 做const_cast转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <br></li></ul><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast:"></a>reinterpret_cast:</h2><ul><li><p>重新解释转换 最不安全 不建议使用</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//将base* 转换为 Other*</span>Base<span class="token operator">*</span> base <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Other<span class="token operator">*</span> other <span class="token operator">=</span> reinterpret_cast<span class="token operator">&lt;</span>Other<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QtCreator设置代码美化astyle之Artistic</title>
      <link href="posts/9d7c4480/"/>
      <url>posts/9d7c4480/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  在<strong>Qt Creator</strong>里面使用代码美化工具<strong>astyle</strong>：按照想要的c++风格来格式化<code>code</code>。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/101397429">QtCreator设置代码美化astyle之Artistic</a> </li></ul><br><h2 id="知识讲解："><a href="#知识讲解：" class="headerlink" title="知识讲解："></a>知识讲解：</h2><p>常用的**C/C++**代码格式优化工具有两个，一是老牌的<code>indent</code>，再一个就是<code>astyle</code>了。</p><p><strong>astyle 官网下载：</strong> <a href="https://sourceforge.net/projects/astyle/">https://sourceforge.net/projects/astyle</a></p><p>其他风格： <a href="https://zh-google-styleguide.readthedocs.io/en/latest/">Google 开源项目 c/c++风格</a></p><br><h2 id="QtCreator设置："><a href="#QtCreator设置：" class="headerlink" title="QtCreator设置："></a>QtCreator设置：</h2><p>具体设置如图：<strong>“工具–选项–美化–Artistic Style”</strong>，</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924222146.png"/ loading="lazy"><br><h2 id="样式参考："><a href="#样式参考：" class="headerlink" title="样式参考："></a>样式参考：</h2><p>博主喜欢的样式风格：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--style<span class="token operator">=</span>allman<span class="token assign-left variable">indent</span><span class="token operator">=</span>spaces<span class="token operator">=</span><span class="token number">4</span>      <span class="token comment"># 缩进采用4个空格</span>indent-switches           <span class="token comment"># -S  设置 switch 整体缩进</span>indent-cases       <span class="token comment"># -K  设置 cases 整体缩进</span>indent-namespaces         <span class="token comment"># -N  设置 namespace 整体缩进</span>indent-preproc-block      <span class="token comment"># -xW 设置预处理模块缩进</span>indent-preproc-define     <span class="token comment"># -w  设置宏定义模块缩进</span>pad-oper                  <span class="token comment"># -p  操作符前后填充空格</span><span class="token comment">#delete-empty-lines       # -xe 删除多余空行</span><span class="token comment">#add-braces               # -j  单行语句加上大括号</span><span class="token comment">#align-pointer=name       # *、&amp;这类字符靠近变量名字</span>align-pointer<span class="token operator">=</span>type        <span class="token comment"># *、&amp;这类字符靠近类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>deepin（Linux）开源的一种的风格：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">indent</span><span class="token operator">=</span>spaces<span class="token operator">=</span><span class="token number">4</span><span class="token assign-left variable">style</span><span class="token operator">=</span>krindent-labelspad-operunpad-parenpad-headerkeep-one-line-statementsconvert-tabsindent-preprocessoralign-pointer<span class="token operator">=</span>namealign-reference<span class="token operator">=</span>namekeep-one-line-blockskeep-one-line-statementsattach-namespacesmax-instatement-indent<span class="token operator">=</span><span class="token number">120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好像现阶段，跟对下面的这一种更加感冒，已经使用了好几个月了，该风格，也算比较推荐；</p><p>或者想自己自定义，可以参考<code>google</code>的风格，如链接 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/">https://zh-google-styleguide.readthedocs.io/en/latest/</a></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924222700.png"/ loading="lazy"><br><h2 id="风格样式："><a href="#风格样式：" class="headerlink" title="风格样式："></a>风格样式：</h2><p><strong>Style-格式配置：</strong><br>最常用的就是ansi或或kr格式，实际上，kr，stroustrup和linux这三种格式是非常接近的了，试了好几个文件，只有非常微小的区别，可以忽略不计。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924221500.png"/ loading="lazy"><br><h2 id="参数含义："><a href="#参数含义：" class="headerlink" title="参数含义："></a>参数含义：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924221621.png"/ loading="lazy"><br><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>使用图下图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190924223021.png"/ loading="lazy"><p>参考文章：</p><p><a href="http://www.cppblog.com/jerryma/archive/2012/02/02/164813.html">C/C++代码格式优化工具—-astyle</a> </p><p><a href="https://blog.csdn.net/qq_33154343/article/details/98512180"><code>Qt</code>资料大全和<code>Google</code>编程规范（中文版，含<code>c++</code>、<code>java</code>等）</a> </p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>清理一下最近所想，关于朋友圈</title>
      <link href="posts/d67a5595/"/>
      <url>posts/d67a5595/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  闲来说一说最近的朋友圈</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>我觉得现在朋友圈，以及互联网各大平台的当今状态就是这样的</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925213704.png"/ loading="lazy"><p>到处各地都是摄像头，监控等，但是都是用来追究是谁的责任的，和威慑有的不能说；而不是自发的合法的言论。</p><p>今天除了技术文章啊，还整理写了这两篇文章，原本的最初的互联网精神，已经所剩无几了,十分痛惜，写了下面这几篇文章之后，还是挺高兴的，算是少了一份同步博客(两个小的专栏)的维护</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925214417.png"/ loading="lazy"><p>还有这一篇，感觉说出来之后，心情顺畅了许多</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925214459.png"/ loading="lazy"><p>忽然想起了此文：<a href="https://www.zhihu.com/question/342318692/answer/811320652?hb_wx_block=1&amp;utm_source=qq&amp;utm_medium=social&amp;utm_oi=818744733387096064">https://www.zhihu.com/question/342318692/answer/811320652?hb_wx_block=1&amp;utm_source=qq&amp;utm_medium=social&amp;utm_oi=818744733387096064</a></p><p>这个加粗的回答，直击灵魂深处</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925214834.png"/ loading="lazy"><p>何时：</p><p>互联网云本的精神是开放共享，可现在。。。。 何时才能见到昔日峥嵘，</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csdn的优势和恶势</title>
      <link href="posts/422df213/"/>
      <url>posts/422df213/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  吐槽一小下下<code>csdn</code>，文章始终发不过去，eeeeee，以及越来越的圈钱行为，难过；要有钱公司才能够运营的更好，但是现在一些平台、公司的做法，让人有种说不出的感觉</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h1><br><h2 id="只是一个平台："><a href="#只是一个平台：" class="headerlink" title="只是一个平台："></a>只是一个平台：</h2><p><code>csdn</code>只是一个平台，并不是像<code>stack overflow</code>一样的细分领域，很难做到纯技术，不能对它要求很高</p><br><h2 id="平台也要吃饭："><a href="#平台也要吃饭：" class="headerlink" title="平台也要吃饭："></a>平台也要吃饭：</h2><p>现在环境如此，各家吃相越加难看，能够坚持但2019年已经不容易，此时开始才大举圈钱，还是值得表扬</p><br><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>个人见识浅陋，未曾见多识广，只是一个互联网的一个普通使用者，有兴趣可以留言补充，容让我明白还有哪些原因和优势</p><br><h2 id="改版："><a href="#改版：" class="headerlink" title="改版："></a>改版：</h2><p>好像csdn最近今接几个月的动作也越来越大了，应该是自己也察觉到了一些弊端，进行自我的改革和自我修复吧</p><br><h1 id="恶势："><a href="#恶势：" class="headerlink" title="恶势："></a>恶势：</h1><h2 id="取消博客左侧自定义栏目管理："><a href="#取消博客左侧自定义栏目管理：" class="headerlink" title="取消博客左侧自定义栏目管理："></a>取消博客左侧自定义栏目管理：</h2><p>一开始，一直到2019-06月份之前的时候，只要是csdn的账号拥有者，所有人都可以自定义自己的左侧的栏目管理；然后被屠杀，只有专家博客或者充钱VIP才可以定义，</p><p>当时自己的自定义的侧边栏(二维码过了一天我就取消了，那时候是为了体验功能)，还专门于 <strong>2019年02月15日</strong> 写了一篇文章：<a href="https://blog.csdn.net/qq_33154343/article/details/87371010">csdn 自定义自己的博客左侧栏目管理</a></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925202515.png"/ loading="lazy"><p><strong>官方说辞：</strong>   原文链接   <a href="https://blogdev.blog.csdn.net/article/details/91147010">2019年6月5日自定义栏目调整说明</a></p><p><img src="C:\Users\yuanyi\AppData\Roaming\Typora\typora-user-images\1569414982151.png" alt="1569414982151" loading="lazy"></p><br><h2 id="不打招呼取消博客专栏："><a href="#不打招呼取消博客专栏：" class="headerlink" title="不打招呼取消博客专栏："></a>不打招呼取消博客专栏：</h2><p>不打招呼就取消了所有人博客专栏，然后强行将普通系列文章设置为专题，且全部设置为默认却缺少图片的专栏，贼丑；那几天想着写一个专栏，还有申请，过一两天才会看到申请成功，然后在过一天就取消了这个，caocao</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925203721.png"/ loading="lazy"><br><h2 id="资源破解文章无法发布："><a href="#资源破解文章无法发布：" class="headerlink" title="资源破解文章无法发布："></a>资源破解文章无法发布：</h2><p>很久之前写的一篇，然后更新链接之后，就无法发表了。。。。。。。（有能力当然是支持正版，但是有使用需求，这就过分了。。。。。。啊啊啊~ ~ ~ ~ ~）</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925201839.png"/ loading="lazy"><br><h2 id="建立规则，用于免责和圈钱："><a href="#建立规则，用于免责和圈钱：" class="headerlink" title="建立规则，用于免责和圈钱："></a>建立规则，用于免责和圈钱：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925204621.png"/ loading="lazy">现在</p><br><h2 id="以前免费的皮肤，现在设置等级和VIP开启："><a href="#以前免费的皮肤，现在设置等级和VIP开启：" class="headerlink" title="以前免费的皮肤，现在设置等级和VIP开启："></a>以前免费的皮肤，现在设置等级和VIP开启：</h2><p>以前的所有皮肤，都是所有人可以使用的，但是现在，必须要有等级才能使用（问题是还是之前的那些免费皮肤），还有一些皮肤VIP才能使用</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925205804.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925205831.png"/ loading="lazy"><br><h2 id="百度热词查看："><a href="#百度热词查看：" class="headerlink" title="百度热词查看："></a>百度热词查看：</h2><p>最开始是不能够设置的百度网站到个人csdn的博客（或许我有不知道的高明方法）；但是突然有一天（2019年），他自己定义可以查看搜索进来的关键词和文章入口，且可以查看一个月（但是界面做的好丑，数据统计也很难直观查看）；然后大概1-2个月之后，就突然变得收费了</p><p><img src="C:\Users\yuanyi\AppData\Roaming\Typora\typora-user-images\1569416518695.png" alt="1569416518695" loading="lazy"></p><br><h2 id="添加收益模块："><a href="#添加收益模块：" class="headerlink" title="添加收益模块："></a>添加收益模块：</h2><p>表示理解，但是不接受，</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925210349.png"/ loading="lazy"><br><h1 id="预测一下："><a href="#预测一下：" class="headerlink" title="预测一下："></a>预测一下：</h1><p>在这里预测一下：2019-09-25预测</p><p>是不是后面代码片样式也需要等级或者VIP才能够随意使用切换？？？？</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925210724.png"/ loading="lazy"><br><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>说实话，还是希望平台能够长久运行下去的，毕竟还是在我启蒙学习阶段帮助到我很多，但是最近几个月的这些行为，很让我痛心啊，担心过了几载回头，已经凉透了</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在子类里使用 using 父类 父类函数名fun</title>
      <link href="posts/a10aaeda/"/>
      <url>posts/a10aaeda/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  在子类里使用 <code>using</code> 父类:: 父类函数名<code>fun</code>;  这算是一个<strong>c++<strong>的知识点吧，自己在一个项目中看到却不理解的地方， 自己的搜索关键词为：</strong>派生类</strong> 中 <strong>使用 using</strong> <code>父类 :: 函数名</code>；所以这一篇的名称就取名为这个</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/101381793">在子类里使用 using 父类::父类函数名fun</a></li></ul><br><h2 id="派生类里使用using原因："><a href="#派生类里使用using原因：" class="headerlink" title="派生类里使用using原因："></a>派生类里使用using原因：</h2><p>如果基类中成员函数有多个重载版本，派生类可以重定义所继承的<font color=#FF0000 size=4 face="幼圆"> 0 个或多个版本</font>，但是<font color=#FF0000 size=4 face="幼圆"> <strong>通过派生类型只能访问派生类中重定义的那些版本</strong></font>，所以如果派生类想通过自身类型使用所有的重载版本，则派生类必须<strong>要么重定义所有重载版本</strong>，<strong>要么一个也不重定义</strong>。有时类需要仅仅重定义一个重载集中某些版本的行为，并且想要继承其他版本的含义，在这种情况下，为了重定义需要特化的某个版本而不得不重定义每一个基类版本，可能会令人厌烦。可以在派生类中为重载成员名称提供 using 声明（为基类成员函数名称而作的 using 声明将该函数的所有重载实例加到派生类的作用域），使派生类不用重定义所继承的每一个基类版本。一个 using 声明只能指定一个名字，不能指定形参表，使用using声明将名字加入作用域之后，派生类只需要重定义本类型确实必须定义的那些函数，对其他版本可以使用继承的定义。</p><p><font color=#FF0000 size=4 face="幼圆"><strong>“隐藏”是指派生类的函数屏蔽了与其同名的基类函数，规则如下：</strong></font></p><p><font color=#FF0000 size=4 face="幼圆">1、如果派生类的函数与基类的函数同名，但是参数不同。</font>此时，不论有无<code>virtual</code>关键字，基类的函数将被隐藏（注意别与重载混淆）。</p><p><font color=#FF0000 size=4 face="幼圆">2、如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有<code>virtual</code>关键字。</font>此时，基类的函数被隐藏（注意别与覆盖混淆）</p><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">My</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> override<span class="token punctuation">;</span>    <span class="token keyword">using</span> My<span class="token operator">::</span>fun<span class="token punctuation">;</span>    <span class="token comment">//本篇所讲</span>    <span class="token keyword">using</span> My<span class="token operator">::</span>fun02<span class="token punctuation">;</span>  <span class="token comment">//本篇所讲</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MySon mySon<span class="token punctuation">;</span>    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//只一个"智能提示":是int类型</span>    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//此(含自己)后面三个都是得益于 using My::fun; 而可以使用</span>    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//仍然手写调用My::fun(QString)其他类型, 可以被调用</span>    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//重写的那个函数,也是唯一的一个的"智能提示"的 int类型</span>    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//此(含自己)后面三个都是得益于 using My::fun02; 而可以使用</span>    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mySon<span class="token punctuation">.</span><span class="token function">fun02</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用同名函数<code>fun</code> 或者 <code>fun02</code>  就只有通过一个<code>My::</code>来调用</p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925194915.jpg"/ loading="lazy"><p><strong>补充一点：</strong> 使用<code>using My::fun;    //本篇所讲</code>和<code>using My::fun02;  //本篇所讲</code>，在派生类MySon若是想调用同名函数<code>fun</code> 或者 <code>fun02</code>  就只有通过一个<code>My::</code>来调用</p><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p>测试源码：<a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/08_%E5%9C%A8%E5%AD%90%E7%B1%BB%E9%87%8C%E7%94%A8%20using%20%E7%88%B6%E7%B1%BB%EF%BC%9A%EF%BC%9A%E7%88%B6%E7%B1%BB%E5%87%BD%E6%95%B0%E5%90%8D/test">test c++ 使用 using 测试</a></p><br><p><strong>参考文章:</strong> </p><p> <a href="https://blog.csdn.net/CNHK1225/article/details/47152311">C++ using关键字作用 （重载父类函数）</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QT源码分析QObject</title>
      <link href="posts/72876a90/"/>
      <url>posts/72876a90/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <strong>QT</strong>源码分析<code>QObject</code>，由此管中窥豹</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="QT源码分析：QObject："><a href="#QT源码分析：QObject：" class="headerlink" title="QT源码分析：QObject："></a>QT源码分析：QObject：</h2><p><strong>QT</strong>框架里面最大的特色就是在<strong>C++<strong>的基础上增加了元对象系统（<code>Meta-Object System</code>），而元对象系统里面最重要的内容就是信号与槽机制，这个机制是在</strong>C++<strong>语法的基础上实现的，使用了函数、函数指针、回调函数等概念。当然与我们自己去写函数所不同的是槽与信号机制会自动帮我们生成部分代码，比如我们写的信号函数就不需要写它的实现部分，这是因为在我们编译程序的时候，编译器会自动生成这一部分代码，当我们调用<code>connect</code>函数的时候，系统会自动将信号函数与槽函数相连接，于是当我们调用信号函数的时候，系统就会自动回调槽函数，不管你是在同一线程下调用或者在不同线程下调用，系统都会自动评估，并在合理的时候触发函数，以此来保证线程的安全。信号与槽机制是线程安全的，这可以使得我们在调用的时候不用再额外的增加过多保证线程同步的代码，为了实现元对象系统，</strong>QT</strong>把所有相关实现写在了<code>QObject</code>类中，所以当你想使用元对象系统的时候，你所写的类需要继承自<code>QObject</code>，包括<strong>QT</strong>自带的所有类都是继承自<code>QObject</code>，所以分析<code>QObject</code>的代码，对了解<strong>QT</strong>的元对象机制有非常大的帮助，我并不打算把<code>QObject</code>类的每一行代码都写下来，只想把其中比较关键的内容或者对分析<strong>QT</strong>源码有帮助的内容介绍一下。</p><br><h2 id="1-宏Q-OBJECT"><a href="#1-宏Q-OBJECT" class="headerlink" title="1.宏Q_OBJECT:"></a>1.宏Q_OBJECT:</h2><p>这个宏展开以后是如下定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Q_OBJECT</span> <span class="token punctuation">\</span><span class="token expression"><span class="token keyword">public</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>    <span class="token expression">QT_WARNING_PUSH </span><span class="token punctuation">\</span>    <span class="token expression">Q_OBJECT_NO_OVERRIDE_WARNING </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">static</span> <span class="token keyword">const</span> QMetaObject staticMetaObject<span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">virtual</span> <span class="token keyword">const</span> QMetaObject <span class="token operator">*</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">qt_metacast</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">qt_metacall</span><span class="token punctuation">(</span>QMetaObject<span class="token operator">::</span>Call<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression">QT_TR_FUNCTIONS </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">private</span><span class="token operator">:</span> </span><span class="token punctuation">\</span>    <span class="token expression">Q_OBJECT_NO_ATTRIBUTES_WARNING </span><span class="token punctuation">\</span>    <span class="token expression">Q_DECL_HIDDEN_STATIC_METACALL <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qt_static_metacall</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span><span class="token punctuation">,</span> QMetaObject<span class="token operator">::</span>Call<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression">QT_WARNING_POP </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">struct</span> <span class="token class-name">QPrivateSignal</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token function">QT_ANNOTATE_CLASS</span><span class="token punctuation">(</span>qt_qobject<span class="token punctuation">,</span> </span><span class="token string">""</span><span class="token expression"><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以看到这个宏定义了一些函数，并且函数名都带有<code>meta</code>，所以不难猜到这些函数和<strong>QT</strong>的元对象系统是有关系的，实际上你在<code>qobject.cpp</code>里面是找不到这些函数的实现的，它们的实现都在<code>moc_qobject.cpp</code>里面。QT的元对象系统是这样处理的，当你编译你的工程时，它会去遍历所有**C++**文件，当发现某一个类的私有部分有声明<code>Q_OBJECT</code>这个宏时，就会自动生成一个<code>moc_*.cpp</code>的文件，这个文件会生成信号的实现函数，<code>Q_OBJECT</code>宏里面定义的那些函数也会在这个文件里面实现，并生成与类相关的元对象。这就是为什么我们定义一个信号的时候，不需要实现它，因为它的实现已经写在<code>moc_*.cpp</code>文件里面了。</p><br><h2 id="2-宏Q-PROPERTY"><a href="#2-宏Q-PROPERTY" class="headerlink" title="2.宏Q_PROPERTY:"></a>2.宏Q_PROPERTY:</h2><blockquote><p>Q_PROPERTY(QString objectName READ objectName WRITE setObjectName NOTIFY objectNameChanged)</p></blockquote><p>这个宏的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Q_DECLARE_PRIVATE</span><span class="token expression"><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">inline</span> Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">inline</span> <span class="token keyword">const</span> Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Class</span></span><span class="token punctuation">##</span><span class="token expression">Private<span class="token punctuation">;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个宏首先创建了两个内联函数，返回值都是QObjectPrivate ，并且声明QObjectPrivate 为友元类，<code>QObjectPrivate</code>这个类是在qobject_p.h中定义，它继承至QObjectData，你可以看到d_func()是将d_prt强制转换为<code>QObjectPrivate</code> 类型，而d_prt这个指针在QObject里面定义的是<code>QObjectData</code>的指针类型，所以这里可以进行强转，<code>QObjectPrivate</code>这个类主要存放QOject类需要用到的一些子对象，变量等。为什么要介绍这个宏，如果你有看QT源码习惯的话，你会发现几乎每一个类都用到了这个宏，我们自己写的类会经常把类内部用的变量声明在private部分，但是QT源码并不是这样做的，它的做法是给每个类创建一个以<code>类名+Private</code>的类，例如QObject对应的就是<code>QObjectPrivate</code>，这个类实际上就是用来存放QObject需要用到的所有私有变量和私有对象，而<code>QObject</code>更多的是函数实现，你去看其他的源码也是如此，子对象声明在QPrivate中，而本类只实现函数。</p><br><h2 id="3-宏Q-DECLARE-PRIVATE："><a href="#3-宏Q-DECLARE-PRIVATE：" class="headerlink" title="3.宏Q_DECLARE_PRIVATE："></a>3.宏Q_DECLARE_PRIVATE：</h2><blockquote><p>Q_DECLARE_PRIVATE(QObject)</p></blockquote><p>这个宏的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Q_DECLARE_PRIVATE</span><span class="token expression"><span class="token punctuation">(</span>Class<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression">``<span class="token keyword">inline</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ``<span class="token keyword">return</span>` `<span class="token keyword">reinterpret_cast</span>``<span class="token operator">&lt;</span>Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span>    <span class="token expression">``<span class="token keyword">inline</span>` `<span class="token keyword">const</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token operator">*</span> <span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> ``<span class="token keyword">const</span>` `<span class="token punctuation">&#123;</span> ``<span class="token keyword">return</span>` `<span class="token keyword">reinterpret_cast</span>``<span class="token operator">&lt;</span>``<span class="token keyword">const</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token function">qGetPtrHelper</span><span class="token punctuation">(</span>d_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> </span><span class="token punctuation">\</span><span class="token expression"><span class="token keyword">friend</span>` `<span class="token keyword">class</span>` `Class</span><span class="token punctuation">##</span><span class="token expression">Private<span class="token punctuation">;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个宏首先创建了两个内联函数，返回值都是<code>QObjectPrivate </code>，并且声明<code>QObjectPrivate</code> 为友元类，<code>QObjectPrivate</code>这个类是在qobject_p.h中定义，它继承至<code>QObjectData</code>，你可以看到<code>d_func()</code>是将<code>d_prt</code>强制转换为<code>QObjectPrivate</code> 类型，而<code>d_prt</code>这个指针在QObject里面定义的是QObjectData的指针类型，所以这里可以进行强转，<code>QObjectPrivate</code>这个类主要存放QOject类需要用到的一些子对象，变量等。为什么要介绍这个宏，如果你有看QT源码习惯的话，你会发现几乎每一个类都用到了这个宏，我们自己写的类会经常把类内部用的变量声明在<code>private</code>部分，但是QT源码并不是这样做的，它的做法是给每个类创建一个以类名+Private的类，例如QObject对应的就是QObjectPrivate，这个类实际上就是用来存放QObject需要用到的所有私有变量和私有对象，而QObject更多的是函数实现，你去看其他的源码也是如此，子对象声明在QPrivate中，而本类只实现函数。</p><br><h2 id="4-构造函数："><a href="#4-构造函数：" class="headerlink" title="4.构造函数："></a>4.构造函数：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">QObject</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">d_ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> QObjectPrivate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">Q_D</span><span class="token punctuation">(</span>QObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    d_ptr<span class="token operator">-></span>q_ptr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    d<span class="token operator">-></span>threadData <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>parent<span class="token operator">-></span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> parent<span class="token operator">-></span><span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>threadData <span class="token operator">:</span> <span class="token class-name">QThreadData</span><span class="token operator">::</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    d<span class="token operator">-></span>threadData<span class="token operator">-></span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QT_TRY <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_parent_thread</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> parent <span class="token operator">?</span> parent<span class="token operator">-></span><span class="token function">d_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>threadData <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> d<span class="token operator">-></span>threadData<span class="token punctuation">)</span><span class="token punctuation">)</span>                parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token function">QT_CATCH</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            d<span class="token operator">-></span>threadData<span class="token operator">-></span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            QT_RETHROW<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">QT_VERSION <span class="token operator">&lt;</span> <span class="token number">0x60000</span></span></span>    <span class="token function">qt_addObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Q_UNLIKELY</span><span class="token punctuation">(</span>qtHookData<span class="token punctuation">[</span>QHooks<span class="token operator">::</span>AddQObject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>QHooks<span class="token operator">::</span>AddQObjectCallback<span class="token operator">></span><span class="token punctuation">(</span>qtHookData<span class="token punctuation">[</span>QHooks<span class="token operator">::</span>AddQObject<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）首先第一步就创建d_ptr指针。</p><p>（2）Q_D(QObject);这个宏你可以在QT的很多源码里面看到。它展开以后是下面的样子：#define Q_D(Class) Class##Private * const d = d_func();</p><p>　　  d_fun()函数前面讲到了，其实就是返回d_ptr了。所以这个宏的意思是定义一个指针d指向d_ptr;</p><p>（3）d_ptr-&gt;q_ptr = this;</p><p>　　 q_ptr是QOject类型，这里把this指针赋给了它，所以使得QObjectPrivate可以回调QOject的函数。</p><p>（4）初始化threadData</p><br><h2 id="5-moveToThread："><a href="#5-moveToThread：" class="headerlink" title="5.moveToThread："></a>5.moveToThread：</h2><h2 id="6-connect函数："><a href="#6-connect函数：" class="headerlink" title="6.connect函数："></a>6.connect函数：</h2><p>这两个部分参见原文：</p><p><a href="https://www.cnblogs.com/WushiShengFei/p/9820835.html">QT源码分析：QObject</a></p><p>本文同步文章：</p><p><a href="https://blog.csdn.net/qq_33154343/article/details/101381410">QT源码分析QObject</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 重载(overload)、重写(overrride)、重定义(redefine)总结</title>
      <link href="posts/270f0bf5/"/>
      <url>posts/270f0bf5/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>C++</code>重载(<strong>overload</strong>)、重写(<strong>overrride</strong>)、重定义(<strong>redefine</strong>)总结</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="一、重载（overload）"><a href="#一、重载（overload）" class="headerlink" title="一、重载（overload）"></a>一、重载（overload）</h2><p>指函数名相同，但是它的参数表列个数或顺序，类型不同。但是不能靠返回类型来判断。<br>（1）相同的范围（在同一个作用域中） ；<br>（2）函数名字相同；<br>（3）参数不同；<br>（4）virtual 关键字可有可无。<br>（5）返回值可以不同；</p><br><h2 id="二、重写（也称为覆盖-override）"><a href="#二、重写（也称为覆盖-override）" class="headerlink" title="二、重写（也称为覆盖 override）"></a>二、重写（也称为覆盖 override）</h2><p>是指派生类重新定义基类的虚函数，特征是：<br>（1）不在同一个作用域（分别位于派生类与基类） ；<br>（2）函数名字相同；<br>（3）参数相同；<br>（4）基类函数必须有 virtual 关键字，不能有 static 。<br>（5）返回值相同（或是协变），否则报错；&lt;—-协变这个概念我也是第一次才知道…</p><p>（6）重写函数的访问修饰符可以不同。尽管 virtual 是 private 的，派生类中重写改写为 public,protected 也是可以的</p><br><h2 id="三、重定义（redefine-也称隐藏）"><a href="#三、重定义（redefine-也称隐藏）" class="headerlink" title="三、重定义（redefine,也称隐藏）"></a>三、重定义（redefine,也称隐藏）</h2><p>（1）不在同一个作用域（分别位于派生类与基类） ；<br>（2）函数名字相同；<br>（3）返回值可以不同；<br>（4）参数不同。此时，不论有无 virtual 关键字，基类的函数将被隐藏（注意别与重载以及覆盖混淆） 。<br>（5）参数相同，但是基类函数没有 virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆） 。</p><br><h3 id="重定义redefine的代码演示"><a href="#重定义redefine的代码演示" class="headerlink" title="重定义redefine的代码演示:"></a>重定义redefine的代码演示:</h3><h4 id="情况一：参数不同"><a href="#情况一：参数不同" class="headerlink" title="情况一：参数不同:"></a>情况一：参数不同:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*重定义（也成隐藏）:参数不同。此时，不论有无 virtual 关键字，基类的函数将被隐藏（注意别与重载以及覆盖混淆）*/</span><span class="token keyword">class</span> <span class="token class-name">My</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">//或</span><span class="token keyword">class</span> <span class="token class-name">My</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>    virtualvoid <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token comment">//运行以下代码,会得到一样测试结果 </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MySon mySon<span class="token punctuation">;</span>    mySon<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//使用时候,会有唯一"智能提示",只有double的版本</span>    <span class="token comment">//mySon.fun("str");  //尝试调用My::fun(QString), 但是被隐藏,会编译不过</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果：</strong></p><p><strong>编码智能提示时候：只有一个</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925191404.png"/ loading="lazy"><p><strong>运行结果：</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925191439.png"/ loading="lazy"><br><h4 id="情况二：参数相同"><a href="#情况二：参数相同" class="headerlink" title="情况二：参数相同:"></a>情况二：参数相同:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*重定义（也成隐藏）:参数相同，但是基类函数没有 virtual关键字。此时，基类的函数被隐藏（注意别与覆盖混淆） */</span><span class="token keyword">class</span> <span class="token class-name">My</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">My</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> QString str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MySon</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">My</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MySon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行效果：</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925191630.png"/ loading="lazy"><br><p><strong>参考文章:</strong></p><p> <a href="https://www.cnblogs.com/tanky_woo/archive/2012/02/08/2343203.html">C++ 重载(overload)、重写(overrride)、重定义(redefine)总结</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QPushButton使用从右往左的显示之LayoutDirection</title>
      <link href="posts/68300fb3/"/>
      <url>posts/68300fb3/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  QPushButton使用从右往左的显示控件，设置属性<code>LayoutDirection</code></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/101380385">QPushButton使用从右往左的显示之LayoutDirection</a> </li></ul><br><h2 id="QPushButton-使用-从右往左-的文字："><a href="#QPushButton-使用-从右往左-的文字：" class="headerlink" title="QPushButton 使用 从右往左 的文字："></a>QPushButton 使用 从右往左 的文字：</h2><p>在绘画自定义控件<code>QPushButton</code>的时候,发现有一个问题：需要考虑到一些少数地区的人使用的文字,是属于从右往左写,比如说 “阿文”等(忘记是哪一篇文章看到过,说的是有这种文字,反正鹅没有见过,哪一位见过的,贴个图我看一下, 滑稽)~~~</p><p>在绘画<code>QPushButton</code>控件时候,我有写类似如下一段代码,专门照顾这这种情况</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>button<span class="token operator">-></span>direction <span class="token operator">==</span> Qt<span class="token operator">::</span>LeftToRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>textRect<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>rectArrowAndLine<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> frameRadius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>textRect<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>rectArrowAndLine<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> frameRadius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPushButton <span class="token function">btn2</span><span class="token punctuation">(</span><span class="token string">"abcdefghijk2222220000000022000011111222222a"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>btn2<span class="token punctuation">.</span><span class="token function">setLayoutDirection</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>RightToLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设定下拉标志在左边，打开时候是在右边</span>btn2<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QMenu<span class="token operator">*</span> menu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>btn2<span class="token punctuation">.</span><span class="token function">setMenu</span><span class="token punctuation">(</span>menu2<span class="token punctuation">)</span><span class="token punctuation">;</span>menu2<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"act测试一b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>menu2<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"act测试2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>menu2<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"act测试23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>实际若是想使用<code>QPushButton</code>,使用如上面代码,可以看到效果(图中为<code>deepin</code>系统的风格中)</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925190005.jpg"/ loading="lazy"><p>查看效果可知，实际上<code>btn2.setLayoutDirection(Qt::RightToLeft);</code>并不是指文字从右往左书写显示，而是，控件排列顺序是从右往左</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git删除本地和远程的仓库分支</title>
      <link href="posts/c861c1e9/"/>
      <url>posts/c861c1e9/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> <code>git</code>删除本地分支和对应的远程的仓库分支</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/101365411"><code>git</code>删除本地和远程的仓库分支</a> </li></ul><h2 id="目的和背景"><a href="#目的和背景" class="headerlink" title="目的和背景:"></a>目的和背景:</h2><p>首先需要切换到其他分支,然后删除本地和远程<code>self</code>的<strong>slider</strong>分支</p><ul><li>首先,查看本地(和远程的)所有仓库</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除本地<strong>slider</strong>仓库</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -d slider<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看所有远程仓库</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>可以看到此时远程<code>self</code>仓库的<strong>slider</strong>分支没有删除</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925184745.jpg"/ loading="lazy"><ul><li>删除远程<code>self</code>仓库的<strong>slider</strong>分支</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push self --delete slider<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>验证删除成功,依次查看本地和网站的仓库<strong>slider</strong>分支是否被删除</li></ul><p>可以看到，是成功了的</p><p>本地的分支被删除：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925184816.jpg"/ loading="lazy"><p>远程的分支也被删除</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925184910.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>error failed to push some refs to</title>
      <link href="posts/70306a77/"/>
      <url>posts/70306a77/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  刚才使用<code>git</code>进行<code>push</code> 的时候，突然<code>push</code>不上去， 且提示错误：</p><blockquote><p>! [rejected]        master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘git@github.com:  xxx / xxxx.git’</p></blockquote><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><br><h2 id="错误提示："><a href="#错误提示：" class="headerlink" title="错误提示："></a>错误提示：</h2><p>如图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925001029.png"/ loading="lazy"><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>猜想是，可能远程仓库，比本地更新，所以像<code>pull</code>一下，在<code>push</code>；命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master --rebase  //拉取远程最新，和本地的仓库变基add<span class="token punctuation">..</span>. commit<span class="token punctuation">..</span>.<span class="token function">git</span> push <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>pull</code>之后期间使用 <code>git log</code>，确认一下，本地是否领先远程仓库，确保可以<code>push</code>；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925001608.png"/ loading="lazy"><p>如期：推送成功</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190925001718.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>列表控件QListWidget和工具按钮QToolButton的和用法</title>
      <link href="posts/52f018fb/"/>
      <url>posts/52f018fb/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 主要讲解 <code>QListWidget</code>和<code>QToolButton</code>的和用法，其中还有<strong>QToolBar</strong>、<strong>QToolBox</strong>、<strong>QTabWidget</strong>这些简单是讲解和使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介，另外还有已下主要知识点</p><ul><li>删除<code>item</code>时候：<code>takeItem()</code></li><li><strong>QToolButton</strong>的<code>PopupMode</code>属性，和<code>setDefaultAction()</code>默认行为</li><li>给<strong>QListWidget</strong>添加鼠标右键弹出菜单</li></ul><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921162110.gif"/ loading="lazy"><br><h2 id="布局设计图"><a href="#布局设计图" class="headerlink" title="布局设计图:"></a>布局设计图:</h2><p>其中的布局设计，如下图</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921162322.png"/ loading="lazy"><p>这个其中主要是创建多个<code>Action()</code>, 然后使用添加到工具栏和按钮上面，从而得相同的效果</p><br><h2 id="takeItem-移除item："><a href="#takeItem-移除item：" class="headerlink" title="takeItem()移除item："></a>takeItem()移除item：</h2><p><strong>删除item时候，takeItem(row)函数只是移除，不删除对象：</strong></p><ul><li><strong>其中删除QListWidget的item时候，需要注意：</strong><font color=#FE7207  size=3 face="幼圆"><strong>一定要手动删除其创建的item</strong></font></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901193426.png"/ loading="lazy"><p>翻译如下：</p><blockquote><p>从列表小部件中的给定行中删除并返回项;否则返回0。从列表小部件中删除的项目将不会由Qt管理，并且需要手动删除。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//actDel删除一个指定的ListWidget的列表项</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_actDel_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> row <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QListWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">takeItem</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//删除该为row的item， 并且返回指针</span>    <span class="token keyword">delete</span> item<span class="token punctuation">;</span>                                                       <span class="token comment">//手动删除对象</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="PopupMode的属性-下拉小箭头"><a href="#PopupMode的属性-下拉小箭头" class="headerlink" title="PopupMode的属性(下拉小箭头):"></a>PopupMode的属性(下拉小箭头):</h2><p><strong>QToolButton的PopupMode属性，和setDefaultAction()默认行为：</strong></p><p>文档如下，例子如下面代码</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901220227.png"/ loading="lazy"><ul><li>ToolBar 添加项选择（带下拉框） 和退出；右侧一个按钮也添加一个项的选择</li></ul><p>添加下图所示的两个地方</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901223509.png"/ loading="lazy"><p>【上图靠上的QToolButton】其风格样式属性是<code>setPopupMode(QToolButton::InstantPopup)</code>；和靠下面那个有区别，<strong>点击所有地方都会弹出菜单</strong>（由代码的ToolBotton的样式故意设置不一样进行演示的）</p><p>【上图靠下的QToolButton】其风格样式属性是<code>setPopupMode(QToolButton::MenuButtonPopup)</code>；默认可以点击<strong>左侧主体</strong>（非右侧三角形状的下拉部分），也会有反应(但是不弹出菜单)；<strong>只有点击右侧有三角形区域，才会弹出菜单</strong>，默认激活<code>setDefaultAction(ui-&gt;actSelPopMenu)</code>；而<strong>actSelPopMenu</strong>又在Design里面与<strong>actSelInvs</strong>进行了关联。所以点击其左侧部分，相当于点击了反选</p><p>其中代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//ToolBar 添加项选择（带下拉框） 和退出；右侧一个按钮也添加一个项的选择</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">creatorPopMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//创建菜单</span>    QMenu<span class="token operator">*</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">//创建弹出式菜单</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelAll<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelInvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelNone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//右侧ListWidget， 其上方的toolBtn按钮</span>    <span class="token comment">//设置toolBtnSelectItem的多个属性：PopupMode、ToolButtonStyle等（在Design已经设置）</span>    ui<span class="token operator">-></span>toolBtnSelectItem<span class="token operator">-></span><span class="token function">setDefaultAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelPopMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//关联action</span>    ui<span class="token operator">-></span>toolBtnSelectItem<span class="token operator">-></span><span class="token function">setMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//设置下拉菜单menu</span>    <span class="token comment">//工具栏QToolBar上面的下拉菜单样式按钮</span>    QToolButton<span class="token operator">*</span> toolBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QToolButton</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    toolBtn<span class="token operator">-></span><span class="token function">setPopupMode</span><span class="token punctuation">(</span>QToolButton<span class="token operator">::</span>InstantPopup<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//下拉式菜单样式属性</span>    toolBtn<span class="token operator">-></span><span class="token function">setToolButtonStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ToolButtonTextUnderIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//设置汉字出现在icon下面</span>    toolBtn<span class="token operator">-></span><span class="token function">setDefaultAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelPopMenu<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//关联action</span>    toolBtn<span class="token operator">-></span><span class="token function">setMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token comment">//关联菜单</span>    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                           <span class="token comment">//添加隔栏</span>    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>toolBtn<span class="token punctuation">)</span><span class="token punctuation">;</span>                                       <span class="token comment">//添加到工具栏</span>    <span class="token comment">//添加退出按钮</span>    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>toolBar<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actExit<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//添加退出按钮</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="给QListWidget添加鼠标右键弹出菜单："><a href="#给QListWidget添加鼠标右键弹出菜单：" class="headerlink" title="给QListWidget添加鼠标右键弹出菜单："></a>给QListWidget添加鼠标右键弹出菜单：</h2><blockquote><p>只要是继承于<strong>QWidget</strong>均有<strong>customContextMenuRequested</strong>这个信号，是鼠标右键发射的信号；可以用来创建和运行右键快捷菜单</p></blockquote><ul><li><strong>设置QListWidget支持右键菜单,这句话一定要有</strong>， 不然下面的设置不会生效</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">setContextMenuPolicy</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>CustomContextMenu<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现菜单细节：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//鼠标右键自定义快捷菜单</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_listWidget_customContextMenuRequested</span><span class="token punctuation">(</span><span class="token keyword">const</span> QPoint <span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"11111111"</span><span class="token punctuation">;</span>    <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span>    QMenu<span class="token operator">*</span> menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QMenu</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">//创建菜单</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actListInit<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actDel<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actClear<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actInsert<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelAll<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelNone<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">addAction</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>actSelInvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    menu<span class="token operator">-></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">QCursor</span><span class="token operator">::</span><span class="token function">pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                            <span class="token comment">//在鼠标光标位置显示右键快捷菜单</span>    <span class="token keyword">delete</span> menu<span class="token punctuation">;</span>                                                           <span class="token comment">//手工创建的指针必须手工删除</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901224141.png"/ loading="lazy"><br><h2 id="关于初始化QListWidgetItem按钮："><a href="#关于初始化QListWidgetItem按钮：" class="headerlink" title="关于初始化QListWidgetItem按钮："></a>关于初始化<code>QListWidgetItem</code>按钮：</h2><p>左侧的初始化ListWidget，点击之前会确认右上角的<strong>□可编辑复选框</strong>是否被勾上√， <strong>其完整含义是：□ 框 初始化的成员，是否设置为可编辑，若勾选，那么初始化的成员都是可以别编辑的</u></strong>**</p><p>且新创建的<strong>QListWidgetItem</strong>项，应该的<strong>Flags</strong>属性一般设置为如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//actListInit初始化ListWidget的列表项listWidget</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_actListInit_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QListWidgetItem<span class="token operator">*</span> item<span class="token punctuation">;</span>                                          <span class="token comment">//每一行都是一个QListWidgetItem</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/github.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> chk <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">//是否可编辑</span>    ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(ui->listWidget);            //创建一个item</span>        item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"初始化 第%1个项item"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置文字</span>        item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">//设置icon图标</span>        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//设置选中方式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chk<span class="token punctuation">)</span>                                                    <span class="token comment">//可编辑</span>            item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">//添加项item到listWidget里面</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//actInsert在ListWidget的列表项中插入一个项item</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_actInsert_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QListWidgetItem<span class="token operator">*</span> item<span class="token punctuation">;</span>                                           <span class="token comment">//每一行都是一个QListWidgetItem</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/gril.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> chk <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//是否可编辑</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//创建一个item</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"插入一个项item: "</span> <span class="token operator">+</span> <span class="token class-name">QDateTime</span><span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:MM:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置文字</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment">//设置icon图标</span>    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//设置选中方式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chk<span class="token punctuation">)</span>                                                          <span class="token comment">//可编辑</span>        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">insertItem</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">currentRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加项item到listWidget里面</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">//actAdd添加一个指定的ListWidget的列表项</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_actAdd_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QListWidgetItem<span class="token operator">*</span> item<span class="token punctuation">;</span>                                           <span class="token comment">//每一行都是一个QListWidgetItem</span>    QIcon icon<span class="token punctuation">;</span>    icon<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/TREE.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> chk <span class="token operator">=</span> ui<span class="token operator">-></span>checkBox<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">//是否可编辑</span>    item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListWidgetItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//创建一个item</span>    item<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"添加一个项item: "</span> <span class="token operator">+</span> <span class="token class-name">QDateTime</span><span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:MM:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置文字</span>    item<span class="token operator">-></span><span class="token function">setIcon</span><span class="token punctuation">(</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>                                              <span class="token comment">//设置icon图标</span>    item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//设置选中方式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chk<span class="token punctuation">)</span>                                                          <span class="token comment">//可编辑</span>        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserTristate <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        item<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsUserTristate <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment">//添加项item到listWidget里面</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">//设置全选</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_actSelAll_triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nCount <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QListWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> ui<span class="token operator">-></span>listWidget<span class="token operator">-></span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">//设置QListWidget的当前item发生变化，触发的信号,会在右侧显示出来</span><span class="token keyword">void</span> <span class="token class-name">ExQListWidget</span><span class="token operator">::</span><span class="token function">on_listWidget_currentItemChanged</span><span class="token punctuation">(</span>QListWidgetItem <span class="token operator">*</span>current<span class="token punctuation">,</span> QListWidgetItem <span class="token operator">*</span>previous<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            ui<span class="token operator">-></span>lineEditRight<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前项:%1；  前一项%2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            ui<span class="token operator">-></span>lineEditRight<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"当前项:%1；  前一项%2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>current<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>previous<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQListWidgetEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QComboBox和QPlainTextEdit的讲解和使用</title>
      <link href="posts/8158b3d5/"/>
      <url>posts/8158b3d5/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  下拉列表框<code>QComboBox</code>和富文本编辑器<code>QPlainTextEdit</code>的介绍和使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="配置环境："><a href="#配置环境：" class="headerlink" title="配置环境："></a>配置环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921170623.gif"/ loading="lazy"><br><h2 id="QComboBox属性："><a href="#QComboBox属性：" class="headerlink" title="QComboBox属性："></a>QComboBox属性：</h2><p><code>QComboBox</code>是下拉列表框组件类，它提供一个下拉列表供用户选择，也可以直接当作一个<code>QLineEdit</code> 用作输入。<code>QComboBox</code>除了显示可见下拉列表外，每个项（<strong>item</strong>，或称列表项）还可以关联一个<strong>QVariant</strong>类型的变量，用于存储一些不可见数据。</p><p><code>QComboBox</code>存储的项是一个列表，但是<code>QComboBox</code>不提供整个列表用于访问，可以通过索引访问某个项。访问项的一些函数主要有以下几种。其一些基本属性和常用函数介绍：</p><table><thead><tr><th>常用函数</th><th>含义</th></tr></thead><tbody><tr><td>int currentIndex( )</td><td>返回当前项的序号，第一个项的序号为0</td></tr><tr><td>QString currentText( )</td><td>返回当前项的文字</td></tr><tr><td>QVariant currentData(int role=Qt:UserRole)</td><td>返回当前项的关联数据，数据的缺省角色role=Qt:UserRole</td></tr><tr><td>QString itemText(int index)</td><td>返回指定索引号的项的文字</td></tr><tr><td>QVariant itemData(int index,int role=Qt::UserRole)</td><td>返回指定索引号的项的关联数据</td></tr><tr><td>int count（)</td><td>返回项的个数</td></tr></tbody></table><p><strong>在一个QComboBox组件上选择项发生变化时，会发射如下两个信号：</strong></p><p>这两个信号只是传递的参数不同，一个传递的是当前项的索引号，一个传递的当前项的文字。</p><blockquote><p>void currentIndexChanged(int index)<br>void currentIndexChanged(const QString &amp;text)</p></blockquote><br><h2 id="QPlain-TextEdit属性："><a href="#QPlain-TextEdit属性：" class="headerlink" title="QPlain TextEdit属性："></a>QPlain TextEdit属性：</h2><p><code>QPlainTextEdit</code>是一个多行文本编辑器，用于显示和编辑多行简单文本。另外，还有一个<strong>QTextEdit</strong><br>组件，是一个所见即所得的可以编辑带格式文本的组件，以<strong>HTML</strong>格式标记符定义文本格式。</p><p><code>QPlainTextEdit</code> 提供**cut( )、copy( )、paste( )、undo( )、redo( )、clear( )、selectAll( )**等标准编辑功<br>能的槽函数，<code>QPlainTextEdit</code>还提供一个标准的右键快捷菜单。</p><p><font color=#D0087E size=4 face="幼圆"><code>QPlainTextEdit</code>的文字内容以<strong>QTextDocument</strong>类型存储，函数<code>document()</code>返回这个文档对象的<br>指针。<br><strong>QTextDocument</strong>是内存中的文本对象，以文本块的方式存储，一个文本块就是一个段落，每<br>个段落以回车符结束。<strong>QTextDocument</strong>提供一些函数实现对文本内容的存取。</font></p><table><thead><tr><th>常用函数</th><th>含义()</th></tr></thead><tbody><tr><td>appendPlainText()</td><td>向QPlain TextEdit添加一行话</td></tr><tr><td>int blockCount()</td><td>获得文本块个数</td></tr><tr><td>QTextBlock findBlockByNumber(int blockNumber)</td><td>读取某一个文本块，序号从0开始，至blockCount()-1结束。</td></tr></tbody></table><p>一个<strong>document</strong>有多个<strong>TextBlock</strong>，从<strong>document</strong>中读取出的一个文本块类型为<strong>QTextBlock</strong>，通过<code>QTextBlock.：text()</code>函数可以获取其纯文本文字。</p><br><h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//左上角区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//初始化简单的QComboBox控件</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_btnLeftInit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QIcon ico<span class="token punctuation">;</span>    ico<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/github.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"第%1个item项"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//带有ico图标的项</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//清除简单的QComboBox控件</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_btnLeftClear_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//勾选QComboBox为可以编辑状态</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_checkBoxOnlyWrite_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxOnlyWrite<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">setEditable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//右上角区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//初始化复杂的QComboBox控件（给每一项都添加一个对应的自定义数据[不显示]）</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_btnRightInit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QIcon ico<span class="token punctuation">;</span>    ico<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/gril.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QMap<span class="token operator">&lt;</span>QString<span class="token punctuation">,</span> QString<span class="token operator">></span> map<span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张投"</span><span class="token punctuation">,</span> <span class="token string">"16岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张我"</span><span class="token punctuation">,</span> <span class="token string">"17岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张以"</span><span class="token punctuation">,</span> <span class="token string">"18岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张木"</span><span class="token punctuation">,</span> <span class="token string">"19岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张李"</span><span class="token punctuation">,</span> <span class="token string">"20岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张，"</span><span class="token punctuation">,</span> <span class="token string">"21岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张报"</span><span class="token punctuation">,</span> <span class="token string">"22岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张之"</span><span class="token punctuation">,</span> <span class="token string">"23岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张以"</span><span class="token punctuation">,</span> <span class="token string">"24岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张琼"</span><span class="token punctuation">,</span> <span class="token string">"25岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张玖"</span><span class="token punctuation">,</span> <span class="token string">"26岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"张。"</span><span class="token punctuation">,</span> <span class="token string">"27岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span><span class="token punctuation">(</span>QString str<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> str<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//因为有Map，所以QComboBox显示会按照key排序，而非上面的定义顺序,注意不是map.key(str)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//底部区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//文本框内容每次读取一行，添加到ComboBox作为item项</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_btnBottomAdd_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTextDocument<span class="token operator">*</span> doc <span class="token operator">=</span> ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//获取文本对象</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> doc<span class="token operator">-></span><span class="token function">blockCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment">//回车符是一个block</span>    QIcon ico<span class="token punctuation">;</span>    ico<span class="token punctuation">.</span><span class="token function">addFile</span><span class="token punctuation">(</span><span class="token string">":/images/github.ico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        QTextBlock text <span class="token operator">=</span> doc<span class="token operator">-></span><span class="token function">findBlockByNumber</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取文本中一段（以换行为标志）</span>        ui<span class="token operator">-></span>comBoxLeft<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>ico<span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"附加内容:%1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//清除可编辑的富文本的编辑器的所有内容</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_btnBottomClear_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置富文本的编辑器(plainTextEdit)只可读</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">on_checkBoxOnlyRead_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>checkBoxOnlyRead<span class="token operator">-></span><span class="token function">isChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//公共的槽函数区域+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//显示当前选中的ComboBox的item项的内容</span><span class="token keyword">void</span> <span class="token class-name">ExQcomboBox</span><span class="token operator">::</span><span class="token function">onSelectDisplay</span><span class="token punctuation">(</span>QString str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString strData <span class="token operator">=</span> ui<span class="token operator">-></span>comBoxRight<span class="token operator">-></span><span class="token function">currentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 获取当前item的关联数据的内容</span>    ui<span class="token operator">-></span>labDisplay<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> strData<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>plainTextEdit<span class="token operator">-></span><span class="token function">appendPlainText</span><span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> strData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>【QtQlistWidgetEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QTimer和QDateTime的讲解和使用</title>
      <link href="posts/2e2d5144/"/>
      <url>posts/2e2d5144/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  讲解<code>QTimer</code> 定时器（不可见控件）和 <code>QDateTime</code>日期时间的控件</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918202243.gif"/ loading="lazy"><br><h2 id="时间日期相关的类："><a href="#时间日期相关的类：" class="headerlink" title="时间日期相关的类："></a>时间日期相关的类：</h2><p><strong>时间日期是经常遇到的数据类型，Qt中时间日期类型的类如下。</strong></p><ul><li><strong>QTime</strong>：时间数据类型，仅表示时间，如15:23：13。</li><li><strong>QDate</strong>：日期数据类型，仅表示日期，如2017-4-5。</li><li><strong>QDateTime</strong>:日期时间数据类型，表示日期和时间，如2017-03-2308：12:43。</li></ul><br><p><strong>Qt中有专门用于日期、时间编辑和显示的界面组件，介绍如下。</strong></p><ul><li><strong>QTimeEdit</strong>:编辑和显示时间的组件。</li><li><strong>QDateEdit</strong>:编辑和显示日期的组件。</li><li><strong>QDateTimeEdit</strong>：编辑和显示日期时间的组件。</li><li><strong>OCalendarWidget</strong>:一个用日历形式选择日期的组件。</li></ul><br><h2 id="QDateTimeEdit时间属性"><a href="#QDateTimeEdit时间属性" class="headerlink" title="QDateTimeEdit时间属性:"></a>QDateTimeEdit时间属性:</h2><table><thead><tr><th align="center">属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">datetime</td><td align="center">日期时间</td></tr><tr><td align="center">date</td><td align="center">日期</td></tr><tr><td align="center">time</td><td align="center">时间</td></tr><tr><td align="center">maximumDate Time、minimumDate Time</td><td align="center">最大、最小日期</td></tr><tr><td align="center">maximumDate、minimumDate</td><td align="center">最大、最小时间</td></tr><tr><td align="center">currentSection</td><td align="center">当前输入光标所在的时间日期数据段，是枚举类型QDateTimeEdit：:Section</td></tr><tr><td align="center">QDateTimeEdit</td><td align="center">显示日期时间数据时分为多个段，单击编辑框右侧的上下按钮可修改当前段的值</td></tr><tr><td align="center">currentSectionIndex</td><td align="center">用序号表示的输入光标所在的段</td></tr><tr><td align="center">calendarPopup</td><td align="center">是否允许弹出一个日历选择框</td></tr><tr><td align="center">displayFormat</td><td align="center">显示格式，日期时间数据的显示格式</td></tr></tbody></table><p><strong>date</strong>和<strong>time</strong>设置其中一个，就会自动修改其中另外一个。</p><p><strong>QDateTimeEdit</strong>：如输入光标在YearSection段，就修改“年”的值。</p><p><strong>calendarPopup</strong>：当取值为true时，右侧的输入按钮变成与QComboBox类似的下拉按钮，单击按钮时出现一个日历选择框，用于在日历上选择日期。对于QTimeEdit，此属性无效。</p><p><strong>displayFormat</strong>：例如设置为“yyyy-MM-dd HH：mm：ss”，一个日期时间数据就显示为“2016-11-0208:23：46”</p><br><h2 id="QTimer属性："><a href="#QTimer属性：" class="headerlink" title="QTimer属性："></a>QTimer属性：</h2><p>定时器是用来处理周期性事件的一种对象，类似于硬件定时器。例如设置一个定时器的定时。周期为1000毫秒，那么每1000毫秒就会发射定时器的timeout）信号，在信号关联的槽函数里就，可以做相应的处理。Qt中的定时器类是QTimer，它直接从QObject类继承而来，不是界面组件类。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTimer<span class="token operator">*</span> m_timer<span class="token punctuation">;</span>     <span class="token comment">//定时器（不可见控件）</span>QTime   m_time<span class="token punctuation">;</span>      <span class="token comment">//计时器（此处用作）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="DateTime转QString："><a href="#DateTime转QString：" class="headerlink" title="DateTime转QString："></a>DateTime转QString：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//获取当前时间</span>QDateTime currDateTime <span class="token operator">=</span> <span class="token class-name">QDateTime</span><span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//QString转为DateTime</span>ui<span class="token operator">-></span>editDateTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//DateTime转为QString</span>ui<span class="token operator">-></span>labCurrDataTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="常用日期显示格式："><a href="#常用日期显示格式：" class="headerlink" title="常用日期显示格式："></a>常用日期显示格式：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190920000600.png"/ loading="lazy"><br><h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//editDate控件在UI设计师里面，选中了calendarPopup （日历弹出的属性）和displayFormat显示格式</span>    m_timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QTimer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_timer<span class="token operator">-></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">//关闭定时器</span>    m_timer<span class="token operator">-></span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设定定时周期， 单位 毫秒</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_timer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//获取当前日期和时间，该日期时间栏里面显示</span><span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token operator">::</span><span class="token function">on_btnGetDateTime_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QDateTime currDateTime <span class="token operator">=</span> <span class="token class-name">QDateTime</span><span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>timeEdit<span class="token operator">-></span><span class="token function">setTime</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>editTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>dateEdit<span class="token operator">-></span><span class="token function">setDate</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>editDate<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>dateTimeEdit<span class="token operator">-></span><span class="token function">setDateTime</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>editDateTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>labCurrDataTime<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>currDateTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss:zzz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//计时器开始</span><span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token operator">::</span><span class="token function">on_btnStatrt_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_time<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//计时器开始</span>    m_timer<span class="token operator">-></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token comment">//定时器开始</span>    ui<span class="token operator">-></span>btnStatrt<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//开始按下之后，开始按钮禁用</span>    ui<span class="token operator">-></span>btnStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//同时结束按钮可用</span>    ui<span class="token operator">-></span>btnPeriod<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//设定周期的按钮为禁用</span>    ui<span class="token operator">-></span>labGo<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"时间流逝在后台计算中..."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//计时器结束</span><span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token operator">::</span><span class="token function">on_btnStop_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_timer<span class="token operator">-></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//定时器停止</span>    ui<span class="token operator">-></span>btnStop<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//结束按下之后，结束按钮禁用</span>    ui<span class="token operator">-></span>btnStatrt<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//同时开始按钮可用</span>    <span class="token keyword">int</span> tmMsec <span class="token operator">=</span> m_time<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//计时器Time没有对应的stop(), elapsed获取它的毫秒数</span>    <span class="token keyword">int</span> ms <span class="token operator">=</span> tmMsec <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>                          <span class="token comment">//经过的毫秒</span>    <span class="token keyword">int</span> sec <span class="token operator">=</span> tmMsec <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>                         <span class="token comment">//经过的秒</span>    ui<span class="token operator">-></span>btnPeriod<span class="token operator">-></span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//设定周期的按钮为可用</span>    ui<span class="token operator">-></span>labGo<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"时间已经流逝：%1 秒 %2 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//处理定时器的槽函数</span><span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token operator">::</span><span class="token function">onTimerOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QTime currTime <span class="token operator">=</span> <span class="token class-name">QTime</span><span class="token operator">::</span><span class="token function">currentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lcdHH<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>currTime<span class="token punctuation">.</span><span class="token function">hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//多种显示时间方法</span>    ui<span class="token operator">-></span>lcdmm<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>currTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"mm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>lcdSS<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>currTime<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//设置进度条同时增加</span>    val<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span>        val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>progressBar<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//选择日历时间</span><span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token operator">::</span><span class="token function">on_calendarWidget_selectionChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QDate date <span class="token operator">=</span>ui<span class="token operator">-></span>calendarWidget<span class="token operator">-></span><span class="token function">selectedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>editChoose<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy年MM月dd日"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//设定定时器QTimer周期</span><span class="token keyword">void</span> <span class="token class-name">ExDateTime</span><span class="token operator">::</span><span class="token function">on_btnPeriod_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    m_timer<span class="token operator">-></span><span class="token function">setInterval</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>spinBox<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtDateTimeEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QSlider、QScrollBar、QProgressBar控件的联动</title>
      <link href="posts/9433a2b/"/>
      <url>posts/9433a2b/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>QSlider</code>移动条、<code>QScrollBar</code>滚动条、<code>QProgressBar</code>进度条控件的联动，讲解和的使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><p><strong>比较紧密的关联博文参考：</strong></p><ul><li><a href="https://touwoyimuli.github.io/2019/09/18/%E6%BB%91%E5%8A%A8%E6%9D%A1QSlider%E5%92%8CQAbstractSlider%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%94%A8%E6%B3%95/">滑动条<code>QSlider</code>和<code>QAbstractSlider</code>的介绍和用法</a></li><li><a href="https://touwoyimuli.github.io/2019/09/19/QSlider%E3%80%81QScrollBar%E3%80%81QProgressBar%E6%8E%A7%E4%BB%B6%E7%9A%84%E8%81%94%E5%8A%A8/"><code>QSlider</code>、<code>QScrollBar</code>、<code>QProgressBar</code>控件的联动</a></li><li><a href="https://touwoyimuli.github.io/2019/09/19/%E4%BB%AA%E8%A1%A8%E7%9B%98QSlider%E5%92%8C%E6%95%B0%E5%80%BC%E6%98%BE%E7%A4%BAQLCD_NUmber%E7%9A%84%E8%AE%B2%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/">仪表盘<code>QSlider</code>的讲解和使用</a></li></ul><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先放一张运行效果</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918191905.gif"/ loading="lazy"><br><h2 id="继承关系："><a href="#继承关系：" class="headerlink" title="继承关系："></a>继承关系：</h2><p><code>QSlider</code>移动条、<code>QScrollBar</code>滚动条、进度条这三个控件，都是继承于<code>QAbstractSlider</code>类，其中关于<strong>QSlider和QAbstractSlider属性</strong>讲解，参考已经发过的文章<a href="https://blog.csdn.net/qq_33154343/article/details/100944831">https://blog.csdn.net/qq_33154343/article/details/100944831</a> ；关于这几个控件的继承关系如下图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918192923.png"/ loading="lazy"><br><h2 id="滚动条QScrollBar："><a href="#滚动条QScrollBar：" class="headerlink" title="滚动条QScrollBar："></a>滚动条QScrollBar：</h2><ul><li>QScrollBar 从QAbstractSlider继承而来的，具有QAbstractSlider的基本属性，没有专有属性。</li></ul><br><h2 id="进度条QProgressBar："><a href="#进度条QProgressBar：" class="headerlink" title="进度条QProgressBar："></a>进度条QProgressBar：</h2><ul><li>QProgressBar的父类是QWidget，一般用于进度显示，常用属性如下。</li></ul><table><thead><tr><th align="center">属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">minimum</td><td align="center">最小值</td></tr><tr><td align="center">maximum</td><td align="center">最大值</td></tr><tr><td align="center">value</td><td align="center">当前值，可以设定或读取当前值</td></tr><tr><td align="center">textVisible</td><td align="center">是否显示文字，文字一般是百分比表示的进度。</td></tr><tr><td align="center">orientation</td><td align="center">可以设置为水平或垂直方向。</td></tr><tr><td align="center">format</td><td align="center">显示文字的格式，“%p%”显示百分比，“%v”显示当前值，“%m”显示总步数。缺省为“%p%”。</td></tr></tbody></table><br><h2 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h2><p>此处实现了，信号于槽函数的<strong>多对一</strong>，从而避免了槽函数的重复写多遍</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//ui->progressBarHor->setOrient1ation(Qt::Horizontal /*(the default)  Qt::Vertical*/);  设置进度条水平或竖直</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderHor<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollBarHor<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollBarHor<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderVer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>scrollBarVer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>progressBarVer<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">//对应的槽函数</span><span class="token keyword">void</span> <span class="token class-name">ExQProgressBar</span><span class="token operator">::</span><span class="token function">onValChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>scrollBarHor<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>progressBarHor<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>sliderVer<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>scrollBarVer<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    ui<span class="token operator">-></span>progressBarVer<span class="token operator">-></span><span class="token function">setValue</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQProgressBarEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>仪表盘QSlider和数值显示QLCD_NUmber的讲解和使用</title>
      <link href="posts/7bb9802c/"/>
      <url>posts/7bb9802c/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  仪表盘<code>QSlider</code>和数值显示<code>QLCD_NUmber</code>的讲解和使用。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一个最终的运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918200740.gif"/ loading="lazy"><br><h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><p><strong>比较紧密的关联博文参考：</strong></p><ul><li><a href="https://touwoyimuli.github.io/2019/09/18/%E6%BB%91%E5%8A%A8%E6%9D%A1QSlider%E5%92%8CQAbstractSlider%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%94%A8%E6%B3%95/">滑动条<code>QSlider</code>和<code>QAbstractSlider</code>的介绍和用法</a></li><li><a href="https://touwoyimuli.github.io/2019/09/19/QSlider%E3%80%81QScrollBar%E3%80%81QProgressBar%E6%8E%A7%E4%BB%B6%E7%9A%84%E8%81%94%E5%8A%A8/"><code>QSlider</code>、<code>QScrollBar</code>、<code>QProgressBar</code>控件的联动</a></li><li><a href="https://touwoyimuli.github.io/2019/09/19/%E4%BB%AA%E8%A1%A8%E7%9B%98QSlider%E5%92%8C%E6%95%B0%E5%80%BC%E6%98%BE%E7%A4%BAQLCD_NUmber%E7%9A%84%E8%AE%B2%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8/">仪表盘<code>QSlider</code>的讲解和使用</a></li></ul><br><h2 id="继承关系："><a href="#继承关系：" class="headerlink" title="继承关系："></a>继承关系：</h2><p><code>QSlider</code>移动条、<code>QScrollBar</code>滚动条、进度条这三个控件，都是继承于<code>QAbstractSlider</code>类，其中关于<strong>QSlider和QAbstractSlider属性</strong>讲解，参考已经发过的文章<a href="https://blog.csdn.net/qq_33154343/article/details/100944831">https://blog.csdn.net/qq_33154343/article/details/100944831</a> ；关于这几个控件的继承关系如下图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190918192923.png"/ loading="lazy"><br><h2 id="QDial属性："><a href="#QDial属性：" class="headerlink" title="QDial属性："></a>QDial属性：</h2><ul><li>QDial是仪表盘式的组件，通过旋转表盘获得输入值。QDial的特有的属性包括以下两种。</li></ul><table><thead><tr><th align="center">属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">notchesVisible</td><td align="center">表盘的小刻度是否可见</td></tr><tr><td align="center">notchTarget</td><td align="center">表盘刻度间的间隔像素值</td></tr></tbody></table><br><h2 id="QLCDNumber属性："><a href="#QLCDNumber属性：" class="headerlink" title="QLCDNumber属性："></a>QLCDNumber属性：</h2><ul><li>QLCDNumber是模拟LCD显示数字的组件，可以显示整数或小数，但就如实际的LCD一样，要设定显示数字的个数。显示整数时，还可以选择以不同进制来显示，如十进制、二进制、十六进制。其主要属性如下。</li></ul><table><thead><tr><th align="center">属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">digitCount</td><td align="center">显示的数的位数，如果是小数，小数点也算一个数位</td></tr><tr><td align="center">smallDecimalPoint</td><td align="center">是否有小数点，如果有小数点，就可以显示小数</td></tr><tr><td align="center">mode</td><td align="center">数的显示进制，通过调用函数setDecMode）、setBinMode（）、setOctMode）、setHexMode（）可以设置为常用的十进制、二进制、八进制、十六进制格式。</td></tr><tr><td align="center">value</td><td align="center">返回显示值，浮点数。若设置为显示整数，会自动四舍五入后得到整数，设置为intValue的值。如果smallDecimalPoint=true，设置value时可以显示小数，但是数的位数不能超过digitCount。</td></tr><tr><td align="center">intValue</td><td align="center">返回显示的整数值</td></tr></tbody></table><p><strong>例如</strong>，若smallDecimalPoint-true，digitCount=3，设置value=2.36，则界面上LCDNumber组件会显示为2.4；若设置value=1456.25，则界面上LCDNumber组件只会显示145。所以，用QLCDNumber作为显示组件时，应注意这些属性的配合。</p><br><h2 id="核心源码："><a href="#核心源码：" class="headerlink" title="核心源码："></a>核心源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//notchesVisible:表盘的小刻度是否可见</span><span class="token comment">//notchTarget：表盘刻度间间隔的像素值</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>dial<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onDisplayLCD</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"QDial表盘输入，在LCD以多种进制显示"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//显示LCD</span>ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setBinMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示二进制数</span>ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setOctMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示八进制数</span>ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setDecMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示十进制数</span>ui<span class="token operator">-></span>lcdNumber<span class="token operator">-></span><span class="token function">setHexMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置LCD显示十六进制数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQdialQLCDEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>滑动条QSlider和QAbstractSlider的介绍和用法</title>
      <link href="posts/66c92eaf/"/>
      <url>posts/66c92eaf/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 滑动条<code>QSlider</code>的介绍和用法，其通过滑动来设置数值，也可以用于数值的输入。以及他们的基类<code>QAbstractSlider</code>的众多属性的详细讲解</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190915000559.gif"/ loading="lazy"><br><h2 id="滑动条QSlider："><a href="#滑动条QSlider：" class="headerlink" title="滑动条QSlider："></a>滑动条QSlider：</h2><p><code>QSlider</code>、<code>QScrollBar</code>和<code>Qdial</code>3个组件都从<code>QAbstractSlider</code>继承而来，有一些共有的属性。<br><strong>QSlider</strong>是滑动的标尺型组件，滑动标尺上的一个滑块可以改变值。<br>基类<strong>QAbstractSlider</strong>的主要属性包括以下几种。</p><ul><li><p><code>minimum</code>、<code>maximum</code>：设置输入范围的最小值和最大值，例如，用红、绿、蓝配色时，每<br>  种基色的大小范围是0~255，所以设置<strong>minimum</strong>为0，<strong>maximum</strong>为255。</p></li><li><p><code>singlestep</code>:单步长，拖动标尺上的滑块，或按下左/右光标键时的最小变化数值。</p></li><li><p><code>pageStep</code>:在<strong>Slider</strong>上输入焦点，按<strong>PgUp</strong>或<strong>PgDn</strong>键时变化的数值。</p></li><li><p><code>value</code>：组件的当前值，拖动滑块时自动改变此值，并限定在<strong>minimum</strong>和<strong>maximum</strong>定义的<br>  范围之内。</p></li><li><p><code>sliderPosition</code>:滑块的位置，若<strong>tracking</strong>属性设置为true，<strong>sliderPosition</strong>就等于value。</p></li><li><p><strong><code>tracking</code>：sliderPosition</strong>是否等同于<strong>value</strong>，如果<strong>tracking</strong>=true，改变value时也同时改变<br>  sliderPosition。</p></li><li><p><code>orientation</code>: <strong>Slider</strong>的方向，可以设置为水平或垂直。方向参数是Qt的枚举类型enum</p></li><li><p><code>Qt：Orientation</code>，取值包括以下两种。  </p><table><thead><tr><th align="center">枚举</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">Qt::Horizontal</td><td align="center">水平方向</td></tr><tr><td align="center">Qt::Vertical</td><td align="center">垂直方向</td></tr></tbody></table></li><li><p><code>invertedAppearance</code>:显示方式是否反向，<strong>invertedAppearance</strong>=false时，水平的Slider由左向右数值增大，否则反过来。</p></li><li><p><code>invertedControls</code>：反向按键控制，若<strong>invertedControls</strong>=true，则按下<strong>PgUp</strong>或<strong>PgDn</strong>按键时调整数值的反向相反。</p></li></ul><ul><li><p><strong>属于QSlider的专有属性有两个，如下。</strong></p></li><li><p><code>tickPosition</code>:标尺刻度的显示位置，使用枚举类型<strong>QSlider:TickPosition</strong>，取值包括以下6种</p><table><thead><tr><th align="center">枚举</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">QSlider::NoTicks</td><td align="center">不显示刻度</td></tr><tr><td align="center">QSlider::TicksBothSides</td><td align="center">标尺两侧都显示刻度</td></tr><tr><td align="center">QSlider::TicksAbove</td><td align="center">标尺上方显示刻度</td></tr><tr><td align="center">QSlider::TicksBelow</td><td align="center">标尺下方显示刻度</td></tr><tr><td align="center">QSlider::TicksLeft</td><td align="center">标尺左侧显示刻度</td></tr><tr><td align="center">QSlider::TicksRight</td><td align="center">标尺右侧显示刻度</td></tr></tbody></table></li><li><p><code>ticklnterval</code>：标尺刻度的间隔值，若设置为0，会在<strong>singleStep</strong>和<strong>pageStep</strong>之间自动选择。</p></li></ul><br><h2 id="部分源码："><a href="#部分源码：" class="headerlink" title="部分源码："></a>部分源码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//设置QSlider的最大值为255  (默认范围为0~100)</span>ui<span class="token operator">-></span>sliderRed<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span>sliderGreen<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span>sliderBlue<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span>sliderAlpha<span class="token operator">-></span><span class="token function">setMaximum</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化QTextEdit的颜色 (否则默认就是白灰色)</span>QColor color<span class="token punctuation">;</span>color<span class="token punctuation">.</span><span class="token function">setRgb</span><span class="token punctuation">(</span><span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPalette palette <span class="token operator">=</span> ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>palette<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Base<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//连接信号与槽，多个信号，对应一个槽函数</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderRed<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderGreen<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderBlue<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>sliderAlpha<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onSetClolor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">int</span> nRed <span class="token operator">=</span> ui<span class="token operator">-></span>sliderRed<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//获取红绿蓝(RGB)的Slider的数值</span><span class="token keyword">int</span> nGreen <span class="token operator">=</span> ui<span class="token operator">-></span>sliderGreen<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nBlue <span class="token operator">=</span> ui<span class="token operator">-></span>sliderBlue<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nAlpha <span class="token operator">=</span> ui<span class="token operator">-></span>sliderAlpha<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QColor color<span class="token punctuation">;</span>color<span class="token punctuation">.</span><span class="token function">setRgb</span><span class="token punctuation">(</span>nRed<span class="token punctuation">,</span> nGreen<span class="token punctuation">,</span> nBlue<span class="token punctuation">,</span> nAlpha<span class="token punctuation">)</span><span class="token punctuation">;</span>QPalette palette <span class="token operator">=</span> ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">palette</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取textColour控件的所有颜色值(调色板)</span>palette<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>QPalette<span class="token operator">::</span>Base<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置textColou的某一角色(即控件)的颜色</span>ui<span class="token operator">-></span>textColour<span class="token operator">-></span><span class="token function">setPalette</span><span class="token punctuation">(</span>palette<span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span>labRgbVal<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"RGB(%1, %2, %3, %4)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nRed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nGreen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nBlue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>nAlpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//时刻显示RGBa的具体值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/touwoyimuli/QtExamples">https://github.com/touwoyimuli/QtExamples</a> 【QtQSliderEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QStyle自定义重绘QScrollBar</title>
      <link href="posts/5b63d25/"/>
      <url>posts/5b63d25/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>QStyle</code>自定义重绘<code>QScrollBar</code>（滚动条）样式。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100943187">QStyle自定义重绘QScrollBar</a> </li></ul><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><br><h2 id="QScrollbar官方教程"><a href="#QScrollbar官方教程" class="headerlink" title="QScrollbar官方教程:"></a>QScrollbar官方教程:</h2><p>QScrollBar小部件提供垂直或水平滚动条。</p><p>滚动条是一种控件，使用户能够访问比用于显示文档的小部件更大的文档部分。它提供了用户在文档中的当前位置和可见文档数量的可视化指示。滚动条通常配备了其他控件，以支持更精确的导航。Qt以适合每个平台的方式显示滚动条。</p><p>如果需要在另一个小部件上提供滚动视图，使用QScrollArea类可能更方便，因为它提供了一个viewport小部件和滚动条。如果您需要为使用QAbstractScrollArea的特定小部件实现类似的功能，QScrollBar非常有用;例如，如果您决定子类化QAbstractItemView。对于使用滑块控件在给定范围内获取值的大多数其他情况，QSlider类可能更适合您的需要。</p><p>￼<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224730.png"/ loading="lazy"></p><blockquote><p>滚动条通常包括四个单独的控件:滑块、滚动箭头和页面控件。</p><p>滑块提供了快速进入文档任何部分的方法，但不支持在大型文档中精确导航。</p><p>b.滚动箭头是按钮，可以用来精确地导航到文档中的特定位置。对于连接到文本编辑器的垂直滚动条，它们通常将当前位置向上或向下移动一个“行”，并少量调整滑块的位置。在编辑器和列表框中，“行”可能表示一行文本;在图像查看器中，它可能意味着20个像素。</p><p>页面控件是拖动滑块的区域(滚动条的背景)。点击这里将滚动条移动到单击一个“页面”。这个值通常与滑块的长度相同。</p></blockquote><p>每个滚动条都有一个值，该值指示滑块距滚动条起点的距离;这是通过value()和setValue()获得的。此值始终位于为滚动条定义的值范围内，从最小()到包含最大值()。可以使用setMinimum()和setMaximum()设置可接受值的范围。在最小值处，滑块的顶部边缘(垂直滚动条)或左侧边缘(水平滚动条)将位于滚动条的顶部(或左侧)。在最大值处，滑块的底部(或右侧)边缘将位于滚动条的底部(或右侧)末端。</p><p>滑块的长度通常与页面步骤的值相关，通常表示滚动视图中显示的文档区域的比例。page step是当用户按下页面向上和向下键时值的变化量，并使用setPageStep()设置。使用游标键对行步骤定义的值进行更小的更改，这个数量由setSingleStep()设置。</p><p>注意，使用的值范围与滚动条小部件的实际大小无关。在为范围和页步骤选择值时，不需要考虑这一点。</p><p>为滚动条指定的值范围通常与为QSlider指定的值范围不同，因为需要考虑滑块的长度。如果我们有一个100行文档，而我们只能在一个小部件中显示20行，那么我们可能希望构造一个滚动条，其中页面步骤为20，最小值为0，最大值为80。这将为我们提供一个包含五个“页面”的滚动条。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224805.png"/ loading="lazy"><blockquote><p>在许多常见情况下，文档长度、滚动条中使用的值范围和页面步骤之间的关系很简单。滚动条的值范围是通过从表示文档长度的值中减去选定的页面步骤来确定的。在这种情况下，下面的公式很有用:文档长度= maximum() - minimum() + pageStep()。</p></blockquote><p>QScrollBar只提供整数范围。注意，尽管QScrollBar处理非常大的数字，但是当前屏幕上的滚动条不能有效地表示超过100,000像素的范围。除此之外，用户很难使用键盘或鼠标来控制滑块，滚动箭头的使用也很有限。</p><br><h2 id="QScrollbar属性理解："><a href="#QScrollbar属性理解：" class="headerlink" title="QScrollbar属性理解："></a>QScrollbar属性理解：</h2><p>若是需要重绘，查看Qt源码，有如下几个<code>enum QStyle::ControlElement</code>是关于滚动条的元素：</p><table><thead><tr><th align="center">Constant</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">CE_ScrollBarAddPage</td><td align="center">增加页(在滑槽)</td></tr><tr><td align="center">CE_ScrollBarSubPage</td><td align="center">减少页(在滑槽)</td></tr><tr><td align="center">CE_ScrollBarSlider</td><td align="center">滑块</td></tr><tr><td align="center">CE_ScrollBarAddLine</td><td align="center">增加按钮</td></tr><tr><td align="center">CE_ScrollBarSubLine</td><td align="center">减少按钮</td></tr><tr><td align="center">CE_ScrollBarFirst</td><td align="center">未测出来</td></tr><tr><td align="center">CE_ScrollBarLast</td><td align="center">未测出来</td></tr></tbody></table><p>使用代码显示如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910224200.png"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QStyle自定义重绘QSlider控件二</title>
      <link href="posts/2b7554be/"/>
      <url>posts/2b7554be/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  修改创建控件时候，的默认矩形大小，重写<code>sizeFromContents()</code>函数，给定默认控件大小</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>   <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> </li></ul><br><h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul><li><a href="https://touwoyimuli.github.io/2019/09/04/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6/"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li><li> <a href="https://touwoyimuli.github.io/2019/09/09/QStyle%E4%B9%8BPenStyle%E7%9A%84CustomDashLine%E4%BD%BF%E7%94%A8/">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li><li><a href="https://touwoyimuli.github.io/2019/09/17/%E9%87%8D%E7%BB%98%E7%9A%84QStyle%E4%B8%ADsizeFromContents()%E6%B2%A1%E6%9C%89%E8%A2%AB%E8%B0%83%E7%94%A8/">重绘的QStyle中sizeFromContents()没有被调用</a></li><li><a href="https://touwoyimuli.github.io/2019/09/17/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6%E4%BA%8C/">QStyle自定义重绘QSlider控件二</a>（重要）</li></ul><br><h2 id="更新原因："><a href="#更新原因：" class="headerlink" title="更新原因："></a>更新原因：</h2><p>因为前一个版本，出现了一个小的bug：那就是，遗漏了当<code>QSlider</code>无需刻度的时候（枚举值为<code>QSlider::NoTicks</code>），会发生<strong>opt-&gt;rect</strong>仍然会比矩形（滑块和滑槽的最小公共矩形）要大；即：没有去除掉用来保留绘画刻度的矩形区域。</p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>上一张最终的运行效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190917231536.png"/ loading="lazy"><br><h2 id="QSlider枚举含义："><a href="#QSlider枚举含义：" class="headerlink" title="QSlider枚举含义："></a>QSlider枚举含义：</h2><p>下面对一些枚举进行一些含义的解释：</p><table><thead><tr><th align="center">枚举</th><th align="center">中文含义</th><th align="center">Qt文档（其英文含义比较模糊，此处以约定中文含义为准）</th></tr></thead><tbody><tr><td align="center">PM_SliderThickness</td><td align="center">Slider总的高度　＝　滑块高度＋刻度高度</td><td align="center">Total slider thickness.</td></tr><tr><td align="center">PM_SliderControlThickness</td><td align="center">只是滑块的单独高度</td><td align="center">Thickness of the slider handle.</td></tr><tr><td align="center">PM_SliderLength</td><td align="center">只是滑块的长度</td><td align="center">Thickness of the slider handle.</td></tr><tr><td align="center">PM_SliderLength</td><td align="center">只是滑块的长度</td><td align="center">Length of the slider.</td></tr><tr><td align="center">PM_SliderTickmarkOffset</td><td align="center">用作slider的刻度线的高度</td><td align="center">The offset between the tickmarks and the slider.</td></tr><tr><td align="center">PM_SliderSpaceAvailable</td><td align="center">暂时未用到</td><td align="center">The available space for the slider to move.</td></tr></tbody></table><p>上面表格参考出处代码：<strong>qcommonstyle.cpp</strong>　 4526行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">case</span> PM_SliderTickmarkOffset<span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionSlider<span class="token operator">*</span> sl <span class="token operator">=</span> qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionSlider<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> space <span class="token operator">=</span> <span class="token punctuation">(</span>sl<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span> <span class="token operator">?</span> sl<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">:</span> sl<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> thickness <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderControlThickness<span class="token punctuation">,</span> sl<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ticks <span class="token operator">=</span> sl<span class="token operator">-></span>tickPosition<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span>            ret <span class="token operator">=</span> <span class="token punctuation">(</span>space <span class="token operator">-</span> thickness<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ticks <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksAbove<span class="token punctuation">)</span>            ret <span class="token operator">=</span> space <span class="token operator">-</span> thickness<span class="token punctuation">;</span>        <span class="token keyword">else</span>            ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="绘画思路："><a href="#绘画思路：" class="headerlink" title="绘画思路："></a>绘画思路：</h2><p>上一篇的思路是：</p><ul><li>将矩形拆分为三个小矩形</li><li>对于每一个矩形进行单独的判断（是否有无），若是有则绘画</li></ul><p>而这一篇则是，在第一步骤之前，就进行修改，在<code>sizeFromContents()</code>里面进行初始的矩形计算；</p><p>先绘制默认大小，给出默认opt-&gt;rect矩形的大小（此时还没有开始计算每一个矩形的大小:将这个最大的矩形进行拆分）：</p><p>在**virtual QSize sizeFromContents(ContentsType ct, const QStyleOption *opt, const QSize &amp;contentsSize, const QWidget *w) const override;**里面，填写如下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> sliderContHeight <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderControlThickness<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//单独滑块高度</span>            <span class="token keyword">int</span> tickMarkHeight <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderTickmarkOffset<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//单独刻度线高度</span>            sliderContHeight <span class="token operator">+=</span> tickMarkHeight<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>NoTicks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sliderContHeight <span class="token operator">-=</span> tickMarkHeight<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sliderContHeight <span class="token operator">+=</span> tickMarkHeight<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                size<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token function">qMax</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sliderContHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                size<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token function">qMax</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sliderContHeight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">case</span> CT_MenuBarItem<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> frame_margins <span class="token operator">=</span> <span class="token class-name">DStyle</span><span class="token operator">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_FrameMargins<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">+=</span> <span class="token function">QSize</span><span class="token punctuation">(</span>frame_margins <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> frame_margins <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重绘的QStyle中sizeFromContents()没有被调用</title>
      <link href="posts/e4408abd/"/>
      <url>posts/e4408abd/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  在自定义重绘<code>QStyle</code>的时候，继承于<code>class ExCustomStyle : public QCommonStyle</code>的类，在重写虚函数<code>sizeFromContents()</code>时候，却发现并没有被调用。在此处记录一个**”硬核深坑”sizeFromContents()没有被调用**。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong> <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100941134">重绘的QStyle中sizeFromContents()没有被调用</a> </li></ul><br><h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul><li><a href="https://touwoyimuli.github.io/2019/09/04/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6/"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li><li> <a href="https://touwoyimuli.github.io/2019/09/09/QStyle%E4%B9%8BPenStyle%E7%9A%84CustomDashLine%E4%BD%BF%E7%94%A8/">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li><li><a href="https://touwoyimuli.github.io/2019/09/17/%E9%87%8D%E7%BB%98%E7%9A%84QStyle%E4%B8%ADsizeFromContents()%E6%B2%A1%E6%9C%89%E8%A2%AB%E8%B0%83%E7%94%A8/">重绘的QStyle中sizeFromContents()没有被调用</a></li><li><a href="https://touwoyimuli.github.io/2019/09/17/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6%E4%BA%8C/">QStyle自定义重绘QSlider控件二</a>（重要）</li></ul><br><h2 id="错误起因："><a href="#错误起因：" class="headerlink" title="错误起因："></a>错误起因：</h2><p>在自定义<strong>QStyle</strong>的<strong>CustomStyle</strong>的**.h/.cpp**中,有重写如下一些函数等虚函数的时候：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QSize <span class="token function">sizeFromContents</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ContentsType ct<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> <span class="token keyword">const</span> QSize <span class="token operator">&amp;</span>contentsSize<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>widget <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">drawControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ControlElement element<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOption <span class="token operator">*</span>opt<span class="token punctuation">,</span> QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span>                     <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">const</span> override<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是<strong>项目自带的例子</strong>(QWidget+多个布局+控件)被成功运行,而<strong>自己创建的Qwidge</strong>t上面添加的QSlider却唯独没有运行sizeFromContents()函数?</p><p><strong>【预期期待现象：】</strong>灰色矩形的宽度应该是和滑块矩形的宽度是一样大的。</p><p><strong>【疑惑不解：】</strong>为什么重写的代码后运行,有的QWidget运行drawControl()和sizeFromContents(); 而有的（另一个QWidget）drawControl()，没有运行sizeFromContents()????    <strong>真的是想的挠头挠头头好几个小时后，都想的不出来原因</strong>???无果， 请教大佬之后。</p><br><h2 id="解决原因："><a href="#解决原因：" class="headerlink" title="解决原因："></a>解决原因：</h2><p>自己创建的<strong>QWidget</strong>中,多个<strong>Slider</strong>是没有添加进布局,而是直接制指定父对象为<strong>WQidget</strong>,且调用<code>resize(300, 40);</code>指定<strong>Slider</strong>的大小.而Qt源码思路就是,那我就不调用<code>sizeFromContents()</code>函数了.caocaocao 哦~  破案了~～　真的是他妈的坑．<font color=#D0087E size=4 face="幼圆"><strong>总结：只有控件添加到布局里面，才会触发该函数sizeFromContents（）</strong></font></p><br><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><ul><li><strong>在main()中的测试代码：</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//不显示的代码</span><span class="token class-name">QApplication</span><span class="token operator">::</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"CustomStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QWidget wTemp<span class="token punctuation">;</span>wTemp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QSlider <span class="token operator">*</span>slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平无刻度的QSlider</span>slider<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>slider<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>NoTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>slider<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>slider<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wTemp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190917214120.png"/ loading="lazy"><ul><li>修改之后，可以会执行**sizeFromContents()**函数：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">会显示的代码<span class="token class-name">QApplication</span><span class="token operator">::</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"CustomStyle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QWidget wTemp<span class="token punctuation">;</span>wTemp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QHBoxLayout <span class="token operator">*</span>layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QHBoxLayout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>QSlider <span class="token operator">*</span>slider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Widget</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平无刻度的QSlider</span>slider<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>slider<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>NoTicks<span class="token punctuation">)</span><span class="token punctuation">;</span>slider<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>slider<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>layout<span class="token operator">-></span><span class="token function">addWidget</span><span class="token punctuation">(</span>slider<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">//Slider添加到布局里面</span>wTemp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190917214045.png"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QString常用的功能函数的介绍和用法</title>
      <link href="posts/38c82/"/>
      <url>posts/38c82/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>QString</code>常用的功能函数的介绍和用法。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190914233130.gif"/ loading="lazy"><br><h2 id="同系列文章："><a href="#同系列文章：" class="headerlink" title="同系列文章："></a>同系列文章：</h2><p><a href="https://blog.csdn.net/qq_33154343/article/details/100860030"><code>QString</code>在2 ／8／10／16进制之间转换</a> </p><br><h2 id="QString："><a href="#QString：" class="headerlink" title="QString："></a>QString：</h2><p><code>QString</code>存储字符串采用的是<strong>Unicode</strong>码，每一个字符是一个16位的<code>QChar</code>，而不是8位的<code>char</code>，所以<code>QString</code>处理中文字符没有问题，而且一个汉字算作是一个字符。</p><br><h2 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h2><p><font color=#70AD47 size=4 face="幼圆"><strong>注意：QString只要赋值，就在字符串的末尾自动加上“\0”</strong></font></p><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关:"></a>字符串相关:</h3><ul><li>append()        在字符串后面添加字符串</li><li>perpend()      在字符串的前面添加字符串</li><li>toUpper()      将字符串的字母全部转换为大写字母</li><li>toLower()      将字符串的字母全部转换为大写字母</li><li>left()               返回包含字符串中最左n个字符的子字符串。如果n大于或等于size()或小于零，则返回整个字符串。</li><li>right()            返回包含字符串中最右n个字符的子字符串。如果n大于或等于size()或小于零，则返回整个字符串。</li><li>section()        从字符串中提取以“子字符串”作为分隔符，从start到end端的字符串</li><li>simplified()   不仅去掉字符串的所首尾空格，中间连续的空格也用一个空格替换</li><li>trimmed        去掉字符串首尾的空格</li></ul><br><h3 id="数字相关："><a href="#数字相关：" class="headerlink" title="数字相关："></a>数字相关：</h3><ul><li><p>count()               返回字符串的字符个数。函数同size()、同length()。(字符串中若有汉字，一个汉字算一个字符）</p></li><li><p>size()                  同上</p></li><li><p>indexOf()           在字符串中查找子字符串str出现的位置。（Qt::CaseSensitivity cs 参数指定是否区分大小写）</p></li><li><p>lastIndexOf()    在字符串中查找子字符串str最后出现的位置</p></li></ul><br><h3 id="逻辑判断："><a href="#逻辑判断：" class="headerlink" title="逻辑判断："></a>逻辑判断：</h3><ul><li>startsWith()     判断是否以某个字符串开头</li><li>endsWith()      判断是否以某个字符串结尾</li><li>contains()        判断某个字符串中是否包含某个字符串</li><li>isNull()             判断字符串是否为空。（若是只有“\0”，isNull返回false； 只有未赋值的字符串，isNull返回true）</li><li>isEmpty()         判断字符串是否为空.（若是只有“\0”，isEmpty返回true）</li></ul><p><font color=#FE7207  size=4 face="幼圆"><strong>isNull()和isEmpty()的区别：</strong></font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>两个函数都判读字符串是否为空，但是稍有差别。如果一个空字符串，只有“<span class="token number">0</span>”，isNull<span class="token punctuation">)</span>返回<span class="token boolean">false</span>，而isEmpty0返回<span class="token boolean">true</span>；只有未赋值的字符串，isNull（）才返回<span class="token boolean">true</span>。QString strl<span class="token punctuation">,</span>str2<span class="token operator">=</span><span class="token string">""</span>；N<span class="token operator">=</span>str1<span class="token punctuation">.</span><span class="token function">isNul1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；     <span class="token comment">//N=true未赋值字符串变量</span>N<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；     <span class="token comment">//N=false只有“\\0”的字符串，也不是Nul1</span>N<span class="token operator">=</span>strl<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//N=true</span>N<span class="token operator">=</span>str2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；    <span class="token comment">//N=true</span>QString只要赋值，就在字符串的末尾自动加上“<span class="token number">10</span>”，所以，如果只是要判断字符串内容是否为空，常用isEmptyO。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a> 【QtQStringFunEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QString在2,8,10,16进制之间转换</title>
      <link href="posts/75166a24/"/>
      <url>posts/75166a24/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong> 初探字符串<code>QString</code>的输入和输出，和数值在2 ／8／10／16<strong>进制</strong>之间相互转换。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简述</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190914221639.gif"/ loading="lazy"><br><h2 id="同系列文章："><a href="#同系列文章：" class="headerlink" title="同系列文章："></a>同系列文章：</h2><p><a href="https://blog.csdn.net/qq_33154343/article/details/100860270">QString常用的功能函数的介绍和用法</a> </p><br><h2 id="字符串QString："><a href="#字符串QString：" class="headerlink" title="字符串QString："></a>字符串QString：</h2><p>字符串有<code>QString</code>， <code>char *</code>, <code>char a[]</code>, <code>string</code>,其中后面三个都是属于c++的，而只有<strong>QString</strong>是属于<strong>Qt</strong>所特有的；<strong>其中QString内部是以utf8存储的</strong>，而c自带的后面三个却不是同样以utf8存储的，所以会经常遇到情况，<strong>乱码原因和解决方法参考：</strong>补充部分的<a href="https://github.com/touwoyimuli/QtExamples">乱码相关</a>的系内文章</p><br><h2 id="String转化为整-浮点数："><a href="#String转化为整-浮点数：" class="headerlink" title="String转化为整/浮点数："></a>String转化为整/浮点数：</h2><p>下面列举一些比较常用的转换函数:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span>    <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span><span class="token operator">*</span>ok<span class="token operator">*</span> <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token keyword">float</span>     <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token keyword">int</span>       <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token keyword">long</span>      <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span>qlonglong <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toLongLong</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token keyword">short</span>     <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toShort</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token comment">//转换为带u开头的</span>uint      <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">toUInt</span><span class="token punctuation">(</span><span class="token keyword">bool</span> <span class="token operator">*</span>ok <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="整-浮点数转化为String："><a href="#整-浮点数转化为String：" class="headerlink" title="整/浮点数转化为String："></a>整/浮点数转化为String：</h2><p>下面列举一些比较常用的转换函数:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> QString <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> format <span class="token operator">=</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token keyword">int</span> precision <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> QString <span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">asprintf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cformat<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>QString <span class="token operator">&amp;</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">float</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> format <span class="token operator">=</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token keyword">int</span> precision <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中使用如下：</p><p>eg:<code>str = QString::number(n, &#39;f&#39;, 2);</code>    其中2为保留小数点后两位</p><br><h2 id="进制之间的转换："><a href="#进制之间的转换：" class="headerlink" title="进制之间的转换："></a>进制之间的转换：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QString str <span class="token operator">=</span> ui<span class="token operator">-></span>edit2<span class="token operator">-></span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> ok<span class="token punctuation">;</span><span class="token keyword">int</span> val <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ok<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//获取二进制</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//显示八进制</span>ui<span class="token operator">-></span>edit8<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示十进制</span>ui<span class="token operator">-></span>edit10<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">setNum</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//显示十六进制</span>ui<span class="token operator">-></span>edit16<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><a href="https://github.com/xmuli/QtExamples">https://github.com/xmuli/QtExamples</a>【QtQStringEx】</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>理解 C++ 中的头文件和源文件的作用</title>
      <link href="posts/5b0c8f0e/"/>
      <url>posts/5b0c8f0e/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  理解 <strong>C++</strong> 中的<strong>头文件</strong>和<strong>源文件</strong>的作用；一篇深度好文，值得多看看</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100785238">理解 C++ 中的头文件和源文件的作用</a></li></ul><br><h2 id="一、C-编译模式："><a href="#一、C-编译模式：" class="headerlink" title="一、C++ 编译模式："></a>一、C++ 编译模式：</h2><p>通常，在一个 C++ 程序中，只包含两类文件—— .cpp 文件和 .h 文件。其中，.cpp 文件被称作 C++ 源文件，里面放的都是 C++ 的源代码；而 .h 文件则被称作 C++ 头文件，里面放的也是 C++ 的源代码。</p><p>C++ 语言支持”分别编译”（separatecompilation）。也就是说，一个程序所有的内容，可以分成不同的部分分别放在不同的 .cpp 文件里。.cpp 文件里的东西都是相对独立的，在编译（compile）时不需要与其他文件互通，只需要在编译成目标文件后再与其他的目标文件做一次链接（link）就行了。比如，在文件 a.cpp 中定义了一个全局函数 “void a(){}”，而在文件 b.cpp 中需要调用这个函数。即使这样，文件 a.cpp 和文件 b.cpp 并不需要相互知道对方的存在，而是可以分别地对它们进行编译，编译成目标文件之后再链接，整个程序就可以运行了。</p><p>这是怎么实现的呢？从写程序的角度来讲，很简单。在文件 b.cpp 中，在调用 “void a()” 函数之前，先声明一下这个函数 “voida();”，就可以了。这是因为编译器在编译 b.cpp 的时候会生成一个符号表（symbol table），像 “void a()” 这样的看不到定义的符号，就会被存放在这个表中。再进行链接的时候，编译器就会在别的目标文件中去寻找这个符号的定义。一旦找到了，程序也就可以顺利地生成了。</p><p>注意这里提到了两个概念，一个是”定义”，一个是”声明”。简单地说，”定义”就是把一个符号完完整整地描述出来：它是变量还是函数，返回什么类型，需要什么参数等等。而”声明”则只是声明这个符号的存在，即告诉编译器，这个符号是在其他文件中定义的，我这里先用着，你链接的时候再到别的地方去找找看它到底是什么吧。定义的时候要按 C++ 语法完整地定义一个符号（变量或者函数），而声明的时候就只需要写出这个符号的原型了。需要注意的是，一个符号，在整个程序中可以被声明多次，但却要且仅要被定义一次。试想，如果一个符号出现了两种不同的定义，编译器该听谁的？</p><p>这种机制给 C++ 程序员们带来了很多好处，同时也引出了一种编写程序的方法。考虑一下，如果有一个很常用的函数 “void f() {}”，在整个程序中的许多 .cpp 文件中都会被调用，那么，我们就只需要在一个文件中定义这个函数，而在其他的文件中声明这个函数就可以了。一个函数还好对付，声明起来也就一句话。但是，如果函数多了，比如是一大堆的数学函数，有好几百个，那怎么办？能保证每个程序员都可以完完全全地把所有函数的形式都准确地记下来并写出来吗？</p><br><h2 id="二、什么是头文件："><a href="#二、什么是头文件：" class="headerlink" title="二、什么是头文件："></a>二、什么是头文件：</h2><p>很显然，答案是不可能。但是有一个很简单地办法，可以帮助程序员们省去记住那么多函数原型的麻烦：我们可以把那几百个函数的声明语句全都先写好，放在一个文件里，等到程序员需要它们的时候，就把这些东西全部 copy 进他的源代码中。</p><p>这个方法固然可行，但还是太麻烦，而且还显得很笨拙。于是，头文件便可以发挥它的作用了。所谓的头文件，其实它的内容跟 .cpp 文件中的内容是一样的，都是 C++ 的源代码。但头文件不用被编译。我们把所有的函数声明全部放进一个头文件中，当某一个 .cpp 源文件需要它们时，它们就可以通过一个宏命令 “#include” 包含进这个 .cpp 文件中，从而把它们的内容合并到 .cpp 文件中去。当 .cpp 文件被编译时，这些被包含进去的 .h 文件的作用便发挥了。</p><p>举一个例子吧，假设所有的数学函数只有两个：f1 和 f2，那么我们把它们的定义放在 math.cpp 里：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* math.cpp */</span><span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//do something here....</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//do something here...</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* end of math.cpp */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并把”这些”函数的声明放在一个头文件 math.h 中：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* math.h */</span><span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* end of math.h */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在另一个文件main.cpp中，我要调用这两个函数，那么就只需要把头文件包含进来：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* main.cpp */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"math.h"</span></span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* end of main.cpp */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，便是一个完整的程序了。需要注意的是，.h 文件不用写在编译器的命令之后，但它必须要在编译器找得到的地方（比如跟 main.cpp 在一个目录下）main.cpp 和 math.cpp 都可以分别通过编译，生成 main.o 和 math.o，然后再把这两个目标文件进行链接，程序就可以运行了。</p><br><h2 id="三、-include"><a href="#三、-include" class="headerlink" title="三、#include:"></a>三、#include:</h2><p><font color=#D0087E size=4 face="幼圆">#include 是一个来自 C 语言的宏命令，它在编译器进行编译之前，即在预编译的时候就会起作用。#include 的作用是把它后面所写的那个文件的内容，完完整整地、一字不改地包含到当前的文件中来</font>。值得一提的是，它本身是没有其它任何作用与副功能的，它的作用就是把每一个它出现的地方，替换成它后面所写的那个文件的内容。简单的文本替换，别无其他。因此，main.cpp 文件中的第一句（#include”math.h”），在编译之前就会被替换成 math.h 文件的内容。即在编译过程将要开始的时候，main.cpp 的内容已经发生了改变：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* ~main.cpp */</span><span class="token keyword">double</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> number1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> number2 <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* end of ~main.cpp */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不多不少，刚刚好。同理可知，如果我们除了 main.cpp 以外，还有其他的很多 .cpp 文件也用到了 f1 和 f2 函数的话，那么它们也通通只需要在使用这两个函数前写上一句 #include “math.h” 就行了。</p><br><h2 id="四、头文件中应该写什么"><a href="#四、头文件中应该写什么" class="headerlink" title="四、头文件中应该写什么:"></a>四、头文件中应该写什么:</h2><p>通过上面的讨论，我们可以了解到，<font color=#D0087E size=4 face="幼圆">头文件的作用就是被其他的 .cpp 包含进去的。它们本身并不参与编译，但实际上，它们的内容却在多个 .cpp 文件中得到了编译。</font>通过”定义只能有一次”的规则，我们很容易可以得出，头文件中应该只放变量和函数的声明，而不能放它们的定义。因为一个头文件的内容实际上是会被引入到多个不同的 .cpp 文件中的，并且它们都会被编译。放声明当然没事，如果放了定义，那么也就相当于在多个文件中出现了对于一个符号（变量或函数）的定义，纵然这些定义都是相同的，但对于编译器来说，这样做不合法。</p><p>所以，应该记住的一点就是，.h头文件中，只能存在变量或者函数的声明，而不要放定义。即，只能在头文件中写形如：<code>extern int a;</code> 和 <code>void f();</code> 的句子。这些才是声明。如果写上 <code>int a;</code>或者 <code>void f() &#123;&#125;</code> 这样的句子，那么一旦这个头文件被两个或两个以上的 .cpp 文件包含的话，编译器会立马报错。（关于 <code>extern</code>，前面有讨论过，这里不再讨论定义跟声明的区别了。）</p><p>但是，这个规则是有三个例外的:</p><ul><li><font color=#D0087E size=4 face="幼圆">一，<strong>头文件中可以写 const 对象的定义。因为全局的 const 对象默认是没有 extern 的声明的，所以它只在当前文件中有效。</strong></font>把这样的对象写进头文件中，即使它被包含到其他多个 .cpp 文件中，这个对象也都只在包含它的那个文件中有效，对其他文件来说是不可见的，所以便不会导致多重定义。同时，因为这些 .cpp 文件中的该对象都是从一个头文件中包含进去的，这样也就保证了这些 .cpp 文件中的这个 const 对象的值是相同的，可谓一举两得。<font color=#D0087E size=4 face="幼圆"><strong>同理，static 对象的定义也可以放进头文件。</strong></font></li><li>二，头文件中可以写内联函数（inline）的定义。因为inline函数是需要编译器在遇到它的地方根据它的定义把它内联展开的，而并非是普通函数那样可以先声明再链接的（内联函数不会链接），所以编译器就需要在编译时看到内联函数的完整定义才行。如果内联函数像普通函数一样只能定义一次的话，这事儿就难办了。因为在一个文件中还好，我可以把内联函数的定义写在最开始，这样可以保证后面使用的时候都可以见到定义；但是，如果我在其他的文件中还使用到了这个函数那怎么办呢？这几乎没什么太好的解决办法，因此 <strong>C++ 规定，内联函数可以在程序中定义多次，</strong>只要内联函数在一个 .cpp 文件中只出现一次，并且在所有的 .cpp 文件中，这个内联函数的定义是一样的，就能通过编译。那么显然，把内联函数的定义放进一个头文件中是非常明智的做法。</li><li>三，头文件中可以写类（class）的定义。因为在程序中创建一个类的对象时，编译器只有在这个类的定义完全可见的情况下，才能知道这个类的对象应该如何布局，所以，关于类的定义的要求，跟内联函数是基本一样的。所以把类的定义放进头文件，在使用到这个类的 .cpp 文件中去包含这个头文件，是一个很好的做法。在这里，值得一提的是，类的定义中包含着数据成员和函数成员。数据成员是要等到具体的对象被创建时才会被定义（分配空间），但函数成员却是需要在一开始就被定义的，这也就是我们通常所说的类的实现。一般，我们的做法是，把类的定义放在头文件中，而把函数成员的实现代码放在一个 .cpp 文件中。这是可以的，也是很好的办法。不过，还有另一种办法。那就是直接把函数成员的实现代码也写进类定义里面。<strong>在 C++ 的类中，如果函数成员在类的定义体中被定义，那么编译器会视这个函数为内联的。因此，把函数成员的定义写进类定义体，一起放进头文件中，是合法的。</strong>注意一下，<strong>如果把函数成员的定义写在类定义的头文件中，而没有写进类定义中，这是不合法的，因为这个函数成员此时就不是内联的了。一旦头文件被两个或两个以上的 .cpp 文件包含，这个函数成员就被重定义了。</strong></li></ul><br><h2 id="五、头文件中的保护措施"><a href="#五、头文件中的保护措施" class="headerlink" title="五、头文件中的保护措施:"></a>五、头文件中的保护措施:</h2><p>考虑一下，如果头文件中只包含声明语句的话，它被同一个 .cpp 文件包含再多次都没问题——因为声明语句的出现是不受限制的。然而，上面讨论到的头文件中的三个例外也是头文件很常用的一个用处。那么，一旦一个头文件中出现了上面三个例外中的任何一个，它再被一个 .cpp 包含多次的话，问题就大了。因为这三个例外中的语法元素虽然”可以定义在多个源文件中”，但是”在一个源文件中只能出现一次”。设想一下，如果 a.h 中含有类 A 的定义，b.h 中含有类 B 的定义，由于类B的定义依赖了类 A，所以 b.h 中也 #include了a.h。现在有一个源文件，它同时用到了类A和类B，于是程序员在这个源文件中既把 a.h 包含进来了，也把 b.h 包含进来了。这时，问题就来了：类A的定义在这个源文件中出现了两次！于是整个程序就不能通过编译了。你也许会认为这是程序员的失误——他应该知道 b.h 包含了 a.h ——但事实上他不应该知道。</p><p>使用 “#define” 配合条件编译可以很好地解决这个问题。在一个头文件中，通过 #define 定义一个名字，并且通过条件编译 #ifndef…#endif 使得编译器可以根据这个名字是否被定义，再决定要不要继续编译该头文中后续的内容。这个方法虽然简单，但是写头文件时一定记得写进去。</p><br><h2 id="C-头文件和源文件的区别"><a href="#C-头文件和源文件的区别" class="headerlink" title="C++ 头文件和源文件的区别:"></a>C++ 头文件和源文件的区别:</h2><h3 id="一、源文件如何根据-include-来关联头文件"><a href="#一、源文件如何根据-include-来关联头文件" class="headerlink" title="一、源文件如何根据 #include 来关联头文件"></a>一、源文件如何根据 #include 来关联头文件</h3><ul><li>1、系统自带的头文件用尖括号括起来，这样编译器会在系统文件目录下查找。</li><li>2、用户自定义的文件用双引号括起来，编译器首先会在用户目录下查找，然后在到 C++ 安装目录（比如 VC 中可以指定和修改库文件查找路径，Unix 和 Linux 中可以通过环境变量来设定）中查找，最后在系统文件中查找。</li></ul><p>#include “xxx.h”（我一直以为 “” 和 &lt;&gt; 没什么区别，但是 tinyxml.h 是非系统下的都文件，所以要用 “”）</p><h3 id="二、头文件如何来关联源文件"><a href="#二、头文件如何来关联源文件" class="headerlink" title="二、头文件如何来关联源文件"></a>二、头文件如何来关联源文件</h3><p>这个问题实际上是说，已知头文件 “a.h” 声明了一系列函数，”b.cpp” 中实现了这些函数，那么如果我想在 “c.cpp” 中使用 “a.h” 中声明的这些在 “b.cpp”中实现的函数，通常都是在 “c.cpp” 中使用 #include “a.h”，那么 c.cpp 是怎样找到 b.cpp 中的实现呢？</p><p><font color=#D0087E size=4 face="幼圆">其实 .cpp 和 .h 文件名称没有任何直接关系，很多编译器都可以接受其他扩展名。比如偶现在看到偶们公司的源代码，.cpp 文件由 .cc 文件替代了。</font></p><p>在 Turbo C 中，采用命令行方式进行编译，命令行参数为文件的名称，默认的是 .cpp 和 .h，但是也可以自定义为 .xxx 等等。</p><p>谭浩强老师的《C 程序设计》一书中提到，编译器预处理时，要对 #include 命令进行”文件包含处理”：将 file2.c 的全部内容复制到 #include “file2.c” 处。这也正说明了，为什么<font color=#D0087E size=4 face="幼圆">很多编译器并不 care 到底这个文件的后缀名是什么—-因为 #include 预处理就是完成了一个”复制并插入代码”的工作。</font></p><p><strong>编译的时候，并不会去找 b.cpp 文件中的函数实现，只有在 link 的时候才进行这个工作</strong>。我们在 b.cpp 或 c.cpp 中用 #include “a.h” 实际上是引入相关声明，使得编译可以通过，程序并不关心实现是在哪里，是怎么实现的。源文件编译后成生了目标文件（.o 或 .obj 文件），目标文件中，这些函数和变量就视作一个个符号。在 link 的时候，需要在 makefile 里面说明需要连接哪个 .o 或 .obj 文件（在这里是 b.cpp 生成的 .o 或 .obj 文件），此时，连接器会去这个 .o 或 .obj 文件中找在 b.cpp 中实现的函数，再把他们 build 到 makefile 中指定的那个可以执行文件中。</p><p>在 Unix下，甚至可以不在源文件中包括头文件，只需要在 makefile 中指名即可（不过这样大大降低了程序可读性，是个不好的习惯哦^_^）。在 VC 中，一帮情况下不需要自己写 makefile，只需要将需要的文件都包括在 project中，VC 会自动帮你把 makefile 写好。</p><p>通常，C++ 编译器会在每个 .o 或 .obj 文件中都去找一下所需要的符号，而不是只在某个文件中找或者说找到一个就不找了。因此，如果在几个不同文件中实现了同一个函数，或者定义了同一个全局变量，链接的时候就会提示 “redefined”。</p><h3 id="综上所诉"><a href="#综上所诉" class="headerlink" title="综上所诉:"></a>综上所诉:</h3><p><strong>.h文件中能包含：</strong></p><ul><li>类成员数据的声明，但不能赋值</li><li>类静态数据成员的定义和赋值，但不建议，只是个声明就好。</li><li>类的成员函数的声明</li><li>非类成员函数的声明</li><li>常数的定义：如：constint a=5;</li><li>静态函数的定义</li><li>类的内联函数的定义</li></ul><p><strong>不能包含：</strong></p><ul><li>1． 所有非静态变量（不是类的数据成员）的声明</li><li>2。 默认命名空间声明不要放在头文件，using namespace std;等应放在.cpp中，在 .h 文件中使用 std::string</li></ul><br><p><strong>转载原文：</strong><a href="https://www.runoob.com/w3cnote/cpp-header.html">理解 C++ 中的头文件和源文件的作用</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>error [Makefile1689 moc_ xxxx .cpp] 解决方法</title>
      <link href="posts/dc9e81db/"/>
      <url>posts/dc9e81db/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> <strong>Qt</strong>编译项目时候出现 的错误<strong>error</strong>信息</p><blockquote><p>error: [Makefile:1689: moc_ * .cpp] Error 1</p></blockquote><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code>、</p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100728451">error: [Makefile:1689: moc_ * .cpp] Error 1 解决方法</a>  </li></ul><br><h2 id="产生原因："><a href="#产生原因：" class="headerlink" title="产生原因："></a>产生原因：</h2><p>创建一个新的类,需要使用信号于槽机制,添加<code>Q_OBJECT</code>宏:</p><p><strong>DMessageManager.h</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dmessagemanager.h"</span></span><span class="token class-name">DMessageManager</span><span class="token operator">::</span><span class="token function">DMessageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>DMessageManager.cpp</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DMESSAGEMANAGER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DMESSAGEMANAGER_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QObject></span></span><span class="token keyword">class</span> <span class="token class-name">DMessageManager</span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">DMessageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DMESSAGEMANAGER_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190912214619.png"/ loading="lazy"><p>这可能是因为其他人提到的其他事情很少。我想补充另一个在这里丢失的。</p><p>如果您创建一个类并向其添加Q_OBJECT但不从QObject继承，您将获得“moc error 1””。</p><p>如果你看一下编译输出，就会有一行说：<br><code>Error: Class contains Q_OBJECT macro but does not inherit from QObject</code></p><blockquote><p>   错误：类包含Q_OBJECT宏但不从QObject继承</p></blockquote><p>因此，解决此问题的一般方法是查看“编译输出”窗口。</p><br><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>除了查看<font color=#FE7207  size=4 face="幼圆">问题警告</font>,还可查看<font color=#FE7207  size=4 face="幼圆"><strong>编译输出</strong></font>,查看第一个标红的地方(或许会有惊喜)；</p><p>中文难以查询到满意的答案， 试试<strong>stack overflow</strong>这个网站；</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的 static变量（全局和局部）、static函数总结</title>
      <link href="posts/cbffd676/"/>
      <url>posts/cbffd676/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  C语言中的 <strong>static</strong>变量（<strong>全局</strong>和<strong>局部</strong>）、<strong>static</strong>函数总结</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100753789">C语言中的 static变量（全局和局部）、static函数总结</a> </li></ul><br><h2 id="static-变量"><a href="#static-变量" class="headerlink" title="static 变量:"></a>static 变量:</h2><p>静态变量的类型 说明符是static。 静态变量当然是属于静态存储方式，但是属于静态存储方式的量不一定就是静态变量。 例如外部变量虽属于静态 存储方式，但不一定是静态变量，必须由 static加以定义后才能成为静态外部变量，或称静态全局变量。</p><h3 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量:"></a>静态局部变量:</h3><p>静态局部变量属于静态存储方式，它具有以下特点：<br>　　(1)静态局部变量在函数内定义 它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。<br>　　(2)允许对构造类静态局部量赋初值 例如数组，若未赋以初值，则由系统自动赋以0值。<br>　　(3)对基本类型的静态局部变量若在说明时未赋以初值，则系统自动赋予0值。而对自动变量不赋初值，则其值是不定的。 根据静态局部变量的特点， 可以 看出它是一种生存期为整个源程序的量。虽然离开定义它的函数后不能使用，但如再次调用定义它的函数时，它又可继续使用， 而且保存了前次被调用后留下的 值。 因此，当多次调用一个函数且要求在调用之间保留某些变量的值时，可考虑采用静态局部变量。虽然用全局变量也可以达到上述目的，但全局变量有时会造成 意外的副作用，因此仍以采用局部静态变量为宜。</p><h3 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量:"></a>静态全局变量:</h3><p>　　全局变量(外部变量)的说明之前再冠以static 就构 成了静态的全局变量。全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同。这两者的区别虽在于非静态全局 变量的作用域是整个源程序， 当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 <font color=#D0087E size=4 face="幼圆">而静态全局变量则限制了其作用域， 即只在 定义该变量的源文件内有效</font>， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用， 因此 可以避免在其它源文件中引起错误。从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量 后是改变了它的作用域， 限制了它的使用范围。因此static 这个说明符在不同的地方所起的作用是不同的。</p><h2 id="static-函数…"><a href="#static-函数…" class="headerlink" title="static 函数…..:"></a>static 函数…..:</h2><p>内部函数和外部函数<br>　　当一个源程序由多个源文件组成时，Ｃ语言根据函数能否被其它源文件中的函数调用，将函数分为内部函数和外部函数。</p><h3 id="内部函数（又称静态函数）"><a href="#内部函数（又称静态函数）" class="headerlink" title="内部函数（又称静态函数）:"></a>内部函数（又称静态函数）:</h3><p>　　如果在一个源文件中定义的函数，只能被本文件中的函数调用，而不能被同一程序其它文件中的函数调用，这种函数称为内部函数。<br>　　定义一个内部函数，只需在函数类型前再加一个“static”关键字即可，如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> 函数类型 函数名<span class="token punctuation">(</span>函数参数表<span class="token punctuation">)</span>　　<span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　关键字“static”，译成中文就是“静态的”，所以内部函数又称静态函数。但<font color=#D0087E size=4 face="幼圆">此处“static”的含义不是指存储方式，而是指对函数的作用域仅局限于本文件。</font><br>　　使用内部函数的好处是：不同的人编写不同的函数时，不用担心自己定义的函数，是否会与其它文件中的函数同名，因为同名也没有关系。</p><h3 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数:"></a>外部函数:</h3><p>　　外部函数的定义：在定义函数时，如果没有加关键字“static”，或冠以关键字“extern”，表示此函数是外部函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token keyword">extern</span><span class="token punctuation">]</span> 函数类型 函数名<span class="token punctuation">(</span>函数参数表<span class="token punctuation">)</span>　　<span class="token punctuation">&#123;</span>……<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　调用外部函数时，需要对其进行说明：<br>　　[extern] 函数类型 函数名(参数类型表)[，函数名2(参数类型表2)……]；</p><h4 id="案例-外部函数应用。"><a href="#案例-外部函数应用。" class="headerlink" title="[案例]外部函数应用。"></a>[案例]外部函数应用。</h4><p>　　（1）<strong>文件mainf.c</strong><br>　　main()<br>　　{ extern void input(…),process(…),output(…);<br>　　input(…); process(…); output(…);<br>　　}<br>　　（2）<strong>文件subf1.c</strong><br>　　……<br>　　extern void input(……) /<em>定义外部函数</em>/<br>　　{……}<br>　　（3）<strong>文件subf2.c</strong><br>　　……<br>　　extern void process(……) /<em>定义外部 函数</em>/<br>　　{……}<br>　　（4）<strong>文件subf3.c</strong><br>　　……<br>　　extern void output(……) /<em>定义外部函数</em>/<br>　　{……} </p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy"><p>转载：<a href="https://blog.csdn.net/LK274857347/article/details/61616416">C语言中的 static变量（全局和局部）、static函数总结</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【QT】Qt 5.9 QWidget程序执行过程分析</title>
      <link href="posts/db9e0914/"/>
      <url>posts/db9e0914/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  讲述<strong>QWidget</strong>程序执行过程分析，以及变量<strong>q</strong>和<strong>d</strong>，以及函数<strong>q_func</strong>和<strong>d_func</strong>；和<strong>QWidget</strong>相关的类所有类的继承图</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><blockquote><p><font color=#FE7207  size=4 face="幼圆"><strong>附：</strong> 本文图片是清晰大图，可能一开始会加载不出来，需要等待刷新一会</font></p></blockquote><br><h2 id="QWidget程序执行过程分析："><a href="#QWidget程序执行过程分析：" class="headerlink" title="QWidget程序执行过程分析："></a>QWidget程序执行过程分析：</h2><p>一个最简单的QWidget程序可能是下面这个样子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    QWidget w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是<code>QApplication</code>实例化，然后创建<code>QWidget</code>对象并<code>show</code>出来，最后通过<code>exec</code>进入事件循环，下面逐个分析这三个过程。</p><br><h3 id="1、QApplication"><a href="#1、QApplication" class="headerlink" title="1、QApplication:"></a>1、QApplication:</h3><p>在Qt源码中，经常会看到变量q和d，以及函数q_func和d_func，这是Qt的架构风格，大多数类都对应地有一个私有类，例如QApplication的私有类为QApplicationPrivate，其中变量q和函数q_func是一个意思，均指的是QApplication对象指针，而变量d和函数d_func指的是QApplicationPrivate对象指针，QApplication的类层次关系如下图所示。<br><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220207.png"/ loading="lazy"></p><p><code>QApplication</code>实例化时，最主要的是加载<code>QPA（Qt Platform Abstraction）</code>插件，详细如下图所示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220307.png"/ loading="lazy"><br><h3 id="2、QWidget"><a href="#2、QWidget" class="headerlink" title="2、QWidget:"></a>2、QWidget:</h3><p>创建<code>QWidget</code>时，最重要的一点是保证在<strong>GUI</strong>主线程完成，以及<code>sendEvent</code>和<code>postEvent</code>这个两个函数，<code>QWidget</code>相关的所有类型如下图所示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220458.png"/ loading="lazy"><p><code>QWidget</code>继承自<code>QPaintDevice</code>，<code>QPaintDevice</code>是一个很重要的类，继承关系如下图所示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220535.png"/ loading="lazy"><p><code>QWidget</code>执行时序如下图所示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220635.png"/ loading="lazy"><p><code>QWidget</code>执行时序如下图所示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220713.png"/ loading="lazy"><br><h3 id="3、exec"><a href="#3、exec" class="headerlink" title="3、exec:"></a>3、exec:</h3><p><strong>exec</strong>就是进入主事件循环，相关类为<strong>QEventLoop</strong>和<strong>QAbstractEventDispatcher</strong>，最终通过<strong>poll</strong>来处理事件，如下图所示。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910220745.png"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy"><p>转载原文:<a href="https://blog.csdn.net/iEearth/article/details/76895220">【QT】Qt 5.9 QWidget程序执行过程分析</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QStyle之PenStyle的CustomDashLine使用</title>
      <link href="posts/70612500/"/>
      <url>posts/70612500/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>QStyle</code>之<code>PenStyle</code>的<code>CustomDashLine</code>使用，使用自定义风格样式的画笔；本篇例子来自绘画 <code>Deepin v20</code> 的 <code>DTK</code> 的 <code>DSlider</code> 控件滑槽。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong> <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/100545769"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li><li> <a href="https://blog.csdn.net/qq_33154343/article/details/100659576">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li><li><a href="https://blog.csdn.net/qq_33154343/article/details/100941134">重绘的QStyle中sizeFromContents()没有被调用</a></li><li><a href="https://blog.csdn.net/qq_33154343/article/details/100942637">QStyle自定义重绘QSlider控件二</a>（重要）</li></ul><br><h2 id="系列文章："><a href="#系列文章：" class="headerlink" title="系列文章："></a>系列文章：</h2><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><ul><li>设计师给的图片：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205624.jpg"/ loading="lazy"><ul><li>第一次绘画效果（2019-09-01）:</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205925.png"/ loading="lazy"><ul><li>第二次修改效果（2019-09-03）：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205749.png"/ loading="lazy"><ul><li><p>第三次修改效果（更新2020-07-25：重绘滑动槽细节）：</p>  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112012.png" width="90%"/ loading="lazy"></li></ul><br><h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p>其中第一次绘画，和第二次绘画滑槽，都是使用划线<strong>void QPainter::drawLine(const <a href="../qtcore/qlinef.html">QLineF</a> &amp;<em>line</em>)</strong> 来进行绘画的，之前是使用系统自带的<strong>Qt::DotLine</strong>风格，而现在是使用自定义样式的<strong>Qt::CustomDashLine</strong>风格绘画；原因是系统自带Qt::DotLine的虽可以控制<code>pen.setWidthF(3);</code>线的粗细，但是不能控制其高度（保持宽度和间隔不变的情况下）；很难长得和设计图一样。</p><br><h2 id="PenStyle介绍："><a href="#PenStyle介绍：" class="headerlink" title="PenStyle介绍："></a>PenStyle介绍：</h2><p>想看一下<strong>enum Qt::PenStyle</strong>的官方文档：一共有7（统风格）+1（自定义风格）的样式：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205515.jpg"/ loading="lazy"><br><h2 id="CustomDashLine使用方法："><a href="#CustomDashLine使用方法：" class="headerlink" title="CustomDashLine使用方法："></a>CustomDashLine使用方法：</h2><p>官方教程如下：使用<strong>void setDashPattern(const <a href="../qtcore/qvector.html">QVector</a>&lt;<a href="../qtcore/qtglobal.html#qreal-typedef">qreal</a>&gt; &amp;<em>dashPattern</em>)</strong> 函数</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909211752.png"/ loading="lazy"><blockquote><p>译文如下：</p><p>将此笔的虚线模式设置为给定模式。这隐式地将笔的样式转换为Qt :: CustomDashLine。<br>必须将模式指定为偶数个正条目，其中条目1,3,5 …是短划线，而2,4,6 ……是空格。例如：</p><p>QPen pen;<br>QVector<qreal> dashes;<br>qreal space = 4;<br>dashes &lt;&lt; 1 &lt;&lt; space &lt;&lt; 3 &lt;&lt; space &lt;&lt; 9 &lt;&lt; space &lt;&lt; 27 &lt;&lt; space;<br>pen.setDashPattern(dashes);</p><p>仪表板图案以笔宽度为单位指定;例如宽度为10的长度为5的长度为50像素。请注意，宽度为零的笔相当于宽度为1像素的化妆笔。<br>每个破折号也受制于帽子样式，因此带有方帽设置的短划线将在每个方向上延伸0.5像素，从而导致总宽度为2。<br>请注意，默认的上限样式是Qt :: SquareCap，这意味着方形线末端覆盖终点并超出线宽的一半。<br>另请参见setStyle（），dashPattern（），setCapStyle（）和setCosmetic（）。</p></blockquote><p><strong>其中具体使用如下：</strong></p><p>其中便是绘画一条（自定义）的线：其<strong>线的一个完整的周期</strong>为（单位为像素）：</p><blockquote><p>1(线段)       4(间隔)       3(线段)       4(间隔)       9(线段)       4(间隔)       27(线段)       4(间隔)  </p></blockquote><p>注意：其中<strong>dashes</strong>只能够出现为偶数对，不可为奇数个；</p><br><h2 id="用于项目："><a href="#用于项目：" class="headerlink" title="用于项目："></a>用于项目：</h2><p>首先贴出第一次的”<strong>绘画滑槽</strong>“代码(局部):</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPen pen<span class="token punctuation">;</span><span class="token comment">//绘画 滑槽(线)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderGroove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>DotLine<span class="token punctuation">)</span><span class="token punctuation">;</span>    pen<span class="token punctuation">.</span><span class="token function">setWidthF</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Highlight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token operator">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Foreground<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外一个绘画方法是，在规定大小矩形内，绘画n多个小矩形，充当滑槽，但是可能需绘画多个小矩形来实现(考虑到效率开销),得到细密的线的效果；其使用for循环 遍历绘画很多次 (同样也是大的)，所以此方法被否定了。</p><p>只需要上面的<code>pen.setStyle(Qt::DotLine);（第四行）</code>修改为如下代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>CustomDashLine<span class="token punctuation">)</span><span class="token punctuation">;</span>    QVector<span class="token operator">&lt;</span>qreal<span class="token operator">></span> dashes<span class="token punctuation">;</span>    qreal space <span class="token operator">=</span> <span class="token number">1.3</span><span class="token punctuation">;</span>    dashes <span class="token operator">&lt;&lt;</span> <span class="token number">0.1</span> <span class="token operator">&lt;&lt;</span> space<span class="token punctuation">;</span>    pen<span class="token punctuation">.</span><span class="token function">setDashPattern</span><span class="token punctuation">(</span>dashes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可得到这次的效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190909205749.png"/ loading="lazy"><br><h2 id="更新2020-07-25：重绘滑动槽细节"><a href="#更新2020-07-25：重绘滑动槽细节" class="headerlink" title="更新2020-07-25：重绘滑动槽细节"></a>更新2020-07-25：重绘滑动槽细节</h2><p>前面一段时间，<code>Slider</code> 实际上是没有完全 100%  达到设计图的样式要求的（惭愧），后腾出手来，决定将其改一下，还原设计图的滑槽样式：其中具体的详细提交如下：<a href="https://gitlab.deepin.io/dde-v20/qt5integration/commit/8895abb777996700d9c5ccadda66654eb9325a8c">#8895abb7</a></p><p>其中的困难点是，设置画笔的高度、宽度、实线与虚线的间隔（要求在苹果的高分屏放大看细节后，且不会出现错误的模糊偏移）；</p><p>在开发的普通屏幕中，可以安装 <a href="https://wiki.gnome.org/Apps/EyeOfGnome">eog</a>， 然后左上角的设置里关掉平滑，再次查看图片放大看，就不会糊掉了，可以清晰的看到下面的实先和虚线偏移重叠；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112427.png" width="60%"/ loading="lazy"><p>给上最后的解决参数方案。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>CustomDashLine<span class="token punctuation">)</span><span class="token punctuation">;</span>pen<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pen<span class="token punctuation">.</span><span class="token function">setBrush</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>activeSubControls <span class="token operator">&amp;</span> SC_SliderHandle<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Highlight<span class="token punctuation">)</span> <span class="token operator">:</span> opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pen<span class="token punctuation">.</span><span class="token function">setDashOffset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pen<span class="token punctuation">.</span><span class="token function">setDashPattern</span><span class="token punctuation">(</span>QVector<span class="token operator">&lt;</span>qreal<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token number">0.5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这个数值是最接近其原图， 且放大之后，不会有模糊偏移</span>pen<span class="token punctuation">.</span><span class="token function">setCapStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>FlatCap<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token operator">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放上一张最后的效果图：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112012.png" width="70%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200903112317.png" width="70%"/ loading="lazy"><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><br><h2 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DTK </tag>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QStyle自定义重绘QRubberBand控件</title>
      <link href="posts/59510126/"/>
      <url>posts/59510126/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 根据<code>QStyle</code>的继承关系和重绘原理；通过实现一个继承<code>QCommonStyle</code>类的实现，实现自己的自定义控件<code>QRubberBand</code>控件。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    Kernel： <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100588428">QStyle自定义重绘QRubberBand控件</a> </li></ul><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一张最终的重绘运行效果图：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904195212.png"/ loading="lazy"><br><h2 id="QRubberBand重绘："><a href="#QRubberBand重绘：" class="headerlink" title="QRubberBand重绘："></a>QRubberBand重绘：</h2><p>这几就不翻开官方简介了，话说初次看到QRubberBand这个名字的时候，我一脸的懵逼。这个控件，我怎么听都没有听说过，更没有见过。</p><p><strong>但是</strong>: 如果有人和你讲，这就是windows的这个东西，那就很大家都见过了，就是<strong>多选文件时候的那个高亮矩形</strong>，如下图</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904195656.png"/ loading="lazy"><p><strong>绘画思路：</strong></p><ul><li>对应的重载函数里面，case 这个控件，然后绘画一个矩形（其画刷和边框的颜色是不一样的）</li></ul><p>代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CE_RubberBand<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionRubberBand <span class="token operator">*</span>rubber <span class="token operator">=</span> qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionRubberBand <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            QColor color <span class="token operator">=</span> opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            color<span class="token punctuation">.</span><span class="token function">setAlphaF</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>            color<span class="token punctuation">.</span><span class="token function">setAlphaF</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span><span class="token function">QPen</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">drawRect</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">adjusted</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">drawControl</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git可视化工具gitg和SmartGit</title>
      <link href="posts/a1fab4ce/"/>
      <url>posts/a1fab4ce/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  安装<strong>git</strong> 可视化工具<strong>gitg</strong>；可以在命令行里面的使用的可视化工具；在安利一个git可视化的客户端SmartGit（全平台）</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong> <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100588361">git可视化工具gitg和SmartGit</a> </li></ul><br><h2 id="安装gitg工具："><a href="#安装gitg工具：" class="headerlink" title="安装gitg工具："></a>安装gitg工具：</h2><p>安装命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gitg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>输入gitg命令会自动跳转下图中，然后按下Crtl+C才能够退出来。我是因为意外之前添加一个分支线，所以pull –rebanse总是会有冲突，故用此查看，回退（即撤销到）到分支岔口，然后在pull同步，以后在pull就不会有冲突出现了</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904200858.png"/ loading="lazy"><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904200612.png"/ loading="lazy"><br><h2 id="另一个git可视化安装工具SmartGit-："><a href="#另一个git可视化安装工具SmartGit-：" class="headerlink" title="另一个git可视化安装工具SmartGit ："></a>另一个git可视化安装工具SmartGit ：</h2><p><strong>SmartGit官网：</strong> <a href="https://www.syntevo.com/smartgit/">https://www.syntevo.com/smartgit/</a></p><p><strong>特点：</strong> 全平台，今天稍微尝试了一下，感觉也挺好的。</p><p><strong>体会：</strong> 不过目前还是更喜欢用命令行（主要是为了学习git，尽可能少用可视化工具，只是作为辅助工具）</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904203211.png"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QStyle自定义重绘QSlider控件</title>
      <link href="posts/dd3bbc4c/"/>
      <url>posts/dd3bbc4c/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  根据<code>QStyle</code>的继承关系和重绘原理；通过实现一个继承<code>QCommonStyle</code>类的实现，实现自己的自定义控件<code>QSlider</code>控件。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="系列博文："><a href="#系列博文：" class="headerlink" title="系列博文："></a>系列博文：</h2><ul><li><a href="https://touwoyimuli.github.io/2019/09/04/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6/"><code>QStyle</code>自定义重绘<code>QSlider</code>控件</a> </li><li> <a href="https://touwoyimuli.github.io/2019/09/09/QStyle%E4%B9%8BPenStyle%E7%9A%84CustomDashLine%E4%BD%BF%E7%94%A8/">QStyle之PenStyle的CustomDashLine使用</a> 【更新：更加精准的绘画滑槽】</li><li><a href="https://touwoyimuli.github.io/2019/09/17/%E9%87%8D%E7%BB%98%E7%9A%84QStyle%E4%B8%ADsizeFromContents()%E6%B2%A1%E6%9C%89%E8%A2%AB%E8%B0%83%E7%94%A8/">重绘的QStyle中sizeFromContents()没有被调用</a></li><li><a href="https://touwoyimuli.github.io/2019/09/17/QStyle%E8%87%AA%E5%AE%9A%E4%B9%89%E9%87%8D%E7%BB%98QSlider%E6%8E%A7%E4%BB%B6%E4%BA%8C/">QStyle自定义重绘QSlider控件二</a>（重要）</li></ul><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p>先上一张最终的重绘运行效果图</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190910213128.png"/ loading="lazy"><p>运行代码，在 <strong>main（）</strong>函数里面：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QApplication <span class="token function">app</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    qApp<span class="token operator">-></span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">"chameleon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QWidget wTemp<span class="token punctuation">;</span>    wTemp<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    NoTicks = 0,</span><span class="token comment">//    TicksAbove = 1,</span><span class="token comment">//    TicksLeft = TicksAbove,</span><span class="token comment">//    TicksBelow = 2,</span><span class="token comment">//    TicksRight = TicksBelow,</span><span class="token comment">//    TicksBothSides = 3</span>QHBoxLayout <span class="token operator">*</span>layout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QHBoxLayout</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>    QSlider <span class="token operator">*</span>slider1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//竖直刻度在右侧的Slider</span>    slider1<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider1<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>TicksRight<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider1<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider1<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QSlider <span class="token operator">*</span>slider2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//竖直刻度在左侧的Slider</span>    slider2<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider2<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>TicksLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider2<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider2<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider2<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QSlider <span class="token operator">*</span>slider3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平刻度在下侧的Slider</span>    slider3<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider3<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>TicksBelow<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider3<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider3<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider3<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QSlider <span class="token operator">*</span>slider4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//水平刻度在上侧的Slider</span>    slider4<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider4<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>TicksAbove<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider4<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider4<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider4<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QSlider <span class="token operator">*</span>slider5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//竖直刻度在两侧的Slider</span>    slider5<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Vertical<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider5<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider5<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider5<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider5<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QSlider <span class="token operator">*</span>slider6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSlider</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//水平刻度在两侧的Slider</span>    slider6<span class="token operator">-></span><span class="token function">setOrientation</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider6<span class="token operator">-></span><span class="token function">setTickPosition</span><span class="token punctuation">(</span>QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span><span class="token punctuation">;</span>    slider6<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider6<span class="token operator">-></span><span class="token function">setTickInterval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    slider6<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wTemp<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> app<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="QSlider属性："><a href="#QSlider属性：" class="headerlink" title="QSlider属性："></a>QSlider属性：</h2><ul><li><strong>Qt文档：</strong></li></ul><p>先看<strong>Qt</strong>官方文档介绍，我搽，就这么两个属性？？？然后大致浏览完了整篇。怎么给我一点，怎么只有这么一点讲解的内容啊！！！这可不行，谁受得了啊 ，然后继续看源码，看其继承的基类<strong>QAbstractSlider</strong>等之后。这还差不多。不然我怎么使用<strong>QStyle</strong>重绘这个控件</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904183814.png"/ loading="lazy"><ul><li><strong>tickInterval : int</strong><br>此属性保存tickmarks之间的间隔这是一个值间隔，而不是像素间隔。如果为0，滑块将在singleStep和pageStep之间进行选择。</li><li><strong>tickPosition : TickPosition</strong><br>此属性保存此滑块的tickmark位置，有效值由QSlider::TickPosition enum描述。默认值是QSlider:: notice。</li></ul><p><strong>刻度条绘画方向：</strong></p><table><thead><tr><th>Constant</th><th>Description</th></tr></thead><tbody><tr><td>QSlider::NoTicks</td><td>不显示刻度</td></tr><tr><td>QSlider::TicksBothSides</td><td>两边都显示刻度</td></tr><tr><td>QSlider::TicksAbove</td><td>刻度显示在上边(水平)</td></tr><tr><td>QSlider::TicksBelow</td><td>刻度显示在下边(水平)</td></tr><tr><td>QSlider::TicksLeft</td><td>刻度显示在左边(竖直)</td></tr><tr><td>QSlider::TicksRight</td><td>刻度显示在右边(竖直)</td></tr></tbody></table><p><strong>QSlider的摆放方向：</strong></p><table><thead><tr><th>orientation : Qt::Orientation</th><th>Description</th></tr></thead><tbody><tr><td>Qt::Vertical</td><td>滑动条竖直绘画</td></tr><tr><td>Qt::Horizontal</td><td>滑动条水平绘画</td></tr></tbody></table><p>其他几个涉及<strong>QStyle</strong>重绘的重要属性：</p><table><thead><tr><th>val</th><th>含义</th></tr></thead><tbody><tr><td>minimum</td><td>滑动条最小值</td></tr><tr><td>maximum</td><td>滑动条最大值</td></tr><tr><td>singleStep</td><td>在min-max之间显示的步长,移动一步的改变数值</td></tr><tr><td>pageStep</td><td>用于计算刻度的个数(有阈值限制,不完全按这个来,没详细研究,柑橘用来有点迷);</td></tr><tr><td>value</td><td>当前的显示数值(在min-max之间,也是本信号的槽的参数的数值)</td></tr><tr><td>sliderPosition</td><td>？？</td></tr><tr><td>tickInterval</td><td>两个刻度之间的间隔数值（重绘使用）</td></tr><tr><td>tickPosition</td><td>刻度的位置</td></tr></tbody></table><p><font color=#70AD47 size=3 face="幼圆">注意：</font> pageStep   这个用于计算刻度的个数(有阈值限制,不完全按这个来,没详细研究,柑橘用来有点迷);  <font color=#D0087E size=4 face="幼圆"><strong>刻度个数 - 1 = 刻度间隔的个数 = (span - 0) / pageStep</strong></font>; 关于0, span, min, max, val 的关系,参见<strong>sliderPositionFromValue()<strong>的实现 [此处特指</strong>qfusionstyle.cpp</strong> 里面的, 不知道qcommstyle.cpp实现原理是否相同?]</p><br><h2 id="理解属性步长sigleStep、pageSteop："><a href="#理解属性步长sigleStep、pageSteop：" class="headerlink" title="理解属性步长sigleStep、pageSteop："></a>理解属性步长sigleStep、pageSteop：</h2><p>因为<strong>QSlider = 滑块（句柄）+ 滑槽 + 刻度（矩形）</strong>；</p><p>创建一个简单的小例子，核心代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Widget</span><span class="token operator">::</span><span class="token function">on_sliderHor_valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> minimum <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">minimum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//滑动条最小值</span>    <span class="token keyword">int</span> maximum <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">maximum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//滑动条最大值</span>    <span class="token keyword">int</span> sigleStep <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">singleStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//在min~max之间显示的步长,移动一步的改变数值</span>    <span class="token keyword">int</span> pageSteop <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">pageStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//用于计算刻度的个数(有阈值限制,不完全按这个来）</span>    <span class="token keyword">int</span> val <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//当前的显示数值(在min~max之间,也是本信号的槽的参数的数值)</span>    <span class="token keyword">int</span> sliderPosition <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">sliderPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//?? 不是很清楚</span>    <span class="token keyword">int</span> tickinterval <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">tickInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//两个刻度之间的间隔数值（重绘使用）</span>    <span class="token keyword">int</span> tickPosition <span class="token operator">=</span> ui<span class="token operator">-></span>sliderHor<span class="token operator">-></span><span class="token function">tickPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//刻度的位置</span>    QString str <span class="token operator">=</span> <span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"value:%1,  minimum:%2,  maximum:%3,  sigleStep:%4,  pageSteop:%5,  val:%6,  sliderPosition:%7,  tickinterval:%8,  tickPosition:%9"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>minimum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>maximum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>sigleStep<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>pageSteop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>sliderPosition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>tickinterval<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>tickPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其效果如下：有<strong>qDebug</strong>可以查看每一个数值的含义，以及变化可以看出其含义（每次按下按下一个方向→或←按键）；就会显示一行数据， 重点观察sigleStep、sigleStep、pageSteop的数值；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904185953.png"/ loading="lazy"><p>感觉其上面这些矩形，大多是使用时候，而非更底层的重绘该空间使用的；而<strong>sliderPosition</strong>、<strong>tickPosition</strong>才是重绘使用得。有了上面的基础之后,下面开始正经的重绘：</p><br><h2 id="重绘QSlider："><a href="#重绘QSlider：" class="headerlink" title="重绘QSlider："></a>重绘QSlider：</h2><p><strong>重绘思路：</strong></p><ul><li>先预先计算好<strong>滑块（矩形）+ 滑槽（矩形） + 刻度（矩形）</strong></li><li>对该部分矩形进行绘画</li></ul><h3 id="计算所需要的三个部分的矩形："><a href="#计算所需要的三个部分的矩形：" class="headerlink" title="计算所需要的三个部分的矩形："></a>计算所需要的三个部分的矩形：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QRect <span class="token class-name">CustomStyle</span><span class="token operator">::</span><span class="token function">subControlRect</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span>                                     QStyle<span class="token operator">::</span>SubControl sc<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CC_Slider<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span>option <span class="token operator">=</span> qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            QRectF rect <span class="token operator">=</span> option<span class="token operator">-></span>rect<span class="token punctuation">;</span>                                                    <span class="token comment">//Slider控件总的大小矩形</span>            <span class="token keyword">int</span> slider_size <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderControlThickness<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//滑块的高度</span><span class="token comment">//            int tick_size = proxy()->pixelMetric(PM_SliderTickmarkOffset, opt, w);         //刻度的高度</span>            QRectF slider_handle_rect <span class="token operator">=</span> rect<span class="token punctuation">;</span>                                              <span class="token comment">//滑块和滑漕的的最小公共矩形 (后面被用作临时且被改变的)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                slider_handle_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>slider_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksAbove<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveBottom</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBelow<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                slider_handle_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>slider_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksRight<span class="token punctuation">)</span>  slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksLeft<span class="token punctuation">)</span>   slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            QRectF rectStatic <span class="token operator">=</span>  slider_handle_rect<span class="token punctuation">;</span>   <span class="token comment">//rectStatic作为 滑块和滑漕的的最小公共矩形(不改变)</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>sc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> SC_SliderGroove<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑漕</span>                qreal groove_size <span class="token operator">=</span> slider_size <span class="token operator">/</span> <span class="token number">4.0</span><span class="token punctuation">;</span>                QRectF groove_rect<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    groove_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    groove_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>groove_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    groove_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>groove_size<span class="token punctuation">)</span><span class="token punctuation">;</span>                    groove_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                groove_rect<span class="token punctuation">.</span><span class="token function">moveCenter</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> groove_rect<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> SC_SliderHandle<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//滑块</span>                <span class="token keyword">int</span> sliderPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderLength<span class="token punctuation">,</span> option<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">bool</span> horizontal <span class="token operator">=</span> option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">;</span>                sliderPos <span class="token operator">=</span> <span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>option<span class="token operator">-></span>minimum<span class="token punctuation">,</span> option<span class="token operator">-></span>maximum<span class="token punctuation">,</span> option<span class="token operator">-></span>sliderPosition<span class="token punctuation">,</span>                                                    <span class="token punctuation">(</span>horizontal <span class="token operator">?</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">,</span> option<span class="token operator">-></span>upsideDown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> sliderPos<span class="token punctuation">)</span><span class="token punctuation">;</span>                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>rectStatic<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>slider_handle_rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> sliderPos<span class="token punctuation">)</span><span class="token punctuation">;</span>                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                    slider_handle_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>rectStatic<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">case</span> SC_SliderTickmarks<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//刻度的矩形</span>                QRectF tick_rect <span class="token operator">=</span> rect<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    tick_rect<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksAbove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        tick_rect<span class="token punctuation">.</span><span class="token function">moveTop</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBelow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        tick_rect<span class="token punctuation">.</span><span class="token function">moveBottom</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    tick_rect<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> slider_handle_rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksLeft<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        tick_rect<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        tick_rect<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> tick_rect<span class="token punctuation">.</span><span class="token function">toRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">QCommonStyle</span><span class="token operator">::</span><span class="token function">subControlRect</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再对其中每一个矩形（一共3个）进行重绘："><a href="#再对其中每一个矩形（一共3个）进行重绘：" class="headerlink" title="再对其中每一个矩形（一共3个）进行重绘："></a>再对其中每一个矩形（一共3个）进行重绘：</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">ChameleonStyle</span><span class="token operator">::</span><span class="token function">drawComplexControl</span><span class="token punctuation">(</span>QStyle<span class="token operator">::</span>ComplexControl cc<span class="token punctuation">,</span> <span class="token keyword">const</span> QStyleOptionComplex <span class="token operator">*</span>opt<span class="token punctuation">,</span>                                        QPainter <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">const</span> QWidget <span class="token operator">*</span>w<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> CC_Slider <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span>slider <span class="token operator">=</span> qstyleoption_cast<span class="token operator">&lt;</span><span class="token keyword">const</span> QStyleOptionSlider <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//各个使用的矩形大小和位置</span>            QRectF rect <span class="token operator">=</span> opt<span class="token operator">-></span>rect<span class="token punctuation">;</span>                                                                            <span class="token comment">//Slider控件最大的矩形(包含如下三个)</span>            QRectF rectHandle <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subControlRect</span><span class="token punctuation">(</span>CC_Slider<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> SC_SliderHandle<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//滑块矩形</span>            QRectF rectSliderTickmarks <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subControlRect</span><span class="token punctuation">(</span>CC_Slider<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> SC_SliderTickmarks<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//刻度的矩形</span>            QRect rectGroove <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">subControlRect</span><span class="token punctuation">(</span>CC_Slider<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> SC_SliderGroove<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//滑槽的矩形</span><span class="token comment">//            qDebug()&lt;&lt;"____04_____Slider控件最大的矩形(包含如下三个):"&lt;&lt;rect&lt;&lt;"  滑块矩形:"&lt;&lt;rectHandle&lt;&lt;"  刻度的矩形:"&lt;&lt;rectSliderTickmarks&lt;&lt;"   滑槽的矩形:"&lt;&lt;rectGroove&lt;&lt;endl;</span><span class="token comment">//            //测试(保留不删)</span>            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">,</span> Qt<span class="token operator">::</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rectSliderTickmarks<span class="token punctuation">,</span> Qt<span class="token operator">::</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">,</span> Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span><span class="token function">fillRect</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">,</span> Qt<span class="token operator">::</span>green<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"---rect:"</span><span class="token operator">&lt;&lt;</span>rect<span class="token operator">&lt;&lt;</span><span class="token string">"  rectHandle:"</span><span class="token operator">&lt;&lt;</span>rectHandle<span class="token operator">&lt;&lt;</span><span class="token string">"   rectSliderTickmarks:"</span><span class="token operator">&lt;&lt;</span>rectSliderTickmarks<span class="token operator">&lt;&lt;</span><span class="token string">"   rectGroove:"</span><span class="token operator">&lt;&lt;</span>rectGroove<span class="token punctuation">;</span>            QPen pen<span class="token punctuation">;</span>            <span class="token comment">//绘画 滑槽(线)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderGroove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>CustomDashLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                QVector<span class="token operator">&lt;</span>qreal<span class="token operator">></span> dashes<span class="token punctuation">;</span>                qreal space <span class="token operator">=</span> <span class="token number">1.3</span><span class="token punctuation">;</span>                dashes <span class="token operator">&lt;&lt;</span> <span class="token number">0.1</span> <span class="token operator">&lt;&lt;</span> space<span class="token punctuation">;</span>                pen<span class="token punctuation">.</span><span class="token function">setDashPattern</span><span class="token punctuation">(</span>dashes<span class="token punctuation">)</span><span class="token punctuation">;</span>                pen<span class="token punctuation">.</span><span class="token function">setWidthF</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Highlight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span><span class="token function">setRenderHint</span><span class="token punctuation">(</span>QPainter<span class="token operator">::</span>Antialiasing<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Foreground<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rectGroove<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rectHandle<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pen<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Foreground<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>pen<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rectGroove<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">QPointF</span><span class="token punctuation">(</span>rectGroove<span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  rectHandle<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//绘画 滑块</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderHandle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                pen<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>SolidLine<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>NoPen<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span><span class="token function">setBrush</span><span class="token punctuation">(</span><span class="token function">getColor</span><span class="token punctuation">(</span>opt<span class="token punctuation">,</span> QPalette<span class="token operator">::</span>Highlight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span><span class="token function">drawRoundedRect</span><span class="token punctuation">(</span>rectHandle<span class="token punctuation">,</span> <span class="token class-name">DStyle</span><span class="token operator">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token operator">::</span>PM_FrameRadius<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DStyle</span><span class="token operator">::</span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>DStyle<span class="token operator">::</span>PM_FrameRadius<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//绘画 刻度,绘画方式了参考qfusionstyle.cpp</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderTickmarks<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> slider<span class="token operator">-></span>tickInterval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                   <span class="token comment">//需要绘画刻度</span>                p<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>opt<span class="token operator">-></span>palette<span class="token punctuation">.</span><span class="token function">foreground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderSpaceAvailable<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可用空间</span>                <span class="token keyword">int</span> interval <span class="token operator">=</span> slider<span class="token operator">-></span>tickInterval<span class="token punctuation">;</span>                                       <span class="token comment">//标记间隔</span><span class="token comment">//                int tickSize = proxy()->pixelMetric(PM_SliderTickmarkOffset, opt, w);      //标记偏移</span><span class="token comment">//                int ticks = slider->tickPosition;                                          //标记位置</span>                <span class="token keyword">int</span> v <span class="token operator">=</span> slider<span class="token operator">-></span>minimum<span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderLength<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;=</span> slider<span class="token operator">-></span>maximum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                          <span class="token comment">//此处不添加+1的话, 会少绘画一根线</span>                    <span class="token keyword">const</span> <span class="token keyword">int</span> v_ <span class="token operator">=</span> <span class="token function">qMin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span> v_<span class="token punctuation">,</span> available<span class="token punctuation">)</span> <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>orientation <span class="token operator">==</span> Qt<span class="token operator">::</span>Horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">//两侧都会绘画, 总的矩形-中心滑槽滑块最小公共矩形</span>                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>slider<span class="token operator">-></span>tickPosition <span class="token operator">==</span> QSlider<span class="token operator">::</span>TicksBothSides<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectHandle<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            p<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">,</span> rectSliderTickmarks<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// in the case where maximum is max int</span>                    <span class="token keyword">int</span> nextInterval <span class="token operator">=</span> v <span class="token operator">+</span> interval<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextInterval <span class="token operator">&lt;</span> v<span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    v <span class="token operator">=</span> nextInterval<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">DStyle</span><span class="token operator">::</span><span class="token function">drawComplexControl</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> opt<span class="token punctuation">,</span> p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="若刻度异常情况-非bug-："><a href="#若刻度异常情况-非bug-：" class="headerlink" title="若刻度异常情况(非bug)："></a>若刻度异常情况(非bug)：</h2><p><strong>注意：</strong>  下图中是使用<code>pen.setStyle(Qt::DotLine);</code>来绘画的，上面的代码修改为了<code>pen.setStyle(Qt::CustomDashLine);</code>来绘画，所以会<strong>（看到的滑槽）</strong>略有不一样；</p><p>当显示区域比较小的时候,而刻度条的个数又比较多的时候(密密麻麻的那种),当超过某一阈值时候,系统会自动压缩显示,一个变成**”胖瘦相间隔”**,此时如果将该粗窗口放大,则会被重绘画显示正常,刻度条均匀相间隔。</p><p>原图效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904192819.png"/ loading="lazy"><p>本来还以为是自己重新绘画的效果造成的,后面确定是过密形成的显示异常情况.就想着有没有能够的解决方法,能够重新绘画显示.想着参考<code>QFusion</code> 风格的实现,于是翻看源码，<strong>只看绘画刻度部分</strong>的Qt源码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token operator">-></span>subControls <span class="token operator">&amp;</span> SC_SliderTickmarks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                painter<span class="token operator">-></span><span class="token function">setPen</span><span class="token punctuation">(</span>outline<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tickSize <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderTickmarkOffset<span class="token punctuation">,</span> option<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> available <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderSpaceAvailable<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> interval <span class="token operator">=</span> slider<span class="token operator">-></span>tickInterval<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    interval <span class="token operator">=</span> slider<span class="token operator">-></span>singleStep<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">QStyle</span><span class="token operator">::</span><span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span> interval<span class="token punctuation">,</span>                                                        available<span class="token punctuation">)</span>                            <span class="token operator">-</span> <span class="token class-name">QStyle</span><span class="token operator">::</span><span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span>                                                              <span class="token number">0</span><span class="token punctuation">,</span> available<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>                        interval <span class="token operator">=</span> slider<span class="token operator">-></span>pageStep<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>interval <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    interval <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> v <span class="token operator">=</span> slider<span class="token operator">-></span>minimum<span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">pixelMetric</span><span class="token punctuation">(</span>PM_SliderLength<span class="token punctuation">,</span> slider<span class="token punctuation">,</span> widget<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;=</span> slider<span class="token operator">-></span>maximum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> slider<span class="token operator">-></span>maximum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> interval <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">const</span> <span class="token keyword">int</span> v_ <span class="token operator">=</span> <span class="token function">qMin</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">sliderPositionFromValue</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>minimum<span class="token punctuation">,</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">,</span>                                                      v_<span class="token punctuation">,</span> <span class="token punctuation">(</span>horizontal                                                           <span class="token operator">?</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                           <span class="token operator">:</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">,</span>                                                      slider<span class="token operator">-></span>upsideDown<span class="token punctuation">)</span> <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> extra <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v_ <span class="token operator">==</span> slider<span class="token operator">-></span>minimum <span class="token operator">||</span> v_ <span class="token operator">==</span> slider<span class="token operator">-></span>maximum<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksAbove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">,</span>                                              pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tickSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksBelow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> extra<span class="token punctuation">,</span>                                              pos<span class="token punctuation">,</span> slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">bottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksAbove<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> extra<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>                                              slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> tickSize<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticksBelow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            painter<span class="token operator">-></span><span class="token function">drawLine</span><span class="token punctuation">(</span>slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> extra<span class="token punctuation">,</span> pos<span class="token punctuation">,</span>                                              slider<span class="token operator">-></span>rect<span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tickSize<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">// in the case where maximum is max int</span>                    <span class="token keyword">int</span> nextInterval <span class="token operator">=</span> v <span class="token operator">+</span> interval<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextInterval <span class="token operator">&lt;</span> v<span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    v <span class="token operator">=</span> nextInterval<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等等， 这根本没有考虑这个问题，好不好。而且感觉绘画刻度的方法，是对一个矩形矩形多次精确的计算，eeemmmmmmmmmm，这样子是不是有点复杂了了。感觉没有我的将这一个超大矩形，分割成为三个小矩形这一思路简单，然后在对每一块小矩形进行相应的绘画。</p><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>决定尝试一下其原生**<code>QFusion</code><strong>风格（）是怎么解决这个效果,当设置刻度间隔比较小的时候,显示宽度比较窄时候,这个东西出现了”胖瘦相互间隔”，然后利用上面的一开始创建的小例子</strong>，改变步长和刻度间个和max值，看看效果**</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904191258.png"/ loading="lazy"><p>甚至再次改变步长和刻度间个和max值，看看效果。过于密集，成了线</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904192704.jpg"/ loading="lazy"><p>握草,握了个草,我握了个大草.hhhhhhhhhhhhhhhhhh,原来老哥你也没有设置这个问题啊,果断的出结论,这不是bug.果断不再继续修改了重绘画了.坏坏的笑了几下之后。</p><p>于是将一开始出现问题的地方，将该窗口最大化，然后局部拉大，看到这个效果（果然得到了验证）：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190904192930.png"/ loading="lazy"><p><strong>最后总结：</strong>这个不是bug，或者显示异常。冷静下来是思考:如此窄的矩形里面,显示如此多根刻度线,由于像素限制,只能后绘画的比较密集,当这个数值更大的时候,会发现,这个会变成一条直线(放大拉开显示,才会显示其实是均匀相间隔的).</p><br><h2 id="思考总结："><a href="#思考总结：" class="headerlink" title="思考总结："></a>思考总结：</h2><ul><li>首先检查代码，是否是相关部分的代码逻辑有问题</li><li>仍然觉得不应该之后，试一下Qt自带的是否会重现，排除是自己还是非自己原因</li><li>改变相关的值，写小例子验证，查看效果</li><li>发现经验：+1；  完美结束</li></ul><br><h2 id="更新：更加精准的绘画滑槽"><a href="#更新：更加精准的绘画滑槽" class="headerlink" title="更新：更加精准的绘画滑槽"></a>更新：更加精准的绘画滑槽</h2><p>更新于2019-09-09   参见： <a href="%5Bhttps://touwoyimuli.github.io/2019/09/09/QStyle%E4%B9%8BPenStyle%E7%9A%84CustomDashLine%E4%BD%BF%E7%94%A8/%5D(https://touwoyimuli.github.io/2019/09/09/QStyle%E4%B9%8BPenStyle%E7%9A%84CustomDashLine%E4%BD%BF%E7%94%A8/)">QStyle自定义重绘QSlider控件</a> 一文</p><br><h2 id="思考分享："><a href="#思考分享：" class="headerlink" title="思考分享："></a>思考分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit之后，撤销commit提交，却保留代码</title>
      <link href="posts/7e1380d8/"/>
      <url>posts/7e1380d8/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  已经<strong>git commi</strong>t一次提交，但是想撤销<strong>commit</strong>这次提交，且保留代码不变</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100524686">git commit之后，撤销commit提交，却保留代码</a> </li></ul><br><h2 id="问题背景："><a href="#问题背景：" class="headerlink" title="问题背景："></a>问题背景：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">写完代码后，我们一般这样<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> //添加所有文件<span class="token function">git</span> commit -m <span class="token string">"本功能全部完成"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行完<strong>commit</strong>后，想撤回<strong>commit</strong>，怎么办？</p><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --soft HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就成功的撤销了你的commit</p><p>注意，仅仅是撤回commit操作，您写的代码仍然保留。</p><ul><li>说一下个人理解：</li></ul><p>HEAD^的意思是上一个版本，也可以写成HEAD~1</p><p>如果你进行了2次commit，想都撤回，可以使用HEAD~2</p><br><h2 id="关于参数："><a href="#关于参数：" class="headerlink" title="关于参数："></a>关于参数：</h2><blockquote><p>–mixed </p></blockquote><p>意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作</p><p>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><blockquote><p>–soft  </p></blockquote><p>不删除工作空间改动代码，撤销<strong>commit</strong>，不撤销<strong>git add .</strong> </p><blockquote><p>–hard</p></blockquote><p>删除工作空间改动代码，撤销<strong>commit</strong>，撤销<strong>git add .</strong> </p><p>注意完成这个操作后，就恢复到了上一次的commit状态。</p><h2 id="顺便说一下，如果commit注释写错了，只是想改一下注释，只需要："><a href="#顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：" class="headerlink" title="顺便说一下，如果commit注释写错了，只是想改一下注释，只需要："></a>顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会进入默认vim编辑器，修改注释完毕后保存就好了。</p><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><p>参考：</p><p><a href="https://blog.csdn.net/w958796636/article/details/53611133">git使用情景2：commit之后，想撤销commit</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git pull --rebase讲解</title>
      <link href="posts/e335aa0b/"/>
      <url>posts/e335aa0b/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> <code>git pull --rebase</code>讲解</p><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    Kernel： <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100398247">git pull –rebase讲解</a> </li></ul><br><h2 id="git-pull-–rebase讲解："><a href="#git-pull-–rebase讲解：" class="headerlink" title="git pull –rebase讲解："></a>git pull –rebase讲解：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git pull <span class="token operator">=</span> git fetch <span class="token operator">&amp;&amp;</span> git mergegit pull <span class="token operator">--</span>rebase <span class="token operator">=</span> git fetch <span class="token operator">&amp;&amp;</span> git rebase<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190808220109.png"/ loading="lazy"><ul><li>C的基础上开发到D，小明在C的基础上开发到E，这个时候要把E合并到<code>origin</code>，两种办法:</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190902213450.png"/ loading="lazy"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如果有冲突, 解决冲突<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>不需要commit<span class="token function">git</span> rebase --continue<span class="token function">git</span> push 到远端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><p>参考：</p><p><a href="https://www.jianshu.com/p/0cd05dd1cc73">git pull –rebase origin master</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git pull失败原因和解决</title>
      <link href="posts/7abbb81d/"/>
      <url>posts/7abbb81d/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  使用<code>git pul</code>l出现<strong>error</strong>如下：其解决方法</p><blockquote><p> error: Your local changes to the following files would be overwritten by merge:<br>        xxx/xxx/xxx.java   Please, commit your changes or stash them before you can           merge.  Aborting</p></blockquote><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <code>git</code>十分常用命令：团队协作中，开发过程中，会经常遇到使用的命令</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    Kernel： <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font>  <a href="https://blog.csdn.net/qq_33154343/article/details/100397800">git pull失败原因和解决</a></li></ul><br><h2 id="git-pull失败原因和解决："><a href="#git-pull失败原因和解决：" class="headerlink" title="git pull失败原因和解决："></a>git pull失败原因和解决：</h2><p><code>pull</code>更新代码，遇到了下面的问题：</p><blockquote><p> error: Your local changes to the following files would be overwritten by merge:<br>        xxx/xxx/xxx.java   Please, commit your changes or stash them before you can           merge.  Aborting</p></blockquote><p><strong>解决方案：</strong></p><ul><li>放弃本地修改，直接覆盖之</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard<span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>或<code>stash</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash       //保存贮藏<span class="token function">git</span> pull        //拉取<span class="token function">git</span> stash pop   //弹出贮藏 （此时会将更新的代码和自己写的代码合并，可能会有冲突，需要手动解决冲突）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><p>参考：</p><p><a href="https://www.cnblogs.com/xie-xiao-chao/p/9779179.html"><a href="https://www.cnblogs.com/xie-xiao-chao/p/9779179.html">git拉取的时候报冲突解决方法</a></a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>github的约定式提交 1.0.0-beta.3（规范）</title>
      <link href="posts/eec5a0e5/"/>
      <url>posts/eec5a0e5/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>   约定式提交：一种规范，用以给提交信息增加人机可读的信息</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100406699">github的约定式提交 1.0.0-beta.3（规范）</a> </li></ul><br><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>因为现在使用<strong>git</strong>、<strong>github</strong>越来越多，对其也是越来越喜爱，同时也希望自己能够更加的规范化，和国际化编程，接触一些前沿知识和规范，写出更加优质的代码和文档和文章习惯。在这里，推荐一篇<strong>commit</strong>提交的国际化规范文档</p><br><h2 id="约定式提交-1-0-0-beta-3官网："><a href="#约定式提交-1-0-0-beta-3官网：" class="headerlink" title="约定式提交 1.0.0-beta.3官网："></a>约定式提交 1.0.0-beta.3官网：</h2><p><a href="https://www.conventionalcommits.org/zh/v1.0.0-beta.3/">git hub约定式提交 一种规范，用以给提交信息增加人机可读的信息</a></p><br><h2 id="约定式提交-1-0-0-beta-3预览："><a href="#约定式提交-1-0-0-beta-3预览：" class="headerlink" title="约定式提交 1.0.0-beta.3预览："></a>约定式提交 1.0.0-beta.3预览：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190902221604.png"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小技巧：设置`QToolBox`的每一页page的使用单独的布局（`QTabWidget`同理）</title>
      <link href="posts/217543be/"/>
      <url>posts/217543be/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 在使用QT的<strong>Design</strong>设计师的时候，当需要使用控件<code>QToolBox</code>时候，里面是有多页的时候，为每一页都设置成一个单独的布局方式。其中<code>QTabWidget</code>控件的方法一致。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="知识分享："><a href="#知识分享：" class="headerlink" title="知识分享："></a>知识分享：</h2><p><strong>小技巧：设置<code>QToolBox</code>的每一页page的使用单独的布局（<code>QTabWidget</code>同理）</strong></p><ul><li>1、首先选中QToolBox控件</li><li>2、再在Design设计师（右侧具体的某一page_xxx）里面，点击选中，打开此page</li><li>3、<font color=#D0087E size=4 face="幼圆"><strong>重要的一步：</strong></font> 先必须随意拖曳一个控件到这一page页里面（才能够进行下一步）</li><li>4、回到中间，鼠标右键单点击，选中 <code>Lay out</code>一栏， 里面选择其他具体的布局方式，如：<strong>Lay out in a Grid</strong></li><li>5、继续设置其他page页面， 同上1~4步骤循环</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901165542.png"/ loading="lazy"><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901165612.png"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小技巧：Design设计师里，无法拖拽action到toolbar里</title>
      <link href="posts/8dd195fe/"/>
      <url>posts/8dd195fe/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  在<strong>Qt</strong>的<strong>Design</strong>设计师里面，试图拖拽<strong>action</strong>到<strong>toolbar</strong>里面，却不管怎么移动都是一个红色○里面带个X：位禁止拖拽此处，无法拖拽成功。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程软件：</strong>   <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100168170">小技巧：Design设计师里，无法拖拽action到toolbar里Design设计师里，无法拖拽action到toolbar里</a></li></ul><br><h2 id="知识分享："><a href="#知识分享：" class="headerlink" title="知识分享："></a>知识分享：</h2><p><strong>问题：</strong></p><p>试图拖拽<strong>action</strong>到<strong>toolbar</strong>里面，却不管怎么移动都是这个红色○里面带个X：禁止拖拽此处</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831000617.jpg"/ loading="lazy"><p>在Design设计师里面，显示QToolBar工具栏非常小，不能拖拽下面的action到这里，进行可视化的添加；</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831000434.jpg"/ loading="lazy"><p><strong>可行的方法：</strong></p><p>但是运行之后，想要得到的显示效果的一个方法（不算让我满意）；就是可以添加到QToolBar里面（这是使用代码添加方法）：<code>ui-&gt;mainToolBar-&gt;addAction(ui-&gt;actListInit);</code></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831001448.jpg"/ loading="lazy"><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ul><li><font color=#D0087E size=4 face="幼圆"><strong>方法一：</strong></font> 仍然坚持暴力拖拽，屡次进行尝试，或许偶尔几次会成功</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901193120.png"/ loading="lazy"><ul><li><font color=#D0087E size=4 face="幼圆"><strong>方法二：</strong></font>先调整QToolBar的miniumSize的Height的大小，设置大一点，然后进行拖拽，会发现如此容易（下图红线中，是表示可以拖拽放在此处）</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190901193059.png"/ loading="lazy"><br><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><ul><li>运行成功演示</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831001314.jpg"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt推倒重学系列--总目录</title>
      <link href="posts/55c0bcb3/"/>
      <url>posts/55c0bcb3/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <strong>Qt推倒重学系列–总目录</strong></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="总的目录清单"><a href="#总的目录清单" class="headerlink" title="总的目录清单:"></a>总的目录清单:</h2><p>由于会经常更新新的文章，所以暂时先使用这一份目录更新：<a href="https://github.com/touwoyimuli/QtExamples/wiki/Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97--%E6%80%BB%E7%9B%AE%E5%BD%95%E3%80%90github.io%E3%80%91">Qt推倒重学系列 总目录【github.io】</a></p><br><br><br><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，<font color=#FE7207 size=4 face="幼圆"><strong>但在   <a href="https://touwoyimuli.github.io/">github.io</a> 博客上体验完美,</strong></font>  <font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100148539">Qt推倒重学系列–总目录</a></li></ul><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换`Qt`应用程序的界面`UI`，实现换肤，改用自带其他默认`QStyle`风格样式</title>
      <link href="posts/4a1173df/"/>
      <url>posts/4a1173df/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  显示某一系统自带的几种风格样式<code>QStyle</code>， 然后分别进行查看效果样式。更换<code>Qt</code>应用程序的界面<code>UI</code>，实现换肤，改用自带其他默认<code>QStyle</code>风格样式。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  </p><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong>  <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="知识讲解："><a href="#知识讲解：" class="headerlink" title="知识讲解："></a>知识讲解：</h2><p>在 <strong>main.cpp</strong> 中，添加如下代码和头文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Examples.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QStyleFactory></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ExCustomStyle.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//若是系统自带的QStyle风格，则需要先创建为QStyleFactory::create(""，然后设置qApp->setStyle()</span>    QStringList listStyle <span class="token operator">=</span> <span class="token class-name">QStyleFactory</span><span class="token operator">::</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foreach</span><span class="token punctuation">(</span>QString val<span class="token punctuation">,</span> listStyle<span class="token punctuation">)</span>     <span class="token comment">//打印当前系统支持的系统风格,,且打印出来</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>val<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>        qApp<span class="token operator">-></span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">QStyleFactory</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Fusion"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//若是非系统自定义的，则需要自己创建自定义风格对象，然后设置使用</span>    <span class="token comment">//ExCustomStyle* customStyle = new ExCustomStyle;</span>    <span class="token comment">//qApp->setStyle(customStyle);</span>    Examples w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在<strong>windows 10</strong> 运行：自带支持的<strong>QStyle</strong>风格:</li></ul><blockquote><p>“Windows”    “WindowsXP”   “WindowsVista”    “Fusion”</p></blockquote><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829222611.png"/ loading="lazy"><ul><li>在<strong>Deepin</strong> （<strong>Linux</strong>） 运行：自带支持的<strong>QStyle</strong>风格:</li></ul><blockquote><p>“chameleon”  “dsemilight”  “dsemidark”  “dlight”  “ddark”  “Windows”  “Fusion”</p></blockquote><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831225954.jpg"/ loading="lazy"><br><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p><strong>若是使用系统自带的QStyle风格</strong>，则需要先创建为<code>QStyleFactory::create(&quot;&quot;)</code>，然后设置<code>qApp-&gt;setStyle()</code>；</p><p><strong>若是使用自己自定义的QStyle风格</strong>，则直接自己创建自定义风格对象<code>new  ExCustomStyle</code>，然后设置使用</p><p><code>qApp-&gt;setStyle(customStyle);</code></p><br><h2 id="运行演示效果："><a href="#运行演示效果：" class="headerlink" title="运行演示效果："></a>运行演示效果：</h2><p><strong>－－－－－－－－－－－－－－－－－－win10支持系统风格：－－－－－－－－－－－－－－－－－</strong></p><ul><li>“<strong>Windows</strong>“ 风格：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829223625.jpg"/ loading="lazy"><ul><li>“WindowsXP” 风格：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829223636.jpg"/ loading="lazy"><ul><li> “<strong>WindowsVista</strong>“ 风格：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829223651.jpg"/ loading="lazy"><ul><li>“<strong>Fusion</strong>“  风格：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829223700.jpg"/ loading="lazy"><p><strong>－－－－－－－－－－－－－－－deepin 15.11（Linux） 支持系统风格：－－－－－－－－－－－－－－</strong></p><ul><li>“chameleon”  ：这是正在系统开发的一个适配风格</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230638.jpg"/ loading="lazy"><ul><li>“dsemilight” </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230512.jpg"/ loading="lazy"><ul><li> “dsemidark”  </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230449.jpg"/ loading="lazy"><ul><li>“dlight”  </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230437.jpg"/ loading="lazy"><ul><li>“ddark” </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230418.jpg"/ loading="lazy"><ul><li> “Windows”  </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230334.jpg"/ loading="lazy"><ul><li>“Fusion”</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230355.jpg"/ loading="lazy"><p><strong>－－－－－－－－－－－－－－－－－自己自定义 的<code>QStyle</code>系统风格：－－－－－－－－－－－－－－－－</strong></p><ul><li>自定义风格<strong>ExCustomStyle</strong>（因为继承的<strong>qt</strong>的 <code>QCommonStyle</code>，里面的虚函数都没有重写，所以就会没有效果，没有显示出来，或者显示异常(有上一次切换风格留下的残影)）：</li></ul><p>win10 显示效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829223710.jpg"/ loading="lazy"><p>deepin 15.11 显示效果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190831230701.jpg"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190829225308.jpg"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
          <category> 专栏 - Qt推倒重学系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QStyle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目实战:楔子</title>
      <link href="posts/72d92f9c/"/>
      <url>posts/72d92f9c/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <font color=#D0087E size=4 face="幼圆"><strong>项目实战:楔子</strong></font></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="项目实战-楔子"><a href="#项目实战-楔子" class="headerlink" title="项目实战:楔子"></a>项目实战:楔子</h2><p>　　<strong>项目实战开发，我会把一些比较大，完整的项目发布在这个模块。</strong></p><p>　　<strong>一是纪念我的手敲的野生代码，全部都是从0开始写的。而且里面有很多的思考，付出，和技术原理的应用，值得留下。</strong></p><p>　　<strong>另外一些写的比较好的，有价值的小的Deam【小项目】，也会发布出来，外加源码一起公布出来，就发在对应的其他的板块分类里面，有兴趣的可以自己去找一下（推荐我的<a href="https://github.com/xmuli">github仓库</a>）。欢迎交流，一旦有空，就会把写的项目整理，发表成博客，供大家一起学习与交流。其中包含许不止一种语言，和初步探索和多种架构模式下开发的项目。</strong></p><br><ul><li><strong>专栏–项目实战开发：</strong> <a href="https://blog.csdn.net/qq_33154343/article/category/7665917">https://blog.csdn.net/qq_33154343/article/category/7665917</a></li><li><strong>专栏–Qt推倒重学系列：</strong> 因为才开始这个系列，暂时只更新该目录，后面写成好了，再均同步到csdn和github.io各一个相同的目录 <a href="https://github.com/xmulii/QtExamples">https://github.com/xmulii/QtExamples</a></li></ul><br><ul><li><strong>同步博客：</strong> <a href="https://ifmet.cn/">ifmet.cn</a></li><li><strong>github源码：</strong> <a href="https://github.com/xmuli">xmuli</a></li><li><strong>联系作者：</strong> <a href="https://github.com/xmuli">偕臧</a></li></ul><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825170422.png"/ loading="lazy"><p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　我也不知道为什么？就是想放这张图在这里</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从其他电脑git clone自己的github仓库源码，修改，然后上传</title>
      <link href="posts/9672ffb6/"/>
      <url>posts/9672ffb6/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  从其他的一台电脑（<code>Linux</code>）<strong>git clone</strong>自己的<strong>github</strong>仓库（主力电脑<strong>win10</strong>创建的仓库test）源码，修改，然后上传云端的<strong>github</strong></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>​        <strong>详情：</strong>  在Linux的电脑环境下， 终端输入命令,用来拷贝一份远程的仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:touwoyimuli/test.git    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇到如下的<strong>错误提示</strong>：</p><blockquote><p>正克隆到 ‘test’…</p><p>The authenticity of host ‘github.com (140.82.118.3)’ can’t be established.</p><p>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</p><p>Are you sure you want to continue connecting (yes/no)? yes </p><p>Warning: Permanently added ‘github.com,140.82.118.3’ (RSA) to the list of known hosts.</p><p><a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>: Permission denied (publickey).</p><p>fatal: 无法读取远程仓库。</p><p>请确认您有正确的访问权限并且仓库存在。</p></blockquote><p>难过，伤心，这里记录一些解决方法。</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    <strong>Kernel：</strong> <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><p>这是因为<code>Git</code>使用<code>SSH</code>连接，而<code>SSH</code>第一次连接需要验证<code>GitHub</code>服务器的<code>Key</code>。确认<code>GitHub</code>的<code>Key</code>的指纹信息是否真的来自<code>GitHub</code>的服务器。解决办法。其实就是在本地生成<code>key</code>配置到<code>github</code>服务器。这样子接收过来就<code>gitHub</code>服务器了。</p><br><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ul><li>查看当用户目录下是否有相关的<strong>ssh</strong>密钥</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -al ~/.ssh     //查看用户目录下的.shh文件夹下所有文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置用户，需要按 <strong>“回车–Y和回车–回车”</strong>， 一共三次</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"touwoyimuli@gmail.com"</span>   //配置用户<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看生成的<strong>github</strong>的<strong>Key</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub     //查看生成的key：cat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>登陆<strong>github</strong>,点击<strong>头像-settings-new SSH</strong>,复制新生成的SSH<strong>配置</strong>到服务器,记住拷贝是上一步的秘钥信息以<strong>ssh-rsa</strong>开始邮箱结束的</li><li>再次克隆，输入一开始的命令<code>git clone git@github.com:touwoyimuli/test.git</code>   ， 正常克隆跟同步代码到<strong>github</strong>。完美解决。</li></ul><h2 id="全程图片："><a href="#全程图片：" class="headerlink" title="全程图片："></a>全程图片：</h2> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190826185945.jpg" width="80%"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825170829.jpg" width="25%"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置git bash的透明度和颜色等</title>
      <link href="posts/941b1d98/"/>
      <url>posts/941b1d98/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  官网下载<strong>git</strong>工具，随后配置<strong>git bash</strong>的颜色和透明度， 颜色等</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="教程步骤："><a href="#教程步骤：" class="headerlink" title="教程步骤："></a>教程步骤：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>   &amp;&amp;   <code>Git-2.23.0-64-bit</code></p><ul><li>git官网下载 <a href="https://www.git-scm.com/download/">git 官网</a> </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825172740.jpg"/ loading="lazy"><ul><li>全部默认，点击下一步<strong>Next</strong>，一直到安装完成 （推荐管理员权限安装）</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825173112.png"/ loading="lazy"><ul><li>在桌面，鼠标右键，点击<strong>git bash</strong>， 然后再窗体黑色地方， 选中<code>options...</code>，</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825172825.jpg"/ loading="lazy"><ul><li>点击<code>windows--UI language</code> 选择zh_CN的中文语言包， 然后点击 下方的<strong>Apply</strong>，和<strong>save</strong>按钮，在关闭该git bash 窗口 ，再次按照上一步打开该窗口 ，即可发现这是为了中文</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825172842.jpg"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825172910.jpg"/ loading="lazy"><ul><li>开始配色，更改如图总的这些地方（博主个人配置），最后关闭，再次开启</li></ul><p>设置<code>文本</code>的字体大小</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825172952.jpg"/ loading="lazy"><p>设置<code>外观-透明度</code></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825172959.jpg"/ loading="lazy"><p>改变<code>窗口</code>大小</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825173006.jpg"/ loading="lazy"><ul><li>最后点击应用和保存，放一张最后的效果图</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825173017.jpg"/ loading="lazy"><br><h2 id="开心分享："><a href="#开心分享：" class="headerlink" title="开心分享："></a>开心分享：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825170422.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关联windows的本地环境和自己的github仓库</title>
      <link href="posts/5224f7e8/"/>
      <url>posts/5224f7e8/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 关联<strong>windows</strong>的本地环境和自己的<strong>github</strong>仓库</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="教程步骤："><a href="#教程步骤：" class="headerlink" title="教程步骤："></a>教程步骤：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  <strong>操作系统版本：</strong><code>17134.829</code></p><ul><li>输入自己的用户名和邮箱（为注册<strong>github</strong>账号时的用户名和邮箱）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"touwoyimuli"</span><span class="token function">git</span> config --global user.email <span class="token string">"touwoyimuli@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191058.jpg"/ loading="lazy"><ul><li>设置<code>SSH Key</code></li></ul><p>先检验本机是否生成密钥，执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/.ssh$ <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191123.jpg"/ loading="lazy"><p>如果没有密钥，则执行以下命令来生成密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"touwoyimuli@gmail.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成过程中按3次回车键就好（默认路径，默认没有密码登录），生成成功后，去对应默认路径里用记事本打开<strong>id_rsa.pub</strong>，得到<code>ssh key</code>公钥。</p><ul><li>复制生成的公钥的内容，如下</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191426.jpg"/ loading="lazy"><ul><li>为<a href="https://github.com/">github官网</a> 账号配置<code>SSH key</code>  </li></ul><p>进入：右上角–个人信息–setting</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191141.jpg"/ loading="lazy"><ul><li>创建一个新的<code>ssh</code>，并且将上一步的内容赋值进去，生成一个新的<code>ssh</code>钥匙</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191554.jpg"/ loading="lazy"><ul><li>添加新的<code>SSH keys</code></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191619.jpg"/ loading="lazy"><p>添加成功</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824191705.jpg"/ loading="lazy"><ul><li>关联<code>github</code>仓库，复制仓库地址：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190824192321.jpg"/ loading="lazy"><ul><li>输入命令<code>git clone 仓库ssh链接</code>下载</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:touwoyimuli/QtExamples.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就拷贝了完整的项目，当自己修改文件之后，便是提交 <code>git push</code>到远程的<strong>github</strong>仓库</p><br><h2 id="分享开心："><a href="#分享开心：" class="headerlink" title="分享开心："></a>分享开心：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Bash下安装使用tree（在windows）</title>
      <link href="posts/233cfc5b/"/>
      <url>posts/233cfc5b/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 在<strong>Windows</strong>下的<strong>Git Bash</strong>环境下安装tree工具和使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详细：</strong>  在git bash里面输入命令：<code>tree</code>； 弹出错误如下，解决Git Bash下安装使用tree（在windows）。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825163140.jpg"/ loading="lazy"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tree: <span class="token builtin class-name">command</span> not found <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  <strong>操作系统版本：</strong><code>17134.829</code> </p><p><strong>编程软件：</strong>  <code>Git-2.23.0-64-bit</code></p><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，<font color=#FE7207 size=4 face="幼圆"><strong>但在   <a href="https://touwoyimuli.github.io/">github.io</a> 博客上体验完美,</strong></font>  <font color=#D0087E  size=4 face="幼圆"><strong>本篇<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/100064726">Git Bash下安装使用tree（在windows）</a></li></ul><h2 id="教程："><a href="#教程：" class="headerlink" title="教程："></a>教程：</h2><ul><li>官网下载：<a href="http://gnuwin32.sourceforge.net/packages/tree.htm">Tree for Windows</a> </li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825163054.jpg"/ loading="lazy"><ul><li>将下载的<strong>tree-1.5.2.2-bin.zip</strong>解压，将<code>...\tree-1.5.2.2-bin\bin\tree.exe</code>文件复制到<strong>git Bash</strong> 的安装目录下<code>C:\Program Files\Git\usr\bin</code>下</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825163126.jpg"/ loading="lazy"><ul><li>现在可以使用<strong>tree</strong>命令,使用成功</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190825163228.jpg"/ loading="lazy"><h2 id="分享快乐："><a href="#分享快乐：" class="headerlink" title="分享快乐："></a>分享快乐：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Windows </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>输出乱码原因：古文码、口字码、符号码、问号码、棍拷码</title>
      <link href="posts/aca7e7a0/"/>
      <url>posts/aca7e7a0/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  打印时候乱码原因：古文码、口字码、符号码、问号码、棍拷码</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，<font color=#FE7207 size=4 face="幼圆"><strong>但在   <a href="https://touwoyimuli.github.io/">github.io</a> 博客上体验完美,</strong></font>  <font color=#D0087E  size=4 face="幼圆"><strong>本篇csdn同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/99617767">输出乱码原因：古文码、口字码、符号码、问号码、棍拷码</a></li></ul><br><h2 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h2><ul><li><strong>一个图解释乱码原因</strong></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190814224129.png"/ loading="lazy"><h2 id="分享好运："><a href="#分享好运：" class="headerlink" title="分享好运："></a>分享好运：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git将本地代码，提交到github远程仓库</title>
      <link href="posts/7d2fa568/"/>
      <url>posts/7d2fa568/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 当写完了代码的时候，想要提交到自己的远程仓库中时候，主要执行<code>git commit</code>; <code>git push</code>流程 。</p><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>详情：</strong>  见简介</p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>    Kernel： <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="同步博文："><a href="#同步博文：" class="headerlink" title="同步博文："></a><font color=#D0087E  face="幼圆">同步博文：</font></h2><ul><li><font color=#D0087E  size=4 face="幼圆"><strong>本篇的<a href="https://blog.csdn.net/qq_33154343">csdn</a>/<a href="https://touwoyimuli.github.io/">github.io</a>同步博文:</strong> </font> <a href="https://blog.csdn.net/qq_33154343/article/details/98889416">git将本地代码，提交到github远程仓库</a></li></ul><br><h2 id="git提交到远程仓库："><a href="#git提交到远程仓库：" class="headerlink" title="git提交到远程仓库："></a>git提交到远程仓库：</h2><p>写完了代码，提交到远程仓库的准备工作，和最后的提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status                               //查看状态<span class="token function">git</span> <span class="token function">diff</span>   或  <span class="token function">git</span> <span class="token function">diff</span>   <span class="token punctuation">..</span>/路径/xxx.*   //查看不同<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                                //将所有 修改的文件 加入git监管 <span class="token punctuation">(</span>有一个 <span class="token builtin class-name">.</span><span class="token punctuation">)</span><span class="token function">git</span> commit                               //提交到本地仓库<span class="token function">git</span> log                                  //查看 提交的给log日志<span class="token function">git</span>  remote -v                           //查看远程仓库 （一个本地git， 可以有多个远程仓库）<span class="token function">git</span>  push  myself                        //myself 是自己的远程仓库（某一个他人仓库的fork）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>团队合作的时候，想git pull 一下代码，变基处理（合并其他人提交的代码合并，当做已经有的基准）</p><p>一个更为详细的处理方式（<strong>推荐</strong>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin master --rebase   //更新代码，变基//修改冲突（手动修改）<span class="token function">git</span> rebase --continue       //修改完成，但不要提交，先这一步继续变基<span class="token function">git</span> status                  //查看状态<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>                   //添加到.git管理<span class="token function">git</span> commit                  //提交<span class="token function">git</span> push                    //提交到默认远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若是git push失败，则使用下面这个命令，强制推送：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push self master -f     //强制提交到某一个远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p><font color=#D0087E size=4 face="幼圆">因为有着许许多多的热心网友的无私分享，从他们的博客中学习成长，学会很多，故也不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><p>参考：</p><p><a href="https://www.jianshu.com/p/0cd05dd1cc73">git pull –rebase origin master</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在`Linux`系统下查询系统版本号：`screenfetch`</title>
      <link href="posts/61ead9e8/"/>
      <url>posts/61ead9e8/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  在<code>Linux</code>系统下查询系统版本号：<code>screenfetch</code></p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        在<code>Linux</code>系统下查询系统版本号：<code>screenfetch</code></p><br><p><strong>编程环境：</strong>  <code>deepin 15.11 x64 专业版 </code>   </p><p>​                     Kernel： <code>x86_64 Linux 4.15.0-30deepin-generic</code></p><br><h2 id="运行命令："><a href="#运行命令：" class="headerlink" title="运行命令："></a>运行命令：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">sudo apt<span class="token operator">-</span>get install screenfectchsudo apt<span class="token operator">-</span>get install screenfetchscreenfetch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="运行截图："><a href="#运行截图：" class="headerlink" title="运行截图："></a>运行截图：</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190808214239.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190808214325.png"/ loading="lazy"><ul><li>第二天早,然后今天一来,开机,发现系统提示升级成功15.11了</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190808214435.png"/ loading="lazy"><br><h2 id="收获好运："><a href="#收获好运：" class="headerlink" title="收获好运："></a>收获好运：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98889190">在<code>Linux</code>系统下查询系统版本号：<code>screenfetch</code></a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator 安装SDK，在MSVC编译模式下使用CDB调试器</title>
      <link href="posts/5399fcd5/"/>
      <url>posts/5399fcd5/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>Qt Creator</code> 安装 <code>Windows Software Development Kit</code>(<code>SDK</code>）调试器【即<code>CDB</code>调试器】。（使用<code>MSVC</code>编译项目，进行调试）。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​         <code>Qt Creator</code> 安装 <code>Windows Software Development Kit</code>(<code>SDK</code>）调试器。（使用<code>MSVC</code>编译项目，进行调试）。</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  操作系统版本：<code>17134.285</code> </p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，但在文末 <a href="https://touwoyimuli.github.io/">github.io</a> 中的同步文章，会保证显示正确</li><li><font color=#D0087E  size=4 face="幼圆"><strong>推荐<font color=#FE7207  size=4 face="幼圆">本文末的同步链接</font>，在 <a href="https://touwoyimuli.github.io/">github.io</a> 博客上查看更好的100%效果体验</strong></font> </li></ul><br><h2 id="为什么安装CDB编调试器？"><a href="#为什么安装CDB编调试器？" class="headerlink" title="为什么安装CDB编调试器？"></a>为什么安装CDB编调试器？</h2><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807194229.png"/ loading="lazy"><p>（1）Kits页面显示QtCreator可用的编译工具，在图中可以看到有3个编译工具可用。</p><p>（2）Qt Versions页面显示安装的Qt版本，有Qt 5.9.1MinGW 32bit、Qt 5.9.1MSVC201532bit<br>和Qt 5.9.1MSVC201564bit3个可用的版本。</p><p>（3）Compliers页面显示系统里可用的C和C++编译器，由于安装了MinGW和Visual Studio<br>2015，Qt Creator会自动检测出这些编译器。</p><p>（4）<strong>Debuggers页面显示Qt Creator自动检测到的调试器，有GNU gdb for MinGW调试器</strong><br><strong>和Windows的CDB调试器。</strong></p><p><strong>注意：</strong> <font color=#FE7207  size=4 face="幼圆">如果只是在计算机上安装了Visual Studio2015，显示的界面上MSVC2015的两个编译器的图标<br>会变为带有感叹号的一个黄色图标。Debuggers页面没有Windows的CDB调试器，可以用MSVC编译器对<br>Qt Creator编写的程序进行编译，但是不能调试，<strong>这是因为缺少了Windows Software Development Kit(SDK）。</strong><br><strong>这个SDK不会随Visual Studio一同安装，</strong>需要从Microsoft网站上下载。可以下载Windows Software<br>Development Kit(SDK)for Windows8.1,安装后重启计算机即可。</font></p><h2 id="安装CDB调试器步骤："><a href="#安装CDB调试器步骤：" class="headerlink" title="安装CDB调试器步骤："></a>安装CDB调试器步骤：</h2><ul><li>先关闭Qt Creator<br>  <strong>msvc编译器使用windbg下的cdb调试器 所以需要安装windbg</strong></li></ul><p>官网下载链接：<a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools">https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools</a></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807192915.png"/ loading="lazy"><p>自动跳转到该页面</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193021.png"/ loading="lazy"><ul><li>下载成功</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193142.png"/ loading="lazy"><ul><li>右键管理员运行</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193304.png"/ loading="lazy"><ul><li>选择“NO“</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193415.png"/ loading="lazy"><ul><li><strong>只用安装调试工具即可</strong></li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193615.png"/ loading="lazy"><ul><li>等待安装成功</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807193738.png"/ loading="lazy"><ul><li>重新打开Qt Creator,在如图所示的位置进行修改</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190807194038.png"/ loading="lazy"><ul><li>配置成功标志</li></ul><p>参见本文第一张图</p><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p><strong>参考一：</strong>  <a href="https://www.baidu.com/"><strong>百度</strong></a> </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98779698">Qt Creator 安装SDK，在MSVC编译模式下使用CDB调试器</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt资料大全和Google编程规范（中文版，含c++、java等）</title>
      <link href="posts/39a1f4e2/"/>
      <url>posts/39a1f4e2/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>   <code>Qt</code>资料大全和<code>Google</code>编程规范（中文版，含<code>c++</code>、<code>java</code>等）</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h2><p><code>发福利了、发福利了、发福利了，</code>重要的事情说三遍！</p><p>为了方便更多的人了解、学习 C++/Qt，现将相关资源进行整理，主要内容包括：Qt 网址、编码风格、GitHub &amp; Third-Party、社区论坛、博客、书籍等。</p><p>满满的都是干货，独乐乐不如众乐乐！</p><h2 id="Qt-网址"><a href="#Qt-网址" class="headerlink" title="Qt 网址"></a>Qt 网址</h2><ul><li><p>Qt 官网</p><p>  <a href="https://www.qt.io/">https://www.qt.io</a></p></li><li><p>Qt 下载</p><p>  <a href="http://download.qt.io/">http://download.qt.io</a></p><p>  包含了 Qt 的各个发行版本、源码、Qt Creator、vsaddin、qt3dstudio、installer-framework 等内容。</p></li><li><p>Qt WiKi</p><p>  <a href="https://wiki.qt.io/Main_Page">https://wiki.qt.io/Main_Page</a></p><p>  这里是 Qt 的社区，多年来收集了有关 Qt 的信息，一切都是由社区创建和维护的。</p></li></ul><h2 id="编码风格"><a href="#编码风格" class="headerlink" title="编码风格"></a>编码风格</h2><ul><li><p>Google 开源项目风格指南</p><p>  <a href="http://zh-google-styleguide.readthedocs.io/en/latest">http://zh-google-styleguide.readthedocs.io/en/latest</a></p><p>  里面包含五份（C++ 、Objective-C、Python 、JSON、Shell ）中文版的风格指南。</p></li></ul><ul><li><p>C++ 编码标准</p><p>  <a href="http://www.possibility.com/Cpp/CppCodingStandard.html">http://www.possibility.com/Cpp/CppCodingStandard.html</a></p></li><li><p>C 编码风格指南</p><p>  <a href="http://www.quinapalus.com/coding.html">http://www.quinapalus.com/coding.html</a></p></li></ul><ul><li><p>Qt 编码风格</p><p>  高级编码规范：<a href="http://wiki.qt.io/Qt_Coding_Style">http://wiki.qt.io/Qt_Coding_Style</a></p><p>  低级编码规范：<a href="http://wiki.qt.io/Coding_Conventions">http://wiki.qt.io/Coding_Conventions</a></p><p>  QML 编码规范：<a href="http://doc.qt.io/qt-5/qml-codingconventions.html">http://doc.qt.io/qt-5/qml-codingconventions.html</a></p></li></ul><h2 id="GitHub-amp-Third-Party"><a href="#GitHub-amp-Third-Party" class="headerlink" title="GitHub &amp; Third-Party"></a>GitHub &amp; Third-Party</h2><ul><li><p>free-programming-books-zh_CN </p><p>  <a href="https://github.com/justjavac/free-programming-books-zh_CN">https://github.com/justjavac/free-programming-books-zh_CN</a> </p><p>  免费的计算机编程类中文书籍</p></li></ul><ul><li><p>Awesome - XXX 系列</p><p>  一系列强大的 C/C++ 框架、库、资源和其它好东西。</p><p>  <a href="https://github.com/fffaraz/awesome-cpp">https://github.com/fffaraz/awesome-cpp</a></p><p>  <a href="https://github.com/jobbole/awesome-cpp-cn%EF%BC%88awesome-cpp">https://github.com/jobbole/awesome-cpp-cn（awesome-cpp</a> 中文版）</p><p>  <a href="https://github.com/mikalv/awesome-qt-qml">https://github.com/mikalv/awesome-qt-qml</a></p><p>  <a href="https://insideqt.github.io/awesome-qt">https://insideqt.github.io/awesome-qt</a></p></li></ul><ul><li><p>QtProject </p><p>  <a href="https://github.com/qtproject">https://github.com/qtproject</a> </p><p>  各种强大的 Qt 项目及丰富的 Qt 库。</p></li></ul><ul><li><p>inqlude </p><p>  <a href="https://inqlude.org/">https://inqlude.org</a> </p><p>  Qt 库存档 - 为 Qt 应用程序开发人员提供了所有现有的库。</p></li></ul><h2 id="国外论坛："><a href="#国外论坛：" class="headerlink" title="国外论坛："></a>国外论坛：</h2><ul><li><p>Qt-Centre： </p><p>  <a href="http://www.qtcentre.org/">http://www.qtcentre.org</a> </p><p>  一个非常全面的外国网站，有 forum、wiki、docs、blogs 等。</p></li></ul><ul><li><p>Qt-forum </p><p>  <a href="https://forum.qt.io/">https://forum.qt.io</a></p><p>  比较有名的国际 Qt 编程论坛。</p></li></ul><ul><li><p>Developpez </p><p>  <a href="https://qt.developpez.com/">https://qt.developpez.com</a> </p><p>  一个法语社区，致力于信息技术的发展。该网站向读者免费提供资源和服务：博客、论坛、教程、在线课程、源代码等。</p></li></ul><ul><li><p>QUIt Coding </p><p>  <a href="http://quitcoding.com/">http://quitcoding.com</a> </p><p>  一群享受前沿技术开发的人才，Qt 官方大使项目的成员。</p></li></ul><ul><li><p>heilqt</p><p>  <a href="http://qtclub.heilqt.com/">http://qtclub.heilqt.com/</a></p><p>  QtQuick 专业中文社区</p></li></ul><h2 id="国内论坛："><a href="#国内论坛：" class="headerlink" title="国内论坛："></a>国内论坛：</h2><ul><li><p>CSDN Qt 论坛 </p><p>  <a href="https://bbs.csdn.net/forums/Qt">https://bbs.csdn.net/forums/Qt</a></p><p>  作为中国最大的 IT 社区和服务平台，CSDN 也在持续的关注 Qt 的发展，Qt 技术社区也已经上线很久了，可以在里面进行知识传播 - 提问、分享自己的一些学习心得、资料等。</p></li></ul><ul><li><p>QTCN 开发网 </p><p>  <a href="http://www.qtcn.org/">http://www.qtcn.org</a></p><p>  国内最早、最活跃的 Qt 中文社区，内容丰富、覆盖面广、在线人数众多，上面有很多热心、无私的 Qt 爱好者，他们会帮助初学者尽快的入门。</p></li></ul><ul><li><p>Qter 开源社区 </p><p>  <a href="http://www.qter.org/">http://www.qter.org</a></p><p>  致力于 Qt 普及工作！里面富含 Qter 们开发的实用开源项目和作品，以及一系列优秀的原创教程 - 图文并茂、简单易学，力争帮助每一位初学者快速入门。</p></li></ul><p><strong>建议：</strong>希望大家经常多去浏览一下，会有很多收获，技术文章往往有一定的深度，初学者可能会不太适应。</p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul><li><p>一去丶二三里</p><p>  <a href="https://waleon.blog.csdn.net/">https://waleon.blog.csdn.net</a></p><p>  纯正开源之美，有趣、好玩、靠谱。。。</p></li></ul><ul><li><p>foruok</p><p>  <a href="http://blog.csdn.net/foruok">http://blog.csdn.net/foruok</a></p><p>  聚焦程序员的职业规划与成长。</p></li></ul><ul><li><p>豆子</p><p>  <a href="http://www.devbean.net/">http://www.devbean.net</a></p><p>  Colorful Technologies…</p></li></ul><ul><li><p>齐亮</p><p>  <a href="http://qihome.org/">http://qihome.org</a></p><p>  修身-“齐家”-治天下。</p></li></ul><ul><li><p>1+1=10</p><p>  <a href="http://blog.csdn.net/dbzhang800">http://blog.csdn.net/dbzhang800</a></p><p>  简简单单，我的小屋…</p></li></ul><ul><li><p>Planet Qt</p><p>  <a href="http://planet.qt.io/">http://planet.qt.io</a></p><p>  Qt 相关博客的汇集者，无论作者是谁，它包含的意见是各自作者的。</p></li></ul><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>书名：《QmlBook》</p><p>A Book about Qt5：</p><ul><li>英文版：<a href="http://qmlbook.github.io/">http://qmlbook.github.io</a></li><li>中文版：<a href="https://github.com/cwc1987/QmlBook-In-Chinese">https://github.com/cwc1987/QmlBook-In-Chinese</a></li></ul><p>Trolltech 的 Qt 培训教材，生动、全面、深刻地阐明了 Qt 程序的设计理念，轻松创建跨平台的解决方案。</p><p>阐述 Qt 高级编程技术的书籍。以工程实践为主旨，是对 Qt 现有的 700 多个类和上百万字参考文档中部分关键技术深入、全面的讲解和探讨。</p><p>讲述如何利用 Python 和 Qt 开发 GUI 应用程序的原理、方法和关键技术。结构合理，内容详实，适合用作对Python、Qt 和 PyQt 编程感兴趣的童鞋。 </p><p>以 Qt 5.9 版本为开发平台，详细介绍了 Qt C++ 开发应用程序的技术，每个编程主题都精心设计了完整的实例程序。通过阅读本书，可了解 Qt C++ 开发应用程序所需的基本技术。</p><p>以 Qt5 为平台，循序渐进，在介绍开发环境的基础上，系统介绍 Qt5 应用程序的开发技术，通过实例介绍和讲解内容，将知识和能力融为一体。一般能够在比较短的时间内掌握 Qt5 应用技术。 </p><p>基于 Qt Creator 编写，全面涉及 Qt Quick；植根于 Qt 网络博客教程，可无限更新；对每个知识点详尽讲解，并设计了示例程序。 </p><p>基于 Qt5 编写，全面涉及 Qt Quick；植根于 Qt 网络博客教程，可无限更新；对每个知识点详尽讲解，并设计了示例程序。 </p><p>基于 Qt 5，详细讲述如何在移动平台 Android 上使用 Qt 框架进行开发。无论是专注于传统的桌面软件开发，还是希望尝试使用 Qt 在 Android 平台开发，都可以从中获得重要的知识与实例。 </p><p>着力于 QML 语言基础、事件、Qt Quick 基本元素，辅以简要的 ECMAScript（JavaScript）语言介绍，能够快速熟悉 Qt Quick 的基本知识和开发过程，详尽入微。 </p><h2 id="最后的"><a href="#最后的" class="headerlink" title="最后的"></a>最后的</h2><p>是不是很丰富呢？有了它们，再也不用担心学习了，<code>一起优秀吧！</code></p><p>最后，给新手们一些小建议：如果刚接触 Qt，应尽可能从 Qt5 入手；如果实在要买 Qt4 相关的书籍，建议买这两本 - 《C++ GUI Qt 4 编程》和《Qt 高级编程》 。</p><p>如果你认识为不错，<code>可以把它收藏起来，并分享给周围的其他小伙伴们，</code>会经常用到的哦！</p><h2 id="转载原文："><a href="#转载原文：" class="headerlink" title="转载原文："></a>转载原文：</h2><p>因为有着热心网友的无私分享，</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjAyNjQzOA==&mid=2247484535&idx=1&sn=2923153a2ae31e3f8fc878ac4f30618e&scene=19#wechat_redirect">Qt 资料大全原创： Waleon <a href="javascript:void(0);">高效程序员</a> <em>5月17日</em></a> </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98512180"><code>Qt</code>资料大全和<code>Google</code>编程规范（中文版，含<code>c++</code>、<code>java</code>等）</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>`Qt`中`QT_BEGIN_NAMESPACE`和`QT_END_NAMESPACE`的作用&#39;</title>
      <link href="posts/3829fae3/"/>
      <url>posts/3829fae3/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>   <code>Qt</code>中<code>QT_BEGIN_NAMESPACE</code>和<code>QT_END_NAMESPACE</code>的作用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​          <code>Qt</code>中<code>QT_BEGIN_NAMESPACE</code>和<code>QT_END_NAMESPACE</code>的作用。</p><p><strong>写在之前：</strong></p><p>觉得写的好的，但是担心忘记的，有感觉有帮助与理解加深底层和原理等，<strong>但是不要本末倒置做成了网络搬运工。</strong>为了写文章而写文章，忘记了本质是知识点的学习，记忆在脑海。因为最近一段时间，在疯狂学习，qt和linux和底层知识，了解IDE里面的那个邪恶的三角形（run）背后的东西。写于此。</p><br><h2 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h2><p>在Qt中，我们经常会看到</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QT_BEGIN_NAMESPACE<span class="token keyword">class</span> <span class="token class-name">QAction</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QMenu</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QPlainTextEdit</span><span class="token punctuation">;</span>QT_END_NAMESPACE这样的方式表达方式！这样做有什么意义呢？只要深入最终这个宏就知道了。嘻嘻在qglobal<span class="token punctuation">.</span>h中我们可以看到这样的定义<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">QT_BEGIN_NAMESPACE</span> <span class="token expression"><span class="token keyword">namespace</span> QT_NAMESPACE <span class="token punctuation">&#123;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">QT_END_NAMESPACE</span> <span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，如果你定义以下内容：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QT_BEGIN_NAMESPACE<span class="token keyword">class</span> <span class="token class-name">QAction</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QMenu</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QPlainTextEdit</span><span class="token punctuation">;</span>QT_END_NAMESPACE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，在编译时就会变成这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> QT_NAMESPACE <span class="token punctuation">&#123;</span><span class="token keyword">class</span> <span class="token class-name">QAction</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QMenu</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">QPlainTextEdit</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>QT_NAMESPACE是Qt自己定义的命名空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>QT_NAMESPACE是Qt自己定义的命名空间。</strong></p></blockquote><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p><p><a href="https://blog.csdn.net/a3125504x/article/details/69278270">Qt中QT_BEGIN_NAMESPACE和QT_END_NAMESPACE的作用</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98122648"><code>Qt</code>中<code>QT_BEGIN_NAMESPACE</code>和<code>QT_END_NAMESPACE</code></a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++: explicit的适用场合以及为什么要使用explicit</title>
      <link href="posts/5f5d6089/"/>
      <url>posts/5f5d6089/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  explicit是个C++关键子,但是关注过它的人远远没有其他关键字的多,但是往往忽略了它,就会在一些不经意的地方造成错误,而花费更多的时间去寻找.</p><p>explicit可以抑制内置类型隐式转换,所以在类的构造函数中,最好尽可能多用explicit关键字,防止不必要的隐式转换.</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        explicit是个C++关键子,但是关注过它的人远远没有其他关键字的多,但是往往忽略了它,就会在一些不经意的地方造成错误,而花费更多的时间去寻找.</p><p><strong>explicit可以抑制内置类型隐式转换,所以在类的构造函数中,最好尽可能多用explicit关键字,防止不必要的隐式转换.</strong></p><br><h2 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h2><p>看下下面这个例子:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_a <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A s<span class="token punctuation">;</span>    <span class="token comment">//我们会发现,我们没有重载'='运算符,但是去可以把内置的int类型赋值给了对象A.</span>    s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//实际上,10被隐式转换成了下面的形式,所以才能这样.</span>    <span class="token comment">//s = A temp(10);</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现成员变量的值被修改了. </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190801231403.png"/ loading="lazy"><p>由此可知:当类构造函数的参数只有一个的时候,或者所有参数都有默认值的情况下,类A的对象时可以直接被对应的内置类型隐式转换后去赋值的,这样会造成错误,所以接下来会体现出explicit这个关键词的作用.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//这里用explicit关键词来修饰类构造函数.</span>    <span class="token keyword">explicit</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        m_a <span class="token operator">=</span> i<span class="token punctuation">;</span>        m_b <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_a<span class="token punctuation">;</span>    <span class="token keyword">int</span> m_b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A s<span class="token punctuation">;</span>    <span class="token comment">//这样直接赋值,会被提示错误,因为explicit抑制隐式转换的进行</span>    s <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//这样会报错!!!</span>    <span class="token comment">//当然显示转换还是可以的.</span>    s <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过两个例子我们知道:explicit可以抑制内置类型隐式转换,所以在类的构造函数中,最好尽可能多用explicit关键字,防止不必要的隐式转换.</strong></p><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p><p><a href="https://blog.csdn.net/qq_37233607/article/details/79051075">C++: explicit的适用场合以及为什么要使用explicit</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到github.io博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98122268">‘C++: explicit的适用场合以及为什么要使用explicit’</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>＃ifndef／＃define／＃endif使用详解</title>
      <link href="posts/faac52a/"/>
      <url>posts/faac52a/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  #ifndef/#define/#endif使用详解。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        #ifndef/#define/#endif使用详解</p><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，但在文末 <a href="https://touwoyimuli.github.io/">github.io</a> 中的同步文章，会保证显示正确</li><li><font color=#D0087E  size=4 face="幼圆"><strong>推荐<font color=#FE7207  size=4 face="幼圆">本文末的同步链接</font>，在 <a href="https://touwoyimuli.github.io/">github.io</a> 博客上查看更好的100%效果体验</strong></font> </li></ul><br><p> <strong>想必很多人都看过“头文件中的 #ifndef/#define/#endif 防止该头文件被重复引用”。但是是否能理解“被重复引用”是什么意思？是不能在不同的两个文件中使用include来包含这个头文件吗？如果头文件被重复引用了，会产生什么后果？是不是所有的头文件中都要加入#ifndef/#define/#endif 这些代码？</strong></p><p><strong>其实“被重复引用”是指一个头文件在同一个cpp文件中被include了多次，这种错误常常是由于include嵌套造成的。</strong>比如：存在a.h文件#include “c.h”而此时b.cpp文件导入了#include “a.h” 和#include “c.h”此时就会造成c.h重复引用。</p><p><strong>头文件被重复引用引起的后果：</strong></p><p>有些头文件重复引用只是增加了编译工作的工作量，不会引起太大的问题，仅仅是编译效率低一些，但是对于大工程而言编译效率低下那将是一件多么痛苦的事情。<br>有些头文件重复包含，会引起错误，比如在头文件中定义了全局变量(虽然这种方式不被推荐，但确实是C规范允许的)这种会引起重复定义。</p><p><strong>是不是所有的头文件中都要加入#ifndef/#define/#endif 这些代码？</strong></p><p>答案：不是一定要加，但是不管怎样，用#ifnde xxx #define xxx #endif或者其他方式避免头文件重复包含，只有好处没有坏处。个人觉得培养一个好的编程习惯是学习编程的一个重要分支。</p><p><strong>下面给一个#ifndef/#define/#endif的格式：</strong></p><p>#ifndef A_H意思是”if not define a.h”  如果不存在a.h</p><p>接着的语句应该#define A_H  就引入a.h</p><p>最后一句应该写#endif   否则不需要引入</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">GRAPHICS_H </span><span class="token comment">// 防止graphics.h被重复引用 </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRAPHICS_H</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span> <span class="token comment">// 引用标准库的头文件 </span></span>… <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token expression">“header<span class="token punctuation">.</span>h” </span><span class="token comment">// 引用非标准库的头文件 </span></span>… <span class="token keyword">void</span> <span class="token function">Function1</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局函数声明 </span>… <span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token comment">// 类结构声明 </span><span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p><p><a href="https://blog.csdn.net/abc5382334/article/details/18052757">#ifndef/#define/#endif使用详解</a> </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98124027">#ifndef/#define/#endif使用详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt 编程中 namespace Ui { class Widget; } 解析</title>
      <link href="posts/8cc715c4/"/>
      <url>posts/8cc715c4/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> Qt 编程中 <code>namespace Ui &#123; class Widget; &#125;</code> 解析的原理</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​         Qt 编程中 namespace Ui { class Widget; } 解析</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span> <span class="token keyword">class</span> <span class="token class-name">widget</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>的原理，和它背后的东东。</p><br><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  操作系统版本：<code>17134.285</code> </p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，但在文末 <a href="https://touwoyimuli.github.io/">github.io</a> 中的同步文章，会保证显示正确</li><li><font color=#D0087E  size=4 face="幼圆"><strong>推荐<font color=#FE7207  size=4 face="幼圆">本文末的同步链接</font>，在 <a href="https://touwoyimuli.github.io/">github.io</a> 博客上查看更好的100%效果体验</strong></font> </li></ul><br><h1 id="理解一："><a href="#理解一：" class="headerlink" title="理解一："></a>理解一：</h1><p>简述：</p><p>Qt编程中，会见到类似于如下的声明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span> <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么，为何要这样声明，这样声明有什么好处。</p><p>这是Designer使用了pimpl手法，pImpl手法主要作用是解开类的使用接口和实现的耦合，即为了减少各个源文件之间的联系。</p><p>下面详细讲解一下。</p><h2 id="1、新建Qt-设计师界面类"><a href="#1、新建Qt-设计师界面类" class="headerlink" title="1、新建Qt 设计师界面类"></a>1、新建Qt 设计师界面类</h2><h3 id="dialog-h"><a href="#dialog-h" class="headerlink" title="dialog.h"></a>dialog.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DIALOG_H </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DIALOG_H</span> </span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QDialog></span> </span>   <span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span> <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span> <span class="token punctuation">&#123;</span> Q_OBJECT       <span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">~</span><span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">private</span><span class="token operator">:</span> Ui<span class="token operator">::</span>Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DIALOG_H </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dialog-cpp"><a href="#dialog-cpp" class="headerlink" title="dialog.cpp"></a>dialog.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dialog.h"</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_dialog.h"</span> </span> <span class="token class-name">Dialog</span><span class="token operator">::</span><span class="token function">Dialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">QDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>Dialog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//QObject::connect(ui->pushButton, SIGNAL(clicked()),this, SLOT(quit())); </span><span class="token punctuation">&#125;</span>  <span class="token class-name">Dialog</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">delete</span> ui<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ui-dialog-h"><a href="#ui-dialog-h" class="headerlink" title="ui_dialog.h"></a>ui_dialog.h</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">UI_DIALOG_H </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UI_DIALOG_H</span> </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtCore/QVariant></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QAction></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QApplication></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QButtonGroup></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QDialog></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QHeaderView></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QListView></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QtGui/QPushButton></span> </span>QT_BEGIN_NAMESPACE  <span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span> QListView <span class="token operator">*</span>listView<span class="token punctuation">;</span> QPushButton <span class="token operator">*</span>pushButton                       <span class="token keyword">void</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>QDialog <span class="token operator">*</span>Dialog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Dialog<span class="token operator">-></span><span class="token function">objectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> Dialog<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Dialog<span class="token operator">-></span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> listView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QListView</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> listView<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"listView"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> listView<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">retranslateUi</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">QMetaObject</span><span class="token operator">::</span><span class="token function">connectSlotsByName</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// setupUi</span>   <span class="token keyword">void</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>QDialog <span class="token operator">*</span>Dialog<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> Dialog<span class="token operator">-></span><span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QApplication</span><span class="token operator">::</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> QApplication<span class="token operator">::</span>UnicodeUTF8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">QApplication</span><span class="token operator">::</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> QApplication<span class="token operator">::</span>UnicodeUTF8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Q_UNUSED</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// retranslateUi </span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">namespace</span> Ui <span class="token punctuation">&#123;</span> <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Ui_Dialog</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// namespace Ui </span> QT_END_NAMESPACE  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// UI_DIALOG_H </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、分析代码"><a href="#2、分析代码" class="headerlink" title="2、分析代码"></a>2、分析代码</h2><p><strong>1 &gt; ui_dialog.h代码中有很多被硬编码的地方。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">listView<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Designer生成的这个东西， 如何让程序的其他代码去使用呢？<br>最直接的， 它应该产生一个</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span> <span class="token punctuation">&#123;</span>    QListView <span class="token operator">*</span>listView<span class="token punctuation">;</span>     QPushButton <span class="token operator">*</span>pushButton<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样的类去让其他代码使用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// My.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_dialog.h"</span></span> <span class="token keyword">class</span> <span class="token class-name">My</span><span class="token punctuation">&#123;</span>Ui_Dialog dlg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// My.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"My.h"</span></span><span class="token comment">// 实现My</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是这样存在问题， 如果ui_dialog.h文件的内容被改变，不但My.cpp会被重新编译，</strong><br><strong>所有包含My.h的文件也都会被重新编译。</strong><br><strong>而且这确实是一个问题： Designer确实经常被拖来拖去</strong></p><p><strong>2 &gt; 如果产生ui_dialog.h的那个程序能将如下代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">listView<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">;</span> pushButton<span class="token operator">-></span><span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">QString</span><span class="token operator">::</span><span class="token function">fromUtf8</span><span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">namespace</span> Ui  <span class="token punctuation">&#123;</span>     <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>  <span class="token punctuation">&#123;</span>     Ui<span class="token operator">::</span> Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span>  <span class="token comment">// 使用该类的一个指针</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   pushButton<span class="token operator">-></span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token function">QRect</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移动到一个ui_dialog.cpp 中， 至少在移动dlg上的那些界面元素时，只会重新编译ui_dialog.cpp。<br>不会修改ui_dialog.h， 也就不会引发另一连串重编译。</p><p><strong>3 &gt; 但是， 除了将界面元素拖来拖去， Designer还经常干的一些事就是添加，删除一些界面元素，如</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span><span class="token operator">:</span>     QListView <span class="token operator">*</span>listView<span class="token punctuation">;</span>     QPushButton <span class="token operator">*</span>pushButton<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4 &gt; 如何让Designer改变GUI外观后， 不会引发工程大范围的重新编译？</strong></p><p>所以Designer使用了pimpl手法 ……</p><p>前置声明一个 Ui:: Dialog类</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">namespace</span> Ui  <span class="token punctuation">&#123;</span>     <span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span>  <span class="token punctuation">&#123;</span>     Ui<span class="token operator">::</span> Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span>  <span class="token comment">// 使用该类的一个指针</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用户使用 dialog.h 头文件以及 Dialog类。<br>该文件被修改的频率就会低很多很多。</p><p>无论是将designer上的界面元素拖来拖去， 还是添加删除， dialog.h文件的内容——Dialog类的定义——都不会改变。<br>然后用户可以使用这个Dialog了：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dialog.h"</span></span><span class="token keyword">class</span> <span class="token class-name">My</span> <span class="token punctuation">&#123;</span>    Dialog dlg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、Ui-创建两种不同的方式"><a href="#3、Ui-创建两种不同的方式" class="headerlink" title="3、Ui 创建两种不同的方式"></a>3、Ui 创建两种不同的方式</h2><p><strong>1 &gt; 在qt4中使用了继承的方式来使用designer创建的窗体，也就是同时继承QDialog和UI_Dialog。</strong></p><p><strong>2 &gt; 而在Qt Creator自动创建的项目中，使用了组合的方式来使用Designer创建的窗体，就是集成QDialog，而将UI_Dialog作为一个成员变量来使用，也就是</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span>   Ui<span class="token operator">::</span>Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>区别：</strong><br><strong>在前一种方式中，你可以在继承类中直接使用UI_Dialog上的组件。</strong><br><strong>在后一种方式中，你要使用ui-&gt;XXX的方式使用UI_Dialog上的组件。</strong><br><strong>两种方式都可以，但个人感觉第二种好一些，毕竟组合比继承的耦合度来的弱一些，就是稍有点麻烦，要加ui-&gt;，但同时也带来了更清晰的代码结构。</strong></p><h2 id="4、pImpl的原理"><a href="#4、pImpl的原理" class="headerlink" title="4、pImpl的原理"></a>4、pImpl的原理</h2><p><strong>1 &gt; pImpl惯用手法的主要作用是解开类的使用接口和实现的耦合。</strong><br><strong>如果不使用pImpl惯用手法，代码会像这样</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;x.hpp></span></span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>X x<span class="token punctuation">;</span> <span class="token comment">//与X的强耦合</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像上面这样的代码，C与它的实现就是强耦合的，从语义上说，x成员数据是属于C的实现部分，不应该暴露给用户。从语言的本质上来说，在用户的代码中，每一次使用”new C”和”C c1”这样的语句，都会将X的大小硬编码到编译后的二进制代码段中（如果X有虚函数，则还不止这些）——这是因为，对于”new C”这样的语句，其实相当于operator new(sizeof(C))后面再跟上C的构造函数，而”C c1”则是在当前栈上腾出sizeof(C)大小的空间，然后调用C的构造函数。因此，每次X类作了改动，使用c.hpp的源文件都必须重新编译一次，因为X的大小可能改变了。<br>在一个大型的项目中，这种耦合可能会对build时间产生相当大的影响。</p><p><strong>pImpl惯用手法可以将这种耦合消除，使用pImpl惯用手法的代码像这样：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//c.hpp</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">;</span> <span class="token comment">//用前导声明取代include</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token operator">:</span>X<span class="token operator">*</span> pImpl<span class="token punctuation">;</span> <span class="token comment">//声明一个X*的时候，class X不用完全定义</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2 &gt; 在一个既定平台上，任何指针的大小都是相同的。之所以分为X<em>，Y</em>这些各种各样的指针，主要是提供一个高层的抽象语义，即该指针到底指向的是那个类的对象，并且，也给编译器一个指示，从而能够正确的对用户进行的操作（如调用X的成员函数）决议并检查。但是，如果从运行期的角度来说，每种指针都只不过是个32位的长整型（如果在64位机器上则是64位，根据当前硬件而定）。</strong></p><p>正由于<strong>pImpl是个指针</strong>，所以这里X的二进制信息（sizeof(C)等）不会被耦合到C的使用接口上去，也就是说，当用户”new C”或”C c1”的时候，编译器生成的代码中不会掺杂X的任何信息，并且当用户使用C的时候，使用的是C的接口，也与X无关，从而X被这个指针彻底的与用户隔绝开来。只有C知道并能够操作pImpl成员指向的X对象。</p><p><strong>3 &gt; 防火墙</strong><br>“修改X的定义会导致所有使用C的源文件重新编译”这种事就好比“城门失火，殃及池鱼”，其原因是“护城河”离“城门”太近了（耦合）。</p><p>pImpl惯用手法又被成为“编译期防火墙”，什么是“防火墙”，指针？不是。C++的编译模式为“分离式编译”，即不同的源文件是分开编译的。也就是说，不同的源文件之间有一道天然的防火墙，一个源文件“失火”并不会影响到另一个源文件。<br>但是，这里我们考虑的是<strong>头文件</strong>，如果头文件“失火”又当如何呢？头文件是不能直接编译的，它包含于源文件中，并作为源文件的一部分被一起编译。</p><p>这也就是说，如果源文件S.cpp使用了C.hpp，那么class C的（接口部分的）变动将无可避免的导致S.CPP的重新编译。但是作为class C的实现部分的class X却完全不应该导致S.cpp的重新编译。<br>因此，我们需要把class X隔绝在C.hpp之外。这样，每个使用class C的源文件都与class X隔离开来（与class X不在同一个编译单元）。但是，既然class C使用了class X的对象来作为它的实现部分，就无可避免的要“依赖”于class X。只不过，这个“依赖”应该被描述为：“class C的实现部分依赖于class X”，而不应该是“class C的用户使用接口部分依赖于class X”。</p><p>如果我们直接将X的对象写在class C的数据成员里面，则显而易见，使用class C的用户“看到”了不该“看到”的东西——class X——它们之间产生了耦合。然而，如果使用一个指向class X的指针，就可以将X的二进制信息“推”到class C的实现文件中去，在那里，我们#include”x.hpp”，定义所有的成员函数，并依赖于X的实现，这都无所谓，因为C的实现本来就依赖于X，重要的是：此时class X的改动只会导致class C的实现文件重新编译，而用户使用class C的源文件则安然无恙！<br>指针在这里充当了一座桥。将依赖信息“推”到了另一个编译单元，与用户隔绝开来。而防火墙是C++编译器的固有属性。</p><p><strong>4 &gt; 穿越C++编译期防火墙</strong></p><p>是什么穿越了C++编译期防火墙？是指针！使用指针的源文件“知道”指针所指的是什么对象，但是不必直接“看到”那个对象——它可能在另一个编译单元，是指针穿越了编译期防火墙，连接到了那个对象。<br>从某种意义上说，只要是代表地址的符号都能够穿越C++编译期防火墙，而代表结构(constructs)的符号则不能。<br>例如函数名，它指的是函数代码的始地址，所以，函数能够声明在一个编译单元，但定义在另一个编译单元，编译器会负责将它们连接起来。用户只要得到函数的声明就可以使用它。而类则不同，类名代表的是一个语言结构，使用类，必须知道类的定义，否则无法生成二进制代码。变量的符号实质上也是地址，但是使用变量一般需要变量的定义，而使用extern修饰符则可以将变量的定义置于另一个编译单元中。</p><p>//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p><h1 id="理解二："><a href="#理解二：" class="headerlink" title="理解二："></a>理解二：</h1><h2 id="Qt-编程中-namespace-Ui-class-Widget-解析"><a href="#Qt-编程中-namespace-Ui-class-Widget-解析" class="headerlink" title="Qt 编程中 namespace Ui { class Widget; } 解析"></a>Qt 编程中 namespace Ui { class Widget; } 解析</h2><p>class Widget 里面有个声明 Ui::Widget *ui，这个 ui 是使用 namespace Ui 里的 Widget 类声明的，该类只是简单的继承了 ui_widget.h 里的 Ui_Widget 类（没有添加任何成员）。现在就很清楚了，这两个看起来名字一样的 Widget 其实是两个类，一个是 namespace Ui 里的，另一个是 namespace Ui 之外的 Widget 类，namespace 声明的类其实就是个空壳，它的基类功能是将此窗口上的所有控件的声明、实例化、初始化。声明的原因就是为了使 ui 布局控制和其他的控制代码分离。</p><h2 id="用一段-C-代码来说明这一切："><a href="#用一段-C-代码来说明这一切：" class="headerlink" title="用一段 C++ 代码来说明这一切："></a>用一段 C++ 代码来说明这一切：</h2><p>test.h 文件内容：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_TEST_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_TEST_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is a test!(no namespace)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This is a test!(namespace)"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* 使用 namespace 声明 */</span><span class="token keyword">namespace</span> UI <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp 文件内容：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"test.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Test t<span class="token punctuation">;</span>    UI<span class="token operator">::</span>Test tt<span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tt<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190801230704.png"/ loading="lazy"><p>感谢花费宝贵的时间浏览。 转载请注明出处，谢谢！</p><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p><p><a href="https://blog.csdn.net/hebbely/article/details/79267348">QT namespace UI </a> </p><p><a href="https://www.cnblogs.com/GyForever1004/p/9043839.html">Qt 编程中 namespace Ui { class Widget; } 解析</a> </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98122981">Qt 编程中 namespace Ui { class Widget; } 解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>make、makefile、cmake、qmake都是什么？有什么区别？</title>
      <link href="posts/8eca9061/"/>
      <url>posts/8eca9061/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>   <code>make</code> <code>makefile</code> <code>cmake</code>   <code>qmake</code>都是什么，有什么区别？</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​      <code>make</code> <code>makefile</code> <code>cmake</code>   <code>qmake</code>都是什么，有什么区别？</p><p>​         查了一下好像是编译用的，既然是编译为什么我们不用g++ javac 来编译呢？我猜答案是方便一点，但是具体方便在哪呢，请明示。还有它们之间如果有相似性的话，也帮我比较一下吧，谢谢各位大神。</p><p><strong>觉得写的比较好，所以在这里搬运过来了</strong> </p><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a><font color=#D0087E  face="幼圆">重要提示：</font></h2><ul><li>若遇<code>csdn</code>的博文排版、文字、图片、链接、视频预览等异常，会删除该部分，或用链接代替，或删除该部分，但在文末 <a href="https://touwoyimuli.github.io/">github.io</a> 中的同步文章，会保证显示正确</li><li><font color=#D0087E  size=4 face="幼圆"><strong>推荐<font color=#FE7207  size=4 face="幼圆">本文末的同步链接</font>，在 <a href="https://touwoyimuli.github.io/">github.io</a> 博客上查看更好的100%效果体验</strong></font> </li></ul><br><h2 id="答一（比较写的好）："><a href="#答一（比较写的好）：" class="headerlink" title="答一（比较写的好）："></a>答一（比较写的好）：</h2><p>作者：辉常哥</p><p>链接：<a href="https://www.zhihu.com/question/27455963/answer/89770919">https://www.zhihu.com/question/27455963/answer/89770919</a></p><p>来源：知乎</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>1.<code>gcc</code>是<code>GNU Compiler Collection（就是GNU编译器套件）</code>，也可以简单认为是编译器，它可以编译很多种编程语言（括<code>C</code>、<code>C++</code>、<code>Objective-C</code>、<code>Fortran</code>、<code>Java</code>等等）。</p><p>2.当你的程序只有一个源文件时，直接就可以用gcc命令编译它。</p><p>3.但是当你的程序包含很多个源文件时，用<code>gcc</code>命令逐个去编译时，你就很容易混乱而且工作量大</p><p>4.所以出现了<code>make</code>工具， <code>make</code>工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用<code>makefile</code>文件中用户指定的命令来进行编译和链接的。</p><p>5.<code>makefile</code>是什么？简单的说就像一首歌的乐谱，make工具就像指挥家，指挥家根据乐谱指挥整个乐团怎么样演奏，<code>make</code>工具就根据<code>makefile</code>中的命令进行编译和链接的。</p><p>6.<code>makefile</code>命令中就包含了调用gcc（也可以是别的编译器）去编译某个源文件的命令。</p><p>7.<code>makefile</code>在一些简单的工程完全可以人工手下，但是当工程非常大的时候，手写<code>makefile</code>也是非常麻烦的，如果换了个平台<code>makefile</code>又要重新修改。</p><p>8.这时候就出现了<code>Cmake</code>这个工具，cmake就可以更加简单的生成<code>makefile</code>文件给上面那个<code>make</code>用。当然<code>cmake</code>还有其他功能，就是可以跨平台生成对应平台能用的<code>makefile</code>，你不用再自己去修改了。</p><p>9.可是cmake根据什么生成<code>makefile</code>呢？它又要根据一个叫<code>CMakeLists.txt</code>文件（学名：组态档）去生成<code>makefile</code>。</p><p>10.到最后<code>CMakeLists.txt</code>文件谁写啊？亲，是你自己手写的。</p><p>11.当然如果你用IDE，类似VS这些一般它都能帮你弄好了，<strong>你只需要按一下那个三角形</strong>。<font color=#FE7207  size=4 face="幼圆">（以前从来没研究过这个邪恶的三角形，所以这那天翻来这两篇文章）</font></p><p>12.接着是<code>qmake</code>，<code>qmake</code>是什么，先说一下Qt这个东西。Qt是跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非<code>GUI</code>程序，比如控制台工具和服务器。简单的说就是C++的第三方库，使用这个库你可以很容易生成<code>windows</code>，<code>Linux</code>，<code>MAC os</code>等等平台的图形界面。现在的<code>Qt</code>还包含了开发各种软件一般需要用到的功能模块（网络，数据库，<code>XML</code>，多线程啊等等），比你直接用<code>C++</code>（只带标准内裤那种）要方便和简单。</p><p>13.你可以用<code>Qt</code>简简单单就实现非常复杂的功能，是因为<code>Qt</code>对<code>C++</code>进行了扩展，你写一行代码，Qt在背后帮你写了几百上千行，而这些多出来的代码就是靠<code>Qt</code>专有的<code>moc</code>编译器（<code>The Meta-Object Compiler</code>）和<code>uic</code>编译器（<code>User Interface Complier</code>）来重新翻译你那一行代码。问题来了，你在进行程序编译前就必须先调用<code>moc</code>和<code>uic</code>对<code>Qt</code>源文件进行预处理，然后再调用编译器进行编译。上面说的那种普通<code>makefile</code>文件是不适用的，它没办法对<code>qt</code>源文件进行预处理。所以<code>qmake</code>就产生了。</p><p>14.<code>qmake</code>工具就是Qt公司制造出来，用来生成Qt 专用<code>makefile</code>文件，这种<code>makefile</code>文件就能自动智能调用<code>moc</code>和<code>uic</code>对源程序进行预处理和编译。<code>qmake</code>当然必须也是跨平台的，跟<code>cmake</code>一样能对应各种平台生成对应<code>makefile</code>文件。</p><p>15.<code>qmake</code>是根据<code>Qt</code> 工程文件<code>（.pro）</code>来生成对应的<code>makefile</code>的。工程文件（<code>.pro</code>）相对来说比较简单，一般工程你都可以自己手写，但是一般都是由<code>Qt</code>的开发环境 <code>Qt Creato</code>r自动生成的，你<strong>还是只需要按下那个邪恶三角形就完事了</strong>。</p><p>16.还没有完，由于qmake很简单很好用又支持跨平台，而且是可以独立于它的IDE，所以你也可以用在非Qt工程上面，照样可以生成普通的<code>makefile</code>，只要在pro文件中加入<code>CONFIG -= qt</code>  就可以了。</p><ol start="17"><li><p>这样<code>qmake</code>和<code>cmake</code>有什么区别？</p><p>  不好意思，<code>cmake</code>也是同样支持<code>Qt</code>程序的，<code>cmake</code>也能生成针对<code>qt</code> 程序的那种特殊<code>makefile</code>，</p><p> 只是<code>cmake</code>的<code>CMakeLists.txt</code> 写起来相对与<code>qmake</code>的<code>pro</code>文件复杂点。</p><p> <code>qmake</code> 是为 <code>Qt</code> 量身打造的，使用起来非常方便，但是cmake功能比qmake强大。</p><p> 一般的<code>Qt</code>工程你就直接使用<code>qmake</code>就可以了，<code>cmake</code>的强大功能一般人是用不到的。</p><p> 当你的工程非常大的时候，又有<code>qt</code>部分的子工程，又有其他语言的部分子工程，据说用<code>cmake</code>会 方便，我也没试过。</p></li></ol><h2 id="答二（图很好）"><a href="#答二（图很好）" class="headerlink" title="答二（图很好）:"></a>答二（图很好）:</h2><p>作者：玟清</p><p>链接：<a href="https://www.zhihu.com/question/27455963/answer/36722992">https://www.zhihu.com/question/27455963/answer/36722992</a></p><p>来源：知乎</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><ol><li><p><code>make</code> 是用来执行<code>makefile</code>的</p></li><li><p><code>makefile</code>是类unix环境下(比如Linux)的类似于批处理的”脚本”文件。其基本语法是: 目标+依赖+命令，只有在目标文件不存在，或目标比依赖的文件更旧，命令才会被执行。由此可见，<code>makefile</code>和make可适用于任意工作，不限于编程。比如，可以用来管理latex。</p></li><li><p><code>makefile</code>+<code>make</code>可理解为类<code>unix</code>环境下的项目管理工具，但它太基础了，抽象程度不高，而且在<code>windows</code>下不太友好(针对<code>visual studio</code>用户)，于是就有了跨平台项目管理工具<code>cmake</code></p></li><li><p>cmake是跨平台项目管理工具，它用更抽象的语法来组织项目。虽然，仍然是目标，依赖之类的东西，但更为抽象和友好，比如你可用math表示数学库，而不需要再具体指定到底是math.dll还是libmath.so，在windows下它会支持生成<code>visual studio</code>的工程，在linux下它会生成<code>makefile</code>，甚至它还能生成eclipse工程文件。也就是说，从同一个抽象规则出发，它为各个编译器定制工程文件。</p></li><li><p>cmake是抽象层次更高的项目管理工具，cmake命令执行的CMakeLists.txt文件</p></li><li><p>qmake是Qt专用的项目管理工具，对应的工程文件是*.pro，在Linux下面它也会生成<code>makefile</code>，当然，在命令行下才会需要手动执行qmake，完全可以在qtcreator这个专用的IDE下面打开*.pro文件，使用qmake命令的繁琐细节不用你管了。</p></li></ol><p>总结一下，make用来执行<code>makefile</code>，<code>cmake</code>用来执行<code>CMakeLists.txt</code>，<code>qmake</code>用来处理<code>*.pro</code>工程文件。<code>makefile</code>的抽象层次最低，<code>cmake</code>和<code>qmake</code>在<code>Linux</code>等环境下最后还是会生成一个<code>makefile</code>。<code>cmake</code>和<code>qmake</code>支持跨平台，<code>cmake</code>的做法是生成指定编译器的工程文件，而qmake完全自成体系。</p><p>具体使用时，<code>Linux</code>下，小工程可手动写<code>makefile</code>，大工程用automake来帮你生成<code>makefile</code>，要想跨平台，就用<code>cmake</code>。如果<code>GUI</code>用了<code>Qt</code>，也可以用<code>qmake</code> + <code>*.pro</code>来管理工程，这也是跨平台的。当然，<code>cmake</code>中也有针对<code>Qt</code>的一些规则，并代替<code>qmake</code>帮你将<code>qt</code>相关的命令整理好了。</p><p>另外，需要指出的是，<code>make</code>和<code>cmake</code>主要命令只有一条，<code>make</code>用于处理<code>makefile</code>，cmake用来转译<code>CMakeLists.txt</code>，而<code>qmake</code>是一个体系，用于支撑一个编程环境，它还包含除<code>qmake</code>之外的其它多条命令(比如<code>uic</code>，<code>rcc</code>,<code>moc</code>)。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190801221230.png"/ loading="lazy"><p>上个简图，其中<code>cl</code>表示<code>visual studio</code>的编译器，<code>gcc</code>表示<code>linux</code>下的编译器</p><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/98170236"><code>make</code> <code>makefile</code> <code>cmake</code> <code>qmake</code>都是什么，有什么区别？</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三十分钟学会Git（写的挺好的一篇）</title>
      <link href="posts/fd870c38/"/>
      <url>posts/fd870c38/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  三十分钟学会Git（写的挺好的一篇）</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="转载原文："><a href="#转载原文：" class="headerlink" title="转载原文："></a>转载原文：</h2><blockquote><p>第一步：首先我们了解下下面几个概念（Git本质上是保存文件的工具）：</p></blockquote><ol><li><p>Git保存的文件对应4个状态:</p><p>  【Untracked】：没有加入Git管理的文件；</p><p>  【Unmodified】：已经提交文件（即已经存在于Git仓库中文件）；</p><p>  【Modified】：已经存在于Git仓库的文件，后面做了修改但是没有提交；</p><p>  【Staged】：存在于Git暂存区，待提交的文件</p></li></ol><p>​    </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225608.png"/ loading="lazy"><p>​    </p><ul><li><p><strong>这4个状态分别被放在3个区域中</strong><br>   1.【工作目录（Working Directory）】：PC上的一个目录，存放从 Git 仓库的压缩数据库中提取出来的文件，存放的文件状态Unmodified、Modified、Untracked<br>   2.【暂存区域（Staging Area）】：保存了下次提交的文件列表信息，文件状态：Staged<br>   3.【Git仓库目录（Local Repository）】：Git 用来保存项目的元数据和对象数据库的地方(存在于工作目录下的隐藏文件夹[.git]，备份这个文件夹即可备份整个仓库)，文件状态：Unmodified</p></li><li><p>上面3个区域在Git中被抽象成3棵树对象</p><p>   Working Directory：记录整个工作目录的文件树结构</p><p>   Index：预期的下一次提交的快照</p><p>   HEAD：上一次提交的快照，下一次提交的父结点</p></li></ul><p>​    <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225706.png"/ loading="lazy"></p><p>​    </p><ol><li>SHA-1</li></ol><ul><li>Git的每一次commit对会产生一个SHA-1值（一个40个字符的字符串），这个SHA-1可以理解为这次commit的别名。<br>   通常我们使用SHA-1时无需全部字符，只需要前几个字符（大于4个并且没有歧义）来表示某一个commit版本。</li><li>显示简短、无歧义的SHA-1(默认是7个字符)</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git log <span class="token operator">--</span>abbrev<span class="token operator">-</span>commit <span class="token operator">--</span>pretty<span class="token operator">=</span>oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看某个commit，下面三个命令是等价的：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git show <span class="token number">1</span>c002dd4b536e7479fe34593e72e6c6c1819e53b$ git show <span class="token number">1</span>c002dd4b536e7479f$ git show <span class="token number">1</span>c002d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>获取master分支现在指向的那个SHA-1</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git rev<span class="token operator">-</span>parse master<span class="token number">904</span>dc9362ece4c8659af08d3568d39f68d9687d6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>祖先引用 <ul><li>引用的尾部加上一个 ^或者，表示为该引用的上一个提交HEAD 和 HEAD^ 是等价指向上一个提交；</li><li>实例详解：<a href="https://www.jianshu.com/p/abed5bb454dc">戳我</a> </li></ul></li></ul><blockquote><p>第二步：下面详解文件怎么在Git命令中运转</p></blockquote><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225727.png"/ loading="lazy"><hr><ul><li>【clone】：把远程仓库克隆到工作目录</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 在目录下自动创建hello文件夹，并且克隆代码到hello文件夹    $ git clone https<span class="token operator">:</span><span class="token comment">//github.com/fanlehai/hello.git</span>    $ git clone git<span class="token operator">:</span><span class="token comment">//github.com/fanlehai/hello.git</span># 自定义文件夹克隆    $ git clone https<span class="token operator">:</span><span class="token comment">//github.com/fanlehai/hello.git hello-code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【init】：在本地目录创建仓库</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 打开terminal，输入下面命令<span class="token operator">:</span>    $ mkdir hello    $ cd hello    $ git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【add】：文件加入到暂存区(新增和修改文件用此命令) <ul><li>【实例1】新增README.md，添加到暂存区，再提交到本地仓库</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ cd hello$ echo <span class="token string">"# test"</span> <span class="token operator">>></span> README<span class="token punctuation">.</span>md$ git add README<span class="token punctuation">.</span>md$ git commit <span class="token operator">-</span>m <span class="token string">"add README.md"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【实例2】：批量增加文件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 增加test文件夹下所有文件$ git add test<span class="token comment">/*# 增加test文件夹下所有后缀为.log的文件$ git add test/*.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>【实例3】：对一个文件多处修改，进行分批提交：<a href="https://www.jianshu.com/p/942f1fb3a182">戳我</a> </p></li><li><p>【mv】：移动或重命名文件、目录、符号链接 </p><ul><li>【实例1】文件移入到新建文件夹并且提交</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">*</span>下面两个方法实现的效果完全相同# 方法<span class="token number">1</span>：      $ mkdir lib      $ git mv hello<span class="token punctuation">.</span>html lib      $ git commit <span class="token operator">-</span>m <span class="token string">"Moved hello.html to lib"</span># 方法<span class="token number">2</span>：      $ mkdir lib      $ mv hello<span class="token punctuation">.</span>html lib      $ git add lib<span class="token operator">/</span>hello<span class="token punctuation">.</span>html      $ git rm hello<span class="token punctuation">.</span>html      $ git commit <span class="token operator">-</span>m <span class="token string">"Moved hello.html to lib"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【实例2】修改文件名</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 修改文件名README<span class="token punctuation">.</span>md<span class="token operator">--</span><span class="token operator">></span> README      $ git mv README<span class="token punctuation">.</span>md README# 上面这句等下下面<span class="token number">3</span>句命令      $ mv README<span class="token punctuation">.</span>md README      $ git rm README<span class="token punctuation">.</span>md      $ git add README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【rm】：删除文件 <ul><li>实例如下：</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1.</span>删除文件      $ git rm hello<span class="token punctuation">.</span>html      $ git commit <span class="token operator">-</span>m <span class="token string">"delete hello.html"</span><span class="token number">2.</span>如果文件被修改过，而且被<span class="token punctuation">(</span>git add<span class="token punctuation">)</span>到暂存区<span class="token punctuation">,</span>用<span class="token operator">-</span>f强制删除      $ git rm <span class="token operator">-</span>f hello<span class="token punctuation">.</span>html<span class="token number">3.</span>把文件从暂存区中删除，但是保留在磁盘（变成Untracked状态）     【使用场景】：当你忘记添加 <span class="token punctuation">.</span>gitignore文件，不小心把一个很大的日志文件或一堆 <span class="token punctuation">.</span>a        这样的编译生成文件添加到暂存区时      <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">a</span><span class="token expression"><span class="token punctuation">.</span> 删除暂存区中的README文件</span></span>        $ git rm <span class="token operator">--</span>cached README      <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">b</span><span class="token expression"><span class="token punctuation">.</span> 不小心test文件夹下所有文件加入暂存区，吧文件从暂存区移除，但不从硬盘上删除</span></span>        $ git add test<span class="token comment">/*        $ git rm --cached test/*4.批量删除      #删除log目录下所有.log后缀的文件      $ git rm log/*.log      #删除所有文件名以~结尾的文件      $ git rm *~</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reset：回滚版本、撤销暂存区文件 <ul><li>撤销暂存区文件</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 撤销暂存区文件file<span class="token punctuation">.</span><span class="token function">txt</span><span class="token punctuation">(</span>其实就是把HEAD版本的file<span class="token punctuation">.</span>txt文件恢复到暂存区<span class="token punctuation">)</span>      $ git reset HEAD file<span class="token punctuation">.</span>txt# 撤销暂存区文件<span class="token punctuation">(</span>filename可能会跟分支名相同，所以用<span class="token operator">--</span>来表示后面是路径或者文件<span class="token punctuation">)</span>      $ git reset HEAD <span class="token operator">--</span> filename# 把指定版本<span class="token punctuation">(</span>eb43bf<span class="token punctuation">)</span>的文件恢复到暂存区      $ git reset eb43bf file<span class="token punctuation">.</span>txt# 根据上个命令显示的commit对应的值回滚      $ git reset <span class="token operator">--</span>hard <span class="token operator">&lt;</span>commit<span class="token operator">></span># <span class="token operator">--</span>hard表示删除工作区的所有在commit版本后的改动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对于版本提交撤销</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 恢复工作区<span class="token punctuation">(</span>同步缺少的文件，对于已经修改的文件只尝试把仓库中版本合并到本地，保留本地修改<span class="token punctuation">)</span>      $ git reset  HEAD# 恢复工作区（把本地修改的文件全部从硬盘删除，同步成仓库中版本）      $ git reset <span class="token operator">--</span>hard HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更多reset实例：<a href="https://www.jianshu.com/p/77bc8781289e">戳我</a> </li><li>【git reset –hard HEAD~】命令包含三个步骤：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1.</span>移动 HEAD 分支的指向上一个版本<span class="token punctuation">(</span>HEAD<span class="token operator">~</span><span class="token punctuation">)</span><span class="token number">2.</span>使索引看起来像现在的HEAD<span class="token number">3.</span>使工作目录看起来像索引##补充说明      $ git reset <span class="token operator">--</span>soft HEAD<span class="token operator">~</span> 这个命令执行上面<span class="token number">1</span>【图reset <span class="token number">2</span>】      $ git reset <span class="token operator">--</span>mixed HEAD<span class="token operator">~</span>这个命令执行上面<span class="token number">1</span>，<span class="token number">2</span>【图reset <span class="token number">3</span>】      $ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span>这个命令执行上面<span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>【图reset <span class="token number">4</span>】【<span class="token operator">--</span>mixed】是reset默认行为      $ git reset HEAD<span class="token operator">~</span> <span class="token operator">==</span> $ git reset <span class="token operator">--</span>mixed HEAD<span class="token operator">~</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225819.png"/ loading="lazy"><p>reset 1</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225843.png"/ loading="lazy"><p>reset 2</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225901.png"/ loading="lazy"><p>reset 3</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730225940.png"/ loading="lazy"><p>reset 4</p><ul><li>reset与revert区别：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1.</span>reset撤销指定版本后所有提交；<span class="token number">2.</span>revert撤销指定版本的提交；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>reset与checkout区别：如下表格 </p><ul><li><p>“REF” 表示该命令移动了 HEAD 指向的分支引用，而“HEAD” 则表示只移动了 HEAD 自身;</p></li><li><p>“WD Safe?” 表示命令是否影响工作区未提交文件（NO表示有影响）</p></li><li><p>git checkout HEAD 和 git reset –hard HEAD </p><ul><li>checkout不改变工作区已经修改的文件;reset –hard则不做检查就全面地替换工作目录；</li><li>checkout只移动 HEAD自身来指向另一个分支;reset会移动 HEAD和自身分支的指向；</li></ul></li><li><p>git checkout – file.txt等价于git reset –hard file.txt放弃对file.txt的所有修改，恢复成仓库中版本</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730230003.png"/ loading="lazy"></li></ul></li></ul><blockquote><table><thead><tr><th align="left"></th><th align="left">HEAD</th><th align="left">Index</th><th align="left">Workdir</th><th align="left">WD Safe?</th></tr></thead><tbody><tr><td align="left"><strong>Commit Level</strong></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">reset –soft [commit]</td><td align="left">REF</td><td align="left">NO</td><td align="left">NO</td><td align="left">YES</td></tr><tr><td align="left">reset [commit]</td><td align="left">REF</td><td align="left">YES</td><td align="left">NO</td><td align="left">YES</td></tr><tr><td align="left">reset –hard [commit]</td><td align="left">REF</td><td align="left">YES</td><td align="left">YES</td><td align="left"><strong>NO</strong></td></tr><tr><td align="left">checkout [commit]</td><td align="left">HEAD</td><td align="left">YES</td><td align="left">YES</td><td align="left">YES</td></tr><tr><td align="left"><strong>File Level</strong></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">reset (commit) [file]</td><td align="left">NO</td><td align="left">YES</td><td align="left">NO</td><td align="left">YES</td></tr><tr><td align="left">checkout (commit) [file]</td><td align="left">NO</td><td align="left">YES</td><td align="left">YES</td><td align="left"><strong>NO</strong></td></tr></tbody></table></blockquote><ul><li>【revert】：撤销指定的提交版本<br>   git revert命令本质上就是一个逆向的 git cherry-pick操作。 它将你提交中的变更的以完全相反的方式的应用到一个新创建的提交中，本质上就是撤销或者倒转。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 撤销当前版本提交内容，这里会跳出编辑器让你修改commit内容    $ git revert HEAD# 撤销当前版本提交内容，直接撤销不会跳出编辑器    $ git revert HEAD <span class="token operator">--</span>no<span class="token operator">-</span>edit# 撤销指定版本<span class="token punctuation">,</span>commit是提交版本的SHA<span class="token operator">-</span><span class="token number">1</span>，注意撤销老版本可能会引起文件冲突    $ git revert <span class="token operator">&lt;</span>commit<span class="token operator">></span> <span class="token operator">--</span>no<span class="token operator">-</span>edit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【branch】：分支<ul><li>分支详解：<a href="https://www.jianshu.com/p/893f159e28b0">戳我</a> </li></ul></li><li>【checkout】：切换分支或者恢复文件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1.</span>切换分支    $ git checkout <span class="token operator">&lt;</span>branch name<span class="token operator">></span><span class="token number">2.</span>修复工作目录下的文件，使得跟仓库文件同步    $ git checkout  <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token number">3.</span>如果<span class="token number">1</span>中<span class="token operator">&lt;</span>branch name<span class="token operator">></span>和<span class="token number">2</span>中<span class="token operator">&lt;</span>filename<span class="token operator">></span>相同，调用上面命令会让git迷惑，    所以对于文件同步用下面命令<span class="token punctuation">(</span>撤销文件修改<span class="token punctuation">)</span>：    $ git checkout <span class="token operator">--</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token number">4.</span>新建并切换分支    $ git checkout <span class="token operator">-</span>b <span class="token operator">&lt;</span>branchname<span class="token operator">></span><span class="token number">5.</span>切换到旧的提交版本，commit是表示提交的id    $ git checkout <span class="token operator">&lt;</span>commit<span class="token operator">></span><span class="token number">6.</span>删除分支：    #先切换到其他分支，无法删除正在使用的分支      $ git checkout master    #开始删除本地分支      $ git branch <span class="token operator">-</span>d mybranch1    #开始推送删除共享git服务器上分支      $ git push origin <span class="token operator">:</span>mybranch1<span class="token number">7.</span>删除远程仓库的分支      $ git push origin <span class="token operator">--</span><span class="token keyword">delete</span> serverfix<span class="token number">8.</span>强行删除分支（当分支新增功能而且commit但是没有合并，然后现在不需要这个分支，就需要使用强制删除）      $ git branch <span class="token operator">-</span>D mybranch1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【commit】：提交文件到Local Repository</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1.</span>提交说明放在命令行执行    $ git add file<span class="token punctuation">.</span>java    $ git commit <span class="token operator">-</span>m <span class="token string">"add file.java"</span><span class="token number">2.</span>启动文本编辑器以便输入本次提交的说明<span class="token punctuation">(</span>默认会启用 shell 的环境变量 $EDITOR所指定的软件    $ git commit<span class="token number">3.</span>所有已经跟踪过的文件暂存起来一并提交<span class="token punctuation">,</span>无需<span class="token punctuation">(</span>$git add file<span class="token punctuation">)</span>命令     $ git commit <span class="token operator">-</span>a <span class="token operator">-</span>m <span class="token string">'added new benchmarks'</span><span class="token number">4.</span>修改最后一次提交    # 只修改最后一次提交信息，下面命令会跳出编辑器，修改内容关闭即可      $ git commit <span class="token operator">--</span>amend    # 有些文件忘了提交、有些文件忘了删除，需要修改最后一次提交<span class="token punctuation">,</span>这种情况会改变SHA<span class="token operator">-</span><span class="token number">1</span>的值      $ git add forgotten_file      $ git rm file      $ git commit <span class="token operator">--</span>amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【diff】：查看任意两棵树的差异</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 查看工作环境与暂存区的差异<span class="token punctuation">(</span>即是未提交的文件<span class="token punctuation">)</span>    $ git diff# 暂存区域与你最后提交之间的差异    $ git diff <span class="token operator">--</span>staged# 比较两个提交记录的差异    $ git diff master branchB#检查空白错误（空格、tab等）    $ git diff <span class="token operator">--</span>check# 查看合并后本分支变动了内容    $ git diff <span class="token operator">--</span>ours# 查看被合并分支与合并后有哪些不同<span class="token punctuation">(</span><span class="token operator">-</span>b去除空白<span class="token punctuation">)</span>    $ git diff <span class="token operator">--</span>theirs <span class="token operator">-</span>b# 查看合并后，合并两个版本各自变动内容    $ git diff <span class="token operator">--</span>base <span class="token operator">-</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【merge】：合并分支 <ul><li>合并某分支(testing)到当前分支(master)： <ol><li>使用Fast-forward模式（Git默认模式）：</li></ol></li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git merge testing$ git branch <span class="token operator">-</span>d testing<span class="token number">2.</span> 禁用Fast<span class="token operator">-</span>forward模式（推荐使用此模式，记录所有分支合并情况）：$ git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">-</span>m <span class="token string">"merge with no-ff"</span> testing<span class="token number">3.</span> 两种模式的区别（左边使用Fast<span class="token operator">-</span>forward，无法知道testing存在过）：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730230022.png"/ loading="lazy"><ul><li>合并相关命令：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 合并时，如果有冲突，用自己分支代码取代冲突代码       $ git merge <span class="token operator">-</span>Xours branchname# 合并有冲突，用待合并分支代码取代冲突代码       $ git merge <span class="token operator">-</span>Xtheirs branchname#建议使用此方式，留下合并记录       $ git merge <span class="token operator">--</span>no<span class="token operator">-</span>ff <span class="token operator">-</span>m <span class="token string">"merge with no-ff"</span> <span class="token operator">&lt;</span>mybranch1<span class="token operator">></span>       $ git merge <span class="token operator">&lt;</span>mybranch1<span class="token operator">></span>#列出本地仓库，分支前面有<span class="token operator">*</span> 表示是当前使用的分支       $ git branch# 列出分支，并且显示每个分支最后一次提交信息       $ git branch <span class="token operator">-</span>v# 查看哪些分支已经合并到当前分支      $ git branch <span class="token operator">--</span>merged# 查看所有包含未合并工作的分支      $ git branch <span class="token operator">--</span>no<span class="token operator">-</span>merged# 合并出现冲突，不想合并了，可以用下面命令撤销：      $ git merge <span class="token operator">--</span>abort      或者      $ git reset <span class="token operator">--</span>hard HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>合并分支实例：<a href="https://www.jianshu.com/p/5d34260824ee">戳我</a></p></blockquote><ul><li>【rebase】：变基，合并分支的一种方式 <ul><li>实例：<a href="https://www.jianshu.com/p/ce9fefaab751">戳我</a> </li></ul></li><li>【tag】：历史中的某一个提交打上标签，以示重要</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">【轻量标签】很像一个不会改变的分支 <span class="token operator">-</span> 它只是一个特定提交的引用。【附注标签】是存储在 Git 数据库中的一个完整对象。<span class="token number">1.</span>打轻量标签，只需要提供标签名    $ git tag <span class="token operator">-</span>m <span class="token string">"Tag on new commit"</span> mytag2<span class="token number">2.</span>打附注标签，用<span class="token operator">-</span>a    $ git tag <span class="token operator">-</span>a v1<span class="token punctuation">.</span><span class="token number">4</span> <span class="token operator">-</span>m <span class="token string">'my version 1.4'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>tag详解：<a href="https://www.jianshu.com/p/95d142b7116d">戳我</a></p></blockquote><ul><li>【rerere】：自动解决冲突</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 定义：一个隐藏的功能。 正如它的名字 “reuse recorded resolution” 所指，它允许你让 Git 记住解决一个块冲突的方法，这样在下一次看到相同冲突时，Git 可以为你自动地解决它。# 使用场景：<span class="token number">1.</span>如果你想要保证一个长期分支会干净地合并，但是又不想要一串中间的合并提交将    rerere 功能打开后偶尔合并，解决冲突，然后返回到合并前。 如果你持续这样做，    那么最终的合并会很容易，因为 rerere 可以为你自动做所有的事情。<span class="token number">2.</span>可以将同样的策略用在维持一个变基的分支时，这样就不用每次解决同样的变基冲突了。     或者你将一个分支合并并修复了一堆冲突后想要用变基来替代合并 <span class="token operator">-</span> 你可能并不想要再次解决相同的冲突。<span class="token number">3.</span>当你偶尔将一堆正在改进的特性分支合并到一个可测试的分支时，就像 Git 项目自身经常做的。     如果测试失败，你可以倒回合并之前然后在去除导致测试失败的那个特性分支后重做合并，而不用再次重新解决所有的冲突。# 启用 rerere功能方法：<span class="token number">1.</span>全局开启<span class="token punctuation">(</span>对所有仓库<span class="token punctuation">)</span>：$ git config <span class="token operator">--</span>global rerere<span class="token punctuation">.</span>enabled <span class="token boolean">true</span><span class="token number">2.</span>单个仓库：仓库中创建 <span class="token punctuation">.</span>git<span class="token operator">/</span>rr<span class="token operator">-</span>cache目录即可开启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>变基实例：<a href="https://www.jianshu.com/p/b0607f9ac7ed">戳我</a> </li><li>交互式变基：<a href="https://www.jianshu.com/p/71dcbb6ee847">戳我</a> </li><li>【fetch】：从远程仓库抓取最新数据 <ul><li>当 git fetch命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  #拉取远程仓库数据      $ git fetch origin  #如果origin有其他分支serverfix，那么分支的引用会被拉下来跟本地关联起来，#但是serverfix分支的代码不会被同步到本地，需要同步使用下面命令：      $ git checkout <span class="token operator">-</span>b serverfix origin<span class="token operator">/</span>serverfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【pull】：拉取远程仓库最新代码，并尝试与本地进行合并</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">git</span> <span class="token expression">pull 在大多数情况下它的含义是一个 git fetch紧接着一个 git merge 命令</span></span>    $ git pull# 可以修改pull<span class="token punctuation">.</span>rebase的默认配置    $ git config <span class="token operator">--</span>global pull<span class="token punctuation">.</span>rebase <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>push：推送本地仓库文件到远程仓库</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#把master分支修改推送给远程仓库    $ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>【remote】：管理远程仓库的属性</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 查看远程仓库名称简写    $ git remote# 查看更多远程仓库origin的信息    $ git remote show origin# 查看远程仓库名称简写和URL    $ git remote <span class="token operator">-</span>v    origin  https<span class="token operator">:</span><span class="token comment">//github.com/schacon/ticgit (fetch)</span>    origin  https<span class="token operator">:</span><span class="token comment">//github.com/schacon/ticgit (push)</span># 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写    $ git remote add pb https<span class="token operator">:</span><span class="token comment">//github.com/paulboone/ticgit</span># 修改一个远程仓库的简写名：pb<span class="token operator">--</span><span class="token operator">></span>paul    $ git remote rename pb paul# 移除远程仓库paul    $ git remote rm paul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【bundle】：对本地仓库进行打包 <ul><li>使用此命令的实例：</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">  【<span class="token number">1</span>】在A机器上打包：      $ cd R1      $ git bundle create file<span class="token punctuation">.</span>bundle master      $ git tag <span class="token operator">-</span>f lastR2bundle master   【<span class="token number">2</span>】把上面包文件file<span class="token punctuation">.</span>bundle通过u盘拷贝到B机器上，解包      $ git clone <span class="token operator">-</span>b master <span class="token operator">/</span>home<span class="token operator">/</span>me<span class="token operator">/</span>tmp<span class="token operator">/</span>file<span class="token punctuation">.</span>bundle R2【<span class="token number">3</span>】修改B机器配置      cd R2      nano <span class="token punctuation">.</span>git<span class="token operator">/</span>config      <span class="token punctuation">[</span>remote <span class="token string">"origin"</span><span class="token punctuation">]</span>        url <span class="token operator">=</span> <span class="token operator">/</span>home<span class="token operator">/</span>me<span class="token operator">/</span>tmp<span class="token operator">/</span>file<span class="token punctuation">.</span>bundle        fetch <span class="token operator">=</span> refs<span class="token operator">/</span>heads<span class="token comment">/*:refs/remotes/origin/*【4】此时A机器又修复了几个bug，再次打包      $ cd R1      $ git bundle create file.bundle lastR2bundle..master      $ git tag -f lastR2bundle master【5】把A机器新的打包文件拷贝到B机器，覆盖上次file.bundle,然后运行命令更新      $ cd R2      $ git pull</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打包整个分支</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 打包master分支    $ git bundle create repo<span class="token punctuation">.</span>bundle HEAD master# 解包，建仓库    $ git clone repo<span class="token punctuation">.</span>bundle repo      Initialized empty Git repository in <span class="token operator">/</span><span class="token keyword">private</span><span class="token operator">/</span>tmp<span class="token operator">/</span>bundle<span class="token operator">/</span>repo<span class="token operator">/</span><span class="token punctuation">.</span>git<span class="token operator">/</span>    $ cd repo    $ git log <span class="token operator">--</span>oneline      <span class="token number">9</span>a466c5 second commit      b1ec324 first commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打包部分提交：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 查看maste分支没有提交的版本    $ git log <span class="token operator">--</span>oneline master <span class="token operator">^</span>origin<span class="token operator">/</span>master# 打包master分支<span class="token number">9</span>a466c5之后版本（不包括<span class="token number">9</span>a466c5）    $ git bundle create commits<span class="token punctuation">.</span>bundle master <span class="token operator">^</span><span class="token number">9</span>a466c5# 确定打包文件是否合法正确（如果打包工具打包是缺少了一个提交）    $ git bundle verify <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>commits<span class="token punctuation">.</span>bundle# 查看包的分支情况    $ git bundle list<span class="token operator">-</span>heads <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>commits<span class="token punctuation">.</span>bundle      <span class="token number">71</span>b84daaf49abed142a373b6e5c59a22dc6560dc refs<span class="token operator">/</span>heads<span class="token operator">/</span>master# 导入包文件到other<span class="token operator">-</span>master分支    $ git fetch <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>commits<span class="token punctuation">.</span>bundle master<span class="token operator">:</span>other<span class="token operator">-</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【log】 <ul><li>详情：<a href="https://www.jianshu.com/p/bad1f70b6703">戳我</a> </li></ul></li><li>【status】</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 查看当前仓库状态（比较详细）    $ git status# 查看当前仓库状态（简略）    $ git status <span class="token operator">-</span>s    $ git status <span class="token operator">--</span><span class="token keyword">short</span>      M README      MM Rakefile      A  lib<span class="token operator">/</span>git<span class="token punctuation">.</span>rb      M  lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb      <span class="token operator">?</span><span class="token operator">?</span> LICENSE<span class="token punctuation">.</span>txt    ## <span class="token operator">?</span><span class="token operator">?</span> 表示未跟踪文件    ## A  表示新添加到暂存区中的文件    ## MM 第一个M表示修改过的文件而且放入到暂存区，第二个M表示    ## 修改过的文件<span class="token punctuation">,</span>但是没有添加到暂存区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【show】：查看Git中不同对象信息 (blobs, trees, tags and commits) <ul><li>查看master最后一次commit(下面两个命令等价)</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git show mastergit show <span class="token number">904</span>dc9362ece4c8659af08d3568d39f68d9687d6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>冲突产生时，用此命令生成冲突版本合并前的文件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">【关于冲突，显示冲突文件】    # 如果产生冲突了，可以用下面方法恢复冲突版本对应文件    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Stage <span class="token number">1</span> 是它们共同的祖先版本</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">stage</span> <span class="token expression"><span class="token number">2</span> 是你的版本</span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">stage</span> <span class="token expression"><span class="token number">3</span> 来自于 MERGE_HEAD，即你将要合并入的版本（“theirs”）</span></span>      $ git show <span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>hello<span class="token punctuation">.</span>rb <span class="token operator">></span> hello<span class="token punctuation">.</span>common<span class="token punctuation">.</span>rb      $ git show <span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span>hello<span class="token punctuation">.</span>rb <span class="token operator">></span> hello<span class="token punctuation">.</span>ours<span class="token punctuation">.</span>rb      $ git show <span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span>hello<span class="token punctuation">.</span>rb <span class="token operator">></span> hello<span class="token punctuation">.</span>theirs<span class="token punctuation">.</span>rb    # <span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>hello<span class="token punctuation">.</span>rb只是查找那个 blob 对象 SHA<span class="token operator">-</span><span class="token number">1</span> 值的简写，      通过下面命令可以查看到SHA<span class="token operator">-</span><span class="token number">1</span>，用SHA<span class="token operator">-</span><span class="token number">1</span>代替<span class="token number">1</span>    $ git ls<span class="token operator">-</span>files <span class="token operator">-</span>u      <span class="token number">100755</span> ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 <span class="token number">1</span> hello<span class="token punctuation">.</span>rb      <span class="token number">100755</span> <span class="token number">36</span>c06c8752c78d2aff89571132f3bf7841a7b5c3 <span class="token number">2</span> hello<span class="token punctuation">.</span>rb      <span class="token number">100755</span> e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd <span class="token number">3</span> hello<span class="token punctuation">.</span>rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【blame】 : 查找文件每一行的提交信息(作者、时间等) <ul><li>【-L】查看simplegit.rb的12-15每一行最后一次提交信息（下面^表示的行：是这些行第一次提交并且没有修改过）</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git blame <span class="token operator">-</span>L <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">15</span> simplegit<span class="token punctuation">.</span>rb      <span class="token operator">^</span><span class="token number">4832f</span><span class="token function">e2</span> <span class="token punctuation">(</span>Scott Chacon  <span class="token number">2008</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">15</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">28</span> <span class="token operator">-</span><span class="token number">0700</span> <span class="token number">12</span><span class="token punctuation">)</span>  def <span class="token function">show</span><span class="token punctuation">(</span>tree <span class="token operator">=</span> <span class="token string">'master'</span><span class="token punctuation">)</span>      <span class="token operator">^</span><span class="token number">4832f</span><span class="token function">e2</span> <span class="token punctuation">(</span>Scott Chacon  <span class="token number">2008</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">15</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">28</span> <span class="token operator">-</span><span class="token number">0700</span> <span class="token number">15</span><span class="token punctuation">)</span>      <span class="token number">9f</span>6560<span class="token function">e4</span> <span class="token punctuation">(</span>Scott Chacon  <span class="token number">2008</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">17</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">20</span> <span class="token operator">-</span><span class="token number">0700</span> <span class="token number">16</span><span class="token punctuation">)</span>  def <span class="token function">log</span><span class="token punctuation">(</span>tree <span class="token operator">=</span> <span class="token string">'master'</span><span class="token punctuation">)</span>      <span class="token number">79</span><span class="token function">eaf55d</span> <span class="token punctuation">(</span>Scott Chacon  <span class="token number">2008</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">06</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">08</span> <span class="token operator">-</span><span class="token number">0700</span> <span class="token number">17</span><span class="token punctuation">)</span>     <span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"git log #&#123;tree&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【-C】查看代码行最原始文件（当文件被拆分，使用此方法查看文件被拆分前的文件信息），</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#下面查看GITPackUpload<span class="token punctuation">.</span>m的<span class="token number">141</span><span class="token operator">-</span><span class="token number">144</span>行代码行的原始信息（<span class="token operator">-</span>C参数表示查看原始出处）$ git blame <span class="token operator">-</span>C <span class="token operator">-</span>L <span class="token number">141</span><span class="token punctuation">,</span><span class="token number">144</span> GITPackUpload<span class="token punctuation">.</span>m      f344f58d GITServerHandler<span class="token punctuation">.</span><span class="token function">m</span> <span class="token punctuation">(</span>Scott <span class="token number">2009</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">141</span><span class="token punctuation">)</span>      f344f58d GITServerHandler<span class="token punctuation">.</span><span class="token function">m</span> <span class="token punctuation">(</span>Scott <span class="token number">2009</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">142</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> gatherObjectShasFromC      f344f58d GITServerHandler<span class="token punctuation">.</span><span class="token function">m</span> <span class="token punctuation">(</span>Scott <span class="token number">2009</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">04</span> <span class="token number">143</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token number">70</span>befddd GITServerHandler<span class="token punctuation">.</span><span class="token function">m</span> <span class="token punctuation">(</span>Scott <span class="token number">2009</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">144</span><span class="token punctuation">)</span>         <span class="token comment">//NSLog(@"GATHER COMMI</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【bisect】：对你的提交历史进行二分查找，找到有问题的版本 <ul><li>情景1：手动测试（查找发现当前版本有bug，想找出bug是在哪一个版本引入的）</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 启动    $ git bisect start# 说明当前版本有问题    $ git bisect bad# 设定v1<span class="token punctuation">.</span><span class="token number">0</span>版本是没有问题的    $ git bisect good v1<span class="token punctuation">.</span><span class="token number">0</span># 现在可以测试，    <span class="token number">1.</span>没有问题输入<span class="token operator">:</span>$ git bisect good    <span class="token number">2.</span>有问题输入：$ git bisect bad# 继续上面测试这个过程，直到bisect找到第一个有问题版本# 重置bisect    $ git bisect reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>情景2：自动测试，有个test-error.sh脚本，项目运行正确返回非0，项目运行错误返回0</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 设置bisect有问题版本HEAD和没有问题版本v1<span class="token punctuation">.</span><span class="token number">0</span>    $ git bisect start HEAD v1<span class="token punctuation">.</span><span class="token number">0</span># 开始自动运行测试    $ git bisect run test<span class="token operator">-</span>error<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>【grep】：查找一个函数是在哪里调用或者定义，或者变更历史。</p><p>   优点：第一就是速度非常快，第二是你不仅仅可以可以搜索工作目录，还可以搜索任意的 Git 树。 </p><ul><li>【-n】参数来输出 Git 所找到的匹配行行号</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git grep <span class="token operator">-</span>n gmtime_r    compat<span class="token operator">/</span>gmtime<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span>#undef gmtime_r    compat<span class="token operator">/</span>gmtime<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token function">git_gmtime_r</span><span class="token punctuation">(</span>timep<span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    compat<span class="token operator">/</span>gmtime<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span><span class="token function">git_gmtime_r</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t   <span class="token operator">*</span>timep<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>result<span class="token punctuation">)</span>    compat<span class="token operator">/</span>gmtime<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span>     ret <span class="token operator">=</span> <span class="token function">gmtime_r</span><span class="token punctuation">(</span>timep<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    compat<span class="token operator">/</span>mingw<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">606</span><span class="token operator">:</span><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span><span class="token function">gmtime_r</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span>timep<span class="token punctuation">,</span>   <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>result<span class="token punctuation">)</span>    compat<span class="token operator">/</span>mingw<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">162</span><span class="token operator">:</span><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span><span class="token function">gmtime_r</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span>timep<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    date<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">429</span><span class="token operator">:</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gmtime_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">,</span> <span class="token operator">&amp;</span>now_tm<span class="token punctuation">)</span><span class="token punctuation">)</span>    date<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">492</span><span class="token operator">:</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gmtime_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    git<span class="token operator">-</span>compat<span class="token operator">-</span>util<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">721</span><span class="token operator">:</span><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span><span class="token function">git_gmtime_r</span><span class="token punctuation">(</span><span class="token keyword">const</span> time_t <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    git<span class="token operator">-</span>compat<span class="token operator">-</span>util<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">723</span><span class="token operator">:</span>#define gmtime_r git_gmtime_r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【–count】输出搜索匹配的文件和匹配的个数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git grep <span class="token operator">--</span>count gmtime_r    compat<span class="token operator">/</span>gmtime<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">4</span>    compat<span class="token operator">/</span>mingw<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">1</span>    compat<span class="token operator">/</span>mingw<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">1</span>    date<span class="token punctuation">.</span>c<span class="token operator">:</span><span class="token number">2</span>    git<span class="token operator">-</span>compat<span class="token operator">-</span>util<span class="token punctuation">.</span>h<span class="token operator">:</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【-p】输出匹配的行是属于哪一个方法或者函数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git grep <span class="token operator">-</span>p gmtime_r <span class="token operator">*</span><span class="token punctuation">.</span>c    date<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">match_multi_number</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> num<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>date<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>tm<span class="token punctuation">)</span>    date<span class="token punctuation">.</span>c<span class="token operator">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gmtime_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">,</span> <span class="token operator">&amp;</span>now_tm<span class="token punctuation">)</span><span class="token punctuation">)</span>    date<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">match_digit</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>date<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token operator">*</span>tm<span class="token punctuation">,</span> <span class="token keyword">int</span>   <span class="token operator">*</span>offset<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tm_gmt<span class="token punctuation">)</span>    date<span class="token punctuation">.</span>c<span class="token operator">:</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gmtime_r</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">,</span> tm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【–and】查看在旧版本 1.8.0 的 Git 代码库中定义了常量名包含 “LINK” 或者 “BUF_MAX” 这两个字符串所在的行</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git grep <span class="token operator">--</span><span class="token keyword">break</span> <span class="token operator">--</span>heading \    <span class="token operator">-</span>n <span class="token operator">-</span>e <span class="token string">'#define'</span> <span class="token operator">--</span><span class="token operator">and</span> \<span class="token punctuation">(</span> <span class="token operator">-</span>e LINK <span class="token operator">-</span>e BUF_MAX \<span class="token punctuation">)</span> v1<span class="token punctuation">.</span><span class="token number">8.0</span>    v1<span class="token punctuation">.</span><span class="token number">8.0</span><span class="token operator">:</span>builtin<span class="token operator">/</span>index<span class="token operator">-</span>pack<span class="token punctuation">.</span>c      <span class="token number">62</span><span class="token operator">:</span>#define <span class="token function">FLAG_LINK</span> <span class="token punctuation">(</span><span class="token number">1u</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>    v1<span class="token punctuation">.</span><span class="token number">8.0</span><span class="token operator">:</span>cache<span class="token punctuation">.</span>h      <span class="token number">73</span><span class="token operator">:</span>#define S_IFGITLINK  <span class="token number">0160000</span>      <span class="token number">74</span><span class="token operator">:</span>#define <span class="token function">S_ISGITLINK</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">&amp;</span> S_IFMT<span class="token punctuation">)</span> <span class="token operator">==</span> S_IFGITLINK<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找到 ZLIB_BUF_MAX常量是什么时候引入的，我们可以使用 -S选项来显示新增和删除该字符串的提交。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git log <span class="token operator">-</span>SZLIB_BUF_MAX <span class="token operator">--</span>oneline    e01503b zlib<span class="token operator">:</span> allow feeding more than <span class="token number">4</span>GB in one go    ef49a7a zlib<span class="token operator">:</span> zlib can only process <span class="token number">4</span>GB at a time<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看 zlib.c文件中git_deflate_bound函数的每一次变更</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git log <span class="token operator">-</span>L <span class="token operator">:</span>git_deflate_bound<span class="token operator">:</span>zlib<span class="token punctuation">.</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>【stash】：用于存储当前工作区域的环境，存储后用git clean工作区 <ul><li>【1】使用stash流程，git stash默认存储所有被跟踪的文件(除了Untracked文件)</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#存储工作区（只存储暂存区的文件），并且清空工作区  $ git stash  $ git stash save#查看工作区，提示已经清理干净  $ git status  <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">On branch master</span></span>  nothing to commit<span class="token punctuation">,</span> working directory clean#查看存储了些什么  $ git stash list  stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> WIP on master<span class="token operator">:</span> <span class="token number">049</span>d078 added the index file  stash@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> WIP on master<span class="token operator">:</span> c264051 Revert <span class="token string">"added file_size"</span>  stash@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> WIP on master<span class="token operator">:</span> <span class="token number">21</span>d80a5 added number to log#恢复最近存储内容，不会恢复暂存区文件  $ git stash apply#恢复最近一次存储内容，不会恢复暂存区文件，删除最近一次存储  $ git stash pop#指定恢复内容：  $ git stash apply stash@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span>#【<span class="token operator">--</span>index】不经恢复工作区文件，还会恢复暂存区文件  $ git stash apply <span class="token operator">--</span>index#删除存储的内容<span class="token punctuation">,</span>删除最近一次的存储  $ git stash drop stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>#清除所有存储  $ git stash clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【2】【–keep-index】: 只存储修改过并且没有提交到暂存区的文件（不存储未跟踪和暂存区文件）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># <span class="token punctuation">(</span>M  index<span class="token punctuation">.</span>html<span class="token punctuation">)</span>中的M表示在暂存区；（M lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb）中的M表示文件被修改但是没有被提交到暂存区；    $ git status <span class="token operator">-</span>s      M  index<span class="token punctuation">.</span>html       M lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb    $ git stash <span class="token operator">--</span>keep<span class="token operator">-</span>index      Saved working directory <span class="token operator">and</span> index state WIP on master<span class="token operator">:</span> <span class="token number">1</span>b65b17 added the index file      HEAD is now at <span class="token number">1</span>b65b17 added the index file    $ git status <span class="token operator">-</span>s      M  index<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【3】【–include-untracked 或 -u】存储所有已经跟踪的文件(Unmodified、Modified、Staged)和未跟踪的文件（Untracked），除了忽略的文件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git stash <span class="token operator">-</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>【4】【–all】存储所有文件（Unmodified、Modified、Staged、Untracked、忽略文件）</li><li>【5】【–patch】不储藏所有修改过的文件，但是会交互式地提示哪些改动想要储藏、哪些改动需要保存在工作目录中</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git stash <span class="token operator">--</span>patch  diff <span class="token operator">--</span>git a<span class="token operator">/</span>lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb b<span class="token operator">/</span>lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb  index <span class="token number">66</span>d332e<span class="token punctuation">.</span><span class="token number">.8</span>bb5674 <span class="token number">100644</span>  <span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb  <span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>lib<span class="token operator">/</span>simplegit<span class="token punctuation">.</span>rb  @@ <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">10</span> @@ <span class="token keyword">class</span> <span class="token class-name">SimpleGit</span>           <span class="token keyword">return</span> `#<span class="token punctuation">&#123;</span>git_cmd<span class="token punctuation">&#125;</span> <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span>`<span class="token punctuation">.</span>chomp         end       end  <span class="token operator">+</span>  <span class="token operator">+</span>    def <span class="token function">show</span><span class="token punctuation">(</span>treeish <span class="token operator">=</span> <span class="token string">'master'</span><span class="token punctuation">)</span>  <span class="token operator">+</span>      <span class="token function">command</span><span class="token punctuation">(</span><span class="token string">"git show #&#123;treeish&#125;"</span><span class="token punctuation">)</span>  <span class="token operator">+</span>    end   end   test  Stash <span class="token keyword">this</span> hunk <span class="token punctuation">[</span>y<span class="token punctuation">,</span>n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>a<span class="token punctuation">,</span>d<span class="token punctuation">,</span><span class="token operator">/</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token operator">?</span> y     ##这里确定是否删除##  Saved working directory <span class="token operator">and</span> index state WIP on master<span class="token operator">:</span> <span class="token number">1</span>b65b17 added the index file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【6】新建分支恢复储藏</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">【使用场景：】储藏了一些工作，然后继续在储藏的分支上工作，            如果此时恢复储藏可能会文件冲突，可以新建分支恢复储藏    $ git stash branch testchanges<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>【clean】：清除工作目录中未被追踪的文件；git clean默认不会清除.gitiignore中忽略的文件</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 【<span class="token operator">-</span>d】表示删除为被追踪的文件夹以及文件夹内文件# 【<span class="token operator">-</span>n】表示先看下那些文件要被删除    $ git clean <span class="token operator">-</span>n <span class="token operator">-</span>d    Would remove build<span class="token punctuation">.</span>TMP    Would remove tmp<span class="token operator">/</span># 【<span class="token operator">-</span>x】是表示忽略<span class="token punctuation">.</span>gitiignore的规则    $ git clean <span class="token operator">-</span>n <span class="token operator">-</span>d <span class="token operator">-</span>x    Would remove build<span class="token punctuation">.</span>TMP    Would remove test<span class="token punctuation">.</span>o    Would remove tmp<span class="token operator">/</span>#【<span class="token operator">-</span>i 或 “interactive”】 表示交互式清除，每个都会询问是否删除    $ git clean <span class="token operator">-</span>x <span class="token operator">-</span>i    Would remove the following items<span class="token operator">:</span>      build<span class="token punctuation">.</span>TMP  test<span class="token punctuation">.</span>o    <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> Commands <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>        <span class="token number">1</span><span class="token operator">:</span> clean                <span class="token number">2</span><span class="token operator">:</span> filter by pattern    <span class="token number">3</span><span class="token operator">:</span> select by numbers      <span class="token number">4</span><span class="token operator">:</span> ask each             <span class="token number">5</span><span class="token operator">:</span> quit        <span class="token number">6</span><span class="token operator">:</span> help    What now<span class="token operator">></span>#【<span class="token operator">-</span>f】 意味着 <span class="token operator">*</span>强制<span class="token operator">*</span> 或 “确定移除”，移除工作目录中所有未追踪的文件以及空的子目录    $ git clean <span class="token operator">-</span>f <span class="token operator">-</span>d <span class="token operator">-</span>x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【reflog】：记录了最近几个月 HEAD 和分支引用所指向的历史；引用日志只存在于本地仓库；克隆仓库时引用日志为空； <ul><li>查看引用日志：</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git reflog<span class="token number">34713</span>b HEAD@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> commit<span class="token operator">:</span> fixed refs handling<span class="token punctuation">,</span> added gc <span class="token keyword">auto</span><span class="token punctuation">,</span> updatedd921970 HEAD@<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> merge phedders<span class="token operator">/</span>rdocs<span class="token operator">:</span> Merge made by recursive<span class="token punctuation">.</span><span class="token number">1</span>c002dd HEAD@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> commit<span class="token operator">:</span> added some blame <span class="token operator">and</span> merge stuff<span class="token number">1</span>c36188 HEAD@<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> rebase <span class="token operator">-</span><span class="token function">i</span> <span class="token punctuation">(</span>squash<span class="token punctuation">)</span><span class="token operator">:</span> updating HEAD<span class="token number">95</span>df984 HEAD@<span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token operator">:</span> commit<span class="token operator">:</span> # This is a combination of two commits<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看最近五次HEAD指向的提交</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git show HEAD@<span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看master分支昨天HEAD指向的提交</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git show master@<span class="token punctuation">&#123;</span>yesterday<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>【submodule】：一个仓库包含另一个仓库 <ul><li>详见请见：<a href="https://www.jianshu.com/p/491609b1c426">戳我</a></li></ul></li></ul><p>作者：fanlehai</p><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p><a href="https://www.jianshu.com/p/cd1430161149?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">三十分钟学会Git</a> </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>`git`入门基础命令（小白到团队开发所需掌握的基本命令）</title>
      <link href="posts/f4f9a4a9/"/>
      <url>posts/f4f9a4a9/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <code>git</code>学习：适合新手，开始使用<code>git</code>进行团队合作开发，需要掌握的基础<code>git</code>命令，不做知识点的工具书。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        本文可以做到掌握如下内容，掌握基础的<code>git</code>命令即可（达到能够在团队*[或商业化公司中]*，和队友一起协同开发即可）。更高深的技巧请移步<code>git</code>高深语法区。</p><p>​       <code>git</code>学习：适合新手，开始使用<code>git</code>进行团队合作开发，需要掌握的基础<code>git</code>命令，不做知识点的工具书。</p><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版 1803</code>  操作系统版本：<code>17134.285</code> </p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>学习<code>linux</code>之前，还是先学习一番<code>git</code>，之前一点<code>git</code>基础，之前只是使用 <a href="https://desktop.github.com/">github for desktop </a> 的可视化工具来进行，git的使用，期间同时使用一下 <a href="https://www.git-scm.com/downloads">git bash</a> ，但是一直没有系统的学习的git，可能是柑橘初次接触<code>git</code>那会，感觉晦涩难懂吧，毕竟有着名言：</p><blockquote><p>大佬们创照带界面UI，就是方便提升效率，那还为什么不使用呢？</p></blockquote><p>为了学习(<code>zhuangbi</code>)一下<code>linux</code>，和应该多接触版本控控制工具，且网上推崇的<code>git</code>工具，老实说，我是真的心之向往，（<code>github</code> 限制文件<code>100M</code> 很难受）。</p><br><h2 id="写此之前注意："><a href="#写此之前注意：" class="headerlink" title="写此之前注意："></a>写此之前注意：</h2><p><strong>不要为了写博文而只成为了网络知识点的搬运工，感动了自己，却忘记了根本是掌握</strong></p><br><h2 id="学习命令之前的预备："><a href="#学习命令之前的预备：" class="headerlink" title="学习命令之前的预备："></a>学习命令之前的预备：</h2><p><a href="https://www.jianshu.com/p/cd1430161149?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/cd1430161149?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a> </p><br><h2 id="git-config："><a href="#git-config：" class="headerlink" title="git config："></a>git config：</h2><ul><li>配置<code>git</code>环境，告诉电脑，你是谁（哪一个git账号）？</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"touwoyimuli@gmail.com"</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"touwoyimuli"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>一：区别</strong></p><p>参数–global含义：git config、git config –global、git config –system之前有何区别？</p><p>1.执行<code>git config </code>，会打开该项目所属的配置文件（作用域最小，值针对当前项目有效）。</p><p>2.执行<code>git config --global</code>，会打开<code>C:\Users\yuanyi\.gitconfig</code>下的配置文件（作用域中等，为登陆这台计算机的用户）。</p><p>3.执行<code>git config --system</code>，会打开<code>D:\Program Files\Git\etc\gitconfig</code>（作用域最大，整台计算机，不管登陆那个帐号，不管哪个项目）。</p><p><strong>二：优先级</strong></p><p>有没有想过，如果三种配置里面都设置了某个参数，那么最后生效的是哪种呢？它们之前的优先级为（由高到低）：<code>git config</code> &gt; <code>git config --global</code> &gt; <code>git config --system</code>。</p><p>也就是作用域范围越广的优先级越低，相信这个不难理解。</p><br><h2 id="git-init："><a href="#git-init：" class="headerlink" title="git init："></a>git init：</h2><ul><li>初始化（该项目），将该项目（可看成文件夹）设置为带有<code>g</code>it管理的仓库</li></ul><br><h2 id="git-status："><a href="#git-status：" class="headerlink" title="git status："></a>git status：</h2><ul><li>判断该工程的文件的状态</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730215844.png"/ loading="lazy"><p>需要了解的git的几个区域的工作：</p><p>【Untracked】：   没有加入Git管理的文件；<br>【Unmodified】：已经提交文件（即已经存在于Git仓库中文件）；<br>【Modified】：     已经存在于Git仓库的文件，后面做了修改但是没有提交；<br>【Staged】：         存在于Git暂存区，待提交的文件</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730215922.png"/ loading="lazy"><br><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add:"></a>git add:</h2><ul><li>将文件夹项目，提交到暂存区（<code>staged</code>）</li></ul><p>高级用法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git add <span class="token operator">-</span>p <span class="token comment">//分块add</span>git add <span class="token operator">-</span>u <span class="token comment">//只提交修改的文件，未追踪的不管</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行之后，会有如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730214219.png"/ loading="lazy"><p>我的linux里面没有没有<code>s 参数</code> 自定义手动划分区域，不知道为什么？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>y<span class="token punctuation">,</span>n<span class="token punctuation">,</span>q<span class="token punctuation">,</span>a<span class="token punctuation">,</span>d<span class="token punctuation">,</span><span class="token operator">/</span><span class="token punctuation">,</span>K<span class="token punctuation">,</span>j<span class="token punctuation">,</span>J<span class="token punctuation">,</span>g<span class="token punctuation">,</span>e<span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">]</span>y <span class="token operator">-</span> stage <span class="token keyword">this</span> hunk n <span class="token operator">-</span> <span class="token keyword">do</span> <span class="token operator">not</span> stage <span class="token keyword">this</span> hunk q <span class="token operator">-</span> quit<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token operator">not</span> stage <span class="token keyword">this</span> hunk nor any of the remaining ones a <span class="token operator">-</span> stage <span class="token keyword">this</span> hunk <span class="token operator">and</span> all later hunks in the file d <span class="token operator">-</span> <span class="token keyword">do</span> <span class="token operator">not</span> stage <span class="token keyword">this</span> hunk nor any of the later hunks in the file g <span class="token operator">-</span> select a hunk to go to <span class="token operator">/</span> <span class="token operator">-</span> search <span class="token keyword">for</span> a hunk matching the given regex j <span class="token operator">-</span> leave <span class="token keyword">this</span> hunk undecided<span class="token punctuation">,</span> see next undecided hunk J <span class="token operator">-</span> leave <span class="token keyword">this</span> hunk undecided<span class="token punctuation">,</span> see next hunk k <span class="token operator">-</span> leave <span class="token keyword">this</span> hunk undecided<span class="token punctuation">,</span> see previous undecided hunk K <span class="token operator">-</span> leave <span class="token keyword">this</span> hunk undecided<span class="token punctuation">,</span> see previous hunk s <span class="token operator">-</span> split the current hunk into smaller hunks e <span class="token operator">-</span> manually edit the current hunk <span class="token operator">?</span> <span class="token operator">-</span> print help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的翻译如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">y <span class="token operator">-</span> 存储这个hunk n <span class="token operator">-</span> 不存储这个hunk q <span class="token operator">-</span> 离开，不存储这个hunk和其他hunk a <span class="token operator">-</span> 存储这个hunk和这个文件后面的hunk d <span class="token operator">-</span> 不存储这个hunk和这个文件后面的hunk g <span class="token operator">-</span> 选择一个hunk <span class="token operator">/</span> <span class="token operator">-</span> 通过正则查找hunk j <span class="token operator">-</span> 不确定是否存储这个hunk，看下一个不确定的hunk J <span class="token operator">-</span> 不确定是否存储这个hunk，看下一个hunk k <span class="token operator">-</span> 不确定是否存储这个hunk，看上一个不确定的hunk K <span class="token operator">-</span>不确定是否存储这个hunk，看上一个hunk s <span class="token operator">-</span> 把当前的hunk分成更小的hunks e <span class="token operator">-</span> 手动编辑当前的hunk <span class="token operator">?</span> <span class="token operator">-</span> 输出帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log:"></a>git log:</h2><ul><li>查看时间线：所有的<code>commit</code>提交</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730220016.png"/ loading="lazy"><br><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit:"></a>git commit:</h2><ul><li>提交项目</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git commit <span class="token string">"项目简介一句话"</span>  <span class="token comment">//不推荐</span>git commit           <span class="token comment">//会自动跳到一个单独的文件，写完整的提交信息   //实际工作中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm:"></a>git rm:</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git rm <span class="token operator">--</span>cached <span class="token comment">//重暂存区移除，文件还在</span>git rm <span class="token operator">-</span>f       <span class="token comment">//直接删除文件，并且重git仓库移除</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff:"></a>git diff:</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git diff master    <span class="token comment">//查看当前分支做了哪些改动</span>git diff <span class="token operator">--</span>cached  <span class="token comment">//查看已经staged（不记得回看上面的那个区图）文件改动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show:"></a>git show:</h2><ul><li>显示某一个项目的具体信息</li></ul><pre class="line-numbers language-none"><code class="language-none">git show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="git-branch："><a href="#git-branch：" class="headerlink" title="git branch："></a>git branch：</h2><ul><li>一般用于分支的操作，比如创建分支，查看分支等等</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git branch       <span class="token comment">//列出本地已经存在的分支，并且在当前分支的前面用"*"标记</span>git branch <span class="token operator">-</span>r    <span class="token comment">//查看远程版本库分支列表</span>git branch <span class="token operator">-</span>a    <span class="token comment">//查看所有分支列表，包括本地和远程</span>git branch dev   <span class="token comment">//创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout:"></a>git checkout:</h2><ul><li>操作分支</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git checkout master     <span class="token comment">//将分支切换到master</span>git checkout <span class="token operator">-</span>b master  <span class="token comment">//如果分支存在则只切换分支，若不存在则创建并切换到master分支，repo start是对git checkout -b这个命令的封装，将所有仓库的分支都切换到master，master是分支名，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="git-rebase："><a href="#git-rebase：" class="headerlink" title="git rebase："></a>git rebase：</h2><p> <a href="https://www.baidu.com/link?url=G9aDyNNdYNN0EkHcDhYXKNkTH18WrrNVF999_GBt8Ug8xhw6GbGk_AkeRCqd5nO2B_-L0fTaFBiyrE5kP6eRYS321z4pKOEjwR3doMzCwrq&wd=&eqid=a666ce3b0070882b000000045d403223">廖雪峰的<em>git</em>教程 - <em>Rebase</em> - 廖雪峰的官方网站 </a> </p><br><h2 id="git-merge："><a href="#git-merge：" class="headerlink" title="git merge："></a>git merge：</h2><p><a href="https://www.baidu.com/link?url=uA3_4yNe4yHTvSkh7duH_lmK4L_XE_c_QZZ2W5QqiOX1_Q1GrEue6VPuKQbSw4JR9ZPUFR3kIGNbQNIY2Ro5-_-63YEpemsP3olaXZ2XuQO&ck=11700.5.0.0.0.246.176.0&shh=www.baidu.com&sht=baidu&wd=&eqid=de4c72f700760aac000000045d4032d8"><em>git</em>在工作中的正确使用方式—<em>git merge</em>篇 - nrsc - CSDN博客</a> </p><br><h2 id="冲突解决："><a href="#冲突解决：" class="headerlink" title="冲突解决："></a>冲突解决：</h2><ul><li>手动解决</li><li>git mergtool</li></ul><br><p><strong>//+++++++++++++++++++++++++++分割，建议歇一会，再开始看下面的++++++++++++++++++++++++</strong></p><br><h2 id="git-stash："><a href="#git-stash：" class="headerlink" title="git stash："></a>git stash：</h2><ul><li>备份当前仓库状态</li></ul><br><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset:"></a>git reset:</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git reset          <span class="token comment">//仓库文件不变，git提交信息被更改</span>git reset <span class="token operator">--</span>hard   <span class="token comment">//仓库文件强制回滚到commit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert:"></a>git revert:</h2><ul><li>git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，如下图所示，假设我们要回退到版本一：</li></ul><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730222216.png"/ loading="lazy"><p> <a href="https://blog.csdn.net/yxlshk/article/details/79944535">Git恢复之前版本的两种方法reset、revert（图文详解）</a> </p><br><h2 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git bisect:"></a>git bisect:</h2><ul><li>用来查找哪一次代码提交引入了错误。</li><li>二分查找，排错</li></ul><p> <a href="https://www.baidu.com/link?url=lqeenJf_8WgBO2JKsMpH1ca7K5TZEGF5Jt7OaZTX2-O5DxnxdgJBMkeOXe_x3vFoLYjNMuqXdtQcwFE8RnM-B_&wd=&eqid=9ca323ee0032aca9000000045d4034d0"><em>git</em> <em>bisect</em> 命令教程 - 阮一峰的网络日志</a> </p><br><h2 id="git-tag："><a href="#git-tag：" class="headerlink" title="git tag："></a>git tag：</h2><ul><li>tag是git版本库的一个标记，指向某个commit的指针。</li></ul><p> <a href="https://www.baidu.com/link?url=kri4FpJf7XZN2teqfO78VKbjiIGVh7dacRXa_Ax4CyN--npYWUBPL3yQmH3gjYTCTk5icT6ruBEdAXEegWe1n6KV-1rGhCJqx2F_L9ng-R7&wd=&eqid=d21b29ff0039f5be000000045d403549"><em>Git</em>中<em>tag</em>标签的使用 - 等待化茧成蝶的专栏 - CSDN博客</a> </p><br><h2 id="git-clean："><a href="#git-clean：" class="headerlink" title="git clean："></a>git clean：</h2><ul><li>删库到跑路，被老板抓住，打断腿，是一个工作几个月可赚60W的命令</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git clean <span class="token operator">-</span>fd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="git-cherry-pick："><a href="#git-cherry-pick：" class="headerlink" title="git cherry-pick："></a>git cherry-pick：</h2><ul><li>看做“局部合并”</li><li>可以理解为”挑拣”提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上</li></ul><br><h2 id="git-submodule："><a href="#git-submodule：" class="headerlink" title="git submodule："></a>git submodule：</h2><ul><li>当一个项目需要包含其他支持项目源码时使用的功能，作用是两个项目是独立的，且主项目可以使用另一个支持项目。</li></ul><br><h2 id="git-reflog："><a href="#git-reflog：" class="headerlink" title="git reflog："></a>git reflog：</h2><ul><li><p>可以查看所有分支的所有操作记录（包括已经被删除的 <code>commit</code> 记录和 <code>reset</code> 的操作）</p><p>  例如执行 <code>git reset --hard HEAD~1</code>，退回到上一个版本，用<code>git log</code>则是看不出来被删除的<code>commitid</code>，用<code>git reflog</code>则可以看到被删除的<code>commitid</code>，我们就可以买后悔药，恢复到被删除的那个版本。</p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730220217.png"/ loading="lazy">  <br></li></ul><h2 id="git-ignore："><a href="#git-ignore：" class="headerlink" title="git ignore："></a>git ignore：</h2><ul><li>来忽略某些文件的提交</li></ul><p><strong>规则  作用</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">/</span>mtk    过滤整个文件夹<span class="token operator">*</span><span class="token punctuation">.</span>zip   过滤所有<span class="token punctuation">.</span>zip文件<span class="token operator">/</span>mtk<span class="token operator">/</span><span class="token keyword">do</span><span class="token punctuation">.</span>c   过滤某个具体文件<span class="token operator">!</span><span class="token operator">/</span>mtk<span class="token operator">/</span>one<span class="token punctuation">.</span>txt   追踪（不过滤）某个具体文件注意：如果你创建<span class="token punctuation">.</span>gitignore文件之前就push了某一文件，那么即使你在<span class="token punctuation">.</span>gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置语法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">以斜杠“<span class="token operator">/</span>”开头表示目录；以星号“<span class="token operator">*</span>”通配多个字符；以问号“<span class="token operator">?</span>”通配单个字符以方括号“<span class="token punctuation">[</span><span class="token punctuation">]</span>”包含单个字符的匹配列表；以叹号“<span class="token operator">!</span>”表示不忽略<span class="token punctuation">(</span>跟踪<span class="token punctuation">)</span>匹配到的文件或目录。注意： git 对于 <span class="token punctuation">.</span>gitignore配置文件是按行从上到下进行规则匹配的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p> <a href="https://git-scm.com/doc">git 官方book 英文</a> （推荐）</p><p> <a href="http://gitbook.liuhui998.com/index.html">git book 中文</a> （推荐）</p><p> <a href="https://www.cnblogs.com/clsn/p/7929958.html">Git详解及 github与gitlab使用</a> （推荐，系列）</p><p> <a href="https://www.daixiaorui.com/read/240.html">直接git config和带–global、–system的区别</a> </p><p> <a href="https://blog.csdn.net/diehuang3426/article/details/82588028">Git合并单个文件和[y,n,q,a,d,/,K,j,J,g,e,?]</a> </p><p> <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-Git-%E5%88%AB%E5%90%8D">2.7 Git 基础 - Git 别名</a> </p><p> <a href="https://www.cnblogs.com/qianqiannian/p/6011404.html">Git branch &amp;&amp; Git checkout常见用法</a> </p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190730220747.png"/ loading="lazy"><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br>]]></content>
      
      
      <categories>
          
          <category> 学习 - 编码规范，辅助技巧 </category>
          
          <category> 学习 - Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>`Qt图片的绘图类`QPixmap`/`QBitmap`/`QImage`/`QPicture`区别和使用</title>
      <link href="posts/bcab0980/"/>
      <url>posts/bcab0980/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>   <code>Qt</code>图片的绘图类<code>QPixmap</code>/<code>QBitmap</code>/<code>QImage</code>/<code>QPicture</code>区别和使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​           <code>Qt</code>图片的绘图类<code>QPixmap</code>/<code>QBitmap</code>/<code>QImage</code>/<code>QPicture</code>区别和使用</p><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p><p><strong>编程软件：</strong>  <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h2><blockquote><p><code>绘图设备</code>： 绘图设备是指继承<code>QPaintDevice</code>的子类，你可以使用QPainter直接在其上面绘制图形，<code>Qt</code>一共提供了四个这样继承QPaintDevice的绘图设备类，分别是QPixmap、QBitmap、QImage和 QPicture。</p><p><code>QPixmap</code>：针对屏幕进行优化了，和平台相关，不能对图片进行修改</p><p><code>QBitmap</code>：是QPixmap的一个子类，它的色深限定为1，你可以使用 QPixmap的isQBitmap()函数来确定这    个QPixmap是不是一个QBitmap；</p><p><code>QImage</code>：和平台无关，可以对图片进行修改，在线程中绘图，专门为图像的像素级访问做了优化；</p><p><code>QPicture</code>：保存绘图的状态（二进制文件），则可以记录和重现QPainter的各条命令；</p></blockquote><h2 id="QPixmap和QBitmap"><a href="#QPixmap和QBitmap" class="headerlink" title="QPixmap和QBitmap"></a><strong>QPixmap和QBitmap</strong></h2><p>QPixmap可以接受一个字符串作为一个文件的路径来显示这个文件，比如你想在程序之中打开png、jpeg之类的文件，就可以使用 QPixmap。使用QPainter的drawPixmap()函数可以把这个文件绘制到一个QLabel、QPushButton或者其他的设备上面。QPixmap是针对屏幕进行特殊优化的，因此，它与实际的底层显示设备息息相关。注意，这里说的显示设备并不是硬件，而是操作系统提供的原生的绘图引擎。所以，在不同的操作系统平台下，QPixmap的显示可能会有所差别。</p><p>QPixmap提供了静态的grabWidget()和grabWindow()函数，用于将自身图像绘制到目标上。同时，在使用QPixmap时，你可以直接使用传值也不需要传指针，因为QPixmap提供了“隐式数据共享”。关于这一点，我们会在以后的章节中详细描述，这里只要知道传递QPixmap不必须使用指针就好了。</p><p>QBitmap继承自QPixmap，主要用于显示单色位图。是QPixmap子类，因此具有其所有特性。QBitmap的色深始终为1. 色深这个概念来自计算机图形学，是指用于表现颜色的二进制的位数。我们知道，计算机里面的数据都是使用二进制表示的。为了表示一种颜色，我们也会使用二进制。比如我们要表示8种颜色，需要用3个二进制位，这时我们就说色深是3. 因此，所谓色深为1，也就是使用1个二进制位表示颜色。1个位只有两种状态：0和1，因此它所表示的颜色就有两种，黑和白。所以说，QBitmap实际上是只有黑白两色的图像数据。</p><p>由于QBitmap色深小，因此只占用很少的存储空间，所以适合做光标文件和笔刷。</p><p>下面我们来看同一个图像文件在QPixmap和QBitmap下的不同表现：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">PaintedWidget</span><span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>QPainter <span class="token function">painter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPixmap <span class="token function">pixmap</span><span class="token punctuation">(</span><span class="token string">"butterfly.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//图片背景透明</span>QBitmap <span class="token function">bitmap</span><span class="token punctuation">(</span><span class="token string">"butterfly.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//图片背景透明</span>painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>QPixmap <span class="token function">pixmap2</span><span class="token punctuation">(</span><span class="token string">"butterfly2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片背景白色</span>QBitmap <span class="token function">bitmap2</span><span class="token punctuation">(</span><span class="token string">"butterfly2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//图片背景白色</span>painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> pixmap2<span class="token punctuation">)</span><span class="token punctuation">;</span>painter<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> bitmap2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来看一下运行结果：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727145004.png"/ loading="lazy"><p>这里我们给出了两张png图片。<code>butterfly.png</code>是具有透明色的背景，而<code>butterfly2.png</code>是没有透明色的纯白背景，。我们分别使用QPixmap和QBitmap来加载它们。注意看它们的区别：白色的背景在Qbitmap中消失了，<strong>而透明色在QBitmap中转换成了黑色；其他颜色则是使用点的疏密程度来体现的。</strong> </p><h2 id="QPixmap："><a href="#QPixmap：" class="headerlink" title="QPixmap："></a>QPixmap：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QPixmap</span>QPixmap <span class="token function">pixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//绘画设备 400*400</span>pixmap<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//填充背景色（默认为黑色）</span>QPainter <span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//设置画家</span>p1<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//画家在绘图设备绘画</span>pixmap<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//绘画保存(默认为build-QtExample-Desktop_Qt_5_9_8_MinGW_32bit-Debug里面)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QImage："><a href="#QImage：" class="headerlink" title="QImage："></a>QImage：</h2><p>QPixmap使用底层平台的绘制系统进行绘制，无法提供像素级别的操作，而QImage则是使用独立于硬件的绘制系统，实际上是自己绘制自己，因此提供了像素级别的操作，并且能够在不同系统之上提供一个一致的显示形式。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QImage</span>QImage <span class="token function">image</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> QImage<span class="token operator">::</span>Format_ARGB32<span class="token punctuation">)</span><span class="token punctuation">;</span>QPainter <span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QImage</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>image<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QPicture："><a href="#QPicture：" class="headerlink" title="QPicture："></a>QPicture：</h2><p>QPicture是一个可以记录和重现QPainter命令的绘图设备。QPicture将QPainter的命令序列化到一个IO设备，保存为一个平台独立的文件格式。这种格式有时候会是“元文件(meta- files)”。Qt的这种格式是二进制的，不同于某些本地的元文件，Qt的pictures文件没有内容上的限制，只要是能够被QPainter绘制的元素，不论是字体还是pixmap，或者是变换，都可以保存进一个picture中。</p><p>QPicture是平台无关的，因此它可以使用在多种设备之上，比如svg、pdf、ps、打印机或者屏幕。回忆下我们这里所说的QPaintDevice，实际上是说可以有QPainter绘制的对象。QPicture使用系统的分辨率，并且可以调整 QPainter来消除不同设备之间的显示差异。</p><p>如果我们要记录下QPainter的命令，<strong>首先要使用QPainter::begin()函数在QPicture上进行绘图，将QPicture实例作为参数传递进去，以便告诉系统开始记录，记录完毕后使用QPainter::end()命令终止，</strong>最后使用save()保存，代码示例如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QPicture</span>QPicture picture<span class="token punctuation">;</span>QPainter p3<span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//任意绘画</span>p3<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>picture<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果图：</strong></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727143406.png"/ loading="lazy"><p>因为为二进制文件，所以图片无法显示，但是文件是保存完好的正确的</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727143654.png"/ loading="lazy"><p>但是可以通过其来<code>load()</code>直接读取该二进制文件：</p><h2 id="加载QPicture："><a href="#加载QPicture：" class="headerlink" title="加载QPicture："></a>加载QPicture：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPicture picture<span class="token punctuation">;</span>picture<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">drawPicture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> picture<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QImage与pixmap的区别"><a href="#QImage与pixmap的区别" class="headerlink" title="QImage与pixmap的区别"></a>QImage与pixmap的区别</h2><p>1、QPixmap主要是用于绘图，针对屏幕显示而最佳化设计，QImage主要是为图像I/O、图片访问和像素修改而设计的</p><p>2、QPixmap依赖于所在的平台的绘图引擎，故例如反锯齿等一些效果在不同的平台上可能会有不同的显示效果，QImage使用Qt自身的绘图引擎，可在不同平台上具有相同的显示效果</p><p>3、目前的Qt会把QPixmap都存储在graphics memory中，QImage是存储在客户端的，是独立于硬件的。在 X11, Mac 以及 Symbian平台上，QPixmap 是存储在服务器端，而QImage则是存储在客户端，在Windows平台上，QPixmap和QImage都是存储在客户端，并不使用任何的GDI资源。</p><p>4、由于QImage是独立于硬件的，也是一种QPaintDevice，因此我们可以在另一个线程中对其进行绘制，而不需要在GUI线程中处理，使用这一方式可以很大幅度提高UI响应速度。</p><p>5、QImage可通过setPixpel()和pixel()等方法直接存取指定的像素。</p><p>当图片较大时，我们可以先通过QImage将图片加载进来，然后把图片缩放成需要的尺寸，最后转换成QPixmap 进行显示。</p><h2 id="QPixmap-–-gt-image："><a href="#QPixmap-–-gt-image：" class="headerlink" title="QPixmap –&gt;  image："></a>QPixmap –&gt;  image：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//QPixmap -->  image</span>QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPixmap pixmap<span class="token punctuation">;</span>pixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QImage image <span class="token operator">=</span> pixmap<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="image-–-gt-QPixmap："><a href="#image-–-gt-QPixmap：" class="headerlink" title="image –&gt;  QPixmap："></a>image –&gt;  QPixmap：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//image -->  QPixmap</span>QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QImage image2<span class="token punctuation">;</span>image2<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPixmap pixmap2<span class="token punctuation">;</span>pixmap2 <span class="token operator">=</span> <span class="token class-name">QPixmap</span><span class="token operator">::</span><span class="token function">fromImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图如下：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190727144015.png"/ loading="lazy"><br><h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"QtExample.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_QtExample.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPixmap></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QImage></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPainter></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPicture></span></span><span class="token class-name">QtExample</span><span class="token operator">::</span><span class="token function">QtExample</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token operator">::</span>QtExample<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//QPixmap</span>    QPixmap <span class="token function">pixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token comment">//绘画设备 400*400</span>    pixmap<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">//填充背景色（默认为黑色）</span>    QPainter <span class="token function">p1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token comment">//设置画家</span>    p1<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//画家在绘图设备绘画</span>    pixmap<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">//绘画保存(默认为build-QtExample-Desktop_Qt_5_9_8_MinGW_32bit-Debug里面)</span>    <span class="token comment">//QImage</span>    QImage <span class="token function">image</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> QImage<span class="token operator">::</span>Format_ARGB32<span class="token punctuation">)</span><span class="token punctuation">;</span>    QPainter <span class="token function">p2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QImage</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//QPicture</span>    QPicture picture<span class="token punctuation">;</span>    QPainter p3<span class="token punctuation">;</span>    p3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>picture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p3<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token function">QPixmap</span><span class="token punctuation">(</span><span class="token string">"../plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//任意绘画</span>    p3<span class="token punctuation">.</span><span class="token function">drawEllipse</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    picture<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">QtExample</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">QtExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">QtExample</span><span class="token operator">::</span><span class="token function">paintEvent</span><span class="token punctuation">(</span>QPaintEvent <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span></span>    QPicture picture<span class="token punctuation">;</span>    picture<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPicture_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">drawPicture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> picture<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    QPainter <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//QPixmap -->  image</span>    QPixmap pixmap<span class="token punctuation">;</span>    pixmap<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QPixmap_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QImage image <span class="token operator">=</span> pixmap<span class="token punctuation">.</span><span class="token function">toImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//image -->  QPixmap</span>    QImage image2<span class="token punctuation">;</span>    image2<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"../QImage_plum.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QPixmap pixmap2<span class="token punctuation">;</span>    pixmap2 <span class="token operator">=</span> <span class="token class-name">QPixmap</span><span class="token operator">::</span><span class="token function">fromImage</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">drawPixmap</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pixmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p><strong>参考：</strong>  <a href="https://blog.csdn.net/qq_33266987/article/details/73187140">Qt图片绘图类QPixmap/QImage/QPicture</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> [<code>Qt</code>图片的绘图类<code>QPixmap</code>/<code>QBitmap</code>/<code>QImage</code>/<code>QPicture</code>区别和使用 ](</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++常见面试题30道</title>
      <link href="posts/ca48fdf7/"/>
      <url>posts/ca48fdf7/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  c++常见面试题30道</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t0"></a><span style="font-size:32px;color:rgb(255,0,0);">1.new<span style="font-family:'宋体';">、</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">、</span><span style="font-family:'ˎ̥';">malloc</span><span style="font-family:'宋体';">、</span><span style="font-family:'ˎ̥';">free</span><span style="font-family:'宋体';">关系</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">delete<span style="font-family:'宋体';">会调用对象的析构函数</span><span style="font-family:'ˎ̥';">,</span><span style="font-family:'宋体';">和</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">对应</span><span style="font-family:'ˎ̥';">free</span><span style="font-family:'宋体';">只会释放内存，</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">调用构造函数。</span><span style="font-family:'ˎ̥';">malloc</span><span style="font-family:'宋体';">与</span><span style="font-family:'ˎ̥';">free</span><span style="font-family:'宋体';">是</span><span style="font-family:'ˎ̥';">C++/C</span><span style="font-family:'宋体';">语言的标准库函数，</span><span style="font-family:'ˎ̥';">new/delete</span><span style="font-family:'宋体';">是</span><span style="font-family:'ˎ̥';">C++</span><span style="font-family:'宋体';">的运算符。它们都可用于申请动态内存和释放内存。对于非内部数据类型的对象而言，光用</span><span style="font-family:'ˎ̥';">maloc/free</span><span style="font-family:'宋体';">无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于</span><span style="font-family:'ˎ̥';">malloc/free</span><span style="font-family:'宋体';">是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于</span><span style="font-family:'ˎ̥';">malloc/free</span><span style="font-family:'宋体';">。因此</span><span style="font-family:'ˎ̥';">C++</span><span style="font-family:'宋体';">语言需要一个能完成动态内存分配和初始化工作的运算符</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">，以及一个能完成清理与释放内存工作的运算符</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">。注意</span><span style="font-family:'ˎ̥';">new/delete</span><span style="font-family:'宋体';">不是库函数。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t1"></a><a name="t2" style="color:rgb(202,0,0);"></a><a name="t1" style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">2.delete<span style="font-family:'宋体';">与&nbsp;</span><span style="font-family:'ˎ̥';">delete&nbsp;[]</span><span style="font-family:'宋体';">区别</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">delete<span style="font-family:'宋体';">只会调用一次析构函数，而</span><span style="font-family:'ˎ̥';">delete[]</span><span style="font-family:'宋体';">会调用每一个成员的析构函数。在</span><span style="font-family:'ˎ̥';">More&nbsp;Effective&nbsp;C++</span><span style="font-family:'宋体';">中有更为详细的解释：</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">当</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">操作符用于数组时，它为每个数组元素调用析构函数，然后调用</span><span style="font-family:'ˎ̥';">operator</span></span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">delete<span style="font-family:'宋体';">来释放内存。</span><span style="font-family:'ˎ̥';">”delete</span><span style="font-family:'宋体';">与</span></span><span style="font-size:18px;color:rgb(0,0,0);">n</span><span style="font-size:18px;color:rgb(0,0,0);">ew<span style="font-family:'宋体';">配套，</span><span style="font-family:'ˎ̥';">delete&nbsp;[]</span><span style="font-family:'宋体';">与</span><span style="font-family:'ˎ̥';">new&nbsp;[]</span><span style="font-family:'宋体';">配套</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">MemTest</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">*mTest1=new</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">MemTest[10];</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">MemTest</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">*mTest2=new</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">MemTest;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">Int</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">*pInt1=new</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">int</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">[10];</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">Int</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">*pInt2=new</span><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;</span><span style="font-size:18px;color:rgb(0,0,0);">int;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">delete[]pInt1;&nbsp;//-1-</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">delete[]pInt2;&nbsp;//-2-</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">delete[]mTest1;//-3-</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">delete[]mTest2;//-4-</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">在<span style="font-family:'ˎ̥';">-4-</span><span style="font-family:'宋体';">处报错。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">这就说明：对于内建简单数据类型，<span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">和</span><span style="font-family:'ˎ̥';">delete[]</span><span style="font-family:'宋体';">功能是相同的。对于自定义的复杂数据类型，</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">和</span><span style="font-family:'ˎ̥';">delete[]</span><span style="font-family:'宋体';">不能互用。</span><span style="font-family:'ˎ̥';">delete[]</span><span style="font-family:'宋体';">删除一个数组，</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">删除一个指针。简单来说，用</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">分配的内存用</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">删除；用</span><span style="font-family:'ˎ̥';">new[]</span><span style="font-family:'宋体';">分配的内存用</span><span style="font-family:'ˎ̥';">delete[]</span><span style="font-family:'宋体';">删除</span><span style="font-family:'ˎ̥';">。delete[]</span><span style="font-family:'宋体';">会调用数组元素的析构函数。内部数据类型没有析构函数，所以问题不大。如果你在用</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">时没用括号，</span><span style="font-family:'ˎ̥';">delete</span><span style="font-family:'宋体';">就会认为指向的是单个对象，否则，它就会认为指向的是一个数组。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t2"></a><a name="t3" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">3</span><span style="font-size:32px;color:rgb(255,0,0);">.C++<span style="font-family:'宋体';">有哪些性质（面向对象特点）</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">封装，继承和多态。</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t3"></a><a name="t4" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">4</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">子类析构时要调用父类的析构函数吗？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">析构函数调用的次序是先派生类的析构后基类的析构，也就是说在基类的的析构调用的时候<span style="font-family:'ˎ̥';">,</span><span style="font-family:'宋体';">派生类的信息已经全部销毁了</span></span><span style="font-size:18px;color:rgb(0,0,0);">。</span><span style="font-size:18px;color:rgb(0,0,0);">定义一个对象时先调用基类的构造函数、然后调用派生类的构造函数；析构的时候恰好相反：先调用派生类的析构函数、然后调用基类的析构函数</span><span style="font-size:18px;color:rgb(0,0,0);">。</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t4"></a><a name="t5" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">5</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">多态，虚函数，纯虚函数</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">多态：是对于不同对象接收相同消息时产生不同的动作。<span style="font-family:'ˎ̥';">C++</span><span style="font-family:'宋体';">的多态性具体体现在运行和编译两个方面：在程序运行时的多态性通过继承和虚函数来体现；</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">在程序编译时多态性体现在函数和运算符的重载上；</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">虚函数：在基类中冠以关键字&nbsp;<span style="font-family:'ˎ̥';">virtual&nbsp;</span><span style="font-family:'宋体';">的成员函数。&nbsp;它提供了一种接口界面。允许在派生类中对基类的虚函数重新定义。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">纯虚函数的作用：在基类中为其派生类保留一个函数的名字，以便派生类根据需要对它进行定义。作为接口而存在&nbsp;纯虚函数不具备函数的功能，一般不能直接被调用。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">从基类继承来的纯虚函数，在派生类中仍是虚函数。如果一个类中至少有一个纯虚函数，那么这个类被称为抽象类（<span style="font-family:'ˎ̥';">abstract&nbsp;class</span><span style="font-family:'宋体';">）。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">抽象类中不仅包括纯虚函数，也可包括虚函数。抽象类必须用作派生其他类的基类，而不能用于直接创建对象实例。但仍可使用指向抽象类的指针支持运行时多态性。</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t5"></a><a name="t6" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">6</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">求下面函数的返回值（微软）</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">int&nbsp;func(x)&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">{&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">int&nbsp;countx&nbsp;=&nbsp;0;&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">while(x)&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">{&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">countx&nbsp;++;&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">x&nbsp;=&nbsp;x&amp;(x-1);&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">}&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">return&nbsp;countx;&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">}&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">假定<span style="font-family:'ˎ̥';">x&nbsp;=&nbsp;9999</span><span style="font-family:'宋体';">。&nbsp;答案：</span><span style="font-family:'ˎ̥';">8</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">思路：将<span style="font-family:'ˎ̥';">x</span><span style="font-family:'宋体';">转化为</span><span style="font-family:'ˎ̥';">2</span><span style="font-family:'宋体';">进制，看含有的</span><span style="font-family:'ˎ̥';">1</span><span style="font-family:'宋体';">的个数。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t6"></a><a name="t7" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">7</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">什么是</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">引用</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">？申明和使用</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">引用</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">要注意哪些问题？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">答：引用就是某个目标变量的<span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">别名</span><span style="font-family:'ˎ̥';">”(alias)</span><span style="font-family:'宋体';">，对应用的操作与对变量直接操作效果完全相同。申明一个引用的时候，切记要对其进行初始化。引用声明完毕后，相当于目标变量名有两个名称，即该目标原名称和引用名，不能再把该引用名作为其他变量名的别名。声明一个引用，不是新定义了一个变量，它只表示该引用名是目标变量名的一个别名，它本身不是一种数据类型，因此引用本身不占存储单元，系统也不给引用分配存储单元。不能建立数组的引用。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t7"></a><a name="t8" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">8</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">将</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">引用</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">作为函数参数有哪些特点？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">1</span><span style="font-family:'宋体';">）传递引用给函数与传递指针的效果是一样的。这时，被调函数的形参就成为原来主调函数中的实参变量或对象的一个别名来使用，所以在被调函数中对形参变量的操作就是对其相应的目标对象（在主调函数中）的操作。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">2</span><span style="font-family:'宋体';">）使用引用传递函数的参数，在内存中并没有产生实参的副本，它是直接对实参操作；而使用一般变量传递函数的参数，当发生函数调用时，需要给形参分配存储单元，形参变量是实参变量的副本；如果传递的是对象，还将调用拷贝构造函数。因此，当参数传递的数据较大时，用引用比用一般变量传递参数的效率和所占空间都好。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">3</span><span style="font-family:'宋体';">）使用指针作为函数的参数虽然也能达到与使用引用的效果，但是，在被调函数中同样要给形参分配存储单元，且需要重复使用</span><span style="font-family:'ˎ̥';">"*</span><span style="font-family:'宋体';">指针变量名</span><span style="font-family:'ˎ̥';">"</span><span style="font-family:'宋体';">的形式进行运算，这很容易产生错误且程序的阅读性较差；另一方面，在主调函数的调用点处，必须用变量的地址作为实参。而引用更容易使用，更清晰。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t8"></a><a name="t9" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">9</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">在什么时候需要使用</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">常引用</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">？　</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">如果既要利用引用提高程序的效率，又要保护传递给函数的数据不在函数中被改变，就应使用常引用。常引用声明方式：<span style="font-family:'ˎ̥';">const&nbsp;</span><span style="font-family:'宋体';">类型标识符&nbsp;</span><span style="font-family:'ˎ̥';">&amp;</span><span style="font-family:'宋体';">引用名</span><span style="font-family:'ˎ̥';">=</span><span style="font-family:'宋体';">目标变量名；</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">例<span style="font-family:'Times New Roman';">1</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">int&nbsp;a&nbsp;;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">const&nbsp;int&nbsp;&amp;ra=a;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">ra=1;&nbsp;//<span style="font-family:'宋体';">错误</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">a=1;&nbsp;//<span style="font-family:'宋体';">正确</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">例<span style="font-family:'Times New Roman';">2</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">string&nbsp;foo(&nbsp;);</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">void&nbsp;bar(string&nbsp;&amp;&nbsp;s);</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">那么下面的表达式将是非法的：</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">bar(foo(&nbsp;));</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">bar("hello&nbsp;world");</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">原因在于<span style="font-family:Calibri;">foo(&nbsp;)</span><span style="font-family:'宋体';">和</span><span style="font-family:Calibri;">"hello&nbsp;world"</span><span style="font-family:'宋体';">串都会产生一个临时对象，而在</span><span style="font-family:Calibri;">C++</span><span style="font-family:'宋体';">中，这些临时对象都是</span><span style="font-family:Calibri;">const</span><span style="font-family:'宋体';">类型的。因此上面的表达式就是试图将一个</span><span style="font-family:Calibri;">const</span><span style="font-family:'宋体';">类型的对象转换为非</span><span style="font-family:Calibri;">const</span><span style="font-family:'宋体';">类型，这是非法的。引用型参数应该在能被定义为</span><span style="font-family:Calibri;">const</span><span style="font-family:'宋体';">的情况下，尽量定义为</span><span style="font-family:Calibri;">const&nbsp;</span><span style="font-family:'宋体';">。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t9"></a><a name="t10" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:18px;"><span style="font-family:'宋体';"></span></span></h1><p><span style="font-size:32px;color:rgb(255,0,0);">10.<span style="font-family:'宋体';">将</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">引用</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">作为函数返回值类型的格式、好处和需要遵守的规则</span><span style="font-family:'ˎ̥';">?</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;"><span style="font-family:'宋体';"></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">格式：类型标识符&nbsp;<span style="font-family:'ˎ̥';">&amp;</span><span style="font-family:'宋体';">函数名（形参列表及类型说明）</span><span style="font-family:'ˎ̥';">{&nbsp;//</span><span style="font-family:'宋体';">函数体&nbsp;</span><span style="font-family:'ˎ̥';">}</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">好处：在内存中不产生被返回值的副本；（注意：正是因为这点原因，所以返回一个局部变量的引用是不可取的。因为随着该局部变量生存期的结束，相应的引用也会失效，产生<span style="font-family:'ˎ̥';">runtime&nbsp;error!&nbsp;<br></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);"><span style="font-family:'ˎ̥';"></span><span style="font-family:'宋体';">注意事项：</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">1</span><span style="font-family:'宋体';">）不能返回局部变量的引用。这条可以参照</span><span style="font-family:'ˎ̥';">Effective&nbsp;C++[1]</span><span style="font-family:'宋体';">的</span><span style="font-family:'ˎ̥';">Item&nbsp;31</span><span style="font-family:'宋体';">。主要原因是局部变量会在函数返回后被销毁，因此被返回的引用就成为了</span><span style="font-family:'ˎ̥';">"</span><span style="font-family:'宋体';">无所指</span><span style="font-family:'ˎ̥';">"</span><span style="font-family:'宋体';">的引用，程序会进入未知状态。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">2</span><span style="font-family:'宋体';">）不能返回函数内部</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">分配的内存的引用。这条可以参照</span><span style="font-family:'ˎ̥';">Effective&nbsp;C++[1]</span><span style="font-family:'宋体';">的</span><span style="font-family:'ˎ̥';">Item&nbsp;31</span><span style="font-family:'宋体';">。虽然不存在局部变量的被动销毁问题，可对于这种情况（返回函数内部</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">分配内存的引用），又面临其它尴尬局面。例如，被函数返回的引用只是作为一个临时变量出现，而没有被赋予一个实际的变量，那么这个引用所指向的空间（由</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">分配）就无法释放，造成</span><span style="font-family:'ˎ̥';">memory&nbsp;leak</span><span style="font-family:'宋体';">。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">3</span><span style="font-family:'宋体';">）可以返回类成员的引用，但最好是</span><span style="font-family:'ˎ̥';">const</span><span style="font-family:'宋体';">。这条原则可以参照</span><span style="font-family:'ˎ̥';">Effective&nbsp;C++[1]</span><span style="font-family:'宋体';">的</span><span style="font-family:'ˎ̥';">Item&nbsp;30</span><span style="font-family:'宋体';">。主要原因是当对象的属性是与某种业务规则（</span><span style="font-family:'ˎ̥';">business&nbsp;rule</span><span style="font-family:'宋体';">）相关联的时候，其赋值常常与某些其它属性或者对象的状态有关，因此有必要将赋值操作封装在一个业务规则当中。如果其它对象可以获得该属性的非常量引用（或指针），那么对该属性的单纯赋值就会破坏业务规则的完整性。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">4</span><span style="font-family:'宋体';">）流操作符重载返回值申明为</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">引用</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">的作用：</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">流操作符<span style="font-family:'ˎ̥';">&lt;&lt;</span><span style="font-family:'宋体';">和</span><span style="font-family:'ˎ̥';">&gt;&gt;</span><span style="font-family:'宋体';">，这两个操作符常常希望被连续使用，例如：</span><span style="font-family:'ˎ̥';">cout&nbsp;&lt;&lt;&nbsp;"hello"&nbsp;&lt;&lt;&nbsp;endl;</span><span style="font-family:'宋体';">　因此这两个操作符的返回值应该是一个仍然支持这两个操作符的流引用。可选的其它方案包括：返回一个流对象和返回一个流对象指针。但是对于返回一个流对象，程序必须重新（拷贝）构造一个新的流对象，也就是说，连续的两个</span><span style="font-family:'ˎ̥';">&lt;&lt;</span><span style="font-family:'宋体';">操作符实际上是针对不同对象的！这无法让人接受。对于返回一个流指针则不能连续使用</span><span style="font-family:'ˎ̥';">&lt;&lt;</span><span style="font-family:'宋体';">操作符。因此，返回一个流对象引用是惟一选择。这个唯一选择很关键，它说明了引用的重要性以及无可替代性，也许这就是</span><span style="font-family:'ˎ̥';">C++</span><span style="font-family:'宋体';">语言中引入引用这个概念的原因吧。&nbsp;<br></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);"><span style="font-family:'宋体';">赋值操作符</span><span style="font-family:'ˎ̥';">=</span><span style="font-family:'宋体';">。这个操作符象流操作符一样，是可以连续使用的，例如：</span><span style="font-family:'ˎ̥';">x&nbsp;=&nbsp;j&nbsp;=&nbsp;10;</span><span style="font-family:'宋体';">或者</span><span style="font-family:'ˎ̥';">(x=10)=100;</span><span style="font-family:'宋体';">赋值操作符的返回值必须是一个左值，以便可以被继续赋值。因此引用成了这个操作符的惟一返回值选择。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">＃<span style="font-family:'ˎ̥';">include&lt;iostream.h&gt;</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">int&nbsp;&amp;put(int&nbsp;n);</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">int&nbsp;vals[10];</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">int&nbsp;error=-1;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">void&nbsp;main()</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">{</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">put(0)=10;&nbsp;//<span style="font-family:'宋体';">以</span><span style="font-family:'ˎ̥';">put(0)</span><span style="font-family:'宋体';">函数值作为左值，等价于</span><span style="font-family:'ˎ̥';">vals[0]=10;&nbsp;</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">put(9)=20;&nbsp;//<span style="font-family:'宋体';">以</span><span style="font-family:'ˎ̥';">put(9)</span><span style="font-family:'宋体';">函数值作为左值，等价于</span><span style="font-family:'ˎ̥';">vals[9]=20;&nbsp;</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">cout&lt;&lt;vals[0];&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">cout&lt;&lt;vals[9];</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">}&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">int&nbsp;&amp;put(int&nbsp;n)</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">{</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">if&nbsp;(n&gt;=0&nbsp;&amp;&amp;&nbsp;n&lt;=9&nbsp;)&nbsp;return&nbsp;vals[n];&nbsp;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">else&nbsp;{&nbsp;cout&lt;&lt;"subscript&nbsp;error";&nbsp;return&nbsp;error;&nbsp;}</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">}</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);">（<span style="font-family:'ˎ̥';">5</span><span style="font-family:'宋体';">）在另外的一些操作符中，却千万不能返回引用：</span><span style="font-family:'ˎ̥';">+-*/&nbsp;</span><span style="font-family:'宋体';">四则运算符。它们不能返回引用，</span><span style="font-family:'ˎ̥';">Effective&nbsp;C++[1]</span><span style="font-family:'宋体';">的</span><span style="font-family:'ˎ̥';">Item23</span><span style="font-family:'宋体';">详细的讨论了这个问题。主要原因是这四个操作符没有</span><span style="font-family:'ˎ̥';">side&nbsp;effect</span><span style="font-family:'宋体';">，因此，它们必须构造一个对象作为返回值，可选的方案包括：返回一个对象、返回一个局部变量的引用，返回一个</span><span style="font-family:'ˎ̥';">new</span><span style="font-family:'宋体';">分配的对象的引用、返回一个静态对象引用。根据前面提到的引用作为返回值的三个规则，第</span><span style="font-family:'ˎ̥';">2</span><span style="font-family:'宋体';">、</span><span style="font-family:'ˎ̥';">3</span><span style="font-family:'宋体';">两个方案都被否决了。静态对象的引用又因为</span><span style="font-family:'ˎ̥';">((a+b)&nbsp;==&nbsp;(c+d))</span><span style="font-family:'宋体';">会永远为</span><span style="font-family:'ˎ̥';">true</span><span style="font-family:'宋体';">而导致错误。所以可选的只剩下返回一个对象了。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(0,0,0);"><span style="font-family:'宋体';"></span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t10"></a><a name="t11" style="color:rgb(202,0,0);"></a><span style="font-size:32px;color:rgb(255,0,0);">11</span><span style="font-size:32px;color:rgb(255,0,0);"><span style="font-family:'宋体';">、结构与联合有和区别？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;"></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">(1).&nbsp;<span style="font-family:'宋体';">结构和联合都是由多个不同的数据类型成员组成</span><span style="font-family:'ˎ̥';">,&nbsp;</span><span style="font-family:'宋体';">但在任何同一时刻</span><span style="font-family:'ˎ̥';">,&nbsp;</span><span style="font-family:'宋体';">联合中只存放了一个被选中的成员（所有成员共用一块地址空间）</span><span style="font-family:'ˎ̥';">,&nbsp;</span><span style="font-family:'宋体';">而结构的所有成员都存在（不同成员的存放地址不同）。&nbsp;</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">(2).&nbsp;<span style="font-family:'宋体';">对于联合的不同成员赋值</span><span style="font-family:'ˎ̥';">,&nbsp;</span><span style="font-family:'宋体';">将会对其它成员重写</span><span style="font-family:'ˎ̥';">,&nbsp;</span><span style="font-family:'宋体';">原来成员的值就不存在了</span><span style="font-family:'ˎ̥';">,&nbsp;</span><span style="font-family:'宋体';">而对于结构的不同成员赋值是互不影响的。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t11"></a><a name="t12" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">12<span style="font-family:'宋体';">、</span>试写出程序结果：</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">int&nbsp;&nbsp;a=4;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">int&nbsp;&nbsp;&amp;f(int&nbsp;&nbsp;x)</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">{&nbsp;&nbsp;&nbsp;&nbsp;a=a+x;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;a;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">}</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">int&nbsp;main(void)</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">{&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;t=5;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;f(t)&lt;&lt;endl;&nbsp;&nbsp;a&nbsp;=&nbsp;9</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;f(t)=20;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;20</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;f(t)&lt;&lt;endl;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;5,a&nbsp;=&nbsp;20&nbsp;&nbsp;a&nbsp;=&nbsp;25</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t=f(t);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;30&nbsp;t&nbsp;=&nbsp;30</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">&nbsp;&nbsp;&nbsp;&nbsp;cout&lt;&lt;f(t)&lt;&lt;endl;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;=&nbsp;60</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;">}</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t12"></a><a name="t13" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">&nbsp;13</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">重载（</span><span style="font-family:'ˎ̥';">overload)</span><span style="font-family:'宋体';">和重写</span><span style="font-family:'ˎ̥';">(overried</span><span style="font-family:'宋体';">，有的书也叫做</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">覆盖</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">）的区别？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">常考的题目。从定义上来说：</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">重载：是指允许存在多个同名函数，而这些函数的参数表不同（或许参数个数不同，或许参数类型不同，或许两者都不同）。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">重写：是指子类重新定义父类虚函数的方法。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">从实现原理上来说：</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">重载：编译器根据函数不同的参数表，对同名函数的名称做修饰，然后这些同名函数就成了不同的函数（至少对于编译器来说是这样的）。如，有两个同名函数：<span style="font-family:'ˎ̥';">function&nbsp;func(p:integer):integer;</span><span style="font-family:'宋体';">和</span><span style="font-family:'ˎ̥';">function&nbsp;func(p:string):integer;</span><span style="font-family:'宋体';">。那么编译器做过修饰后的函数名称可能是这样的：</span><span style="font-family:'ˎ̥';">int_func</span><span style="font-family:'宋体';">、</span><span style="font-family:'ˎ̥';">str_func</span><span style="font-family:'宋体';">。对于这两个函数的调用，在编译器间就已经确定了，是静态的。也就是说，它们的地址在编译期就绑定了（早绑定），因此，重载和多态无关！</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">重写：和多态真正相关。当子类重新定义了父类的虚函数后，父类指针根据赋给它的不同的子类指针，动态的调用属于子类的该函数，这样的函数调用在编译期间是无法确定的（调用的子类的虚函数的地址无法给出）。因此，这样的函数地址是在运行期绑定的（晚绑定）。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">&nbsp;&nbsp;</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t13"></a><a name="t14" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">&nbsp;14</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">有哪几种情况只能用</span><span style="font-family:'ˎ̥';">intialization&nbsp;list&nbsp;</span><span style="font-family:'宋体';">而不能用</span><span style="font-family:'ˎ̥';">assignment?</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">答案：当类中含有<span style="font-family:'ˎ̥';">const</span><span style="font-family:'宋体';">、</span><span style="font-family:'ˎ̥';">reference&nbsp;</span><span style="font-family:'宋体';">成员变量；基类的构造函数都需要初始化表。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t14"></a><a name="t15" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">15</span><span style="font-size:32px;color:rgb(255,0,0);">.&nbsp;C++<span style="font-family:'宋体';">是不是类型安全的？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">答案：不是。两个不同类型的指针之间可以强制转换（用<span style="font-family:'ˎ̥';">reinterpret&nbsp;cast)</span><span style="font-family:'宋体';">。</span><span style="font-family:'ˎ̥';">C#</span><span style="font-family:'宋体';">是类型安全的。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t15"></a><a name="t16" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">16</span><span style="font-size:32px;color:rgb(255,0,0);">.&nbsp;main&nbsp;<span style="font-family:'宋体';">函数执行以前，还会执行什么代码？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">答案：全局对象的构造函数会在<span style="font-family:'ˎ̥';">main&nbsp;</span><span style="font-family:'宋体';">函数之前执行。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t16"></a><a name="t17" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">17</span><span style="font-size:32px;color:rgb(255,0,0);">.&nbsp;<span style="font-family:'宋体';">描述内存分配方式以及它们的区别</span><span style="font-family:'ˎ̥';">?</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">1<span style="font-family:'宋体';">）&nbsp;从静态存储区域分配。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量，</span><span style="font-family:'ˎ̥';">static&nbsp;</span><span style="font-family:'宋体';">变量。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">2<span style="font-family:'宋体';">）&nbsp;在栈上创建。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">3<span style="font-family:'宋体';">）&nbsp;从堆上分配，亦称动态内存分配。程序在运行的时候用</span><span style="font-family:'ˎ̥';">malloc&nbsp;</span><span style="font-family:'宋体';">或</span><span style="font-family:'ˎ̥';">new&nbsp;</span><span style="font-family:'宋体';">申请任意多少的内存，程序员自己负责在何时用</span><span style="font-family:'ˎ̥';">free&nbsp;</span><span style="font-family:'宋体';">或</span><span style="font-family:'ˎ̥';">delete&nbsp;</span><span style="font-family:'宋体';">释放内存。动态内存的生存期由程序员决定，使用非常灵活，但问题也最多。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t17"></a><a name="t18" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">&nbsp;18</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">分别写出</span><span style="font-family:'ˎ̥';">BOOL,int,float,</span><span style="font-family:'宋体';">指针类型的变量</span><span style="font-family:'ˎ̥';">a&nbsp;</span><span style="font-family:'宋体';">与</span><span style="font-family:'ˎ̥';">“</span><span style="font-family:'宋体';">零</span><span style="font-family:'ˎ̥';">”</span><span style="font-family:'宋体';">的比较语句。</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">答案：</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">BOOL&nbsp;:&nbsp;if&nbsp;(&nbsp;!a&nbsp;)&nbsp;or&nbsp;if(a)</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">int&nbsp;:&nbsp;if&nbsp;(&nbsp;a&nbsp;==&nbsp;0)</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">float&nbsp;:&nbsp;const&nbsp;EXPRESSION&nbsp;EXP&nbsp;=&nbsp;0.000001</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">if&nbsp;(&nbsp;a&nbsp;&lt;&nbsp;EXP&nbsp;&amp;&amp;&nbsp;a&nbsp;&gt;-EXP)</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">pointer&nbsp;:&nbsp;if&nbsp;(&nbsp;a&nbsp;!=&nbsp;NULL)&nbsp;or&nbsp;if(a&nbsp;==&nbsp;NULL)</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t18"></a><a name="t19" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">19</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">请说出</span><span style="font-family:'ˎ̥';">const</span><span style="font-family:'宋体';">与</span><span style="font-family:'ˎ̥';">#define&nbsp;</span><span style="font-family:'宋体';">相比，有何优点？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">答案：</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">c</span><span style="font-size:18px;color:rgb(0,0,0);">onst<span style="font-family:'宋体';">作用：定义常量、修饰函数参数、修饰函数返回值三个作用。被</span><span style="font-family:'ˎ̥';">Const</span><span style="font-family:'宋体';">修饰的东西都受到强制保护，可以预防意外的变动，能提高程序的健壮性。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">1<span style="font-family:'宋体';">）&nbsp;</span><span style="font-family:'ˎ̥';">const&nbsp;</span><span style="font-family:'宋体';">常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">2<span style="font-family:'宋体';">）&nbsp;有些集成化的调试工具可以对</span><span style="font-family:'ˎ̥';">const&nbsp;</span><span style="font-family:'宋体';">常量进行调试，但是不能对宏常量进行调试。</span></span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t19"></a><a name="t20" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(255,0,0);">20</span><span style="font-size:32px;color:rgb(255,0,0);">.<span style="font-family:'宋体';">简述数组与指针的区别？</span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">(1)<span style="font-family:'宋体';">修改内容上的差别</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">char&nbsp;a[]&nbsp;=&nbsp;“hello”;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">a[0]&nbsp;=&nbsp;‘X’;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">char&nbsp;*p&nbsp;=&nbsp;“world”;&nbsp;//&nbsp;<span style="font-family:'宋体';">注意</span><span style="font-family:'ˎ̥';">p&nbsp;</span><span style="font-family:'宋体';">指向常量字符串</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">p[0]&nbsp;=&nbsp;‘X’;&nbsp;//&nbsp;<span style="font-family:'宋体';">编译器不能发现该错误，运行时错误</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">(2)&nbsp;<span style="font-family:'宋体';">用运算符</span><span style="font-family:'ˎ̥';">sizeof&nbsp;</span><span style="font-family:'宋体';">可以计算出数组的容量（字节数）。</span><span style="font-family:'ˎ̥';">sizeof(p),p&nbsp;</span><span style="font-family:'宋体';">为指针得到的是一个指针变量的字节数，而不是</span><span style="font-family:'ˎ̥';">p&nbsp;</span><span style="font-family:'宋体';">所指的内存容量。</span><span style="font-family:'ˎ̥';">C++/C&nbsp;</span><span style="font-family:'宋体';">语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">char&nbsp;a[]&nbsp;=&nbsp;"hello&nbsp;world";</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">char&nbsp;*p&nbsp;=&nbsp;a;</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">cout&lt;&lt;&nbsp;sizeof(a)&nbsp;&lt;&lt;&nbsp;endl;&nbsp;//&nbsp;12&nbsp;<span style="font-family:'宋体';">字节</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">cout&lt;&lt;&nbsp;sizeof(p)&nbsp;&lt;&lt;&nbsp;endl;&nbsp;//&nbsp;4&nbsp;<span style="font-family:'宋体';">字节</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">计算数组和指针的内存容量</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">void&nbsp;Func(char&nbsp;a[100])</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">{</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">cout&lt;&lt;&nbsp;sizeof(a)&nbsp;&lt;&lt;&nbsp;endl;&nbsp;//&nbsp;4&nbsp;<span style="font-family:'宋体';">字节而不是</span><span style="font-family:'ˎ̥';">100&nbsp;</span><span style="font-family:'宋体';">字节</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:18px;color:rgb(0,0,0);">}</span></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t20"></a><a name="t21" style="color:rgb(202,0,0);"></a><span style="color:rgb(0,0,153);"><span style="font-size:32px;">第21题： int&nbsp;(*s[10])(int)&nbsp;<span style="font-family:'宋体';">表示的是什么？</span></span></span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);"><span style="font-family:Verdana;">int&nbsp;(*s[10])(int)&nbsp;</span><span style="font-family:'宋体';">函数指针数组，每个指针指向一个</span><span style="font-family:Verdana;">int&nbsp;func(int&nbsp;param)</span><span style="font-family:'宋体';">的函数。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t21"></a><a name="t22" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第22题：栈内存与文字常量区</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="color:rgb(75,75,75);"><span style="font-family:Verdana;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size:24px;color:rgb(0,0,0);">char&nbsp;str1[]&nbsp;=&nbsp;"abc";</span></span></span><span style="font-size:24px;"><br></span><span style="font-size:24px;">　　<span style="font-family:Verdana;">char&nbsp;str2[]&nbsp;=&nbsp;"abc";</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;">　　<span style="font-family:Verdana;">const&nbsp;char&nbsp;str3[]&nbsp;=&nbsp;"abc";</span></span><span style="font-size:24px;"><br></span><span style="font-size:24px;">　　<span style="font-family:Verdana;">const&nbsp;char&nbsp;str4[]&nbsp;=&nbsp;"abc";</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;">　　<span style="font-family:Verdana;">const&nbsp;char&nbsp;*str5&nbsp;=&nbsp;"abc";</span></span><span style="font-size:24px;"><br></span><span style="font-size:24px;">　　<span style="font-family:Verdana;">const&nbsp;char&nbsp;*str6&nbsp;=&nbsp;"abc";</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;">　　<span style="font-family:Verdana;">char&nbsp;*str7&nbsp;=&nbsp;"abc";</span></span><span style="font-size:24px;"><br></span><span style="font-size:24px;">　　<span style="font-family:Verdana;">char&nbsp;*str8&nbsp;=&nbsp;"abc";</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;">　　<span style="font-family:Verdana;">cout&nbsp;&lt;&lt;&nbsp;(&nbsp;str1&nbsp;==&nbsp;str2&nbsp;)&nbsp;&lt;&lt;&nbsp;endl;</span></span><span style="font-size:24px;">//0&nbsp;&nbsp;<span style="font-family:'宋体';">分别指向各自的栈内存</span></span><span style="font-size:24px;"><br></span><span style="font-size:24px;">　　<span style="font-family:Verdana;">cout&nbsp;&lt;&lt;&nbsp;(&nbsp;str3&nbsp;==&nbsp;str4&nbsp;)&nbsp;&lt;&lt;&nbsp;endl;</span></span><span style="font-size:24px;">//0&nbsp;&nbsp;<span style="font-family:'宋体';">分别指向各自的栈内存</span></span><span style="font-size:24px;"><br></span><span style="font-size:24px;">　　<span style="font-family:Verdana;">cout&nbsp;&lt;&lt;&nbsp;(&nbsp;str5&nbsp;==&nbsp;str6&nbsp;)&nbsp;&lt;&lt;&nbsp;endl;</span></span><span style="font-size:24px;">//1<span style="font-family:'宋体';">指向文字常量区地址相同</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;">　　<span style="font-family:Verdana;">cout&nbsp;&lt;&lt;&nbsp;(&nbsp;str7&nbsp;==&nbsp;str8&nbsp;)&nbsp;&lt;&lt;&nbsp;endl;</span></span><span style="font-size:24px;">//1<span style="font-family:'宋体';">指向文字常量区地址相同</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">　　结果是：<span style="font-family:Verdana;">0&nbsp;0&nbsp;1&nbsp;1</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">　　解答：<span style="font-family:Verdana;">str1,str2,str3,str4</span><span style="font-family:'宋体';">是数组变量，它们有各自的内存空间；而</span><span style="font-family:Verdana;">str5,str6,str7,str8</span><span style="font-family:'宋体';">是指针，它们指向相同的常量区域。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t22"></a><a name="t23" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第23题：将程序跳转到指定内存地址</span></h1><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t23"></a></h1><p><span style="color:rgb(0,0,153);"><span style="font-family:'宋体';">要对绝对地址</span><span style="font-family:Verdana;">0x100000</span><span style="font-family:'宋体';">赋值，我们可以用</span><span style="font-family:Verdana;">(unsigned&nbsp;int*)0x100000&nbsp;=&nbsp;1234;</span><span style="font-family:'宋体';">那么要是想让程序跳转到绝对地址是</span><span style="font-family:Verdana;">0x100000</span><span style="font-family:'宋体';">去执行，应该怎么做？</span></span></p><p><span style="color:rgb(75,75,75);"><br></span><span style="color:rgb(75,75,75);">　<span style="color:rgb(255,0,0);">　<span style="font-family:Verdana;">*((void&nbsp;(*)(&nbsp;))0x100000&nbsp;)&nbsp;(&nbsp;);</span></span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　首先要将<span style="font-family:Verdana;">0x100000</span><span style="font-family:'宋体';">强制转换成函数指针</span><span style="font-family:Verdana;">,</span><span style="font-family:'宋体';">即</span><span style="font-family:Verdana;">:</span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　<span style="font-family:Verdana;">(void&nbsp;(*)())0x100000</span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　然后再调用它<span style="font-family:Verdana;">:</span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　<span style="font-family:Verdana;">*((void&nbsp;(*)())0x100000)();</span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　用<span style="font-family:Verdana;">typedef</span><span style="font-family:'宋体';">可以看得更直观些</span><span style="font-family:Verdana;">:</span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　<span style="font-family:Verdana;">typedef&nbsp;void(*)()&nbsp;voidFuncPtr;</span></span><span style="color:rgb(255,0,0);"><br></span><span style="color:rgb(255,0,0);">　　<span style="font-family:Verdana;">*((voidFuncPtr)0x100000)();</span></span></p><p><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t24"></a><a name="t25" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第24题：int id[sizeof(unsigned long)];这个对吗？为什么？</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br><span style="color:rgb(255,0,0);"><span style="font-size:24px;">&nbsp;答案:正确 这个 sizeof是编译时运算符，编译时就确定了&nbsp; ,可以看成和机器有关的常量。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t25"></a><a name="t26" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第25题：引用与指针有什么区别？</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br><span style="font-size:24px;color:rgb(255,0,0);">【参考答案】&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;<br>1) 引用必须被初始化，指针不必。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">2) 引用初始化以后不能被改变，指针可以改变所指的对象。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">3) 不存在指向空值的引用，但是存在指向空值的指针。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t26"></a><a name="t27" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第26题：const&nbsp; 与 #define 的比较 ，const有什么优点?</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br><span style="font-size:24px;color:rgb(255,0,0);">&nbsp;【参考答案】</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">（1） const 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误（边际效应） 。<br></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">（2）&nbsp; 有些集成化的调试工具可以对 const 常量进行调试，但是不能对宏常量进行调试。</span><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:32px;color:rgb(0,0,153);">第27题：复杂声明<span style="font-size:24px;color:rgb(255,0,0);"><br></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><u><span style="font-size:32px;"><span style="font-size:24px;">void * ( * (*fp1)(int))[10];<br></span></span></u></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><u><span style="font-size:32px;"><span style="font-size:24px;">float (*(* fp2)(int,int,int))(int);</span></span></u></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><u><span style="font-size:32px;"><span style="font-size:24px;">int (* ( * fp3)())[10]();</span></span></u></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:32px;color:rgb(0,0,153);"><span style="font-size:24px;color:rgb(255,0,0);"><u><span style="color:rgb(0,0,0);">分别表示什么意思？</span></u><br>【标准答案】&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:32px;color:rgb(0,0,153);"><span style="font-size:24px;color:rgb(255,0,0);">1.void * ( * (*fp1)(int))[10]; &nbsp;&nbsp;fp1是一个指针，指向一个函数，这个函数的参数为int型，函数的返回值是一个指针，这个指针指向一个数组，这个数组有10个元素，每个元素是一个void*型指针。</span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:32px;color:rgb(0,0,153);"><span style="font-size:24px;color:rgb(255,0,0);">2.float (*(* fp2)(int,int,int))(int); &nbsp;&nbsp;fp2是一个指针，指向一个函数，这个函数的参数为3个int型，函数的返回值是一个指针，这个指针指向一个函数，这个函数的参数为int型，函数的返回值是float型。<br><br>3.int (* ( * fp3)())[10](); &nbsp;&nbsp;fp3是一个指针，指向一个函数，这个函数的参数为空，函数的返回值是一个指针，这个指针指向一个数组，这个数组有10个元素，每个元素是一个指针，指向一个函数，这个函数的参数为空，函数的返回值是int型。<br></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t27"></a><a name="t28" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第28题：内存的分配方式有几种?</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span><span style="font-size:24px;"><span style="color:rgb(255,0,0);"><span>【参考答案】</span></span></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span><span style="font-size:24px;"><span style="color:rgb(255,0,0);"><span>一、从静态存储区域分配。内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。例如全局变量。</span></span></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span><span style="font-size:24px;"><span style="color:rgb(255,0,0);"><span>二、在栈上创建。在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</span></span></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span><span style="font-size:24px;"><span style="color:rgb(255,0,0);"><span>三、从堆上分配，亦称动态内存分配。程序在运行的时候用malloc或new申请任意多少的内存，程序员自己负责在何时用free或delete释放内存。动态内存的生存期由我们决定，使用非常灵活，但问题也最多。</span></span></span></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t28"></a><a name="t29" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第29题：基类的析构函数不是虚函数，会带来什么问题？</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">【参考答案】派生类的析构函数用不上，会造成资源的泄漏。</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><br></p><h1 style="font-family:Arial;line-height:26px;color:rgb(51,51,51);"><a name="t29"></a><a name="t30" style="color:rgb(202,0,0);"></a><a style="color:rgb(51,102,153);"></a><span style="font-size:32px;color:rgb(0,0,153);">第30题：全局变量和局部变量有什么区别？是怎么实现的？操作系统和编译器是怎么知道的？</span></h1><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">【参考答案】</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">生命周期不同：</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">全局变量随主程序创建和创建，随主程序销毁而销毁；局部变量在局部函数内部，甚至局部循环体等内部存在，退出就不存在；</span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">使用方式不同：通过声明后全局变量程序的各个部分都可以用到；局部变量只能在局部使用；分配在栈区。&nbsp;<br></span></p><p style="font-family:Arial;font-size:14px;line-height:26px;color:rgb(51,51,51);"><span style="font-size:24px;color:rgb(255,0,0);">操作系统和编译器通过内存分配的位置来知道的，全局变量分配在全局数据段并且在程序开始运行的时候被加载。局部变量则分配在堆栈里面 。</span></p><div><span style="font-size:24px;color:rgb(255,0,0);"><br></span></div></div><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p><strong>参考：</strong> <a href="https://blog.csdn.net/fakine/article/details/51321544"> c++常见面试题30道</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到github.io博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/97026882">c++常见面试题30道</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 工作相关 </category>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 拷贝构造函数和赋值运算符 和 深、浅拷贝</title>
      <link href="posts/69ac641b/"/>
      <url>posts/69ac641b/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符。最后，简单的分析了下深拷贝和浅拷贝的问题</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符。最后，简单的分析了下深拷贝和浅拷贝的问题</p><br><h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code>          <strong>编程软件：</strong>  <code>visual studio 2015</code></p><br><h2 id="拷贝构造函数和赋值运算符"><a href="#拷贝构造函数和赋值运算符" class="headerlink" title="拷贝构造函数和赋值运算符"></a>拷贝构造函数和赋值运算符</h2><p>在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用<code>delete</code>来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算。</p><pre class="line-numbers language-none"><code class="language-none">class Person&#123;public:    Person(const Person&amp; p) &#x3D; delete;    Person&amp; operator&#x3D;(const Person&amp; p) &#x3D; delete;private:    int age;    string name;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的定义的类<code>Person</code>显式的删除了拷贝构造函数和赋值运算符，在需要调用拷贝构造函数或者赋值运算符的地方，会提示_无法调用该函数，它是已删除的函数_。<br>还有一点需要注意的是，<strong>拷贝构造函数必须以引用的方式传递参数</strong>。这是因为，在值传递的方式传递给一个函数的时候，会调用拷贝构造函数生成函数的实参。如果拷贝构造函数的参数仍然是以值的方式，就会无限循环的调用下去，直到函数的栈溢出。</p><h3 id="何时调用"><a href="#何时调用" class="headerlink" title="何时调用"></a>何时调用</h3><p>拷贝构造函数和赋值运算符的行为比较相似，都是将一个对象的值复制给另一个对象；但是其结果却有些不同，拷贝构造函数使用传入对象的值生成一个新的对象的实例，而赋值运算符是将对象的值复制给一个<strong>已经存在的实例</strong>。这种区别从两者的名字也可以很轻易的分辨出来，拷贝构造函数也是一种构造函数，那么它的功能就是创建一个新的对象实例；赋值运算符是执行某种运算，将一个对象的值复制给另一个对象（已经存在的）。<strong>调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符</strong>。</p><p>调用拷贝构造函数主要有以下场景：</p><ul><li>对象作为函数的参数，以值传递的方式传给函数。　</li><li>对象作为函数的返回值，以值的方式从函数返回</li><li>使用一个对象给另一个对象<strong>初始化</strong></li></ul><p>代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造A"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"拷贝构造B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"赋值构造C"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>string name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Person <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span><span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person p<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------分割线1--------"</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p1 <span class="token operator">=</span> p<span class="token punctuation">;</span>     <span class="token comment">// 1</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&amp;p1:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>p1 <span class="token operator">&lt;&lt;</span> <span class="token string">"   &amp;p:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------分割线2--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p2<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------分割线3--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p2 <span class="token operator">=</span> p<span class="token punctuation">;</span>           <span class="token comment">// 2 </span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------分割线4--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3 </span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------分割线5--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>p2 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4 </span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------分割线6--------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Person p3 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中定义了一个类<code>Person</code>，显式的定义了拷贝构造函数和赋值运算符。然后定义了两个函数:<code>f</code>，以值的方式参传入Person对象；<code>f1</code>，以值的方式返回Person对象。在<code>main</code>中模拟了5中场景，测试调用的是拷贝构造函数还是赋值运算符。执行结果如下：<br><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190723190437.png"/ loading="lazy"></p><p><strong>分析如下：</strong></p><ol><li>这是虽然使用了”=”，但是实际上使用对象p来创建一个新的对象p1。也就是产生了新的对象，所以调用的是拷贝构造函数。</li><li>首先声明一个对象p2，然后使用赋值运算符”=”，将p的值复制给p2，显然是调用赋值运算符，为一个已经存在的对象赋值 。</li><li>以值传递的方式将对象p2传入函数f内，调用拷贝构造函数构建一个函数f可用的实参。</li><li>这条语句拷贝构造函数和赋值运算符都调用了。函数f1以值的方式返回一个Person对象，在返回时会调用拷贝构造函数创建一个临时对象tmp作为返回值；返回后调用赋值运算符将临时对象tmp赋值给p2.</li><li>按照4的解释，应该是首先调用拷贝构造函数创建临时对象；然后再调用拷贝构造函数使用刚才创建的临时对象创建新的对象p3，也就是会调用两次拷贝构造函数。不过，编译器也没有那么傻，应该是直接调用拷贝构造函数使用返回值创建了对象p3。</li></ol><br><h3 id="深拷贝、浅拷贝"><a href="#深拷贝、浅拷贝" class="headerlink" title="深拷贝、浅拷贝"></a>深拷贝、浅拷贝</h3><p>说到拷贝构造函数，就不得不提深拷贝和浅拷贝。通常，默认生成的拷贝构造函数和赋值运算符，只是简单的进行值的复制。例如：上面的<code>Person</code>类，字段只有<code>int</code>和<code>string</code>两种类型，这在拷贝或者赋值时进行值复制创建的出来的对象和源对象也是没有任何关联，对源对象的任何操作都不会影响到拷贝出来的对象。反之，假如<code>Person</code>有一个对象为<code>int *</code>，这时在拷贝时还只是进行值复制，那么创建出来的<code>Person</code>对象的<code>int *</code>的值就和源对象的<code>int *</code>指向的是同一个位置。任何一个对象对该值的修改都会影响到另一个对象，这种情况就是浅拷贝。</p><p>深拷贝和浅拷贝主要是针对类中的<strong>指针</strong>和<strong>动态分配的空间</strong>来说的，因为对于指针只是简单的值复制并不能分割开两个对象的关联，任何一个对象对该指针的操作都会影响到另一个对象。这时候就需要提供自定义的<strong>深拷贝</strong>的拷贝构造函数，消除这种影响。通常的原则是：</p><ul><li>含有指针类型的成员或者有动态分配内存的成员都应该提供自定义的拷贝构造函数</li><li>在提供拷贝构造函数的同时，还应该考虑实现自定义的赋值运算符</li></ul><p>对于拷贝构造函数的实现要确保以下几点：</p><ul><li>对于值类型的成员进行值复制</li><li>对于指针和动态分配的空间，在拷贝中应重新分配分配空间</li><li>对于基类，要调用基类合适的拷贝方法，完成基类的拷贝</li></ul><br><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>拷贝构造函数和赋值运算符的行为比较相似，却产生不同的结果；拷贝构造函数使用已有的对象创建一个新的对象，赋值运算符是将一个对象的值复制给另一个已存在的对象。区分是调用拷贝构造函数还是赋值运算符，主要是否有新的对象产生。</li><li>关于深拷贝和浅拷贝。当类有指针成员或有动态分配空间，都应实现自定义的拷贝构造函数。提供了拷贝构造函数，最后也实现赋值运算符。</li></ul><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p><strong>参考一：</strong>  <a href="https://www.cnblogs.com/wangguchangqing/p/6141743.html">C++ 拷贝构造函数和赋值运算符</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/97022362">C++ 拷贝构造函数和赋值运算符 和 深、浅拷贝</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++设计模式（8大设计原则、23种设计模式）李建忠</title>
      <link href="posts/cb5567e8/"/>
      <url>posts/cb5567e8/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  <strong>c++ 设计模式（8大设计原则、23中设计模式）李建忠</strong>  <strong>笔记总结</strong> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        <strong>c++ 设计模式（8大设计原则、23中设计模式）李建忠</strong>  <strong>笔记总结</strong> </p><br><h2 id="重新认识面向对象"><a href="#重新认识面向对象" class="headerlink" title="重新认识面向对象"></a>重新认识面向对象</h2><blockquote><p>理解隔离变化</p></blockquote><ul><li>从宏观层面来看，面向对象的构建方式更能适应软件的变化，</li><li>能将变化所带来的影响减为最小</li></ul><blockquote><p>各司其职</p></blockquote><ul><li>从微观层面来看，面向对更强调各个类的“责任”</li><li>由于需求变化导致的新增天=个应该影响原来类型的实现是所谓各负其责</li></ul><blockquote><p>对象是什么？</p></blockquote><ul><li>从语言实现层面来看，对象封装了代码和数据.</li><li>从规格层面讲，对象是一系列可被使用的公共接口。</li><li>从概念层面讲，对象是某种拥有责任的抽象。</li></ul><br><h2 id="面向对象设计原则（一共八种）"><a href="#面向对象设计原则（一共八种）" class="headerlink" title="面向对象设计原则（一共八种）"></a>面向对象设计原则（一共八种）</h2><p><strong>面向对象设计原则（1）</strong></p><p>依赖倒置原则（DIP）</p><ul><li><p>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）。</p></li><li><p>抽象（稳定）不应该依赖于变化），实现细节应该依赖于抽象（稳定）。</p></li></ul> <br><p><strong>面向对象设计原则（2）</strong></p><p>开放封闭原则（OCP）</p><ul><li><p>对扩展开放，对更改封闭。</p></li><li><p>类模块应该是可扩展的，但是不可修改。</p></li></ul> <br><p><strong>面向对象设计原则（3）</strong></p><p>单一职责原则（SRP）</p><ul><li><p>一个类应该仅有一个引起它变化的原因。</p></li><li><p>变化的方向隐含着类的责任。</p></li></ul> <br><p><strong>面向对象设计原则（4）</strong></p><p>Liskov 替换原则（LSP）</p><ul><li><p>子类必须能够替换它们的基类（IS-A）。</p></li><li><p>继承表达类型抽象。</p></li></ul> <br><p><strong>面向对象设计原则（5）</strong></p><p>接口隔离原则（ISP）</p><ul><li><p>不应该强迫客户程序依赖它们不用的方法。</p></li><li><p>接口应该小而完备。</p></li></ul> <br><p><strong>面向对象设计原则（6）</strong></p><p>优先使用对象组合，而不是类继承</p><ul><li><p>类继承通常为“白箱复用”，对象组合通常为“黑箱复用”</p></li><li><p>继承在某种程度上破坏了封装性，子类父类耦合度高。</p></li><li><p>而对象组合则只要求被组合的对象具有良好定义的接口，度低。</p></li></ul> <br><p><strong>面向对象设计原则（7）</strong></p><p>封装变化点</p><ul><li>使用封装来创建对象之间的分界层，让设计者可以在分界的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li></ul> <br><p> <strong>面向对象设计原则（8）</strong></p><p>针对接口编程，而不是针对实现编程</p><ul><li><p>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</p></li><li><p>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</p></li><li><p>减少系统中各部分的依赖关系，从而实现“高内聚、松耦合”的类型设计方案。</p></li></ul> <br><p><font color=#D0087E size=4 face="幼圆"><strong>面向接口设计</strong></font> </p><p><font color=#D0087E size=4 face="幼圆"><strong>产业强盛的标志</strong></font> </p><p><font color=#D0087E size=4 face="幼圆"><strong>接口标准化！</strong></font> </p><br><h2 id="将设计原则提升为设计经验"><a href="#将设计原则提升为设计经验" class="headerlink" title="将设计原则提升为设计经验"></a>将设计原则提升为设计经验</h2><blockquote><p><strong>1.设计习语Design Idioms</strong></p></blockquote><ul><li>Design Idioms 描述与特定编程语言相关的低层模式，技巧，</li></ul><p>惯用法。</p><blockquote><p><strong>2.设计模式 Design Patterns</strong></p></blockquote><ul><li>Design Patterns主要描述的是“类与相互通信的对象之间的组织关系，包括它们的角色、职责、协作方式等方面。</li></ul><blockquote><p><strong>3.架构模式 Architectural Patterns</strong></p></blockquote><ul><li>Architectural Patterns描述系统中与基本结构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们之间关系的规则。</li></ul><h2 id="C-设计模式（一共23种）"><a href="#C-设计模式（一共23种）" class="headerlink" title="C++设计模式（一共23种）"></a>C++设计模式（一共23种）</h2><p>可参考：<a href="https://blog.csdn.net/westbrookliu/article/details/83927107">https://blog.csdn.net/westbrookliu/article/details/83927107</a></p><p>视频分享: 链接: <a href="https://pan.baidu.com/s/18TNLx5-jWfABmRWWThjksQ">https://pan.baidu.com/s/18TNLx5-jWfABmRWWThjksQ</a> 提取码: j0j1</p><p><font color=#FE7207  size=4 face="幼圆">代码复用（C++面向对象是指 编译层面（单位的）的）；而不是指代码的粘贴复制。 </font> </p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/96919800#_158">c++设计模式（8大设计原则、23种设计模式）李建忠</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - 底层原理、思想架构 </category>
          
          <category> 学习 - 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt的`emit`发射（信号）、`signals`信号、`slot`槽的使用</title>
      <link href="posts/c9af7638/"/>
      <url>posts/c9af7638/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong>  讲解Qt的<code>emit</code>发射（信号）、<code>signals</code>信号、<code>slot</code>槽的使用</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        讲解Qt的<code>emit</code>发射（信号）、<code>signals</code>信号、<code>slot</code>槽的使用</p><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><p>参考：<a href="https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/index.html">https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/index.html</a></p><p>信号和槽机制是 QT 的核心机制，要精通 QT 编程就必须对信号和槽有所了解。信号和槽是一种高级接口，应用于对象之间的通信，它是 QT 的核心特性，也是 QT 区别于其它工具包的重要地方。信号和槽是 QT 自行定义的一种通信机制，它独立于标准的 C/C++ 语言，因此要正确的处理信号和槽，必须借助一个称为 moc（Meta Object Compiler）的 QT 工具，该工具是一个 C++ 预处理程序，它为高层次的事件处理自动生成所需要的附加代码。</p><p>在我们所熟知的很多 GUI 工具包中，窗口小部件 (widget) 都有一个回调函数用于响应它们能触发的每个动作，这个回调函数通常是一个指向某个函数的指针。但是，在 QT 中信号和槽取代了这些凌乱的函数指针，使得我们编写这些通信程序更为简洁明了。<strong>信号和槽能携带任意数量和任意类型的参数，他们是类型完全安全的</strong>，不会像回调函数那样产生 core dumps。</p><p>所有从 QObject 或其子类 ( 例如 Qwidget) 派生的类都能够包含信号和槽。<strong>当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不知道另一端是谁在接收这个信号</strong>。这就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，但它们是普通的对象成员函数。一个槽并不知道是否有任何信号与自己相连接。而且，对象并不了解具体的通信机制。</p><p>你可以将很多信号与单个的槽进行连接，也可以将单个的信号与很多的槽进行连接，甚至于将一个信号与另外一个信号相连接也是可能的，这时无论第一个信号什么时候发射系统都将立刻发射第二个信号。总之，信号与槽构造了一个强大的部件编程机制。</p><h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h1><p>当某个信号对其客户或所有者发生的内部状态发生改变，信号被一个对象发射。只有定义过这个信号的类及其派生类能够发射这个信号。<strong>当一个信号被发射时，与其相关联的槽将被立刻执行，就象一个正常的函数调用一样</strong>。信号 - 槽机制完全独立于任何 GUI 事件循环。只有当所有的槽返回以后发射函数（emit）才返回。<strong>如果存在多个槽与某个信号相关联，那么，当这个信号被发射时，这些槽将会一个接一个地执行，但是它们执行的顺序将会是随机的、不确定的，我们不能人为地指定哪个先执行、哪 个后执行。</strong></p><p>信号的声明是在头文件中进行的，QT 的 signals 关键字指出进入了信号声明区，随后即可声明自己的信号。例如，下面定义了三个信号：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">signals<span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">mySignalParam</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的定义中，signals 是 QT 的关键字，而非 C/C++ 的。接下来的一行 void mySignal() 定义了信号 mySignal，这个信号没有携带参数；接下来的一行 void mySignal(int x) 定义 了重名信号 mySignal，但是它携带一个整形参数，这有点类似于 C++ 中的虚函数。从形式上讲信号的声明与普通的 C++ 函数是一样的，<strong>但是信号却没有函数体定义</strong>，<strong>另外，信号的返回类型都是 void，不要指望能从信号返回什么有用信息</strong>。信号由 moc 自动产生，它们不应该在 .cpp 文件中实现。</p><h1 id="槽"><a href="#槽" class="headerlink" title="槽"></a>槽</h1><p>槽是普通的 C++ 成员函数，可以被正常调用，它们唯一的特殊性就是很多信号可以与其相关联。当与其关联的信号被发射时，这个槽就会被调用。槽可以有参数，但槽的参数不能有缺省值。既然槽是普通的成员函数，因此与其它的函数一样，它们也有存取权限。槽的存取权限决定了谁能够与其相关联。同普通的 C++ 成员函数一样，槽函数也分为三种类型，即 public slots、private slots 和 protected slots。</p><blockquote><p>public slots：在这个区内声明的槽意味着任何对象都可将信号与之相连接。这对于组件编程非常有用，你可以创建彼此互不了解的对象，将它们的信号与槽进行连接以便信息能够正确的传递。</p><p>protected slots：在这个区内声明的槽意味着当前类及其子类可以将信号与之相连接。这适用于那些槽，它们是类实现的一部分，但是其界面接口却面向外部。</p><p>private slots：在这个区内声明的槽意味着只有类自己可以将信号与之相连接。这适用于联系非常紧密的类。</p></blockquote><p>槽也能够声明为虚函数，这也是非常有用的。</p><p>槽的声明也是在头文件中进行的。例如，下面声明了三个槽：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span> slots<span class="token operator">:</span>   <span class="token keyword">void</span> <span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">mySignalParam</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>信号与槽的关联</p><p>通过调用 QObject 对象的 connect 函数来将某个对象的信号与另外一个对象的槽函数相关联，这样当发射者发射信号时，接收者的槽函数将被调用。该函数的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span> sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> signal<span class="token punctuation">,</span>                        <span class="token keyword">const</span> QObject <span class="token operator">*</span> receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> member <span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数的作用就是将发射者 sender 对象中的信号 signal 与接收者 receiver 中的 member 槽函数联系起来。当指定信号 signal 时必须使用 QT 的宏 SIGNAL()，当指定槽函数时必须使用宏 SLOT()。<strong>如果发射者与接收者属于同一个对象的话，那么在 connect 调用中接收者参数可以省略</strong>。</p><p>例如，下面定义了两个对象：标签对象 label 和滚动条对象 scroll，并将 valueChanged() 信号与标签对象的 setNum() 相关联，另外信号还携带了一个整形参数，这样标签总是显示滚动条所处位置的值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLabel     <span class="token operator">*</span>label  <span class="token operator">=</span> <span class="token keyword">new</span> QLabel<span class="token punctuation">;</span>QScrollBar <span class="token operator">*</span>scroll <span class="token operator">=</span> <span class="token keyword">new</span> QScrollBar<span class="token punctuation">;</span><span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span> scroll<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">valueChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">,</span>  <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一个信号甚至能够与另一个信号相关联，看下面的例子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyWidget</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QWidget</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">aSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    QPushButton <span class="token operator">*</span>aButton<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">MyWidget</span><span class="token operator">::</span><span class="token function">MyWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    aButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span> aButton<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">aSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的构造函数中，MyWidget 创建了一个私有的按钮 aButton，按钮的单击事件产生的信号 clicked() 与另外一个信号 aSignal() 进行了关联。这样一来，当信号 clicked() 被发射时，信号 aSignal() 也接着被发射。当然，你也可以直接将单击事件与某个私有的槽函数相关联，然后在槽中发射 aSignal() 信号，这样的话似乎有点多余。</p><p>当信号与槽没有必要继续保持关联时，我们可以使用 disconnect 函数来断开连接。其定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span> sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> signal<span class="token punctuation">,</span>                           <span class="token keyword">const</span> Object <span class="token operator">*</span> receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> member <span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数断开发射者中的信号与接收者中的槽函数之间的关联。</p><p>有三种情况必须使用 disconnect() 函数：</p><p>1、断开与某个对象相关联的任何对象。这似乎有点不可理解，事实上，当我们在某个对象中定义了一个或者多个信号，这些信号与另外若干个对象中的槽相关联，如果我们要切断这些关联的话，就可以利用这个方法，非常之简洁。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">disconnect</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span>或者myObject<span class="token operator">-></span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、断开与某个特定信号的任何关联。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">disconnect</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span>或者 myObject<span class="token operator">-></span><span class="token function">disconnect</span><span class="token punctuation">(</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、断开两个对象之间的关联。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">disconnect</span><span class="token punctuation">(</span> myObject<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> myReceiver<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span>或者myObject<span class="token operator">-></span><span class="token function">disconnect</span><span class="token punctuation">(</span>  myReceiver <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 disconnect 函数中 0 可以用作一个通配符，分别表示任何信号、任何接收对象、接收对象中的任何槽函数。但是发射者 sender 不能为 0，其它三个参数的值可以等于 0。</p><h1 id="元对象工具"><a href="#元对象工具" class="headerlink" title="元对象工具"></a>元对象工具</h1><p>元对象编译器 moc（meta object compiler）对 C++ 文件中的类声明进行分析并产生用于初始化元对象的 C++ 代码，元对象包含全部信号和槽的名字以及指向这些函数的指针。</p><p>moc 读 C++ 源文件，如果发现有 Q_OBJECT 宏声明的类，它就会生成另外一个 C++ 源文件，这个新生成的文件中包含有该类的元对象代码。例如，假设我们有一个头文件 mysignal.h，在这个文件中包含有信号或槽的声明，那么在编译之前 moc 工具就会根据该文件自动生成一个名为 mysignal.moc.h 的 C++ 源文件并将其提交给编译器；类似地，对应于 mysignal.cpp 文件 moc 工具将自动生成一个名为 mysignal.moc.cpp 文件提交给编译器。</p><p>元对象代码是 signal/slot 机制所必须的。用 moc 产生的 C++ 源文件必须与类实现一起进行编译和连接，或者用 #include 语句将其包含到类的源文件中。moc 并不扩展 #include 或者 #define 宏定义 , 它只是简单的跳过所遇到的任何预处理指令。</p><h1 id="程序样例"><a href="#程序样例" class="headerlink" title="程序样例"></a>程序样例</h1><p>这里给出了一个简单的样例程序，程序中定义了三个信号、三个槽函数，然后将信号与槽进行了关联，每个槽函数只是简单的弹出一个对话框窗口。</p><p>信号和槽函数的声明一般位于头文件中，同时在类声明的开始位置必须加上 Q_OBJECT 语句，这条语句是不可缺少的，它将告诉编译器在编译之前必须先应用 moc 工具进行扩展。关键字 signals 指出随后开始信号的声明，这里 signals 用的是复数形式而非单数，siganls 没有 public、private、protected 等属性，这点不同于 slots。另外，signals、slots 关键字是 QT 自己定义的，不是 C++ 中的关键字。</p><p>信号的声明类似于函数的声明而非变量的声明，左边要有类型，右边要有括号，如果要向槽中传递参数的话，在括号中指定每个形式参数的类型，当然，形式参数的个数可以多于一个。</p><p>关键字 slots 指出随后开始槽的声明，这里 slots 用的也是复数形式。</p><p>槽的声明与普通函数的声明一样，可以携带零或多个形式参数。既然信号的声明类似于普通 C++ 函数的声明，那么，信号也可采用 C++ 中虚函数的形式进行声明，即同名但参数不同。例如，第一次定义的 void mySignal() 没有带参数，而第二次定义的却带有参数，从这里我们可以看到 QT 的信号机制是非常灵活的。</p><p>信号与槽之间的联系必须事先用 connect 函数进行指定。如果要断开二者之间的联系，可以使用函数 disconnect。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//tsignal.h</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name">TsignalApp</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QMainWindow</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 信号声明区</span>    signals<span class="token operator">:</span>        <span class="token comment">// 声明信号 mySignal()</span>        <span class="token keyword">void</span> <span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明信号 mySignal(int)</span>        <span class="token keyword">void</span> <span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明信号 mySignalParam(int,int)</span>        <span class="token keyword">void</span> <span class="token function">mySignalParam</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 槽声明区</span>    <span class="token keyword">public</span> slots<span class="token operator">:</span>        <span class="token comment">// 声明槽函数 mySlot()</span>        <span class="token keyword">void</span> <span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明槽函数 mySlot(int)</span>        <span class="token keyword">void</span> <span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 声明槽函数 mySignalParam (int，int)</span>        <span class="token keyword">void</span> <span class="token function">mySignalParam</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//tsignal.cpp</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">TsignalApp</span><span class="token operator">::</span><span class="token function">TsignalApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 将信号 mySignal() 与槽 mySlot() 相关联</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将信号 mySignal(int) 与槽 mySlot(int) 相关联</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将信号 mySignalParam(int,int) 与槽 mySlotParam(int,int) 相关联</span>    <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">mySignalParam</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">mySlotParam</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义槽函数 mySlot()</span><span class="token keyword">void</span> <span class="token class-name">TsignalApp</span><span class="token operator">::</span><span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"Tsignal"</span><span class="token punctuation">,</span> "This is a signal<span class="token operator">/</span>slot sample withoutparameter<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义槽函数 mySlot(int)</span><span class="token keyword">void</span> <span class="token class-name">TsignalApp</span><span class="token operator">::</span><span class="token function">mySlot</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"Tsignal"</span><span class="token punctuation">,</span> "This is a signal<span class="token operator">/</span>slot sample with oneparameter<span class="token punctuation">.</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义槽函数 mySlotParam(int,int)</span><span class="token keyword">void</span> <span class="token class-name">TsignalApp</span><span class="token operator">::</span><span class="token function">mySlotParam</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"x:%d y:%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">QMessageBox</span><span class="token operator">::</span><span class="token function">about</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"Tsignal"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">TsignalApp</span><span class="token operator">::</span><span class="token function">slotFileNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 发射信号 mySignal()</span>    emit <span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发射信号 mySignal(int)</span>    emit <span class="token function">mySignal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发射信号 mySignalParam(5，100)</span>    emit <span class="token function">mySignalParam</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应注意的问题"><a href="#应注意的问题" class="headerlink" title="应注意的问题"></a><strong>应注意的问题</strong></h3><p>信号与槽机制是比较灵活的，但有些局限性我们必须了解，这样在实际的使用过程中做到有的放矢，避免产生一些错误。下面就介绍一下这方面的情况。</p><ol><li><p>信号与槽的效率是非常高的，但是同真正的回调函数比较起来，由于增加了灵活性，因此在速度上还是有所损失，当然这种损失相对来说是比较小的，通过在一台 i586-133 的机器上测试是 10 微秒（运行 Linux），可见这种机制所提供的简洁性、灵活性还是值得的。但如果我们要追求高效率的话，比如在实时系统中就要尽可能的少用这种机制。</p></li><li><p>信号与槽机制与普通函数的调用一样，如果使用不当的话，在程序执行时也有可能产生死循环。因此，在定义槽函数时一定要注意避免间接形成无限循环，即在槽中再次发射所接收到的同样信号。例如 , 在前面给出的例子中如果在 mySlot() 槽函数中加上语句 emit mySignal() 即可形成死循环。</p></li><li><p>如果一个信号与多个槽相联系的话，那么，当这个信号被发射时，与之相关的槽被激活的顺序将是随机的。</p></li><li><p><strong>宏定义不能用在 signal 和 slot 的参数中。</strong></p></li></ol><p>既然 moc 工具不扩展 #define，因此，在 signals 和 slots 中携带参数的宏就不能正确地工作，如果不带参数是可以的。例如，下面的例子中将带有参数的宏 SIGNEDNESS(a) 作为信号的参数是不合语法的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">ultrix</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SIGNEDNESS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">unsigned</span> a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SIGNEDNESS</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">)</span> a</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">class</span> <span class="token class-name">Whatever</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">someSignal</span><span class="token punctuation">(</span> <span class="token function">SIGNEDNESS</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>构造函数不能用在 signals 或者 slots 声明区域内。</strong></li></ol><p>的确，将一个构造函数放在 signals 或者 slots 区内有点不可理解，无论如何，不能将它们放在 private slots、protected slots 或者 public slots 区内。下面的用法是不合语法要求的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span> slots<span class="token operator">:</span>    <span class="token function">SomeClass</span><span class="token punctuation">(</span> QObject <span class="token operator">*</span>parent<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name <span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">QObject</span><span class="token punctuation">(</span> parent<span class="token punctuation">,</span> name <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 在槽声明区内声明构造函数不合语法</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>函数指针不能作为信号或槽的参数。</strong></li></ol><p>例如，下面的例子中将 void (<em>applyFunction)(QList</em>, void*) 作为参数是不合语法的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">someClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">public</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>applyFunction<span class="token punctuation">)</span><span class="token punctuation">(</span>QList<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不合语法</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以采用下面的方法绕过这个限制：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>ApplyFunctionType<span class="token punctuation">)</span><span class="token punctuation">(</span>QList<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">someClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">public</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span> ApplyFunctionType<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><strong>信号与槽不能有缺省参数。</strong></li></ol><p>既然 signal-&gt;slot 绑定是发生在运行时刻，那么，从概念上讲使用缺省参数是困难的。下面的用法是不合理的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">someSlot</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 x 的缺省值定义成 100，在槽函数声明中使用是错误的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li><strong>信号与槽也不能携带模板类参数。</strong></li></ol><p>如果将信号、槽声明为模板类参数的话，即使 moc 工具不报告错误，也不可能得到预期的结果。 例如，下面的例子中当信号发射时，槽函数不会被正确调用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">public</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token class-name">MyWidget</span><span class="token operator">::</span><span class="token function">setLocation</span> <span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">public</span> signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token class-name">MyObject</span><span class="token operator">::</span><span class="token function">moved</span> <span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> location<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，你可以使用 typedef 语句来绕过这个限制。如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">                      <span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> IntPair<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">public</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token class-name">MyWidget</span><span class="token operator">::</span><span class="token function">setLocation</span> <span class="token punctuation">(</span>IntPair location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">public</span> signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token class-name">MyObject</span><span class="token operator">::</span><span class="token function">moved</span> <span class="token punctuation">(</span>IntPair location<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样使用的话，你就可以得到正确的结果。</p><ol start="9"><li><strong>嵌套的类不能位于信号或槽区域内，也不能有信号或者槽。</strong></li></ol><p>例如，下面的例子中，在 class B 中声明槽 b() 是不合语法的，在信号区内声明槽 b() 也是不合语法的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> slots<span class="token operator">:</span>   <span class="token comment">// 在嵌套类中声明槽不合语法</span>        <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>signals<span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 在信号区内声明嵌套类不合语法</span>    <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li><strong>友元声明不能位于信号或者槽声明区内。</strong></li></ol><p>相反，它们应该在普通 C++ 的 private、protected 或者 public 区内进行声明。下面的例子是不合语法规范的：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">someClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QObject</span></span><span class="token punctuation">&#123;</span>    Q_OBJECT<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>signals<span class="token operator">:</span> <span class="token comment">// 信号定义区</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">ClassTemplate</span><span class="token punctuation">;</span> <span class="token comment">// 此处定义不合语法</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p><p><strong>参考一：</strong>  <a href="https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/index.html">QT的信号与槽机制介绍</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719175818.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/96829473">Qt的<code>emit</code>发射（信号）、<code>signals</code>信号、<code>slot</code>槽的使用</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人`github`某一个小仓库 [2018_01_website ]仓库里面的一些项目集合的展示</title>
      <link href="posts/a961041/"/>
      <url>posts/a961041/</url>
      
        <content type="html"><![CDATA[<p>​    <strong>简介：</strong> 个人<code>github</code>某一个小仓库 <a href="https://github.com/touwoyimuli/2018_01_website">2018_01_website 仓库里面的一些项目集合</a>的展示 。适合新手小白用来练手的一些项目。和有一定基础人的来进行进阶练习。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a><font color=#D0087E  face="幼圆">更新：</font></h2><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong> 2019-07-18 20:21:13 </font> </p><p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong> 目前一共五个小项目</font> </p><br><h1 id="2018-01-website"><a href="#2018-01-website" class="headerlink" title="2018_01_website"></a>2018_01_website</h1><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/log/20190708214213.png" loading="lazy"></p><h2 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h2><p>2018_01_website：因为当初想着按照<em><strong>年份-仓库个数-语言</strong></em>命名仓库，现在发现不便修改名称，故会一直沿用</p><p>ASP.NET、PowerBuilder 12.5、c#语言编写</p><p>网站设计一类源码仓库</p><ul><li><strong>01_ASP.NET_大学bbs论坛：</strong> bbs论坛项目项目</li><li><strong>02_ASP.NET_个人空间相册：</strong> 网站照片上传、下载文件系统</li><li><strong>03_ASP.NET_学生-教师系统：</strong> c/s、b/s架构的学生-教师系统系统</li><li><strong>04_ASP.NET_通讯录：</strong> 网站的通讯录系统</li><li><strong>05_PB_Oracle_学生教务管理系统：</strong> c/s、b/s架构的学生教务管理项目</li></ul><p><font color=#70AD47 size=4 face="幼圆"><strong>编码语言：</strong></font><img src="https://img.shields.io/badge/language-asp.net-orange.svg" loading="lazy"><img src="https://img.shields.io/badge/language-PowerBuilder-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>代码大小：</strong></font><img src="https://img.shields.io/github/languages/code-size/touwoyimuli/2019_01_Qt5_ChinessChess.svg?logo=chess" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>项目进度：</strong></font><img src="http://progressed.io/bar/100?title=completed" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>Forks分支数量：</strong></font><img src="https://img.shields.io/github/forks/touwoyimuli/2018_01_website.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>Stars星数量：</strong></font><a href="https://travis-ci.org/Alamofire/Alamofire"><img src="https://img.shields.io/github/stars/touwoyimuli/2018_01_website.svg" loading="lazy"></a></p><p><font color=#70AD47 size=4 face="幼圆"><strong>支持平台：</strong></font><img src="https://img.shields.io/conda/pn/conda-forge/qt.svg" loading="lazy"></p><br><h2 id="01-ASP-NET-大学bbs论坛"><a href="#01-ASP-NET-大学bbs论坛" class="headerlink" title="01_ASP.NET_大学bbs论坛:"></a>01_ASP.NET_大学bbs论坛:</h2><h3 id="相关文章链接："><a href="#相关文章链接：" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/80445982">项目实战：ASP.NET：C/S架构 大学BBS论坛项目（推荐★★★）</a></p><h3 id="源码说明："><a href="#源码说明：" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font><img src="https://img.shields.io/badge/language-asp.net-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">项目进度：</font><img src="http://progressed.io/bar/100?title=completed" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_01_website/tree/master/01_ASP.NET_%E5%A4%A7%E5%AD%A6bbs%E8%AE%BA%E5%9D%9B">01_ASP.NET_大学bbs论坛</a></p><p><font color=#70AD47 size=4 face="幼圆">附件说明：</font> <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/01_ASP.NET_%E5%A4%A7%E5%AD%A6bbs%E8%AE%BA%E5%9D%9B/hua_bbs%5B2018-5-25%5D.sql">数据库SQLServer 2012脚本：hua_bbs[2018-5-25].sql</a>、 <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/01_ASP.NET_%E5%A4%A7%E5%AD%A6bbs%E8%AE%BA%E5%9D%9B/ASP_NET%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91.doc">ASP_NET的大学bbs论坛程序开发.doc</a></p><h3 id="项目运行演示："><a href="#项目运行演示：" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><p><font color=#70AD47 size=4 face="幼圆">视频演示：</font> <a href="https://www.bilibili.com/video/av45528410">2018_01_ASP.NET_大学bbs论坛演示</a></p><p><font color=#FE7207  size=4 face="幼圆">b/s架构演示运行：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709034958.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035129.png" height="300" width="400"/ loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035134.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035139.png" height="300" width="400"/ loading="lazy"></p><br><h2 id="02-ASP-NET-个人空间相册"><a href="#02-ASP-NET-个人空间相册" class="headerlink" title="02_ASP.NET_个人空间相册:"></a>02_ASP.NET_个人空间相册:</h2><h3 id="相关文章链接：-1"><a href="#相关文章链接：-1" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/80445226">ASP.NET：B/S结构 个人空间相册、照片上传下载系统</a></p><h3 id="源码说明：-1"><a href="#源码说明：-1" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font><img src="https://img.shields.io/badge/language-asp.net-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">项目进度：</font><img src="http://progressed.io/bar/100?title=completed" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_01_website/tree/master/02_ASP.NET_%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4%E7%9B%B8%E5%86%8C">02_ASP.NET_个人空间相册</a></p><p><font color=#70AD47 size=4 face="幼圆">附件说明：</font> <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/02_ASP.NET_%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4%E7%9B%B8%E5%86%8C/hua.test.sql">数据库SQLServer 2012脚本：hua.test.sql</a></p><h3 id="项目运行演示：-1"><a href="#项目运行演示：-1" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><p><font color=#FE7207  size=4 face="幼圆">b/s架构演示运行：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035553.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035559.png" height="300" width="400"/ loading="lazy"></p><br><h2 id="03-ASP-NET-学生-教师系统"><a href="#03-ASP-NET-学生-教师系统" class="headerlink" title="03_ASP.NET_学生-教师系统:"></a>03_ASP.NET_学生-教师系统:</h2><h3 id="相关文章链接：-2"><a href="#相关文章链接：-2" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/80764005"><strong>项目实战： C/S 和 B/S 双架构开发 “学生-教师 管理系统”分工维护开发</strong></a></p><h3 id="源码说明：-2"><a href="#源码说明：-2" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font><img src="https://img.shields.io/badge/language-asp.net-orange.svg" loading="lazy">  <img src="https://img.shields.io/badge/language-PowerBuilder-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">项目进度：</font><img src="http://progressed.io/bar/100?title=completed" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="%5Bhttps://github.com/touwoyimuli/2018_01_website/tree/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F%5D(https://github.com/touwoyimuli/2018_01_website/tree/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F)">03_ASP.NET_学生-教师系统</a></p><p><font color=#70AD47 size=4 face="幼圆">附件说明：</font> <a href="https://github.com/touwoyimuli/2018_01_website/tree/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F/E-R%E5%9B%BE%E8%AE%BE%E8%AE%A1">E-R图设计</a>、 <a href="https://github.com/touwoyimuli/2018_01_website/tree/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F/%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90">图片素材</a>、 <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F/hua_elective%5B%E5%B8%A6%E6%95%B0%E6%8D%AE%E5%92%8C%E6%9E%B6%E6%9E%84%5D.sql">数据库SQLServer 2012：hua_elective[带数据和架构].sql</a>、</p><p>​                       <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F/hua_elective%20%E3%80%90C%EF%BC%8F%EF%BC%B3%E6%BA%90%E7%A0%81%E3%80%91.zip">hua_elective 【C／Ｓ源码】.zip</a>、 <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F/hua_elective%E3%80%90%EF%BC%A2%EF%BC%8F%EF%BC%B3%E6%BA%90%E7%A0%81%E3%80%91.zip">hua_elective【Ｂ／Ｓ源码】.zip</a>、 </p><p>​                       <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/03_ASP.NET_%E5%AD%A6%E7%94%9F-%E6%95%99%E5%B8%88%E7%B3%BB%E7%BB%9F/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E5%88%9B%E5%BB%BAMVC%E5%BA%95%E5%B1%822018-06-16_190300.wmv">使用代码生成器创建MVC底层2018-06-16_190300.wm视频</a></p><h3 id="项目运行演示：-2"><a href="#项目运行演示：-2" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><p><font color=#FE7207  size=4 face="幼圆">c/s架构演示运行：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035804.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035812.png" height="300" width="400"/ loading="lazy"></p><p><font color=#FE7207  size=4 face="幼圆">b/s架构演示运行：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035822.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709035850.png" height="300" width="400"/ loading="lazy"></p><br><h2 id="04-ASP-NET-通讯录"><a href="#04-ASP-NET-通讯录" class="headerlink" title="04_ASP.NET_通讯录:"></a>04_ASP.NET_通讯录:</h2><h3 id="相关文章链接：-3"><a href="#相关文章链接：-3" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/80445571">项目实战：ASSP.NET：通讯录</a></p><h3 id="源码说明：-3"><a href="#源码说明：-3" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font><img src="https://img.shields.io/badge/language-asp.net-orange.svg" loading="lazy">  </p><p><font color=#70AD47 size=4 face="幼圆">项目进度：</font><img src="http://progressed.io/bar/100?title=completed" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/04_ASP.NET_%E9%80%9A%E8%AE%AF%E5%BD%95/hua.mvc.zip">04_ASP.NET_通讯录</a></p><p><font color=#70AD47 size=4 face="幼圆">附件说明：</font> <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/04_ASP.NET_%E9%80%9A%E8%AE%AF%E5%BD%95/hua.mvc.sql">数据库SQLServer 2012：hua.mvc.sql</a></p><h3 id="项目运行演示：-3"><a href="#项目运行演示：-3" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><p><font color=#FE7207  size=4 face="幼圆">b/s架构演示运行：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709040324.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709040328.png" height="300" width="400"/ loading="lazy"></p><br><h2 id="05-PB-Oracle-学生教务管理系统："><a href="#05-PB-Oracle-学生教务管理系统：" class="headerlink" title="05_PB_Oracle_学生教务管理系统："></a>05_PB_Oracle_学生教务管理系统：</h2><h3 id="相关文章链接：-4"><a href="#相关文章链接：-4" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/80444737">项目实战：PB／ORACLE：C/S架构 学生成绩教务管理系统</a></p><h3 id="源码说明：-4"><a href="#源码说明：-4" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font><img src="https://img.shields.io/badge/language-PowerBuilder-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">项目进度：</font><img src="http://progressed.io/bar/100?title=completed" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_01_website/blob/master/05_PB_Oracle_%E5%AD%A6%E7%94%9F%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E6%95%99%E5%8A%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%5B%EF%BC%A3%EF%BC%8F%EF%BC%B3%E6%9E%B6%E6%9E%84%5D.zip">05_PB_Oracle_学生教务管理系统</a></p><h3 id="项目运行演示：-4"><a href="#项目运行演示：-4" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><p><font color=#FE7207  size=4 face="幼圆">c/s架构演示运行：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709040417.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709040425.png" height="300" width="400"/ loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709040433.png" height="300" width="400"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709040441.png" height="300" width="400"/ loading="lazy"></p><br><h2 id="源码说明：-5"><a href="#源码说明：-5" class="headerlink" title="源码说明："></a>源码说明：</h2><p>以上各个项目，具有相关的文档.docx或者相关的博文来解释详细的过程以及源码思路和架构的重难点</p><br><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="捐赠"><a href="#捐赠" class="headerlink" title="捐赠"></a>捐赠</h2><p>若是帮助到了你，<font color=#FE7207  size=4 face="幼圆">可以点击该项目的的<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709023321.png" height="18" width="18"/ loading="lazy">   <strong>Star</strong> 和<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709023317.png" height="18" width="18"/ loading="lazy">  <strong>Fork</strong> 的两个图标，方便抬手之间，相当点个赞，</font>手有余香。</p><p>亦可以捐助</p><br><h2 id="关于作者："><a href="#关于作者：" class="headerlink" title="关于作者："></a>关于作者：</h2><p><font color=#70AD47 size=4 face="幼圆"><strong>touwoyimuli：</strong> </font> touwoyimuli@gmai.com         <a href="https://touwoyimuli.github.io/about/">作者更多联系方式</a></p><br><h2 id="协议："><a href="#协议：" class="headerlink" title="协议："></a>协议：</h2><img src='https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709052148.jpg' width='240' height='https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709052153.jpg'/ loading="lazy"><p><font color=#70AD47 size=4 face="幼圆"><strong>touwoyimuli：</strong> </font> 博客代码基于Apache License 2.0 协议进行分发和使用，更多信息参见<a href="https://github.com/touwoyimuli/2018_01_website/blob/master/LICENSE">协议文件</a></p><img src='https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709052153.jpg' width='127' height='127'/ loading="lazy"><p><font color=#70AD47  size=4 face="幼圆"><strong>touwoyimuli：</strong> </font> 所含文章使用以下协议进行保护：<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/cn/">署名-非商业性使用-禁止演绎</a>。</p><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font>  <a href="https://blog.csdn.net/qq_33154343/article/details/96455065">个人<code>github</code>某一个小仓库 [2018_01_website ]仓库里面的一些项目集合的展示</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - ASP.NET </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人`github`某一个小仓库 [2018_02_C_CPlus]仓库里面的一些项目集合的展示</title>
      <link href="posts/765e3f0d/"/>
      <url>posts/765e3f0d/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>简介：</strong> 个人<code>github</code>某一个小仓库 <a href="https://github.com/touwoyimuli/2018_02_C_CPlus">2018_02_C_CPlus仓库里面的一些项目集合</a>的展示。适合新手小白用来练手的一些项目。和有一定基础人的来进行进阶练习。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a><font color=#D0087E  face="幼圆">更新：</font></h2><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong> 2019-07-18 20:10:43</font></p><p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong> 目前一共七个小项目</font> </p><br><h2 id="2018-02-C-CPlus："><a href="#2018-02-C-CPlus：" class="headerlink" title="2018_02_C_CPlus："></a>2018_02_C_CPlus：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/log/20190708214213.png" loading="lazy"></p><h2 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h2><p>2018-02-C/C++：因为当初想着按照<em><strong>年份-仓库个数-语言</strong></em>命名仓库，现在发现不便修改名称，故会一直沿用</p><p>亦是有用来练手的小游戏，提升c/c++的技巧与运用，c/c++小程序实例/小游戏   ： </p><ul><li><strong>01_C_socket_tcp_and_udp：</strong> 套接字、tcp、udp基于控制台的使用</li><li><strong>02_C_cmd命令操作通讯录：</strong> 手敲双向量表的，模拟cmd控制台</li><li><strong>03_winAPI_Threads：</strong> windows编程之线程的探究学习</li><li><strong>04_c_FlappyBird_and_2048：</strong> c语言变编写的<code>FlappyBird</code>和<code>2048</code>小游戏</li><li><strong>05_qt_TCP的C／S的带UI的聊天工具：</strong> 仿照QQ的单人聊天功能</li><li><strong>06_qt_qml_QQLogin：</strong> 仿照QQ的登录界面</li><li><strong>07_qt_Chat_IM_QQ：</strong> 仿照QQ的群聊功能</li></ul><br><p><font color=#70AD47 size=4 face="幼圆"><strong>编码语言：</strong></font><img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>代码大小：</strong></font><img src="https://img.shields.io/github/languages/code-size/touwoyimuli/2018_02_C_CPlus.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>Forks分支数量：</strong></font><img src="https://img.shields.io/github/forks/touwoyimuli/2018_02_C_CPlus.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆"><strong>Stars星数量：</strong></font> <img src="https://img.shields.io/github/stars/touwoyimuli/2018_02_C_CPlus.svg" loading="lazy"></p><br><h2 id="01-C-socket-tcp-and-udp："><a href="#01-C-socket-tcp-and-udp：" class="headerlink" title="01_C_socket_tcp_and_udp："></a>01_C_socket_tcp_and_udp：</h2><h3 id="相关文章链接："><a href="#相关文章链接：" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p>①<a href="https://blog.csdn.net/qq_33154343/article/details/81808722">项目实战Small example：C:Socket之TCP编程 [控制台程序]</a></p><p>②<a href="https://blog.csdn.net/qq_33154343/article/details/81809168">项目实战Small example：C:Socket之UDP编程 [控制台程序]</a></p><h3 id="源码说明："><a href="#源码说明：" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/01_C_socket_tcp_and_udp/Socket">01_C_socket_tcp_and_udp</a> </p><h3 id="项目运行演示："><a href="#项目运行演示：" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709055643.gif" height="500" width="800"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709055748.png" height="500" width="800"/ loading="lazy"><br><h2 id="02-C-cmd命令操作通讯录"><a href="#02-C-cmd命令操作通讯录" class="headerlink" title="02_C_cmd命令操作通讯录:"></a><strong>02_C_cmd命令操作通讯录:</strong></h2><h3 id="相关文章链接：-1"><a href="#相关文章链接：-1" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/79108889">项目实战：C/C++版本  “cmd 命令” 操作通讯录 (作为数据结构 双向链表 面向接口编程 练习 推荐)</a></p><h3 id="源码说明：-1"><a href="#源码说明：-1" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/02_C_cmd%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E9%80%9A%E8%AE%AF%E5%BD%95/cmd_address_book/DoubleLinkedList">02_C_cmd命令操作通讯录</a></p><h3 id="项目运行演示：-1"><a href="#项目运行演示：-1" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709061139.gif" height="450" width="700"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709061307.gif" height="450" / loading="lazy"><br><h2 id="03-winAPI-Threads"><a href="#03-winAPI-Threads" class="headerlink" title="03_winAPI_Threads:"></a>03_winAPI_Threads:</h2><h3 id="相关文章链接：-2"><a href="#相关文章链接：-2" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/71773513">c语言，用APi初次创建多线程的Winsows界面</a></p><h3 id="源码说明：-2"><a href="#源码说明：-2" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/03_winAPI_Threads/Threads">03_winAPI_Threads</a></p><h3 id="项目运行演示：-2"><a href="#项目运行演示：-2" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709061713.gif"/ loading="lazy"><br><h2 id="04-c-FlappyBird-and-2048"><a href="#04-c-FlappyBird-and-2048" class="headerlink" title="04_c_FlappyBird_and_2048:"></a>04_c_FlappyBird_and_2048:</h2><h3 id="相关文章链接：-3"><a href="#相关文章链接：-3" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p>①<a href="https://blog.csdn.net/qq_33154343/article/details/79249025">项目实战：C/C++游戏：Flappy Bird[C语言版本] </a></p><p>②<a href="https://blog.csdn.net/qq_33154343/article/details/79249403">项目实战：C/C++游戏：2048[C语言版]</a></p><h3 id="源码说明：-3"><a href="#源码说明：-3" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/04_c_FlappyBird_and_2048/FlappyBird_2048/Young%20Game%20Project">04_c_FlappyBird_and_2048</a></p><h3 id="项目运行演示：-3"><a href="#项目运行演示：-3" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709062340.gif"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709062318.gif"/ loading="lazy"><br><h2 id="05-qt-TCP的C／S的带UI的聊天工具："><a href="#05-qt-TCP的C／S的带UI的聊天工具：" class="headerlink" title="05_qt_TCP的C／S的带UI的聊天工具："></a>05_qt_TCP的C／S的带UI的聊天工具：</h2><h3 id="相关文章链接：-4"><a href="#相关文章链接：-4" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/79341062">项目实战：Qt5／C++：TCP的C/S的聊天小程序</a></p><h3 id="源码说明：-4"><a href="#源码说明：-4" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/05_qt_TCP%E7%9A%84C%EF%BC%8FS%E7%9A%84%E5%B8%A6UI%E7%9A%84%E8%81%8A%E5%A4%A9%E5%B7%A5%E5%85%B7">05_qt_TCP的C／S的带UI的聊天工具</a></p><h3 id="项目运行演示：-4"><a href="#项目运行演示：-4" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709062704.png"/ loading="lazy"><br><h2 id="06-qt-qml-QQLogin："><a href="#06-qt-qml-QQLogin：" class="headerlink" title="06_qt_qml_QQLogin："></a>06_qt_qml_QQLogin：</h2><h3 id="相关文章链接：-5"><a href="#相关文章链接：-5" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/80448144">项目实战：Qt5／Quick：模仿扣扣登录界面[小程序]</a></p><h3 id="源码说明：-5"><a href="#源码说明：-5" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/06_qt_qml_QQLogin/IM_Login">06_qt_qml_QQLogin</a></p><h3 id="项目运行演示：-5"><a href="#项目运行演示：-5" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709063539.gif"/ loading="lazy"><br><h2 id="源码说明：-6"><a href="#源码说明：-6" class="headerlink" title="源码说明："></a>源码说明：</h2><p>以上各个项目，具有相关的博文来解释详细的过程以及源码思路和架构的重难点</p><br><h2 id="07-qt-Chat-IM-QQ："><a href="#07-qt-Chat-IM-QQ：" class="headerlink" title="07_qt_Chat_IM_QQ："></a>07_qt_Chat_IM_QQ：</h2><h3 id="相关文章链接：-6"><a href="#相关文章链接：-6" class="headerlink" title="相关文章链接："></a>相关文章链接：</h3><p><a href="https://blog.csdn.net/qq_33154343/article/details/96437681">项目实战：仿QQ的QQ简洁版2019群聊项目</a></p><h3 id="源码说明：-7"><a href="#源码说明：-7" class="headerlink" title="源码说明："></a>源码说明：</h3><p><font color=#70AD47 size=4 face="幼圆">版本:</font><img src="https://img.shields.io/badge/v-1.0-brightgreen.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">编码语言：</font> <img src="https://img.shields.io/badge/language-c++-orange.svg" loading="lazy"></p><p><font color=#70AD47 size=4 face="幼圆">源码下载:</font> <a href="https://github.com/touwoyimuli/2018_02_C_CPlus/tree/master/06_qt_qml_QQLogin/IM_Login">06_qt_qml_QQLogin</a></p><h3 id="项目运行演示：-6"><a href="#项目运行演示：-6" class="headerlink" title="项目运行演示："></a>项目运行演示：</h3><p><font color=#70AD47 size=4 face="幼圆">视频演示:</font> <a href="https://www.bilibili.com/video/av59692500">仿QQ轻聊版2019群聊</a> </p><p><font color=#70AD47 size=4 face="幼圆">图片演示：</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718182159.gif" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718182237.gif" loading="lazy"></p><br><h2 id="源码说明：-8"><a href="#源码说明：-8" class="headerlink" title="源码说明："></a>源码说明：</h2><p>以上各个项目，具有相关的博文来解释详细的过程以及源码思路和架构的重难点</p><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="捐赠"><a href="#捐赠" class="headerlink" title="捐赠"></a>捐赠</h2><p>若是帮助到了你，<font color=#FE7207  size=4 face="幼圆">可以点击该项目的的<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709023321.png" height="18" width="18"/ loading="lazy">   <strong>Star</strong> 和<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709023317.png" height="18" width="18"/ loading="lazy">  <strong>Fork</strong> 的两个图标，方便抬手之间，相当点个赞，</font>手有余香。</p><p>亦可以捐助</p><br><h2 id="关于作者："><a href="#关于作者：" class="headerlink" title="关于作者："></a>关于作者：</h2><p><font color=#70AD47 size=4 face="幼圆"><strong>touwoyimuli：</strong> </font> touwoyimuli@gmai.com         <a href="https://touwoyimuli.github.io/about/">作者更多联系方式</a></p><br><h2 id="协议："><a href="#协议：" class="headerlink" title="协议："></a>协议：</h2><img src='https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709052148.jpg' width='240' height='https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709052153.jpg'/ loading="lazy"><p><font color=#70AD47 size=4 face="幼圆"><strong>touwoyimuli：</strong> </font> 博客代码基于Apache License 2.0 协议进行分发和使用，更多信息参见<a href="https://github.com/touwoyimuli/2018_02_C_CPlus/blob/master/LICENSE">协议文件</a></p><img src='https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/20190709052153.jpg' width='127' height='127'/ loading="lazy"><p><font color=#70AD47  size=4 face="幼圆"><strong>touwoyimuli：</strong> </font> 所含文章使用以下协议进行保护：<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/cn/">署名-非商业性使用-禁止演绎</a>。</p><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/96452575">个人<code>github</code>某一个小仓库 [2018_02_C_CPlus]仓库里面的一些项目集合的展示</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt项目在Linux平台上面发布成可执行程序.run</title>
      <link href="posts/d4c93202/"/>
      <url>posts/d4c93202/</url>
      
        <content type="html"><![CDATA[<p>​    <strong>简介：</strong>  <code>qt</code>项目在<code>Linux</code>平台上面发布成可执行程序<code>.run</code>，或是免安装的绿色版本、亦或者安装形式的安装包。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p> <code>qt</code>项目在<code>Linux</code>平台上面发布成可执行程序，或是免安装的绿色版本、亦或者安装形式的安装包。亲测有效。测试项目参见 <a href="https://blog.csdn.net/qq_33154343/article/details/89284983">QT5/C++项目：基于QT的跨平台网络对战象棋</a> ；</p><p><font color=#FE7207    size=4 face="幼圆"><strong>实现了QT5的项目在windows、Linux、MacOS、Android平台的发布</strong></font> </p><p><strong>更新时间 2020-05-26；</strong></p><br><h2 id="该博文系列"><a href="#该博文系列" class="headerlink" title="该博文系列:"></a>该博文系列:</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448938">qt项目在MacOS平台上面发布成可执行程序.app</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448621">qt项目在Linux平台上面发布成可执行程序.run</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448388">qt项目在Windows平台上面发布成可执行程序.exe</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/89286553">qt项目在Android平台的发布(未单独列举出来)</a> </li></ul><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>Ubuntu 16.04.5 x64 （LTS）&amp;&amp; uos v20 sp1 均成功了</code>  </p><p><strong>编程软件：</strong>   <code>Qt Creator 4.7.1 (Enterprise)</code>， <code>Qt 5.9.7</code></p><br><h2 id="项目在Linux平台发布："><a href="#项目在Linux平台发布：" class="headerlink" title="项目在Linux平台发布："></a>项目在Linux平台发布：</h2><p><strong>步骤：Linux发布免安装的运行程序</strong></p><p>（1）同样，将完整的<code>ChineseChess</code>项目在<code>Linux</code>用<code>Qt Creator</code>编译运行<code>Release</code>版本。<br>           <img src="https://img-blog.csdnimg.cn/20190413183546108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">                                        </p><p>（2）但是编译不通过，会出现两个错误提示。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">error<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> error<span class="token operator">:</span> cannot find –lGL和error<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> error<span class="token operator">:</span> collect2<span class="token operator">:</span> error<span class="token operator">:</span> ld returned <span class="token number">1</span> exit status。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原因：<strong>是这是由于 <code>Qt5.0</code> 以上的版本默认将<code>OpenGL</code>加入了工程，但是在<code>Linux</code>的机器上没有安装<code>OpenGL</code>，所以只需要在机器系统安装<code>OpenGL</code>即可，此时打开终端，运行</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo apt<span class="token operator">-</span>get install libgl1<span class="token operator">-</span>mesa<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>即可，再次编译运行。即可成功。</strong></p><p>（3）同样将生成的<code>Release</code>文件夹下<code>ChineseChess</code>文件放到一个<code>英文文件夹(eg: qwer)</code>里面.</p><br><p><strong>说明:</strong> 即是 创建一个 “qwer” 文件夹，将 <code>build-ChineseChess-unknown-Release</code> 里面的 <code>ChineseChess</code> 文件复制到 “qwer” 下， 然后创建两个空的脚本文件 <code>pack.sh</code> 和 <code>Cpack.sh</code> ;脚本内容如下</p><br><p>（4）在上一步的文件夹中新建文件pack.sh。内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh  </span><span class="token assign-left variable">exe</span><span class="token operator">=</span><span class="token string">"ChineseChess"</span> <span class="token comment">#你需要发布的程序名称</span><span class="token assign-left variable">des</span><span class="token operator">=</span><span class="token string">"/home/xmuli/Desktop/temp/qwer"</span> <span class="token comment">#创建文件夹的位置</span><span class="token assign-left variable">deplist</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>ldd $exe <span class="token operator">|</span> <span class="token function">awk</span>  '<span class="token punctuation">&#123;</span>if <span class="token punctuation">(</span>match<span class="token punctuation">(</span>$3,<span class="token string">"/"</span><span class="token punctuation">)</span><span class="token variable">)</span></span><span class="token punctuation">&#123;</span> printf<span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">)</span>,<span class="token variable">$3</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>'<span class="token punctuation">)</span>  <span class="token function">cp</span> <span class="token variable">$deplist</span> <span class="token variable">$des</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）在此目录下再新建一个ChineseChess.sh文件（文件名必须与可执行文件名字一样）， 文件内容如下（不需要修改）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh  </span><span class="token assign-left variable">appname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $0 <span class="token operator">|</span> <span class="token function">sed</span> s,<span class="token punctuation">\</span>.sh$,,<span class="token variable">`</span></span>  <span class="token assign-left variable">dirname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">dirname</span> $0<span class="token variable">`</span></span>  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;dirname<span class="token operator">#</span>?&#125;</span>"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;dirname<span class="token operator">%</span>$tmp&#125;</span>"</span> <span class="token operator">!=</span> <span class="token string">"/"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token assign-left variable">dirname</span><span class="token operator">=</span><span class="token environment constant">$PWD</span>/<span class="token variable">$dirname</span>  <span class="token keyword">fi</span>  <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$dirname</span>  <span class="token builtin class-name">export</span> LD_LIBRARY_PATH  <span class="token variable">$dirname</span>/<span class="token variable">$appname</span> <span class="token string">"<span class="token variable">$@</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）打开终端，执行命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./pack.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会自动<code>ChineseChess.sh</code>  讲所有依赖全部放入这个文件夹里面</p><p><img src="https://img-blog.csdnimg.cn/20190413183638377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>（7）将此目录打包发布即可，点击即可以执行。</p><p><img src="https://img-blog.csdnimg.cn/20190413183645406.png" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183653888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183701746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><br><h3 id="下载-系列地址："><a href="#下载-系列地址：" class="headerlink" title="下载/系列地址："></a>下载/系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a> </p><p>打包体验程序，下载地址： <a href="https://github.com/xmuli/chinessChess/releases">chinessChess</a></p><p>欢迎 star 和 fork 这个系列的 Qt / DTK 学习，附学习进阶的路线图。</p><br><h2 id="感谢："><a href="#感谢：" class="headerlink" title="感谢："></a>感谢：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt项目在MacOS平台上面发布成可执行程序.app</title>
      <link href="posts/6f46465b/"/>
      <url>posts/6f46465b/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>简介：</strong>  <code>qt</code>项目在<code>MacOS</code>平台上面发布成可执行程序<code>.app</code>，或是免安装的绿色版本、亦或者安装形式的安装包。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​         <code>qt</code>项目在<code>MacOS</code>平台上面发布成可执行程序<code>.app</code>，或是免安装的绿色版本、亦或者安装形式的安装包。亲测有效。测试项目参见 <a href="https://blog.csdn.net/qq_33154343/article/details/89284983">QT5/C++项目：基于QT的跨平台网络对战象棋</a> </p><p><font color=#FE7207    size=4 face="幼圆"><strong>实现了QT5的项目在windows、Linux、MacOS、Android平台的发布</strong></font> </p><br><h2 id="该博文系列"><a href="#该博文系列" class="headerlink" title="该博文系列:"></a>该博文系列:</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448938">qt项目在MacOS平台上面发布成可执行程序.app</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448621">qt项目在Linux平台上面发布成可执行程序.run</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448388">qt项目在Windows平台上面发布成可执行程序.exe</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/89286553">qt项目在Android平台的发布(未单独列举出来)</a> </li></ul><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p>　　<strong>💻：</strong>  <code>MacOS 10.14.6 </code> 📎 <code>Qt 5.12.8</code> 📎 <code>gcc/g++ 9.2</code> 📎 <code>gdb8.3</code> </p><br><h2 id="项目在MacOS平台发布："><a href="#项目在MacOS平台发布：" class="headerlink" title="项目在MacOS平台发布："></a>项目在MacOS平台发布：</h2><h3 id="新的方法-2020-05-22-："><a href="#新的方法-2020-05-22-：" class="headerlink" title="新的方法(2020-05-22)："></a>新的方法(2020-05-22)：</h3><p><strong>前提：</strong>  进入 <code>/Users/xmuli/Qt5.12.8/5.12.8/clang_64/bin</code> 路径下</p><ul><li>打包为 <code>*.app</code> 格式： <code>./macdeployqt /Users/xmuli/project/github/build-ChineseChess-Desktop_Qt_5_12_8_clang_64bit-Release/ChineseChess.app</code></li><li>打包为 <code>*.dmg</code> 格式： <code>./macdeployqt /Users/xmuli/project/github/build-ChineseChess-Desktop_Qt_5_12_8_clang_64bit-Release/ChineseChess.app -dmg</code></li></ul> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2020/20200522224131.png" width="50%"/ loading="lazy"><br><h3 id="旧的方法-2019-02-10"><a href="#旧的方法-2019-02-10" class="headerlink" title="旧的方法(2019-02-10):"></a>旧的方法(2019-02-10):</h3><p>（1）同样子，在<code>MacOS</code>的<code>Qt Creator</code>里面编译运行<code>Release</code>版本的<code>ChineseChess</code>项目。</p><p>（2）打开<code>build-ChineseChess-Desktop_Qt_5_9_7_clang_64bit-Release</code>文件夹。进到该目录，会看到有一个<code>ChineseChess.app</code>。这个并不是文件，而是一个目录，只是<code>OS X</code>系统看到某个目录的扩展名是<code>app</code>，就会将其认为是<code>Bundle</code>目录，所以双击会直接执行（当必须要是真正的<code>Bundle</code>）。</p><p><img src="https://img-blog.csdnimg.cn/20190413183714131.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy">                                 </p><p>（3）使用<code>QT</code>提供了一个非常方便的打包工具<code>macdeployqt</code>，该文件位于如下目录<br> <code>/Users/yuanyi/Qt5.9.7/5.9.7/clang_64/bin</code>，可以将这个目录加入到<code>PATH</code>环境变量中。这里有点复杂，（需要注意的是，<code>Unix</code>【<code>MacOS</code>就是其中一种】及类<code>Unix</code>系统里，每行结尾只有换行<code>“\n”</code>，<code>Windows</code>系统里面，每行结尾是换行+回车<code>“\n\r”</code>）。当在终端里面，将上面目录路径添加到<code>PATH</code>之后。输入一下命令在终端。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">:</span>set ff<span class="token operator">=</span>unix #转换为unix格式<span class="token operator">:</span>wq #保存、退出方可保存和退出成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（4）现在只需要执行如下的命令，系统就会自动该着<code>Bundle</code>，把相关的文件和目录都放到<code>Bundle</code>中的相关位置。命令语句如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">macdeployqt ChineseChess<span class="token punctuation">.</span>app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）处理完后，<code>Bundle</code>的目录结构发生改变，很明显，<code>macdeployqt</code>命令将相关文件和目录都放到了<code>Bundle</code>中。现在将这个处理完的<code>ChineseChess.app</code>复制到任何<code>OS X</code>系统上都可以运行了，无论安装没安装<code>QT</code>，都可以运行</p><p><img src="https://img-blog.csdnimg.cn/20190413183751297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183728437.png" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183735290.png" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183741864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><br><h3 id="下载-系列地址："><a href="#下载-系列地址：" class="headerlink" title="下载/系列地址："></a>下载/系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a> </p><p>打包体验程序，下载地址： <a href="https://github.com/xmuli/chinessChess/releases">chinessChess</a></p><p>欢迎 star 和 fork 这个系列的 Qt / DTK 学习，附学习进阶的路线图。</p><br><h2 id="本次心得总结："><a href="#本次心得总结：" class="headerlink" title="本次心得总结："></a>本次心得总结：</h2><p>将该部分从从之前的一篇之前的 <a href="https://blog.csdn.net/qq_33154343/article/details/89284983">QT5/C++项目：基于QT的跨平台网络对战象棋</a> 原创文章之中，分离开来，感觉还是比较有用一篇文章。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt项目在Windows平台上面发布成可执行程序.exe</title>
      <link href="posts/b0473cb7/"/>
      <url>posts/b0473cb7/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>简介：</strong>  <code>qt</code>项目在<code>Windows</code>平台上面发布成可执行程序<code>.exe</code>，或是免安装的绿色版本、亦或者安装形式的安装包。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​         <code>qt</code>项目在<code>Windows</code>平台上面发布成可执行程序<code>.exe</code>，或是免安装的绿色版本、亦或者安装形式的安装包。亲测有效。将该部分从从之前的一篇之前的 <a href="https://blog.csdn.net/qq_33154343/article/details/89284983">QT5/C++项目：基于QT的跨平台网络对战象棋</a> 原创文章之中，分离开来，感觉还是比较有用一篇文章。</p><p><font color=#FE7207    size=4 face="幼圆"><strong>实现了QT5的项目在windows、Linux、MacOS、Android平台的发布</strong></font> </p><br><h2 id="该博文系列"><a href="#该博文系列" class="headerlink" title="该博文系列:"></a>该博文系列:</h2><ul><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448938">qt项目在MacOS平台上面发布成可执行程序.app</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448621">qt项目在Linux平台上面发布成可执行程序.run</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/96448388">qt项目在Windows平台上面发布成可执行程序.exe</a> </li><li><a href="https://blog.csdn.net/qq_33154343/article/details/89286553">qt项目在Android平台的发布(未单独列举出来)</a> </li></ul><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code>  <code>windows7 x64 旗舰版</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.7</code></p><br><h2 id="项目在Windows平台发布："><a href="#项目在Windows平台发布：" class="headerlink" title="项目在Windows平台发布："></a>项目在Windows平台发布：</h2><p>本次发布测试的平台为<code>Windows 7 x64</code> 和 <code>Windows 10 x64</code>。</p><p>步骤：</p><p>（1）打开<code>ChineseChess</code>项目。点击<code>Qt Creator</code>左下角的运行程序，选择构建的套件为：<code>Desktop Qt 5.9.7 MinGW 32bit</code>，再构建里面选择Release版本，点击绿色三角形图案。等待程序跑起来之后，关闭掉程序。</p><p><img src="https://img-blog.csdnimg.cn/20190413183408554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>(2)打开项目文件管理器，找到生成的便以文件。然后打开路径<code>D:\programming\qt\build-ChineseChess-Desktop_Qt_5_9_7_MinGW_32bit-Release\release(这里以我的路径为例)</code>。将里面的C<code>hineseChess.exe</code>复制一份，将拷贝的程序另外保存在一个名为英文（这里我为<code>Chess</code>）的空的文件夹里里面。</p><p><img src="https://img-blog.csdnimg.cn/20190413183420239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183429782.png" alt="在这里插入图片描述" loading="lazy"></p><p>(3)双击运行<code>Qt 5.9.7 for Desktop (MinGW 5.3.0 32 bit)</code>，用cd命令进入到上一步创建的空文件夹路径（eg: <code>D:\Chess</code>）。然后运行命令</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">windeployqt<span class="token operator">+</span> 运行程序名（eg：windeployqt ChineseChess<span class="token punctuation">.</span>exe）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>,回车，将所需的库文件全都拷贝到该.exe程序的当前文件</p><p><img src="https://img-blog.csdnimg.cn/20190413183437790.png" alt="在这里插入图片描述" loading="lazy">            <img src="https://img-blog.csdnimg.cn/20190413183445970.png" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183453573.png" alt="在这里插入图片描述" loading="lazy"></p><p>(4)双击运行<code>Enigma+Virtual+Box+7.80</code>程序，在这里面，在“主程序文件名称里面”选中刚刚的拷贝版本<code>D:\Chess\ChineseChess.exe</code>。然后会自动生成输出虚拟文件名称的路径。在文件的<code>Virtual Box Files</code>里面，将上一步骤的上面。然后点击右下角的“文件选项-压缩文件”。最后一步点击右下角的打包。件夹里面生成许多库等，全选，除了<code>ChineseChess.exe</code>以外，全部拖进这里</p><p><img src="https://img-blog.csdnimg.cn/20190413183502168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p>(5)等待一分钟，生成的绿色单机版，免安装的有游戏.exe文件,放到任意一个没有任何环境的<code>windows</code>系统的都可以跑起来。不会提示那种缺少<code>xxx.dll</code>的错误提示。完美打包发布这一份作品。</p><p><img src="https://img-blog.csdnimg.cn/20190413183509128.png" alt="在这里插入图片描述" loading="lazy"><img src="https://img-blog.csdnimg.cn/20190413183515850.png" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183522403.png" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183530128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><p><img src="https://img-blog.csdnimg.cn/20190413183537181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU0MzQz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></p><br><h3 id="下载-系列地址："><a href="#下载-系列地址：" class="headerlink" title="下载/系列地址："></a>下载/系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a> </p><p>打包体验程序，下载地址： <a href="https://github.com/xmuli/chinessChess/releases">chinessChess</a></p><p>欢迎 star 和 fork 这个系列的 Qt / DTK 学习，附学习进阶的路线图。</p><br><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h2><p>因为有着热心网友的无私分享，故不辞辛苦也将自己的项目或经验整理成博客的形式，也提供给一起大家学习探讨与交流 </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目实战：仿QQ的QQ简洁版2019群聊项目</title>
      <link href="posts/a1a76867/"/>
      <url>posts/a1a76867/</url>
      
        <content type="html"><![CDATA[<p><strong>简介：</strong> 自我熟练<code>qt</code>的<code>widget</code>的使用，熟悉使用<code>qt</code>的<code>network</code>相关模块写一个仿<code>QQ</code>的<code>QQ简洁版2019</code>群聊项目。哇伊，这是我大学之处一直想写的<code>IM</code>即时通讯系统的，模仿写一个<code>QQ</code>的项目，但是因为时间等关系，断断续续的只是写了一些<code>IM_QQ</code>的部分相关功能的知识，每回写一个核心功能，但到了现在这会，感觉基本几大核心功能（登录，单人聊天，群聊功能，数据库设计）已经写好了，后续有时间，就将其完整的写成一个完整版的<code>QQ</code>。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.7</code></p><h2 id="项目简介："><a href="#项目简介：" class="headerlink" title="项目简介："></a>项目简介：</h2><p>使用<code>qt</code>实现<code>QQ</code>的核心功能之一：群聊功能。</p><p><strong>功能实现：</strong></p><ul><li><p>群聊功能</p></li><li><p>群成员上线，下线会有自动提示</p></li><li><p>群成员在线动态列表</p></li><li><p>联系人好友列表</p></li><li><p>聊天记录保存到*.txt</p></li><li><p>清空聊天界面</p></li><li><p>聊天字体的变化：字体、字号、颜色、加粗、倾斜、下划线</p></li></ul><h2 id="项目特色："><a href="#项目特色：" class="headerlink" title="项目特色："></a>项目特色：</h2><p>写这个，不仅仅是一个单独的小功能，而是在学习的前进的路上，逐步完善核心功能，最后独立写一个完整版的即时通讯IM，准备以<code>QQ</code>为参考。若是以后写出来了，是会发表称为系列博客，供大家开源学习与交流的</p><p>仿QQ项目的IM即时通讯，已经实现的相关的功能：</p><ul><li><p>QQ的单人聊天： <a href="https://blog.csdn.net/qq_33154343/article/details/79341062">项目实战：Qt5／C++：TCP的C/S的聊天小程序</a></p></li><li><p>QQ的登录界面： <a href="https://blog.csdn.net/qq_33154343/article/details/80448144">项目实战：Qt5／Quick：模仿扣扣登录界面</a></p></li><li><p>QQ的群聊功能：<a href="https://touwoyimuli.github.io/2019/07/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%BFQQ%E7%9A%84QQ%E7%AE%80%E6%B4%81%E7%89%882019%E7%BE%A4%E8%81%8A%E9%A1%B9%E7%9B%AE/">本文</a></p></li><li><p>QQ的数据库设计：已经设计好，还未整理为博客</p></li></ul><p>任重而道远，后续还有服务器的高并发等学习，为我的IM奠定基础，不慌不躁，心虽急，但是干活不可急，始终坚信:</p><p><font color=#FE7207  size=5 face="幼圆"><strong>慢而不出差错，就是快</strong></font></p><h2 id="运行效果："><a href="#运行效果：" class="headerlink" title="运行效果："></a>运行效果：</h2><p><font color=#70AD47 size=4 face="幼圆"><strong>视频演示效果：</strong></font></p><iframe width="760" height="427"  iframe src="//player.bilibili.com/player.html?aid=59692500&cid=103983658&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><font color=#70AD47 size=4 face="幼圆"><strong>图片演示效果：</strong></font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/'20190718162916.jpg" loading="lazy"></p><ul><li><strong>联系人列表：</strong></li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/'20190718162301.gif" loading="lazy"></p><ul><li><p><strong>群聊界面：</strong></p><p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/project_log/'20190718162320.gif" loading="lazy"></p></li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718171712.jpg" loading="lazy"></p><h2 id="设计思路："><a href="#设计思路：" class="headerlink" title="设计思路："></a>设计思路：</h2><ul><li>输入准备发送的消息到控件</li><li>槽函数获获取控件消息，转换换成<code>QString</code>存储</li><li>使用<code>qt</code>的<code>network</code>模块，用<code>QUdpSocket</code>发送广播，构建群聊功能</li><li>对于感兴趣的消息截取，</li><li>解析协议，获取发送的数据报的内容</li><li>再次在其它的控件显示出来</li><li>时刻更新显示</li></ul><h2 id="部分源码："><a href="#部分源码：" class="headerlink" title="部分源码："></a>部分源码：</h2><p>核心的群聊功能实现如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"DlgGroupChat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_DlgGroupChat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QByteArray></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDataStream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QMessageBox></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDateTime></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDebug></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QColorDialog></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFileDialog></span></span>DlgGroupChat<span class="token operator">::</span><span class="token function">DlgGroupChat</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">,</span> QString name<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span>new Ui<span class="token operator">::</span>DlgGroupChat<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化</span>    m_pUdpSocket <span class="token operator">=</span> new QUdpSocket<span class="token punctuation">;</span>    m_strUserName <span class="token operator">=</span> name<span class="token punctuation">;</span>    m_nPort <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>    m_pUdpSocket<span class="token operator">-></span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token operator">-></span>m_nPort<span class="token punctuation">,</span> QAbstractSocket<span class="token operator">::</span>ShareAddress <span class="token operator">|</span> QAbstractSocket<span class="token operator">::</span>ReuseAddressHint<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//共享地址+断开重连</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>pbSend<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QPushButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span>UserMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendMsg</span><span class="token punctuation">(</span>UserEnter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>m_pUdpSocket<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QUdpSocket<span class="token operator">::</span>readyRead<span class="token punctuation">,</span> this<span class="token punctuation">,</span> <span class="token operator">&amp;</span>DlgGroupChat<span class="token operator">::</span>recvMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span>    <span class="token comment">//字体</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>fcbFont<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QFontComboBox<span class="token operator">::</span>currentFontChanged<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> QFont <span class="token operator">&amp;</span>font<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setCurrentFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>       ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//字号</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span>QComboBox<span class="token operator">::</span> <span class="token operator">*</span>cbxsingal<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>text<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>QComboBox<span class="token operator">::</span>currentIndexChanged<span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>comboBox<span class="token punctuation">,</span> cbxsingal<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFontPointSize</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//加粗</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>tbFontBold<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>bool isCheck<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isCheck<span class="token punctuation">)</span>            ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFontWeight</span><span class="token punctuation">(</span>QFont<span class="token operator">::</span>Bold<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFontWeight</span><span class="token punctuation">(</span>QFont<span class="token operator">::</span>Normal<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//倾斜</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>tbFontTilt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>bool Check<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFontItalic</span><span class="token punctuation">(</span>Check<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//下划线</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>tbFontUnderline<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span>bool Check<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFontUnderline</span><span class="token punctuation">(</span>Check<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//字体颜色</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>tbMark<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        QColor color <span class="token operator">=</span> QColorDialog<span class="token operator">::</span><span class="token function">getColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//保存聊天记录</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>tbChatSave<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        QString path <span class="token operator">=</span> QFileDialog<span class="token operator">::</span><span class="token function">getSaveFileName</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">"保存记录"</span><span class="token punctuation">,</span> <span class="token string">"聊天记录"</span><span class="token punctuation">,</span> <span class="token string">"(*.txt)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">||</span> ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            QMessageBox<span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"路径或者内容不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            QFile <span class="token function">file</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token operator">::</span>WriteOnly <span class="token operator">|</span> QIODevice<span class="token operator">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            QTextStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            stream <span class="token operator">&lt;&lt;</span> ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">toPlainText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//清空聊天记录</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>tbChatClean<span class="token punctuation">,</span> <span class="token operator">&amp;</span>QToolButton<span class="token operator">::</span>clicked<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DlgGroupChat<span class="token operator">::</span><span class="token operator">~</span><span class="token function">DlgGroupChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    delete ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> DlgGroupChat<span class="token operator">::</span><span class="token function">closeEvent</span><span class="token punctuation">(</span>QCloseEvent<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    emit this<span class="token operator">-></span><span class="token function">closeDlgGroupChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sendMsg</span><span class="token punctuation">(</span>UserLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> DlgGroupChat<span class="token operator">::</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>DlgGroupChat<span class="token operator">::</span>MsgType typeMsg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QByteArray array<span class="token punctuation">;</span>    QDataStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span>QIODevice<span class="token operator">::</span>WriteOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>    stream <span class="token operator">&lt;&lt;</span> typeMsg<span class="token punctuation">;</span>  <span class="token comment">//将类型加入到 流中</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>typeMsg<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> UserMsg<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">toPlainText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            QMessageBox<span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"发送的消息不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//报文协1：类型+姓名+时间+内容</span>        QString time <span class="token operator">=</span> QDateTime<span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QString msg <span class="token operator">=</span> ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stream <span class="token operator">&lt;&lt;</span>m_strUserName<span class="token operator">&lt;&lt;</span>time<span class="token operator">&lt;&lt;</span> msg<span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>teChatInput<span class="token operator">-></span><span class="token function">setFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> UserEnter<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">//报文协议2：类型+姓名</span>        stream <span class="token operator">&lt;&lt;</span>m_strUserName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> UserLeft<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token comment">//报文协议3：类型+姓名</span>        stream <span class="token operator">&lt;&lt;</span>m_strUserName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//书写报文，广播发送</span>    m_pUdpSocket<span class="token operator">-></span><span class="token function">writeDatagram</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> QHostAddress<span class="token operator">::</span>Broadcast<span class="token punctuation">,</span> m_nPort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> DlgGroupChat<span class="token operator">::</span><span class="token function">userEnter</span><span class="token punctuation">(</span>QString userName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool isEmpty <span class="token operator">=</span> ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">findItems</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> Qt<span class="token operator">::</span>MatchExactly<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isEmpty<span class="token punctuation">)</span>   <span class="token comment">//不存在才能添加显示</span>    <span class="token punctuation">&#123;</span>        QTableWidgetItem<span class="token operator">*</span> item <span class="token operator">=</span> new <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        QString time <span class="token operator">=</span> QDateTime<span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        QTableWidgetItem<span class="token operator">*</span> timeItem <span class="token operator">=</span> new <span class="token function">QTableWidgetItem</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入行</span>        ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">insertRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> timeItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//追加聊天记录</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"%1 于 %2 上线了"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在线人数更新</span>        ui<span class="token operator">-></span>labCount<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"在线用户：%1人"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendMsg</span><span class="token punctuation">(</span>UserEnter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> DlgGroupChat<span class="token operator">::</span><span class="token function">userLeft</span><span class="token punctuation">(</span>QString userName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool isEmpty <span class="token operator">=</span> ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">findItems</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> Qt<span class="token operator">::</span>MatchExactly<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isEmpty<span class="token punctuation">)</span> <span class="token comment">//存在才能离开显示</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nRow <span class="token operator">=</span> ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">findItems</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> Qt<span class="token operator">::</span>MatchExactly<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">row</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">removeRow</span><span class="token punctuation">(</span>nRow<span class="token punctuation">)</span><span class="token punctuation">;</span>        QString time <span class="token operator">=</span> QDateTime<span class="token operator">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy-mm-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//追加聊天记录</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"%1 于 %2 下线了"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在线人数更新</span>        ui<span class="token operator">-></span>labCount<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"在线用户：%1人"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>twUser<span class="token operator">-></span><span class="token function">rowCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> DlgGroupChat<span class="token operator">::</span><span class="token function">recvMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    qint64 size <span class="token operator">=</span> m_pUdpSocket<span class="token operator">-></span><span class="token function">pendingDatagramSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//获取接收报文的长度</span>    QByteArray array <span class="token operator">=</span> <span class="token function">QByteArray</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_pUdpSocket<span class="token operator">-></span><span class="token function">readDatagram</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//解析报文协议：类型+姓名+时间+内容</span>    QString name<span class="token punctuation">;</span>    QString time<span class="token punctuation">;</span>    <span class="token keyword">int</span> typeMsg<span class="token punctuation">;</span>    QString Msg<span class="token punctuation">;</span>    QDataStream <span class="token function">stream</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">,</span> QIODevice<span class="token operator">::</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>    stream <span class="token operator">>></span> typeMsg <span class="token operator">>></span> name  <span class="token operator">>></span> time <span class="token operator">>></span> Msg<span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>size<span class="token operator">&lt;&lt;</span><span class="token string">" recv=>"</span><span class="token operator">&lt;&lt;</span>QString<span class="token operator">::</span><span class="token function">fromLocal8Bit</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>typeMsg<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> UserMsg<span class="token operator">:</span><span class="token punctuation">&#123;</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> name <span class="token operator">+</span><span class="token string">"]"</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>        ui<span class="token operator">-></span>tbChat<span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span>Msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> UserEnter<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">userEnter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> UserLeft<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">userLeft</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> DlgGroupChat<span class="token operator">::</span><span class="token function">on_pbExit_clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sendMsg</span><span class="token punctuation">(</span>UserLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p>源码：<a href="https://github.com/xmuli/cPlusPlus/tree/master/07_qt_Chat_IM_QQ/IM_QQ">IM_QQ</a> </p><h2 id="相关资源："><a href="#相关资源：" class="headerlink" title="相关资源："></a>相关资源：</h2><p>提供一些<code>QQ</code>的文源文件共享：<a href="https://github.com/xmuli/cPlusPlus/tree/master/resource/QQ">QQ界面资源分享</a> </p><p><strong>QQemoji小表情：</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718165545.png" loading="lazy"></p><p><strong>QQ登录界面图片：</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718165608.png" loading="lazy"></p><p><strong>QQ各种钻vip图标：</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718165640.png" loading="lazy"></p><p><strong>QQ群聊界面：</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190718165701.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
          <category> 学习 - 项目实战开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium 12激活破解教程(亲测可用)(附上官网离线安装包和破解工具）</title>
      <link href="posts/bb62b94f/"/>
      <url>posts/bb62b94f/</url>
      
        <content type="html"><![CDATA[<p>​    提供 <code>Navicat Premium 12</code>软件的破解教程，以及相关资源下载。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><font color=#70AD47 size=4 face="幼圆"><strong>小提示:<strong>若是遇到csdn排版混乱，或图片失效，请跳转本文末的</strong>链接</strong>， 请在 <a href="https://touwoyimuli.github.io/">github.io</a>  处查看的该文章，获得更好体验</font> </p><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        提供  <code>Navicat Premium 12</code>软件的破解教程，以及相关资源下载。</p><br><h2 id="下载链接："><a href="#下载链接：" class="headerlink" title="下载链接："></a>下载链接：</h2><ul><li><p>官外官网下载(最新版本2019-07-11亲测 不一定能够破解推荐)：<a href="https://www.navicat.com.cn/products">navicat</a></p></li><li><p>使用博主提供好的：链接：<a href="https://pan.baidu.com/s/1trNploDC0bLZAkWISOxHlQ">https://pan.baidu.com/s/1trNploDC0bLZAkWISOxHlQ</a> 提取码：yuvw </p></li><li><p>激活工具：链接：<a href="https://pan.baidu.com/s/1WBvFIff8b7uZuzwn14JzqA">https://pan.baidu.com/s/1WBvFIff8b7uZuzwn14JzqA</a> 提取码：timy<br>  操作更方便哦 <strong>&amp;&amp;</strong>   在上面的压缩包里也有</p><p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190711191413.png" loading="lazy"></p></li></ul><br><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>若是无特殊说明，<strong>链接一般都是为百度云链接</strong>，且这些分享的软件，都是经过我自己重度使用过了的，亲测有效，且最少都是使用了好几个月了的，亲测有效。若是链接失效，可以评论留言，我会更新该链接。</p><br><h2 id="下载工具推荐："><a href="#下载工具推荐：" class="headerlink" title="下载工具推荐："></a>下载工具推荐：</h2><p>推荐使用<code>PanDownload</code>和<code>速盘</code>，前者我都是使用了快一年了，感觉一会都很稳定，后者听说也不错，不过本人没有尝试过。</p><p><font color=#70AD47 size=3 face="幼圆"><strong>嫌弃麻烦的，可以使用提供的网页版满速下载百度云资源：</strong></font></p><ul><li><code>pandownload</code>网页版正式发布，一款完全免费且支持全平台免登录、免安装的下载工具。<br>  地址1： <a href="https://www.baiduwp.com/">https://www.baiduwp.com</a><br>  地址2： <a href="https://baiduwangpan.com/">https://baiduwangpan.com</a><br>  <strong>注意：</strong>网页版限制了单个IP每天的下载次数，防止滥用。请不要使用IDM或迅雷等多线程下载器下载！ </li><li><code>pandownload</code>分为windows、安卓、和网页版本。效果相当于破解的百度云，不限速，有专人的维护。</li></ul><p><font color=#70AD47 size=4 face="幼圆"><strong>客户端下载：</strong></font> <a href="http://pandownload.com/">PanDownload官网</a>    </p><p><font color=#70AD47 size=4 face="幼圆"><strong>使用方法参考:</strong></font> <a href="https://blog.csdn.net/qq_33154343/article/details/94618573">破解百度云 PanDownload_Beta 使用</a> </p><br><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><p><strong>安装过程:</strong>  </p><p>疯狂点击下一步：Next</p><br><h2 id="破解激活："><a href="#破解激活：" class="headerlink" title="破解激活："></a>破解激活：</h2><ul><li>将<code>Navicat Premium 12 注册机 V5.0_4.exe</code>拷贝到<code>C:\Program Files (x86)\PremiumSoft\Navicat Premium 12</code>文件夹内</li><li>进入到下载<code>navicat-keygen-for-x86</code>的文件夹</li><li>断网条件，<strong>管理员</strong>运行“Navicat Premium 12.exe”激活码,输入4步骤的左侧的激活码</li><li>按照如下图所示顺序操作</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190711190044.jpg" loading="lazy"></p><ul><li>查看是否激活</li></ul><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190711190236.png" loading="lazy"></p><br><h2 id="重要提示："><a href="#重要提示：" class="headerlink" title="重要提示："></a>重要提示：</h2><p><a href="https://rcnjtech.pipipan.com/dir/20811431-34701137-e72dfc/34701143/">Navicat Premium 12 注册机</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190711191850.png" loading="lazy"></p><br><h2 id="历史版本下载："><a href="#历史版本下载：" class="headerlink" title="历史版本下载："></a>历史版本下载：</h2><p>国内Navicat网址是：<a href="http://www.navicat.com.cn/">http://www.navicat.com.cn</a></p><p>国外Navicat网址是：<a href="http://www.navicat.com/">http://www.navicat.com</a></p><p>国外的更新比国内的快，而且同一个版本，国内和国外下载的同版本文件，hash值不一样。</p><p>国外 Navicat Premium下载地址有规律：</p><p><a href="http://download.navicat.com/download/navicat9_premium_cs.exe">http://download.navicat.com/download/navicat9_premium_cs.exe</a></p><p><a href="http://download.navicat.com/download/navicat100_premium_cs.exe">http://download.navicat.com/download/navicat100_premium_cs.exe</a></p><p><a href="http://download.navicat.com/download/navicat110_premium_cs_x86.exe">http://download.navicat.com/download/navicat110_premium_cs_x86.exe</a></p><p><a href="http://download.navicat.com/download/navicat110_premium_cs_x64.exe">http://download.navicat.com/download/navicat110_premium_cs_x64.exe</a></p><p><a href="http://download.navicat.com/download/navicat120_premium_cs_x86.exe">http://download.navicat.com/download/navicat120_premium_cs_x86.exe</a></p><p><a href="http://download.navicat.com/download/navicat120_premium_cs_x64.exe">http://download.navicat.com/download/navicat120_premium_cs_x64.exe</a></p><p><a href="http://download.navicat.com/download/navicat121_premium_cs_x86.exe">http://download.navicat.com/download/navicat121_premium_cs_x86.exe</a></p><p><a href="http://download.navicat.com/download/navicat121_premium_cs_x64.exe">http://download.navicat.com/download/navicat121_premium_cs_x64.exe</a></p><p>举例，无论是12.0.10，12.0.11，12.0.13，12.0.15，12.0.16下载地址都是同一个。</p><p><a href="http://download.navicat.com/download/navicat120_premium_cs_x86.exe">http://download.navicat.com/download/navicat120_premium_cs_x86.exe</a></p><p><a href="http://download.navicat.com/download/navicat120_premium_cs_x64.exe">http://download.navicat.com/download/navicat120_premium_cs_x64.exe</a></p><p>在你得知官网更新版本后，重新下载这个地址，就能够得到更新版本的安装包。</p><p>想要检查是否为最新版，查看以下文件属性详情即可得知：</p><p><img src="https://images2017.cnblogs.com/blog/402416/201710/402416-20171011164937418-81593520.png" alt="img" loading="lazy"></p><br><h3 id="重要提示：-1"><a href="#重要提示：-1" class="headerlink" title="重要提示："></a>重要提示：</h3><blockquote><p>该注册机来源于<a href="https://links.jianshu.com/go?to=https://dfox.it/DeFconX/files/file/79-navicat-software/">DeltaFoX</a>（<a href="https://links.jianshu.com/go?to=https://github.com/Deltafox79/Navicat_Keygen">GitHub</a>）。一般来说，由于注册机会修改.exe文件或.dll文件，加壳并且没有数字签名，所以杀毒软件会报毒，自行决定是否使用本注册机。如需使用本注册机或者下载后找不到文件，需要关闭杀毒软件或将本注册机添加至杀毒软件白名单。</p></blockquote><blockquote><p>2019年07月11日 更新<br>最新版额Navicat不能用以下方式破解了，以下方法在老版的基础上破解<br><a href="https://blog.csdn.net/loveer0/article/details/82016644">Windows 中 Navicat Premium 12 破解</a></p></blockquote><br><h3 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a>参考博文：</h3><p><a href="https://www.jianshu.com/p/5f693b4c9468">Navicat Premium 12.1.20.0安装与激活</a> </p><p><a href="https://www.cnblogs.com/VAllen/p/Navicat-Premium-Download.html">Navicat Premium 简体中文版 12.0.16 以上版本国外官网下载地址(非国内)</a> </p><p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704154359.gif" loading="lazy"></p><p><font color=#FE7207  size=5 face="幼圆">看到激活成功，开心</font></p><br><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong>  #</font></p><p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong>  #发现以前的破解连接失效了，于是乎重新上传一份，链接已经更新</font>   </p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h2><p><font color=#D0087E size=4 face="幼圆">本文仅用于学习、研究和交流目的，欢迎非商业性质转载。但请注明博客来源</font></p><ul><li><font color=#FF0101 size=3 face="幼圆">文章内容部分来源于互联网，不代表本人的任何立场；涉及到的软件来源于互联网，仅供个人下载使用，请勿用于商业用途，版权归软件开发者所有，下载后请于24小时内删除，如有真实需要请支持正版！因下载本站任何资源造成的损失，全部责任由使用者本人承担！如果你是版权方，认为本文内容对您的权益有所侵犯，<font color=#2B4FB0 size=3 face="幼圆"><a href="https://touwoyimuli.github.io/about/">请联系博主的QQ，附上添加好友理由</a></font>，且应该提交相应的证明材料，待博主进行严格地审查和背景调查后，情况属实的将在最快时间(三~五天)内将本文删除或修正。</font></li><li><font color=#FF0101 size=3 face="幼圆">附:二○○二年一月一日《计算机软件保护条例》第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬!</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 - 破解软件(常用，稀缺) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客插入视频bilibili 和 youtube的mv视频《take me hand 》</title>
      <link href="posts/c0c8973/"/>
      <url>posts/c0c8973/</url>
      
        <content type="html"><![CDATA[<p>今天突然想到，小千代的，伴随着一首 <em>Take me hand</em> 突然的传入耳朵里面，感觉痒痒的难耐，许久之前就一眼看了忘记不了这个，耳朵里面也一直旋绕着这个旋律，实在是好听，故此写下一篇文章，用以分享和纪念</p><iframe frameborder="no" border="0" marginwidth<p>=”0” marginheight=”0” width=530 height=86 src=”//music.163.com/outchain/player?type=2&amp;id=26092806&amp;auto=0&amp;height=66”&gt;</iframe></p><p><strong>bilibili 的mv版本：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>427<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//player.bilibili.com/player.html?aid=55654461&amp;cid=97299616&amp;page=1<span class="token punctuation">"</span></span> <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">framespacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><iframe width="760" height="427" src="//player.bilibili.com/player.html?aid=55654461&cid=97299616&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p><strong>youtube的mv版本：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>760<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>427<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.youtube.com/embed/4AXZbDAml6M<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><iframe width="760" height="427" src="https://www.youtube.com/embed/4AXZbDAml6M" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe<p>添加视频代码:(长宽可以自己定义)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>视频地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 gif 代码:(长宽可以自己定义)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>100</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gif 图片地址<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL之仿函数、谓词、内建函数对象、适配器、常用算法</title>
      <link href="posts/7d945155/"/>
      <url>posts/7d945155/</url>
      
        <content type="html"><![CDATA[<p>​            <strong>简述：</strong> 了解STL之仿函数、谓词、、内建函数对象、适配器、常用算法归纳等，书写一个简单地例子。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        了解STL之仿函数、谓词、、内建函数对象、适配器、常用算法归纳等，书写一个简单地例子。其中适配器在该文章中有详细讲：<a href="https://blog.csdn.net/qq_33154343/article/details/95090677">STL之函数对象适配器、取反适配器、函数指针适配器、成员函数适配器的讲解运用</a></p><p>下面逐一介绍这几种比较常见的知识点，算是一个知识点的几个归纳（比较简单地就没有列举出来，在此不做那种工具手册的知识罗列），知识归纳一些比较不容易的掌握的点，属于进阶知识内容。</p><h2 id="函数对象-谓词-内建函数对象-适配器："><a href="#函数对象-谓词-内建函数对象-适配器：" class="headerlink" title="函数对象/谓词/内建函数对象/适配器："></a>函数对象/谓词/内建函数对象/适配器：</h2><h3 id="大纲如图："><a href="#大纲如图：" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710170721.png" loading="lazy"></p><h3 id="函数对象："><a href="#函数对象：" class="headerlink" title="函数对象："></a>函数对象：</h3><p>总结：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710170956.png" loading="lazy"></p><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词:"></a>谓词:</h3><p>定义:</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710171104.png" loading="lazy"></p><h3 id="内建函数对象："><a href="#内建函数对象：" class="headerlink" title="内建函数对象："></a>内建函数对象：</h3><p>定义：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710171203.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710171359.jpg" loading="lazy"></p><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//内建关系函数对象（无名 临时对象）greater&lt;int>()   大于</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710172037.png" loading="lazy"></p><h2 id="常用算法："><a href="#常用算法：" class="headerlink" title="常用算法："></a>常用算法：</h2><h3 id="大纲如图：-1"><a href="#大纲如图：-1" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710170815.png" loading="lazy"></p><h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><p>如上图</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p><hr><p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/95358967">STL之仿函数、谓词、内建函数对象、适配器、常用算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL之常用容器string、vector、deque、stack、list、set、map讲解</title>
      <link href="posts/6a779e35/"/>
      <url>posts/6a779e35/</url>
      
        <content type="html"><![CDATA[<p>​    <strong>简述：</strong> 了解STL之常用容器string、vector、deque、stack、list、set、map讲解书写一个简单地例子。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>了解STL之常用容器string、vector、deque、stack、list、set、map讲解，且书写一个简单地例子。</p><p>​        </p><p>下面逐一介绍这几种比较常见的知识点，算是一个知识点的几个归纳（比较简单地就没有列举出来，在此不做那种工具手册的知识罗列），知识归纳一些比较不容易的掌握的点，属于进阶知识内容。</p><h2 id="容器："><a href="#容器：" class="headerlink" title="容器："></a>容器：</h2><h3 id="大纲如图："><a href="#大纲如图：" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162226.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162255.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162327.png" loading="lazy"></p><h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><p>其中这六种的主要区别如下：<strong>它们的使用时机</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710162708.png" loading="lazy"></p><hr><h3 id="string："><a href="#string：" class="headerlink" title="string："></a>string：</h3><p>比较简单，注意一下：[ ]和at( )区别：前者会越界直接挂掉，后者会抛出异常out_of_range即可</p><hr><h3 id="vector："><a href="#vector：" class="headerlink" title="vector："></a>vector：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163212.png" loading="lazy"></p><h4 id="内存结构样子："><a href="#内存结构样子：" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163750.png" loading="lazy"></p><p>收缩内存技巧:</p><p>关于<font color=#FE7207  size=4 face="幼圆">收缩内存</font>一个技巧使用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">vectoKint<span class="token operator">></span>v<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">pusthback</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>；cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的容量："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl；cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的大小："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endd；v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>；cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的容量："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl；cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的大小："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl；<span class="token comment">//收缩内存</span>ecto<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的容量："</span><span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span>）<span class="token operator">&lt;&lt;</span>endl；cout<span class="token operator">&lt;&lt;</span><span class="token string">"v的大小："</span>Kv<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>）<span class="token operator">&lt;&lt;</span>endd；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原理图示："><a href="#原理图示：" class="headerlink" title="原理图示："></a>原理图示：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710164014.png" loading="lazy"></h4><hr><h3 id="deque："><a href="#deque：" class="headerlink" title="deque："></a>deque：</h3><p>（双端 中控器 分段 数组）</p><h4 id="内存结构样子：-1"><a href="#内存结构样子：-1" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163318.png" loading="lazy"></p><hr><h3 id="stack："><a href="#stack：" class="headerlink" title="stack："></a>stack：</h3><p>（栈）</p><h4 id="内存结构样子：-2"><a href="#内存结构样子：-2" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163423.png" loading="lazy"></p><hr><h3 id="queue："><a href="#queue：" class="headerlink" title="queue："></a>queue：</h3><p>（队、先进先出）</p><h4 id="内存结构样子：-3"><a href="#内存结构样子：-3" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163523.png" loading="lazy"></p><hr><h3 id="list："><a href="#list：" class="headerlink" title="list："></a>list：</h3><p>（链表）</p><h4 id="内存结构样子：-4"><a href="#内存结构样子：-4" class="headerlink" title="内存结构样子："></a>内存结构样子：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163613.png" loading="lazy"></p><h4 id="验证list是一个验证list是循环双向链表："><a href="#验证list是一个验证list是循环双向链表：" class="headerlink" title="验证list是一个验证list是循环双向链表："></a>验证list是一个验证list是循环双向链表：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> mylist<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>mylist<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>_Nodeptr node <span class="token operator">=</span> mylist<span class="token punctuation">.</span><span class="token function">_Myhead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>_Next<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mylist<span class="token punctuation">.</span><span class="token function">_Mysize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Node:"</span> <span class="token operator">&lt;&lt;</span> node<span class="token operator">-></span>_Myval <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>node <span class="token operator">=</span> node<span class="token operator">-></span>_Next<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> mylist<span class="token punctuation">.</span><span class="token function">_Myhead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>node <span class="token operator">=</span> node<span class="token operator">-></span>_Next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710164835.png" loading="lazy"></p><hr><h3 id="set-multiset："><a href="#set-multiset：" class="headerlink" title="set/multiset："></a>set/multiset：</h3><p>（底层均为红黑树[平衡二叉树的一种]）</p><h4 id="平衡二叉树讲解："><a href="#平衡二叉树讲解：" class="headerlink" title="平衡二叉树讲解："></a>平衡二叉树讲解：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710163708.png" loading="lazy"></p><h4 id="set插入自定义数据类型："><a href="#set插入自定义数据类型：" class="headerlink" title="set插入自定义数据类型："></a>set插入自定义数据类型：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span>  <span class="token comment">//set和multiset均使用此头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//自定义类型</span>class Person  <span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>public<span class="token operator">:</span>string m_strName<span class="token punctuation">;</span><span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span><span class="token keyword">int</span> m_nHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//利用仿函数 指定set容器的排序</span>class MyCompare <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_nAge <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nHeight <span class="token operator">></span> p2<span class="token punctuation">.</span>m_nHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">;</span>  <span class="token comment">//年龄从小到大排序</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printfset</span><span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nAge <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nHeight <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p7</span><span class="token punctuation">(</span><span class="token string">"p7"</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set&lt;Person> s;  //直接写，不知按照什么“大小规则”进行插入</span><span class="token comment">//set&lt;Person, MyCompare> s;   //加入仿函数， 使用“自定义规则”插入排序</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span> s<span class="token punctuation">;</span>   s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printfset</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710165205.png" loading="lazy"></p><hr><h3 id="map-multimap："><a href="#map-multimap：" class="headerlink" title="map/multimap："></a>map/multimap：</h3><p>（底层均为红黑树[平衡二叉树的一种]）</p><h4 id="multimap示例使用："><a href="#multimap示例使用：" class="headerlink" title="multimap示例使用："></a>multimap示例使用：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>class Person<span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> string tel<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_strTel</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nSalary</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>string m_strName<span class="token punctuation">;</span><span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span>string m_strTel<span class="token punctuation">;</span><span class="token keyword">int</span> m_nSalary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//自定义数据类型</span><span class="token comment">//创建对象</span><span class="token comment">//仿函数（或回调函数）</span><span class="token comment">//插入</span><span class="token comment">//按照部门输出</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"0001"</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"0002"</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"0003"</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"0004"</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">"0005"</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"0006"</span><span class="token punctuation">,</span>  <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p7</span><span class="token punctuation">(</span><span class="token string">"p7"</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"0007"</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Person<span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> p5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Person<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"所属部门："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"   姓名："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_nAge<span class="token operator">&lt;&lt;</span> <span class="token string">"   电话号码："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_strTel <span class="token operator">&lt;&lt;</span> <span class="token string">"   薪资："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second<span class="token punctuation">.</span>m_nSalary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710165347.png" loading="lazy"></p><h2 id="本次心得："><a href="#本次心得：" class="headerlink" title="本次心得："></a>本次心得：</h2><p>学习是是一件让人开心的事情，但是写成博文，就是一件让人痛苦中快乐的事情</p><p><font color=#D0087E size=4 face="幼圆">当看到运行OK那的一刻，心里或许就是这样的</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p><hr><p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/95358234">STL之常用容器string、vector、deque、stack、list、set、map讲解</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL之类型异常处理、类型转换</title>
      <link href="posts/ddbf8a1d/"/>
      <url>posts/ddbf8a1d/</url>
      
        <content type="html"><![CDATA[<p>​            <strong>简述：</strong> 了解STL之异常处理、类型转换、书写一个简单地例子。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        了解STL之异常处理、类型转换，书写一个简单地例子。</p><p>​        </p><p>下面逐一介绍这几种比较常见的知识点，算是一个知识点的几个归纳（比较简单地就没有列举出来，在此不做那种工具手册的知识罗列），知识归纳一些比较不容易的掌握的点，属于进阶知识内容。</p><h2 id="c-c-异常的基本语法："><a href="#c-c-异常的基本语法：" class="headerlink" title="c/c++异常的基本语法："></a>c/c++异常的基本语法：</h2><h3 id="大纲如图："><a href="#大纲如图：" class="headerlink" title="大纲如图："></a>大纲如图：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710161033.png" loading="lazy"></p><h3 id="知识点讲解："><a href="#知识点讲解：" class="headerlink" title="知识点讲解："></a>知识点讲解：</h3><ul><li>c方式：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">返回 <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  无法辨别是返回值还是异常<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>c++方式：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">try<span class="token punctuation">&#123;</span><span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"int 的异常"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//double捕获，不想处理异常，就继续往上跑出异常</span>throw<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span>MyException e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"int 的异常"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"其他类型的 的异常处理"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//return -1 ;   //c语言的缺陷</span><span class="token comment">//抛出异常</span><span class="token comment">//throw 1;</span><span class="token comment">//throw 3.14;</span><span class="token comment">//throw 'a';</span><span class="token comment">//栈解旋：从try代码块开始起，到throw抛出异常前，所有栈上的对象都被释放掉，</span>    <span class="token comment">//释放的顺序和构造的顺序是相反的，这个过程称为栈解旋</span>Person p1<span class="token punctuation">;</span>Person p2<span class="token punctuation">;</span>throw <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">//抛出一个MyException匿名对象</span><span class="token punctuation">&#125;</span><span class="token comment">//++++++++++++++++++++++++++++</span><span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">throwMyException</span><span class="token punctuation">(</span>）；<span class="token punctuation">&#125;</span><span class="token keyword">void</span> test01<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>try<span class="token punctuation">&#123;</span>doWork（）；<span class="token punctuation">&#125;</span><span class="token comment">//MyException e会调用拷贝构造</span><span class="token comment">//MyException &amp;e 引用方式接受建议用这种方式节省开销</span><span class="token comment">//MyException *e 指针方式接受抛出&amp;MyException（）；匿名对象，对象被释放掉，不可以再操作e了</span><span class="token comment">//MyException *e 指针方式接受抛出new MyException（）；堆区创建的对象记得手动释放 deletee；</span>catch （MyExceptione <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>\"MyException的异常捕获\"<span class="token operator">&lt;&lt;</span>end；<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/95357944">STL之类型异常处理、类型转换</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt5 中文乱码解决</title>
      <link href="posts/31dc0459/"/>
      <url>posts/31dc0459/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>简介：</strong>  了解中文乱码原因，以及提供解决方法</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        了解中文乱码原因，以及提供解决方法。</p><br><h2 id="开发平台环境："><a href="#开发平台环境：" class="headerlink" title="开发平台环境："></a>开发平台环境：</h2><p><strong>编程环境：</strong>  <code>win10 x64 专业版</code></p><p><strong>编程软件：</strong>  <code>visual studio 2015</code>， <code>Qt Creator 4.8.2 (Enterprise)</code>， <code>Qt 5.9.8</code></p><br><h2 id="一、问题是什么？"><a href="#一、问题是什么？" class="headerlink" title="一、问题是什么？"></a>一、问题是什么？</h2><p>在学习Qt编程的过程中，大多数人都遇到过中文乱码的问题。总结起来有三类：</p><ol><li>Qt Creator中显示的汉字变为乱码，编辑器上方有“Could not decode “…” with “UTF-8”-encoding. Editing not possible.”的错误提示。此时，出现乱码的文档是不可编辑的。你好中文！”这5个中文字符变成了乱码</li><li>Qt Creator中显示的汉字正常，但编译的时候会出现“常量中有换行符”等一系列错误报警。其实，这也是文字编码的问题。如下图所示：</li><li>编译时未报错，但生成的程序中文乱码。如下图所示（自己重新配图）：</li></ol><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710154354.png" loading="lazy"></p><p>其中，第3条是网上提问的最多的，几乎是所有使用MSVC的初学者都会碰到的问题。很多回答是针对Qt4版本的，Qt5中不可用。</p><br><h2 id="二、为什么会出现这些问题？"><a href="#二、为什么会出现这些问题？" class="headerlink" title="二、为什么会出现这些问题？"></a>二、为什么会出现这些问题？</h2><p>在解决问题之前，字符编码知识是必需的。你要知道ASCII、GB2312、GBK、Unicode、UTF-8、UTF-16、BOM是怎么回事。此外，你还要明白源码字符集、执行字符集是什么。详细内容可以在网上搜索一下，俯拾即是。</p><ol><li>Qt Creator的编辑器默认使用UTF-8（代码页65001）编码来读取文本文件。而Visual Studio保存文件时默认采用的是本地编码，对于简体中文的Windows<a href="javascript:void()">操作系统</a>，这个编码就是GB2312（代码页936）。如果使用Qt Creator读取由Visual Studio创建的文件，那么编辑器就会以UTF-8编码格式读取GB2312编码格式的文件，出现中文乱码，因为这两套编码系统对汉字编码是不同的。至于英文部分不会乱码，是因为UTF-8和GB2312在单字节字符部分是兼容的。</li><li>MSVC在编译时，会根据源代码文件有无BOM来定义源码字符集。如果有BOM，则按BOM解释识别编码；如果没有，则使用本地字符集，对于简体中文的Windows操作系统就是GB2312。那么，当MSVC遇到一个没有BOM的UTF-8编码的文件时，它通常会把文件看作GB2312的来处理。如果文件全是英文没有问题，但如果包含中文，编译器就会出现误读。这种情况下，Qt Creator编辑器是正常的。但对于MSVC编译器，原代码会被它认识成下图这个样子：</li></ol><p>这是我用EverEdit指定本地编码重读后的结果，可以看到汉字出错，末端的引号也没了。</p><p>在UTF-8中，一个中文字符（汉字或标点符号）占用3个字节，“你好中文！”这5个中文字符共占用15个字节；而在GB2312中，一个中文字符（汉字或标点符号）占用2个字节，这时，MSVC把UTF-8编码的15个字节加上后面1个字节的英文引号合成16个字节当作8个中文字符处理。之后，MSVC在这一行里直到末尾换行符出现都没有找到下一个引号，它以为你把字符串在这里敲回车换行了，于是报警称“常量中有换行符”，并引出一系列的错误。</p><p>不过，当以无BOM的UTF-8编码的字符串正好凑够偶数个字节时（比如偶数个汉字，或奇数个汉字加奇数个英文字母），编译器通常不会报警，因为它以为用GB2312编码读出的是正确的。</p><ol start="3"><li>不管源文件是何种编码，只要MSVC能够正确识别，就可以通过编译。但MSVC的执行字符集默认是本地字符集。对我们来说，它生成的可执行文件中的文字是GB2312编码的。而生成的Qt程序以UTF-8编码来识别GB2312编码的文字，对于“你好中文！”这几个字符，采用GB2312编码后再以UFT-8编码来读取，就会变成如下的乱码：</li></ol><p>当以无BOM的UTF-8编码的字符串正好凑够偶数个字节时（比如偶数个汉字，或奇数个汉字加奇数个英文字母），反而不会出现乱码。那是因为，编译器用GB2312编码读出的乱码本身就是UTF-8编码的，现在又用UTF-8解读，自然就正确了。这纯粹是歪打正着。</p><br><h2 id="三、怎么解决这些问题？"><a href="#三、怎么解决这些问题？" class="headerlink" title="三、怎么解决这些问题？"></a>三、怎么解决这些问题？</h2><p>首先，你要确定采用哪种源码字符集。你有两个选择：</p><ol><li>采用本地编码字符集（不推荐，跨平台时会比较麻烦，但在Visual Studio环境下配合Add-in工具编程比较方便）；</li><li>采用UTF-8编码字符集（推荐，适合跨平台）。</li></ol><h3 id="1-“采用本地编码字符集”方案，解决方法如下："><a href="#1-“采用本地编码字符集”方案，解决方法如下：" class="headerlink" title="1 “采用本地编码字符集”方案，解决方法如下："></a>1 “采用本地编码字符集”方案，解决方法如下：</h3><p>首先，要把项目中所有的头文件和源文件全都转换成GB2312编码保存。</p><ol><li>第1个问题：在Qt Creator中打开项目，点击左侧工具栏“项目”，在“编辑器”选项卡中把“默认编码”改成“GB2312”。如下图所示：</li></ol><p>话说回来，既然选择本地字符集，大致上是放弃跨平台了。与其用轻量级的Qt Creator，不如用Visual Studio作开发环境更好。</p><ol start="2"><li>第2个问题：“常量中有换行符”等一系列报警已不存在了。</li><li>第3个问题：在字符串常量上加QStringLiteral宏或QString::fromLocal8Bit函数，如：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">QString str <span class="token operator">=</span> <span class="token string">"你好中文！"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">QString str <span class="token operator">=</span> <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"你好中文！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">QString str <span class="token operator">=</span> QString<span class="token operator">::</span><span class="token function">fromLocal8Bit</span><span class="token punctuation">(</span><span class="token string">"你好中文！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过，在这两种形式下，你都无法用tr方法来创建翻译了。</p><h3 id="2-“采用UTF-8编码字符集”方案，解决方法如下："><a href="#2-“采用UTF-8编码字符集”方案，解决方法如下：" class="headerlink" title="2 “采用UTF-8编码字符集”方案，解决方法如下："></a>2 “采用UTF-8编码字符集”方案，解决方法如下：</h3><p>首先，要把项目中所有的头文件和源文件全都转换成UTF-8+BOM编码保存。</p><ol><li>第1个问题不存在了。</li><li>第2个问题也不存在了。</li><li>第3个问题，你也可以用上个方案中的方法来解决，但有更好的方法。那就是要用到中文字符的头文件和源文件开头加上MSVC的一个宏：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">_MSC_VER <span class="token operator">>=</span> <span class="token number">1600</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">execution_character_set</span><span class="token punctuation">(</span></span><span class="token string">"utf-8"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个宏告诉MSVC，执行字符集是UTF-8编码的，别瞎整成GB2312的！还有个好处，就是能用tr包中文，方便日后的翻译。最终效果如下：</p><br><h2 id="比心分享："><a href="#比心分享：" class="headerlink" title="比心分享："></a>比心分享：</h2><p>对于乱码原因，算是间接的简明扼要的一篇博文。</p><p><font color=#D0087E size=4 face="幼圆">当看懂的一刻，心里或许就是这样的？</font> </p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190719170218.png" loading="lazy"></p><br><h2 id="本篇同步博文："><a href="#本篇同步博文：" class="headerlink" title="本篇同步博文："></a>本篇同步博文：</h2><p><font color=#FE7207  size=4 face="幼圆"><strong>本博文同步到csdn博客：</strong></font>  <a href="https://blog.csdn.net/qq_33154343/article/details/95344312">qt5 中文乱码解决</a> </p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt5 QTreeWidget使用 创建具有多级联动和复选框的树形控件</title>
      <link href="posts/b298028d/"/>
      <url>posts/b298028d/</url>
      
        <content type="html"><![CDATA[<p>​    <strong>简述：</strong>  <strong>通过使用树形控件<code>QTreeWidget</code>创建具有联动功能的和复选框树形控件，实现勾选一个（选中），其父节点也会改变相应的状态（</strong>且父亲节点会迭代修改状态），弥补参考文章的不足之处，创建工作中更加有效且实用的控件。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        通过使用树形控件<code>QTreeWidget</code>创建具有联动功能和复选框的树形控件，实现勾选一个（选中），其父节点也会改变相应的状态（<strong>且父亲节点会迭代修改状态</strong>），弥补参考文章的不足之处，创建工作中更加有效且实用的控件。在Qt中的树形控件称为QTreeWidget，而控件里的树形节点称为<code>QTreeWidgetItem</code>。</p><h2 id="功能实现："><a href="#功能实现：" class="headerlink" title="功能实现："></a>功能实现：</h2><ul><li>带有复选框的树形控件</li><li>多级联动更新状态（迭代）</li><li>文末附带添加右键菜单功能（已经实现，此处就只贴出参考文章）</li><li>弥补所参考文章，只能够实现二级（大于二级就会无关联）的缺陷</li></ul><h2 id="思路架构："><a href="#思路架构：" class="headerlink" title="思路架构："></a>思路架构：</h2><ol><li>在ui界面，拖曳控件<code>QTreeWidget</code>控件，命名</li><li>初始化，添加多个（爷、父亲、儿子、 孙子等多级）节点</li><li>动态节点的时刻迭代更新状态</li></ol><h2 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190710150847.gif" loading="lazy"></p><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p><font color=#FE7207  size=4 face="幼圆">QDlgTreeWidget.h</font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QWidget></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;QTreeWidgetItem></span></span>namespace Ui <span class="token punctuation">&#123;</span> class QDlgTreeWidget<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>class QDlgTreeWidget <span class="token operator">:</span> public QWidget<span class="token punctuation">&#123;</span>Q_OBJECTpublic<span class="token operator">:</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">~</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>public<span class="token operator">:</span> <span class="token comment">//申明初始化函数</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">updateParentItem</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>public slots<span class="token operator">:</span>   <span class="token comment">//申明信号与槽,当树形控件的子选项被改变时执行</span><span class="token keyword">void</span> <span class="token function">onTreeItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span>private<span class="token operator">:</span>Ui<span class="token operator">::</span>QDlgTreeWidget <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=#FE7207  size=4 face="幼圆">QDlgTreeWidget.cpp</font></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"QDlgTreeWidget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_QDlgTreeWidget.h"</span></span>QDlgTreeWidget<span class="token operator">::</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ui <span class="token operator">=</span> new Ui<span class="token operator">::</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span><span class="token function">setupUi</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeWidget<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">itemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> this<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">onTreeItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>QDlgTreeWidget<span class="token operator">::</span><span class="token operator">~</span><span class="token function">QDlgTreeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>delete ui<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> QDlgTreeWidget<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ui<span class="token operator">-></span>treeWidget<span class="token operator">-></span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化树形控件</span>ui<span class="token operator">-></span>treeWidget<span class="token operator">-></span><span class="token function">setHeaderHidden</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//隐藏表头</span><span class="token comment">//定义第一个树形组 爷爷项</span>QTreeWidgetItem<span class="token operator">*</span> group1 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>ui<span class="token operator">-></span>treeWidget<span class="token punctuation">)</span><span class="token punctuation">;</span>group1<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">QStringLiteral</span><span class="token punctuation">(</span><span class="token string">"文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//树形控件显示的文本信息</span>group1<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//设置树形控件子项的属性</span>group1<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始状态没有被选中</span> <span class="token comment">//第一组子项</span>QTreeWidgetItem<span class="token operator">*</span> subItem11 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem11<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem11<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置子项显示的文本</span>subItem11<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置子选项的显示格式和状态</span>QTreeWidgetItem<span class="token operator">*</span> subItem12 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem12<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem12<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subItem12<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>QTreeWidgetItem<span class="token operator">*</span> subItem13 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group1<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem13<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem13<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subItem13<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父亲项</span>QTreeWidgetItem<span class="token operator">*</span> group2 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>subItem13<span class="token punctuation">)</span><span class="token punctuation">;</span>group2<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>group2<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>group2<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>QTreeWidgetItem<span class="token operator">*</span> group3 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>subItem13<span class="token punctuation">)</span><span class="token punctuation">;</span>group3<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>group3<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>group3<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//孙子项</span>QTreeWidgetItem<span class="token operator">*</span> subItem21 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//指定子项属于哪一个父项</span>subItem21<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem21<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subItem21<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>QTreeWidgetItem<span class="token operator">*</span> subItem22 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem22<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem22<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subItem22<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>QTreeWidgetItem<span class="token operator">*</span> subItem23 <span class="token operator">=</span> new <span class="token function">QTreeWidgetItem</span><span class="token punctuation">(</span>group2<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem23<span class="token operator">-></span><span class="token function">setFlags</span><span class="token punctuation">(</span>Qt<span class="token operator">::</span>ItemIsUserCheckable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEnabled <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsSelectable <span class="token operator">|</span> Qt<span class="token operator">::</span>ItemIsEditable<span class="token punctuation">)</span><span class="token punctuation">;</span>subItem23<span class="token operator">-></span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"subItem23"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subItem23<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span>ui<span class="token operator">-></span>treeWidget<span class="token operator">-></span><span class="token function">expandAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//展开树</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> QDlgTreeWidget<span class="token operator">::</span><span class="token function">updateParentItem</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>QTreeWidgetItem <span class="token operator">*</span>parent <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">int</span> nSelectedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> childCount <span class="token operator">=</span> parent<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//判断有多少个子项被选中</span><span class="token punctuation">&#123;</span>QTreeWidgetItem<span class="token operator">*</span> childItem <span class="token operator">=</span> parent<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>childItem<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>Checked <span class="token operator">||</span> childItem<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> Qt<span class="token operator">::</span>PartiallyChecked<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>nSelectedCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nSelectedCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//如果没有子项被选中，父项设置为未选中状态</span>parent<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nSelectedCount <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nSelectedCount <span class="token operator">&lt;</span> childCount<span class="token punctuation">)</span>    <span class="token comment">//如果有部分子项被选中，父项设置为部分选中状态，即用灰色显示</span>parent<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>PartiallyChecked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nSelectedCount <span class="token operator">==</span> childCount<span class="token punctuation">)</span>    <span class="token comment">//如果子项全部被选中，父项则设置为选中状态</span>parent<span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateParentItem</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> QDlgTreeWidget<span class="token operator">::</span><span class="token function">onTreeItemChanged</span><span class="token punctuation">(</span>QTreeWidgetItem<span class="token operator">*</span> item<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> count <span class="token operator">=</span> item<span class="token operator">-></span><span class="token function">childCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回子项的个数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Qt<span class="token operator">::</span>Checked <span class="token operator">==</span> item<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>item<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Checked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">updateParentItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Qt<span class="token operator">::</span>Unchecked <span class="token operator">==</span> item<span class="token operator">-></span><span class="token function">checkState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>item<span class="token operator">-></span><span class="token function">child</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">setCheckState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Qt<span class="token operator">::</span>Unchecked<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">updateParentItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h2><p>其中主要是参考下面好儿郎的这一篇博客，在<a href="https://blog.csdn.net/rl529014/article/details/51355968">Qt: 创建具有复选框的树形控件</a> 的一文中，其中主要修改如下：</p><p><code>void Widget::updateParentItem(QTreeWidgetItem\* item)</code> 函数的最后一行添加如下一句话，<code>updateParentItem(parent)</code>，是在在函数里面添加一个迭代函数，（向自己的父节点进行遍历）；</p><p>且在判断子项中个数被选中，将<code>if (childItem-&gt;checkState(0) == Qt::Checked)</code>修改为<code>if (childItem-&gt;checkState(0) == Qt::Checked || childItem-&gt;checkState(0) == Qt::PartiallyChecked)</code>，半选中也算在父节点也算选中</p><p><font color=#D0087E size=4 face="幼圆">当看到运行成功那的一刻，心里或许就是这样的</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p><h2 id="参考博文："><a href="#参考博文：" class="headerlink" title="参考博文："></a><strong>参考博文：</strong></h2><p><a href="https://blog.csdn.net/rl529014/article/details/51355968">Qt: 创建具有复选框的树形控件</a> （推荐）</p><p><a href="https://blog.csdn.net/fengyutongtt/article/details/52372164">建立QTreeWidget下QTreeWidgetItem的右键菜单</a> （推荐）</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - Qt </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL模板，内建函数对象(仿函数)的讲解运用和示范：greater()</title>
      <link href="posts/d62f1935/"/>
      <url>posts/d62f1935/</url>
      
        <content type="html"><![CDATA[<p>​            <strong>简述：</strong> 对于 <code>内建函数对象</code>（#include <functional>）的算术、关系、逻辑类的函数对象（<code>仿函</code>数），做一个讲解和小例子的应用，并且简单地探究一下原理。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        对于 <code>内建函数对象</code>（#include <functional>）的算术、关系、逻辑类的函数对象（<code>仿函</code>数），做一个讲解和小例子的应用，并且简单地探究一下原理。</p><h2 id="讲解大纲："><a href="#讲解大纲：" class="headerlink" title="讲解大纲："></a>讲解大纲：</h2><p>简单说一下，什么叫做<code>内建函数对象</code><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708162640.png" loading="lazy"></p><p>其中完整的定义如下：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708162823.png" loading="lazy"></p><p>其所拥有的具体的所有的函数接口，如下图所示。在这里只是将其中几个典型的接口是实例一下如何使用。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708162856.png" loading="lazy"></p><h2 id="关系运算类函数对象："><a href="#关系运算类函数对象：" class="headerlink" title="关系运算类函数对象："></a>关系运算类函数对象：</h2><h3 id="大于仿函数："><a href="#大于仿函数：" class="headerlink" title="大于仿函数："></a>大于仿函数：</h3><p>template<class> T greater<T> //大于仿函数</p><h4 id="心得思考："><a href="#心得思考：" class="headerlink" title="心得思考："></a>心得思考：</h4><p>添加头文件不可忘记，要各自对应，在使用<code>sort(三个参数)</code>的时候，<font color=#FE7207 size=3 face="幼圆">第三个参数，通常为自定义的  函数对象（仿函数）</font>。因为默认使用<code>sort(两个参数)</code>的使用，<font color=#FE7207  size=3 face="幼圆">其底层也是默认调用的 系统的默认的内建函数对象<code>less&lt;&gt;()</code>(六个关系运算类函数对象的倒数第二个)</font>。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708164909.png" loading="lazy"></p><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//内建关系函数对象（无名 临时对象）greater&lt;int>()   大于</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h4><p>默认排序是从小到大，而这里结果是从大到小，复合结果的预期。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708193257.png" loading="lazy"></p><h4 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//内建关系函数对象（无名 临时对象）greater&lt;int>()   大于   //内建关系函数对象（无名 临时对象）greater&lt;int>()   大于</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以替换成，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再查看运行结果为：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708165544.png" loading="lazy"></p><h2 id="算数类函数对象："><a href="#算数类函数对象：" class="headerlink" title="算数类函数对象："></a>算数类函数对象：</h2><h3 id="取反仿函数："><a href="#取反仿函数：" class="headerlink" title="取反仿函数："></a>取反仿函数：</h3><p>（template<class> T negate<T> //取反仿函数）</p><p>仿照上面，重点会在下面的一篇文章<a href="https://touwoyimuli.github.io/2019/07/08/STL%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E8%AE%B2%E8%A7%A3%E8%BF%90%E7%94%A8%E5%92%8C%E7%A4%BA%E8%8C%83%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%8F%96%E5%8F%8D%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E9%80%82%E9%85%8D%E5%99%A8/">STL模板，适配器的讲解运用和示范：函数对象适配器、、函数指针适配器、成员函数适配器</a>，适配器相关里面再继续运行用到。</p><h3 id="加法仿函数："><a href="#加法仿函数：" class="headerlink" title="加法仿函数："></a>加法仿函数：</h3><p>（template<class> T plus<T> //加法仿函数） </p><p>仿照上面，重点会在下面的一篇文章<a href="https://touwoyimuli.github.io/2019/07/08/STL%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E8%AE%B2%E8%A7%A3%E8%BF%90%E7%94%A8%E5%92%8C%E7%A4%BA%E8%8C%83%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%8F%96%E5%8F%8D%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E9%80%82%E9%85%8D%E5%99%A8/">STL模板，适配器的讲解运用和示范：函数对象适配器、、函数指针适配器、成员函数适配器</a>，适配器相关里面再继续运行用到。</p><h2 id="逻辑运算类仿函数-："><a href="#逻辑运算类仿函数-：" class="headerlink" title="逻辑运算类仿函数 ："></a>逻辑运算类仿函数 ：</h2><p>仿照上面，重点会在下面的一篇文章<a href="https://touwoyimuli.github.io/2019/07/08/STL%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%80%82%E9%85%8D%E5%99%A8%E7%9A%84%E8%AE%B2%E8%A7%A3%E8%BF%90%E7%94%A8%E5%92%8C%E7%A4%BA%E8%8C%83%EF%BC%9A%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%8F%96%E5%8F%8D%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E9%80%82%E9%85%8D%E5%99%A8%E3%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E9%80%82%E9%85%8D%E5%99%A8/">STL模板，适配器的讲解运用和示范：函数对象适配器、、函数指针适配器、成员函数适配器</a>，适配器相关里面再继续运行用到。</p><h2 id="使用无名的临时对象："><a href="#使用无名的临时对象：" class="headerlink" title="使用无名的临时对象："></a>使用无名的临时对象：</h2><p>这是一个很重要的骚操作。</p><p><font color=#D0087E size=4 face="幼圆">当看到运行符合预想那的一刻，心里是开心的，然后接着继续敲敲敲！！！</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704180218.gif" loading="lazy"></p><hr><p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/95089598">STL模板，内建函数对象(仿函数)的讲解运用和示范：greater()</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL模板，适配器的讲解运用和示范：函数对象适配器、函数指针适配器、成员函数适配器</title>
      <link href="posts/d8f9e0ff/"/>
      <url>posts/d8f9e0ff/</url>
      
        <content type="html"><![CDATA[<p>​            <strong>简述：</strong>对于 <code>适配器</code>的函数对象适配器、取反适配器、函数指针适配器、成员函数适配器，做一个讲解和小例子的应用，并且简单地探究一下原理。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        对于 <code>适配器</code>的函数对象适配器、取反适配器、函数指针适配器、成员函数适配器，做一个讲解和小例子的应用，并且简单地探究一下原理。</p><h2 id="讲解大纲："><a href="#讲解大纲：" class="headerlink" title="讲解大纲："></a>讲解大纲：</h2><p>简单说一下，什么叫做<code>适配器</code>，先演示一下子大纲</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708171220.png" loading="lazy"></p><p>其作用，个人理解，相当于<code>接口适配器</code>，生活中的类似于一个USB扩展坞，将电脑的一个USB3.0接口扩展成为有着多个USB3.0接口的排插。code里面相当于反过来看，将二个参数合并成为一个参数，进行输入输出。</p><p><strong>例子：</strong> 将<code>函数指针 + 变量</code>通过bind绑定成为一个<code>对象参数</code>。</p><h2 id="函数对象适配器"><a href="#函数对象适配器" class="headerlink" title="函数对象适配器"></a>函数对象适配器</h2><h4 id="初始代码："><a href="#初始代码：" class="headerlink" title="初始代码："></a>初始代码：</h4><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span>class MyPrint<span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708173610.png" loading="lazy"></p><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol><li>将参数进行绑定 <code>bind2nd()</code></li><li>做继承  <code>binary_function&lt;类型1， 类型2， 返回值类型&gt;</code></li><li>加 <code>const</code>，因为继承<code>binary_function</code>时候，其作为父类已经<code>重载()</code>作为常函数</li></ol><p>配图文解说，这个算是图文并茂了</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708175525.png" loading="lazy"></p><h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token comment">//函数对象适配器</span>class MyPrint<span class="token operator">:</span> public binary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708193108.png" loading="lazy"></p><h4 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h4><p>将上面30行代码做如下的变动，再次运行，观察和上一次的结果<strong>稍有区别</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//for_each(v.begin(), v.end(), bind2nd(MyPrint(), nBase) );</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind1st</span><span class="token punctuation">(</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708175831.png" loading="lazy"></p><h4 id="心得思考："><a href="#心得思考：" class="headerlink" title="心得思考："></a>心得思考：</h4><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708190801.png" loading="lazy"></p><h2 id="取反适配器："><a href="#取反适配器：" class="headerlink" title="取反适配器："></a>取反适配器：</h2><h3 id="初始代码：-1"><a href="#初始代码：-1" class="headerlink" title="初始代码："></a>初始代码：</h3><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token comment">//02取反适配器</span>class MyFindFour<span class="token punctuation">&#123;</span>public<span class="token operator">:</span>bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MyFindFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大于4的数值为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><em><strong>“1  3  4  2  6  5”从左往右开始遍历</strong></em>，第一个大于4的数值就是6</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708181248.png" loading="lazy"></p><h3 id="使用步骤：-1"><a href="#使用步骤：-1" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>一元取反 <code>not1</code></li><li>继承 <code>unary_function</code></li><li>加 <code>const</code></li></ol><p>如上三处修改，也可参照上面的<em><strong>函数对象适配器</strong></em>的 图文并茂的这一部分，理解修改的部分。</p><h3 id="代码演示：-1"><a href="#代码演示：-1" class="headerlink" title="代码演示："></a>代码演示：</h3><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token comment">//02取反适配器</span>class MyFindFour<span class="token operator">:</span> public unary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> bool<span class="token operator">></span><span class="token punctuation">&#123;</span>public<span class="token operator">:</span>bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not1</span><span class="token punctuation">(</span><span class="token function">MyFindFour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大(划掉，改小)于4的数值为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行演示：-1"><a href="#运行演示：-1" class="headerlink" title="运行演示："></a>运行演示：</h3><p>运行结果: <em><strong>“1  3  4  2  6  5”从左往右开始遍历</strong></em>，第一个小于4的数值就是1</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708182733.png" loading="lazy"></p><h3 id="细节方面：-1"><a href="#细节方面：-1" class="headerlink" title="细节方面："></a>细节方面：</h3><p>将上面的27行代码做如下的变动，再次运行，观察和上一次的结果<strong>没有区别</strong>，但是写法却更加高级，越加活学活用。</p><p>这样写的优点：可以将10行<code>class MyFindFour: public unary_function&lt;int, bool&gt;</code>里面的具体数字4，写到外面来，可以修改成任意的数值，不再受局限</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//vector&lt;int>::iterator pos = find_if(v.begin(), v.end(), not1(MyFindFour()));</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not1</span><span class="token punctuation">(</span><span class="token function">bind2nd</span><span class="token punctuation">(</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708182733.png" loading="lazy"></p><h3 id="心得思考：-1"><a href="#心得思考：-1" class="headerlink" title="心得思考："></a>心得思考：</h3><h3 id="注意区别："><a href="#注意区别：" class="headerlink" title="注意区别："></a>注意区别：</h3><h2 id="函数指针适配器："><a href="#函数指针适配器：" class="headerlink" title="函数指针适配器："></a>函数指针适配器：</h2><h3 id="初始代码：-2"><a href="#初始代码：-2" class="headerlink" title="初始代码："></a>初始代码：</h3><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token comment">//03函数指针适配器</span><span class="token keyword">void</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyPrintf<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708183636.png" loading="lazy"></p><h3 id="使用步骤：-2"><a href="#使用步骤：-2" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>先使用<code>ptr_fun()</code>将<code>MyPrintf函数指针</code>便成为<strong>对象</strong>，</li><li>然后再用<code>bind2nd()</code>绑定</li><li>修改需要绑定多个参数的<code>函数MyPrintf()</code></li></ol><h3 id="代码演示：-2"><a href="#代码演示：-2" class="headerlink" title="代码演示："></a>代码演示：</h3><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token comment">//03函数指针适配器</span><span class="token keyword">void</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">ptr_fun</span><span class="token punctuation">(</span>MyPrintf<span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行演示：-2"><a href="#运行演示：-2" class="headerlink" title="运行演示："></a>运行演示：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708184240.png" loading="lazy"></p><h3 id="细节方面：-2"><a href="#细节方面：-2" class="headerlink" title="细节方面："></a>细节方面：</h3><p>注意这一行是怎么修改的，以及还需要修改的地方</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">ptr_fun</span><span class="token punctuation">(</span>MyPrintf<span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="心得思考：-2"><a href="#心得思考：-2" class="headerlink" title="心得思考："></a>心得思考：</h3><h2 id="成员函数适配器："><a href="#成员函数适配器：" class="headerlink" title="成员函数适配器："></a>成员函数适配器：</h2><h3 id="初始代码：-3"><a href="#初始代码：-3" class="headerlink" title="初始代码："></a>初始代码：</h3><p>初始代码：这一个打印的结果，后面的修改，在这里代码之上修改和演示</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//04成员函数适配器</span>class Person<span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>public<span class="token operator">:</span>string m_strName<span class="token punctuation">;</span><span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyPrintf04</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"函数MyPrintf04==》  姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyPrintf04<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果:"></a>运行结果:</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708185700.png" loading="lazy"></p><h3 id="使用步骤：-3"><a href="#使用步骤：-3" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>取到成员函数的地址<code>&amp;Person::MyPrintfPerson</code></li><li>通过<code>mem_fun_ref()</code>对成员函数进行适配</li></ol><h3 id="代码演示：-3"><a href="#代码演示：-3" class="headerlink" title="代码演示："></a>代码演示：</h3><p>创建一个控的项目，再添加一个空的main.cpp,在里面添加如下代码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//04成员函数适配器</span>class Person<span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MyPrintfPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类的成员函数MyPrintfPerson==》  姓名："</span> <span class="token operator">&lt;&lt;</span> m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>public<span class="token operator">:</span>string m_strName<span class="token punctuation">;</span><span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyPrintf04</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"函数MyPrintf04==》  姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for_each(v.begin(), v.end(), MyPrintf04);  //注意这一行，参数3 是使用的函数指针</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token operator">::</span>MyPrintfPerson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行演示：-3"><a href="#运行演示：-3" class="headerlink" title="运行演示："></a>运行演示：</h3><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708190104.png" loading="lazy"></p><h3 id="细节方面：-3"><a href="#细节方面：-3" class="headerlink" title="细节方面："></a>细节方面：</h3><p>不用再去修改类的成员函数</p><h3 id="心得思考：-3"><a href="#心得思考：-3" class="headerlink" title="心得思考："></a>心得思考：</h3><p>这个算是这些里面，最简单方便的一个方法了的吧，个人感觉。</p><h2 id="邂逅感："><a href="#邂逅感：" class="headerlink" title="邂逅感："></a>邂逅感：</h2><p>写完这一篇博客，感觉耗费时间还是比较久的，虽然知识点比较简单，但是为了简单说清楚，图文并茂，还是花了两个小时的。算是比较适合对新人小白入门的一个友好的教程，毕竟第一次接触c++的适配器，可能会感觉比较玄乎，希望这一篇可以帮到大家。（如果觉得真的有帮助到你，还觉得本文写的不错，可以适当点个赞，让更多的人可以看到。觉得一般的话，可以看过就就过了。）</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190708191412.png" loading="lazy"></p><p><font color=#D0087E size=4 face="幼圆">当看到弄清知识点的时候，或者帮助到有需要的人的时候，毕竟我的心里是开心的，然后接着继续敲敲敲！！！</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704180218.gif" loading="lazy"></p><h2 id="代码下载："><a href="#代码下载：" class="headerlink" title="代码下载："></a>代码下载：</h2><p>想一了下，虽然上面都还是单独可以运行代码，当时是决定把代码集合发布出来，可以当做一个代码查看：与那比较四种不同的适配器的区别：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span>  <span class="token comment">//算法</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//内建函数对象</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional></span>  <span class="token comment">//适配器</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//01 函数对象适配器</span>class MyPrint<span class="token operator">:</span> public binary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">MyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for_each(v.begin(), v.end(), bind1st(MyPrint(), nBase));</span><span class="token punctuation">&#125;</span><span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//02取反适配器</span>class MyFindFour<span class="token operator">:</span> public unary_function<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> bool<span class="token operator">></span><span class="token punctuation">&#123;</span>public<span class="token operator">:</span>bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>  <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//vector&lt;int>::iterator pos = find_if(v.begin(), v.end(), not1(MyFindFour()));</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator pos <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">not1</span><span class="token punctuation">(</span><span class="token function">bind2nd</span><span class="token punctuation">(</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大(划掉，改小)于4的数值为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pos <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">else</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//03函数指针适配器</span><span class="token keyword">void</span> <span class="token function">MyPrintf</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> nBase<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"val:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">"   nBase:"</span> <span class="token operator">&lt;&lt;</span> nBase <span class="token operator">&lt;&lt;</span> <span class="token string">"   val+nBase:"</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">+</span> nBase <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> nBase <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bind2nd</span><span class="token punctuation">(</span><span class="token function">ptr_fun</span><span class="token punctuation">(</span>MyPrintf<span class="token punctuation">)</span><span class="token punctuation">,</span> nBase<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token comment">//04成员函数适配器</span>class Person<span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_strName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MyPrintfPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"类的成员函数MyPrintfPerson==》  姓名："</span> <span class="token operator">&lt;&lt;</span> m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>public<span class="token operator">:</span>string m_strName<span class="token punctuation">;</span><span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyPrintf04</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"函数MyPrintf04==》  姓名："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_strName <span class="token operator">&lt;&lt;</span> <span class="token string">"   年龄："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> v<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for_each(v.begin(), v.end(), MyPrintf04);  //注意这一行，参数3 是使用的函数指针</span><span class="token function">for_each</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mem_fun_ref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Person<span class="token operator">::</span>MyPrintfPerson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意这一行，参数3 是使用的函数指针</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//test01();</span><span class="token comment">//test02();</span><span class="token comment">//test03();</span><span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/95090677">TL模板，适配器的讲解运用和示范：函数对象适配器、取反适配器、函数指针适配器、成员函数适配器</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL模板set/multiset容器插入自定义数据类型排序</title>
      <link href="posts/a5ad800d/"/>
      <url>posts/a5ad800d/</url>
      
        <content type="html"><![CDATA[<p>​        <strong>简述：</strong>  解决错误error C2678 类型方案<code>1&gt;c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef(239): error C2678: 二进制“&lt;”: 没有找到接受“const Person”类型的左操作数的运算符(或没有可接受的转换)</code></p><p>​        另外单独举一个完整示例。使用<code>STL</code>  模板的<code>set</code>容器，对自定义的数据类型，进行相应的插入和排序。具体使用了<code>set</code>和<code>multiset</code>进行举例子，他们的区别和联系，和<strong>使用自定义规则</strong>进行插入排序。以及<strong>二级排序</strong>的示范</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><p><strong>编程软件：</strong>  visual studio 2015， Qt 5.9.8</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        解决错误error C2678 类型方案</p><p><code>1&gt;c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef(239): error C2678: 二进制“&lt;”: 没有找到接受“const Person”类型的左操作数的运算符(或没有可接受的转换)</code></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190706194654.png" loading="lazy"></p><p>另外单独举一个完整示例。使用<code>STL</code> 模板的<code>set</code>容器，对自定义的数据类型，进行相应的插入和排序。具体使用了<code>set</code>和<code>multiset</code>进行举例子，他们的区别和联系，和<strong>使用自定义规则</strong>进行插入排序。以及<strong>二级排序</strong>的示范</p><h2 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h2><p>使用<code>STL</code>  模板的<code>set</code>容器，对自定义的数据类型，进行相应的插入和排序时候。这里需要重载<code>()</code>函数，不然的话，在stl的源码底层调用的时候，会不认识。</p><p>会在11行崩溃（如下为STL底层源码查看）。就因为不知道怎么按照（自定义的类型的）<strong>什么规则</strong>进行插入数据到容器。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// TEMPLATE STRUCT less</span>template<span class="token operator">&lt;</span>class _Ty <span class="token operator">=</span> <span class="token keyword">void</span><span class="token operator">></span><span class="token keyword">struct</span> <span class="token class-name">less</span><span class="token punctuation">&#123;</span><span class="token comment">// functor for operator&lt;</span><span class="token keyword">typedef</span> _Ty first_argument_type<span class="token punctuation">;</span><span class="token keyword">typedef</span> _Ty second_argument_type<span class="token punctuation">;</span><span class="token keyword">typedef</span> bool result_type<span class="token punctuation">;</span>constexpr bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> _Ty<span class="token operator">&amp;</span> _Left<span class="token punctuation">,</span> <span class="token keyword">const</span> _Ty<span class="token operator">&amp;</span> _Right<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token comment">// apply operator&lt; to operands</span><span class="token keyword">return</span> <span class="token punctuation">(</span>_Left <span class="token operator">&lt;</span> _Right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>使用重载的初始化函数，添加一个仿函数，或者回调函数（其他容器），进行使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">set<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span> s<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下举一个完成的实例。</p><p>具体使用了<code>set</code>和<code>multiset</code>进行举例子，他们的区别和联系，和<strong>使用自定义规则</strong>进行插入排序。以及<strong>二级排序</strong>的示范</p><h2 id="项目背景："><a href="#项目背景：" class="headerlink" title="项目背景："></a>项目背景：</h2><p>演示<code>set</code>和<code>multiset</code>的用法，其中multiset和set一样，唯一区别：允许键值重复。</p><p>使用<code>multiset</code>对多个数据对象，进行==一定规则（二级排序方式）==插入到容器里面。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190706192722.png" loading="lazy"></p><h2 id="思路架构："><a href="#思路架构：" class="headerlink" title="思路架构："></a>思路架构：</h2><ul><li><p>创新自定义的<code>Person</code>数据类型</p></li><li><p>创建<code>Person</code>对象</p></li><li><p>创建仿函数**<code>MyCompare</code>**，</p></li><li><p>创建容器<code>s</code></p></li><li><p>将<code>Person</code>对象插入<code>multiset</code>容器（为了演示二级排序，需要有重复的数值，故使用multiset）</p></li><li><p>打印容器<code>s</code>里面的结果</p></li></ul><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>上代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span>  <span class="token comment">//set和multiset均使用此头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">//自定义类型</span>class Person  <span class="token punctuation">&#123;</span>public<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">m_strname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_nHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>public<span class="token operator">:</span>string m_strname<span class="token punctuation">;</span><span class="token keyword">int</span> m_nAge<span class="token punctuation">;</span><span class="token keyword">int</span> m_nHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//利用仿函数 指定set容器的排序</span>class MyCompare <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_nAge <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nHeight <span class="token operator">></span> p2<span class="token punctuation">.</span>m_nHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">;</span>  <span class="token comment">//年龄从小到大排序</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printfSet</span><span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_strname <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nAge <span class="token operator">&lt;&lt;</span> <span class="token string">" 身高："</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>m_nHeight <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"p2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"p3"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p4</span><span class="token punctuation">(</span><span class="token string">"p4"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p5</span><span class="token punctuation">(</span><span class="token string">"p5"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p6</span><span class="token punctuation">(</span><span class="token string">"p6"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token function">p7</span><span class="token punctuation">(</span><span class="token string">"p7"</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//set&lt;Person> s;  //直接写，不知按照什么“大小规则”进行插入</span><span class="token comment">//set&lt;Person, MyCompare> s;   //加入仿函数， 使用“自定义规则”插入排序</span>multiset<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> MyCompare<span class="token operator">></span> s<span class="token punctuation">;</span>   s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p6<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>p7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printfSet</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行演示："><a href="#运行演示：" class="headerlink" title="运行演示："></a>运行演示：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190706193625.png" loading="lazy"></p><h2 id="细节方面："><a href="#细节方面：" class="headerlink" title="细节方面："></a>细节方面：</h2><p>注意分析这一段，其他容器可能会是 <strong>回调函数（函数指针）</strong>;</p><p>如下自定义的数据类型规则排序是：</p><ol><li><strong>先按照年龄排序，年龄由小到大</strong></li><li><strong>若年龄相同，则按照身高由大到小排序</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//利用仿函数 指定set容器的排序</span>class MyCompare <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>bool <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_nAge <span class="token operator">==</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nHeight <span class="token operator">></span> p2<span class="token punctuation">.</span>m_nHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>m_nAge <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>m_nAge<span class="token punctuation">;</span>  <span class="token comment">//年龄从小到大排序</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要重载<code>()</code>函数，不然的话，在stl的源码底层调用的时候，否则会不认识。</p><h2 id="本次心得："><a href="#本次心得：" class="headerlink" title="本次心得："></a>本次心得：</h2><p><font color=#D0087E size=4 face="幼圆">当看到运行成功那的一刻，心里或许就是这样的</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/gif/20190704175742.gif" loading="lazy"></p><hr><p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/94890901">STL模板set/multiset容器插入自定义数据类型排序</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UltraEdit_chinese_64.exe强大的记事本工具(带官网离线安装包和破解工具)破解教程</title>
      <link href="posts/6fd12b7b/"/>
      <url>posts/6fd12b7b/</url>
      
        <content type="html"><![CDATA[<p>​        提供 <code>UltraEdit_chinese_64.exe</code>软件的破解教程，以及相关资源下载。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong>  #2019-7-4 16:43:31</font></p><p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong></font>    #</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        提供 <code>UltraEdit_chinese_64.exe</code>软件的破解教程，以及相关资源下载。</p><h2 id="下载安装包："><a href="#下载安装包：" class="headerlink" title="下载安装包："></a>下载安装包：</h2><ul><li><p>国外官网下载(推荐)：<a href="https://www.ultraedit.com/">UltraEdit 官网</a></p></li><li><p>使用博主提供好的：<a href="https://pan.baidu.com/s/1TtsDYze_h4oo073yBUDxNg">【破解】UE_chinese_x64_26版本.zip </a> 提取码: 27p7</p></li><li><p>激活工具：<a href="https://pan.baidu.com/s/18Xe5994wX8Td0MckL4Gtvw">破解工具</a>:  提取码：l51j</p><p>  ​                  在上面的压缩包里也有</p></li></ul><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>若是无特殊说明，<strong>链接一般都是为百度云链接</strong>，且这些分享的软件，都是经过我自己重度使用过了的，亲测有效，且最少都是使用了好几个月了的，亲测有效。若是链接失效，可以评论留言，我会更新该链接。</p><h2 id="下载工具推荐："><a href="#下载工具推荐：" class="headerlink" title="下载工具推荐："></a>下载工具推荐：</h2><p>推荐使用<code>PanDownload</code>和<code>速盘</code>，前者我都是使用了快一年了，感觉一会都很稳定，后者听说也不错，不过本人没有尝试过。</p><p><font color=#70AD47 size=3 face="幼圆"><strong>嫌弃麻烦的，可以考虑使用提供的网页版：</strong></font></p><ul><li>pandownload网页版正式发布，一款完全免费且支持全平台免登录、免安装的下载工具。<br>  地址1： <a href="https://www.baiduwp.com/">https://www.baiduwp.com</a><br>  地址2： <a href="https://baiduwangpan.com/">https://baiduwangpan.com</a> </li><li>在分享链接的baidu后面加上wp可以快速跳转到网页版，例如：<br>  分享链接： <a href="https://pan.baidu.com/s/1N6MvdFv8amDjRKzKCioz7Q">https://pan.baidu.com/s/1N6MvdFv8amDjRKzKCioz7Q</a><br>  网页版链接： <a href="https://pan.baiduwp.com/s/1N6MvdFv8amDjRKzKCioz7Q">https://pan.baiduwp.com/s/1N6MvdFv8amDjRKzKCioz7Q</a><br>  <strong>注意：</strong>网页版限制了单个IP每天的下载次数，防止滥用。请不要使用IDM或迅雷等多线程下载器下载！ </li></ul><ul><li>PanDownload分为windows、安卓、和网页版本。效果相当于破解的百度云，不限速，有专人的维护。</li></ul><p>客户端下载：<a href="http://pandownload.com/">PanDownload官网</a> </p><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><p>安装过程:略 (疯狂点击下一步：Next)</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704164822.png" loading="lazy"></p><p>这里就不要勾选下面这个UItraCompare，因为这是该系类的另外一个软件，相当于广告推广，没必要安装，若是非需要使用的话，<a href="https://touwoyimuli.github.io/2019/07/04/Beyond-Compare-4%E6%96%87%E4%BB%B6%E5%AF%B9%E6%AF%94%E7%A5%9E%E5%99%A8-%EF%BC%88%E5%B8%A6%E5%AE%98%E7%BD%91%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E5%92%8C%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7%EF%BC%89-%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/">Beyond Compare 4文件对比神器</a>这个工具。把简直就是编程必备。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704164851.png" loading="lazy"></p><p>安装完成。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704172808.png" loading="lazy"></p><h2 id="破解激活："><a href="#破解激活：" class="headerlink" title="破解激活："></a>破解激活：</h2><p>IDM_Patch_v5.0 是 IDM Solution 公司旗下产品破解器，使用方法如下：</p><p>1、安装好 IDM Solution 公司产品，这里以 UltraEdit 为例，其他软件以此类推</p><p>2、安装好之后，不要运行 UltraEdit</p><p>3、将本文件夹内的 IDM_Patch_v5.0.exe 拷贝到 UltraEdit 安装目录下，默认情况下是：</p><p>32位：C:\Program Files (x86)\IDM Computer Solutions\UltraEdit<br>64位：C:\Program Files\IDM Computer Solutions\UltraEdit</p><p>4、运行 IDM_Patch_v5.0.exe，从产品列表里选择需要破解的软件</p><p>5、点击右下角的Patch按钮，搞定！</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704165628.png" loading="lazy"></p><h2 id="破解成功："><a href="#破解成功：" class="headerlink" title="破解成功："></a>破解成功：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704170343.png" loading="lazy"></p><p> <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704154359.gif" loading="lazy"></p><p><font color=#D0087E size=4 face="幼圆">激活成功✿✿ヽ(°▽°)ノ✿</font></p><h2 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h2><p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/94636145">UltraEdit_chinese_64.exe强大的记事本工具(带官网离线安装包和破解工具)破解教程</a></p><h2 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h2><p><font color=#D0087E size=4 face="幼圆">本文仅用于学习、研究和交流目的，欢迎非商业性质转载。但请注明博客来源</font></p><ul><li><p><font color=#FF0101 size=3 face="幼圆">文章内容部分来源于互联网，不代表本人的任何立场；涉及到的软件来源于互联网，仅供个人下载使用，请勿用于商业用途，版权归软件开发者所有，下载后请于24小时内删除，如有真实需要请支持正版！因下载本站任何资源造成的损失，全部责任由使用者本人承担！如果你是版权方，认为本文内容对您的权益有所侵犯，<font color=#2B4FB0 size=3 face="幼圆"><a href="https://touwoyimuli.github.io/about/">请联系博主的QQ</a>，附上添加好友理由</font>，且应该提交相应的证明材料，待博主进行严格地审查和背景调查后，情况属实的将在最快时间(三~五天)内将本文删除或修正。</font></p></li><li><p><font color=#FF0101 size=3 face="幼圆">附:二○○二年一月一日《计算机软件保护条例》第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬!</font></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 - 破解软件(常用，稀缺) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beyond Compare 4文件对比神器 （带官网离线安装包和破解工具） 破解教程</title>
      <link href="posts/b9ded7b6/"/>
      <url>posts/b9ded7b6/</url>
      
        <content type="html"><![CDATA[<p>提供<code>Beyond Compare 4</code>软件的破解教程，以及相关资源下载。还有，能够找到这篇文章，是你我之间的缘分。</p><p>大平台文章发出来，要么发不出来，要么就是直接被删除。贼坑。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong> #2019-09-21 16:34:22</font></p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p> 提供<code>Beyond Compare 4</code>软件的破解教程，以及相关资源下载。</p><h2 id="软件用途："><a href="#软件用途：" class="headerlink" title="软件用途："></a>软件用途：</h2><p>一个程序，可以很容易地比较文件和文件夹。使用该软件提供的功能强大的工具，你将能够找到的所有文件/文件夹之间的差异，然后再结合或同步它们。</p><p>它能够通过检查修改的唯一文件大小和日期很快整个比较硬盘驱动器或文件夹。或者，它可以通过文件的字节比较，这需要较长的时间进行更彻底，字节，但它提供了更精确的结果。该方案是能够比较任何类型的文件，无论是可执行文件（.exe文件），文档（.doc，.pdf等），图像等</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224959.png"/ loading="lazy"><p>文本文档和源代码，可以通过侧面观看侧。除了比较支持语法高亮显示，并允许对文本文档，源代码和HTML文件中使用自定义归类的。此外，该方案可以在不同的文件合并成一个，其中将包含来自两个文档的信息。</p><p>该实用程序可用于文件夹同步。该程序会比较两个文件夹，并在视觉上突出显示所有的差异。在此之后，你可以同步两个文件夹，轻松地让他们相同的内容。</p><p>它可以让你自动执行重复性任务。要做到这一点，有脚本语言。任何脚本可以在命令行中运行，这样你就可以在任何时间为你安排同步。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224924.png"/ loading="lazy"><h2 id="下载安装包："><a href="#下载安装包：" class="headerlink" title="下载安装包："></a>下载安装包：</h2><ul><li><p>国外官网下载(推荐)：<a href="https://www.scootersoftware.com/">Beyond Compare 官网</a></p></li><li><p>使用博主提供好的：百度云链接： <a href="https://pan.baidu.com/s/1rqNnUw8HZw7EL0lxDCt75w">https://pan.baidu.com/s/1rqNnUw8HZw7EL0lxDCt75w</a>   提取码: c2q3</p></li><li><p>激活工具：[破解工具] 百度云链接：<a href="https://pan.baidu.com/s/1sdOT_tH8msE7vaUBkH8afA">https://pan.baidu.com/s/1sdOT_tH8msE7vaUBkH8afA</a>  提取码: ma1b</p><p>  ​                    在上面的压缩包里也有</p></li></ul><br><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>若是无特殊说明，<strong>链接一般都是为百度云链接</strong>，且这些分享的软件，都是经过我自己重度使用过了的，亲测有效，且最少都是使用了好几个月了的，亲测有效。若是链接失效，可以评论留言，我会更新该链接。</p><br><h2 id="下载工具推荐："><a href="#下载工具推荐：" class="headerlink" title="下载工具推荐："></a>下载工具推荐：</h2><p>推荐使用<code>PanDownload</code>，我都是使用了快一年了，感觉一直都很稳定。 <font color=#70AD47 size=3 face="幼圆"><strong>嫌弃麻烦的，可以考虑使用提供的网页版：</strong></font>   <strong>详细：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/94618573">破解百度云 PanDownload_Beta 使用教程</a> </p><br><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><p>安装过程:(疯狂点击下一步：Next)</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224818.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224751.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224732.png"/ loading="lazy"><br><h2 id="破解激活："><a href="#破解激活：" class="headerlink" title="破解激活："></a>破解激活：</h2><p>安装完成， 开始激活破解了：<br><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224652.png"/ loading="lazy"><br>运行压缩包里面的<code>Beyond_Compare_Keygen_4.x通用注册机.exe</code>，其中名称可以随意更改，但不要使用默认的<br>否则过一两天段时间，会显示该证书已经吊销。</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224611.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224533.png"/ loading="lazy"><p>比如我的生成的激活码就是这个，然后点击如下<code>Beyond Compare 4</code>的快捷方式，注册激活码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span> BEGIN LICENSE KEY <span class="token punctuation">---</span>RyfQg25Q+y6D+e9t<span class="token punctuation">-</span>rKVWfI2Njw48dYOgS0bxuwvT6WSO5ov+WJdpiapblD0kIqOrcKOMd0DsgccpROWP8kroS22VbQNk9ai56+SiyWFOY6u2tgsjhfOAdvinqbtalnhy0taz4iCTY3sSKSDtgKTdKtCt9qSLqsBYivKEqXuet3hPIAuEljmmjxOCA2<span class="token punctuation">-</span>0diMVoLV3Lvh3aMvKWWRFPyEEEu4s0e48hJBQC9ymBpKIhp0F2d8RfjR32qo0W8C77zhXOUVmp<span class="token punctuation">-</span>ACBf8y1BPNvEkOvbHeIGxcCNwKx1OIwRXLFIMtidT+q<span class="token punctuation">-</span>BGwgKzEqqNvDBI<span class="token punctuation">-</span>CaFjBrascuYxdHZrdmDk++<span class="token punctuation">---</span> END LICENSE KEY <span class="token punctuation">---</span><span class="token punctuation">-</span><span class="token punctuation">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行<code>Beyond Compare 4.exe</code>之后，会发现下图ERROR提示信息， 不过不用管，直接点击输入秘钥即可：</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224419.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224400.png"/ loading="lazy"><p>然后会看到提示成功，再接着就是进入软件，查看是否真的激活成功</p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190921224336.png"/ loading="lazy"><br><h2 id="破解成功："><a href="#破解成功：" class="headerlink" title="破解成功："></a>破解成功：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704154359.gif" loading="lazy"></p><p><font color=#D0087E size=4 face="幼圆">激活成功✿✿ヽ(°▽°)ノ✿</font></p><br><h2 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h2><p><font color=#70AD47 size=4 face="幼圆"> <strong>更新:2019-09-21</strong> </font></p><p>若是发现出现秘钥被吊销吊销的情况，请在注册机输入用户名，输入一个自己的随意一个的用户名，生成对应的激活秘钥，再进行激活，就又可以使用了；大概率是使用默认用户名激活的太多了，默认用户被吊销了；<font color=#FE7207  size=4 face="幼圆"><strong>或建议一开始就自己创建一个复杂一点的用户名生成自己的专属秘钥来激活。</strong></font></p><br><h2 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h2><p><font color=#D0087E size=4 face="幼圆">本文仅用于学习、研究和交流目的，欢迎非商业性质转载。但请注明博客来源</font></p><ul><li><font color=#FF0101 size=3 face="幼圆">文章内容部分来源于互联网，不代表本人的任何立场；涉及到的软件来源于互联网，仅供个人下载使用，请勿用于商业用途，版权归软件开发者所有，下载后请于24小时内删除，如有真实需要请支持正版！因下载本站任何资源造成的损失，全部责任由使用者本人承担！如果你是版权方，认为本文内容对您的权益有所侵犯，<font color=#2B4FB0 size=3 face="幼圆"><a href="https://touwoyimuli.github.io/about/">请联系博主的QQ</a>，附上添加好友理由</font>，且应该提交相应的证明材料，待博主进行严格地审查和背景调查后，情况属实的将在最快时间(三~五天)内将本文删除或修正。</font></li><li><font color=#FF0101 size=3 face="幼圆">附:二○○二年一月一日《计算机软件保护条例》第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬!</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 - 破解软件(常用，稀缺) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解百度云 PanDownload_Beta 使用</title>
      <link href="posts/386a822b/"/>
      <url>posts/386a822b/</url>
      
        <content type="html"><![CDATA[<p>​        提供 百度网盘 软件的破解版本（划掉，是替代版本）的资源和教程，，关于这个软件，已经有很多的描述了。优点：破解版的百度云，替代品，下载不限速，免费软件；有PC，安卓，网页版提供；当熊掌百度修改了相关的接口之后，他们的team也会跟着是该，有专人的团队进行尝长时间的维护。缺点：没有ios版本，maxOS版本</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong>  2019-7-4 14:50:05</font></p><p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong></font>    无</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        提供 百度网盘 软件的破解版本（划掉，是替代版本）的资源和教程，，关于这个软件，网上也已经有很多的描述了，不过多的介绍。</p><ul><li><p>优点：破解版的百度云，替代品，下载不限速，免费软件；<strong>有PC，安卓，网页版提供</strong>；当熊掌百度修改了相关的接口之后，他们的team也会跟着是该，有专人的团队进行尝长时间的维护。</p></li><li><p>缺点：没有ios版本，maxOS版本</p></li></ul><h2 id="下载链接："><a href="#下载链接：" class="headerlink" title="下载链接："></a>下载链接：</h2><ul><li><p><a href="http://pandownload.com/">PanDownload官网</a></p><p>  <img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704140103.png" loading="lazy"></p></li></ul><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>若是无特殊说明，<strong>链接一般都是为百度云链接</strong>，且这些分享的软件，都是经过我自己重度使用过了的，亲测有效，且最少都是使用了好几个月了的，亲测有效。若是链接失效，可以评论留言，我会更新该链接。</p><h2 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h2><ul><li>pandownload网页版正式发布，一款完全免费且支持全平台免登录、免安装的下载工具。<br>  地址1： <a href="https://www.baiduwp.com/">https://www.baiduwp.com</a><br>  地址2： <a href="https://baiduwangpan.com/">https://baiduwangpan.com</a></li><li>在分享链接的baidu后面加上wp可以快速跳转到网页版，例如：<br>  分享链接： <a href="https://pan.baidu.com/s/1N6MvdFv8amDjRKzKCioz7Q">https://pan.baidu.com/s/1N6MvdFv8amDjRKzKCioz7Q</a><br>  网页版链接： <a href="https://pan.baiduwp.com/s/1N6MvdFv8amDjRKzKCioz7Q">https://pan.baiduwp.com/s/1N6MvdFv8amDjRKzKCioz7Q</a><br>  <strong>注意：</strong>  网页版限制了单个IP每天的下载次数，防止滥用。请不要使用IDM或迅雷等多线程下载器下载！</li><li>PanDownload分为windows、安卓、和网页版本。效果相当于破解的百度云，不限速，有专人的维护<a href="http://pandownload.com/">PanDownload官网</a></li></ul><p>不过该软件也有一个限制，分为公测版和测试版本，其中具体的区别如下：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704144501.png" alt="PanDownload 版本区别限制" loading="lazy"></p><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><p>安装过程:加压即可使用，免安装</p><h2 id="破解激活："><a href="#破解激活：" class="headerlink" title="破解激活："></a>破解激活：</h2><p>无</p><h2 id="破解成功："><a href="#破解成功：" class="headerlink" title="破解成功："></a>破解成功：</h2><p>无</p><p><font color=#D0087E size=4 face="幼圆">使用成功✿✿ヽ(°▽°)ノ✿</font></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704144857.gif" loading="lazy"></p><h2 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h2><p><strong>本博文同步到csdn博客：</strong>  <a href="https://blog.csdn.net/qq_33154343/article/details/94618573">破解百度云 PanDownload_Beta 使用</a></p><h2 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h2><p><font color=#D0087E size=4 face="幼圆">本文仅用于学习、研究和交流目的，欢迎非商业性质转载。但请注明博客来源</font></p><ul><li><p><font color=#FF0101 size=3 face="幼圆">文章内容部分来源于互联网，不代表本人的任何立场；涉及到的软件来源于互联网，仅供个人下载使用，请勿用于商业用途，版权归软件开发者所有，下载后请于24小时内删除，如有真实需要请支持正版！因下载本站任何资源造成的损失，全部责任由使用者本人承担！如果你是版权方，认为本文内容对您的权益有所侵犯，<font color=#2B4FB0 size=3 face="幼圆"><a href="https://touwoyimuli.github.io/about/">请联系博主的QQ</a>，附上添加好友理由</font>，且应该提交相应的证明材料，待博主进行严格地审查和背景调查后，情况属实的将在最快时间(三~五天)内将本文删除或修正。</font></p></li><li><p><font color=#FF0101 size=3 face="幼圆">附:二○○二年一月一日《计算机软件保护条例》第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬!</font></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 - 破解软件(常用，稀缺) </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo框架Maupassant主题，将valine匿名评论改迁为disqus评论系统</title>
      <link href="posts/39059f9b/"/>
      <url>posts/39059f9b/</url>
      
        <content type="html"><![CDATA[<p><code>hexo</code>博客框架<code>Maupassant</code>主题，设置评论区，采用的评论区为：<code>disqus</code> 和 <code>valine</code> 评论系统，且分析两者的利弊与使用性质。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p><code>hexo</code>博客框架<code>Maupassant</code>主题，设置评论区，采用的评论区为：<code>disqus</code> 和 <code>valine</code> 评论系统，且分析两者的利弊与使用性质。</p><p><strong>编程环境：</strong>  win10 x64 专业版</p><h2 id="两者比较："><a href="#两者比较：" class="headerlink" title="两者比较："></a>两者比较：</h2><p><code>valine</code>评论可以免登录，直接匿名留言，感觉爽歪歪，是我之所爱。<strong>可是、可是、可是、</strong>，因为本人的<code>小破站</code>想被百度等收录，就只有认证，然后这就有点慌慌的。还是改成登录的模式，不过就是的成本比较高，需要自备梯子vpn，才能够留言，<strong>可是、可是、可是、</strong>，如果是技术人员，我觉得有些东东，还是需要自己摸一遍的，这些都是要自己学会的东西。且避免一些，考虑再三，还是采用<code>disqus</code>评论系统吧（<strong>这算是真的匿名评论吧！</strong>）。</p><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>本人采用的是 <code>hexo</code>框架<code>Maupassant</code>主题，好就好在他自带集成了很多的评论系统，</p><blockquote><p>可以参考的全文：<a href="https://www.haomwei.com/technology/maupassant-hexo.html">屠城 大道至简——Hexo简洁主题推荐</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">disqus</span><span class="token punctuation">:</span> <span class="token comment">## Your disqus_shortname, e.g. username</span><span class="token key atrule">uyan</span><span class="token punctuation">:</span> <span class="token comment">## Your uyan_id. e.g. 1234567</span><span class="token key atrule">livere</span><span class="token punctuation">:</span> <span class="token comment">## Your livere data-uid, e.g. MTAyMC8zMDAxOC78NTgz</span><span class="token key atrule">changyan</span><span class="token punctuation">:</span> <span class="token comment">## Your changyan appid, e.g. cyrALsXc8</span><span class="token key atrule">changyan_conf</span><span class="token punctuation">:</span> <span class="token comment">## Your changyan conf, e.g. prod_d8a508c2825ab57eeb43e7c69bba0e8b</span><span class="token key atrule">gitment</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">## If you want to use Gitment comment system please set the value to true.</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> <span class="token comment">## Your GitHub ID, e.g. username</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token comment">## The repository to store your comments, make sure you're the repo's owner, e.g. imsun.github.io</span>  <span class="token key atrule">client_id</span><span class="token punctuation">:</span> <span class="token comment">## GitHub client ID, e.g. 75752dafe7907a897619</span>  <span class="token key atrule">client_secret</span><span class="token punctuation">:</span> <span class="token comment">## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>disqus - <a href="https://disqus.com/">Disqus评论</a> shortnam   <strong>参考</strong>：<a href="https://www.jianshu.com/p/d68de067ea74">Hexo搭建博客系列：（六）Hexo添加Disqus评论</a></p></li><li><p>uyan - <a href="http://www.uyan.cc/">友言评论</a> id</p></li><li><p>livere - <a href="https://livere.com/">来必力评论</a> data-uid</p></li><li><p>changyan - <a href="http://changyan.kuaizhan.com/">畅言评论</a> appid</p></li><li><p>gitment - <a href="https://github.com/imsun/gitment">Gitment评论</a>相关参数</p></li><li><p>gitalk - <a href="https://github.com/gitalk/gitalk">Gitalk评论</a>相关参数</p></li><li><p>valine - <a href="https://valine.js.org/">Valine评论</a>相关参数</p></li></ul><p><font color=#D0087E size=4 face="幼圆"><strong>以下设置均是在<code>hexo/Maupassant</code>下面的<code>_config.yml</code>下面设置的</strong></font></p><h2 id="valine评论设置："><a href="#valine评论设置：" class="headerlink" title="valine评论设置："></a>valine评论设置：</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span> <span class="token comment">## https://valine.js.org</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">## If you want to use Valine comment system, please set the value to true.</span>  <span class="token key atrule">appid</span><span class="token punctuation">:</span> 手动打码，自行替换成自己的 <span class="token comment">## Your LeanCloud application App ID, e.g. pRBBL2JR4N7kLEGojrF0MsSs-gzGzoHsz</span>  <span class="token key atrule">appkey</span><span class="token punctuation">:</span> 手动打码，自行替换成自己的 <span class="token comment">## Your LeanCloud application App Key, e.g. tjczHpDfhjYDSYddzymYK1JJ</span>  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">## Mail notifier, see https://github.com/xCss/Valine/wiki/Valine-评论系统中的邮件提醒设置</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">## Validation code.</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 我就只是想看看，字都懒得打<span class="token punctuation">...</span> <span class="token comment">## Comment box placeholders.</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span> <span class="token comment">## Gravatar type, see https://github.com/xCss/Valine/wiki/avatar-setting-for-valine</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment">## Number of comments per page.</span>  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span> nick<span class="token punctuation">,</span>mail<span class="token punctuation">,</span>link <span class="token comment">## Attributes of reviewers.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="valine评论效果："><a href="#valine评论效果：" class="headerlink" title="valine评论效果："></a>valine评论效果：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190701222228.png" loading="lazy"></p><h2 id="disqus评论设置："><a href="#disqus评论设置：" class="headerlink" title="disqus评论设置："></a>disqus评论设置：</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">disqus</span><span class="token punctuation">:</span> touwoyimulier <span class="token comment">## Your disqus_shortname, e.g. username</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="disqus评论效果："><a href="#disqus评论效果：" class="headerlink" title="disqus评论效果："></a>disqus评论效果：</h2><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190701223406.png" loading="lazy"></p><p><strong>参考博文：</strong> <a href="https://www.jianshu.com/p/d68de067ea74">Hexo搭建博客系列：（六）Hexo添加Disqus评论</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客 Maupassant主题 添加萌妹纸、萌宠</title>
      <link href="posts/3e8d8d2/"/>
      <url>posts/3e8d8d2/</url>
      
        <content type="html"><![CDATA[<p>​        给<code>hexo</code>博客养一个 萌妹子或者萌宠，也是偶然之间发现可以添加可爱的妹纸或者是萌宠，发现挺好玩的，而且作者提供了很多模型供你选择，没事的时候还可以逗一逗 ?</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong>  win10 x64 专业版</p><br><h2 id="获取："><a href="#获取：" class="headerlink" title="获取："></a>获取：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="选择自己喜欢的萌妹子"><a href="#选择自己喜欢的萌妹子" class="headerlink" title="选择自己喜欢的萌妹子"></a>选择自己喜欢的萌妹子</h2><p>可以到github中查看，选择喜欢的妹子造型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 <span class="token punctuation">(</span>use <span class="token function">npm</span> <span class="token function">install</span> --save live2d-widget-model-haru<span class="token punctuation">)</span>live2d-widget-model-haru/02 <span class="token punctuation">(</span>use <span class="token function">npm</span> <span class="token function">install</span> --save live2d-widget-model-haru<span class="token punctuation">)</span>live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如选择： live2d-widget-model-miku</p><br><h2 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-miku<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h2 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h2><p>在站点的 <code>_config.yml</code> 下配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">live2d:  enable: <span class="token boolean">true</span>  scriptFrom: <span class="token builtin class-name">local</span>  model:    use: live2d-widget-model-wanko  display:    position: right    width: <span class="token number">150</span>    height: <span class="token number">300</span>  mobile:    show: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>use</code> 用来配置模型，目前有很多模型可以选择。 <a href="https://github.com/xiazeyu/live2d-widget-models">模型</a></p><p>也有对应模型的预览效果。<a href="https://touwoyimuli.github.io/">touwoyimuli.github.io</a></p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190926232733.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190926233018.png"/ loading="lazy"><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190926232757.png"/ loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客 Maupassant主题 旧电脑迁移到新电脑</title>
      <link href="posts/ade23fdc/"/>
      <url>posts/ade23fdc/</url>
      
        <content type="html"><![CDATA[<p>​        将旧电脑/环境下面的<code>hexo</code>博客环境，迁移到新电脑/环境里面，所需要的运行操作。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        将旧电脑/环境下面的<code>hexo</code>博客环境，迁移到新电脑/环境里面，所需要的运行操作。</p><p><strong>发博配置：</strong>  win10 x64 专业版</p><h2 id="安装Hexo博客框架："><a href="#安装Hexo博客框架：" class="headerlink" title="安装Hexo博客框架："></a>安装Hexo博客框架：</h2><blockquote><p>参考：<a href="https://hexo.io/zh-cn/docs/"><strong>Hexo文档</strong></a></p></blockquote><p>什么是 Hexo？</p><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><p>安装Node.js</p><p><a href="http://nodejs.org/">Node.js</a> (此刻最新：10.16.0 LTS ; win x64)</p><p>安装成功:</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190629231243.png" loading="lazy"></p><p>验证是否安装成功：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190629231913.png" loading="lazy"></p><h4 id="安装git："><a href="#安装git：" class="headerlink" title="安装git："></a>安装git：</h4><h4 id="官网Git下载"><a href="#官网Git下载" class="headerlink" title="官网Git下载"></a>官网<a href="http://git-scm.com/">Git</a>下载</h4><p>验证是否安装成功：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190630003732.png" loading="lazy"></p><h3 id="安装Hexo框架："><a href="#安装Hexo框架：" class="headerlink" title="安装Hexo框架："></a>安装Hexo框架：</h3><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><p>安装成功：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190630003502.png" loading="lazy"></p><h2 id="安装Maupassant主题皮肤："><a href="#安装Maupassant主题皮肤：" class="headerlink" title="安装Maupassant主题皮肤："></a>安装Maupassant主题皮肤：</h2><blockquote><p>参考来源：<a href="https://www.haomwei.com/technology/maupassant-hexo.html"><strong>Maupassant安装</strong></a></p></blockquote><p>安装主题和渲染器：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">$ git clone <span class="token property">https</span><span class="token punctuation">:</span>//github.com/tufu9441/maupassant-hexo.git themes/maupassant <span class="token punctuation">(</span>已存在安装过，此句不用执行<span class="token punctuation">)</span>$ npm install hexo-renderer-pug --save$ npm install hexo-renderer-sass --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>验证安装是否成功：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190630010358.png" loading="lazy"></p><h2 id="安装文章字数统计、阅读量统计："><a href="#安装文章字数统计、阅读量统计：" class="headerlink" title="安装文章字数统计、阅读量统计："></a>安装文章字数统计、阅读量统计：</h2><blockquote><p>参考：<a href="https://www.jianshu.com/p/e122fc6f5946">Hexo文章计数插件WordCount</a></p></blockquote><p>和<code>maupassant</code>主题的<code>_config.yml</code>配置文件有这句话：</p><p><code>wordcount: true ## If you want to display the word counter and the reading time expected to spend of each post please set the value to true, and you must have hexo-wordcount installed.</code></p><p>运行命令：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">npm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示效果：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190630152429.png" loading="lazy"></p><p>可能会有几分钟的延时，才会显示正常（我也不小的为什么，一开始还以为设置无效了，巨坑）。</p><h2 id="验证迁移成功："><a href="#验证迁移成功：" class="headerlink" title="验证迁移成功："></a>验证迁移成功：</h2><p>然后再次文件夹里面的博文发布一下，看是否已经确定移植OK？</p><p>运行命令：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 看到如下结果就表示OK：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190630010819.png" loading="lazy"></p><h2 id="本次心得："><a href="#本次心得：" class="headerlink" title="本次心得："></a>本次心得：</h2><p>​        注意要到<code>hexo/</code>文件夹下进行相关的命令：</p><p>​        以上步骤简单概述就是如下：</p><ul><li><p>安装Node.js</p></li><li><p>安装Hexo框架</p></li><li><p>安装主题的渲染器</p></li></ul><p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/94236384"><strong>hexo博客 Maupassant主题 旧电脑迁移到新电脑</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenMesh模型分割：区域增长实现</title>
      <link href="posts/93376726/"/>
      <url>posts/93376726/</url>
      
        <content type="html"><![CDATA[<p>​        将一个数据结构的模型OpenMesh进行分割，用区域增长的方式，来遍历所有，且此算法耗时比较短。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        将一个数据结构的模型OpenMesh进行分割，用区域增长的方式，来遍历所有，且此算法耗时比较短。</p><p><strong>编程环境：</strong>Win10 x64 专业版</p><p><strong>编程软件：</strong> visual studio 2015</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ol><li>将所有的面进行标记为-1(表示没有属于那一块)和false(表示还没有遍历过)</li><li>选择一个种子面fhSeed，然后向它的周边相邻的(三个）面进行区域增长，也给做上标</li><li>对于这三个面，也把它作为一个新的面，然后向自己周边进行增长（然后辐射周边）</li><li>然后用一个小的容器储存，正在增长的面，每次增长结束，就把自己这个已经遍历过的面，从容器中删除，当容器值为0的时候，便是一块完整的被遍历出来了</li><li>重复以上2-3-4步骤</li><li>将已经遍历了的面，打上标记，已经标记了的，不在标记；当所有的面全部都遍历结束，也就分割开了（这样的话，一个物体的面，属于哪一块，都被标记出来了）。</li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><p>​    假设其中的一个模型变量为 ：<code>RefineMesh refineMeshNew</code>;</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">OpenMesh::FPropHandleT&lt;int&gt; FPropTriMark;    &#x2F;&#x2F;属于那一块OpenMesh::FPropHandleT&lt;bool&gt; FPropTriFlag;   &#x2F;&#x2F;是否遍历过refineMeshNew.add_property(FPropTriMark, &quot;FPropTriMark&quot;);refineMeshNew.add_property(FPropTriFlag, &quot;FPropTriFlag&quot;);for (auto f_it &#x3D; refineMeshNew.faces_begin(); f_it !&#x3D; refineMeshNew.faces_end(); f_it++)&#123;refineMeshNew.property(FPropTriMark, *f_it) &#x3D; -1;refineMeshNew.property(FPropTriFlag, *f_it) &#x3D; false;&#125;int nMark &#x3D; 0; &#x2F;&#x2F;标记属于哪一块Mesh&#x2F;&#x2F;外层循环------------------------------------------------------------------------------while (true)&#123;&#x2F;&#x2F;外层结束标志OpenMesh::FaceHandle fhSeed;for (auto f_itTemp &#x3D; refineMeshNew.faces_begin(); f_itTemp !&#x3D; refineMeshNew.faces_end(); f_itTemp++)&#123;if (!refineMeshNew.property(FPropTriFlag, *f_itTemp))&#123;fhSeed &#x3D; *f_itTemp;break;&#125;&#125;if (!fhSeed.is_valid())break;refineMeshNew.property(FPropTriFlag, fhSeed) &#x3D; true;refineMeshNew.property(FPropTriMark, fhSeed) &#x3D; nMark;vector&lt;OpenMesh::FaceHandle&gt; vecMarkFH;vecMarkFH.push_back(fhSeed);&#x2F;&#x2F;内层循环------------------------------------------------------------------------------while (true)&#123;if (vecMarkFH.size() &#x3D;&#x3D; 0)break;OpenMesh::FaceHandle fhTemp &#x3D; vecMarkFH[0];for (auto ff_it &#x3D; refineMeshNew.ff_iter(fhTemp); ff_it !&#x3D; refineMeshNew.ff_end(fhTemp); ff_it++)&#123;if (!refineMeshNew.property(FPropTriFlag, *ff_it))&#123;refineMeshNew.property(FPropTriFlag, *ff_it) &#x3D; true;refineMeshNew.property(FPropTriMark, *ff_it) &#x3D; nMark;&#125;&#125;vecMarkFH.erase(vecMarkFH.begin());&#125;nMark++;&#125;&#x2F;&#x2F;外层循环结束------------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效率："><a href="#效率：" class="headerlink" title="效率："></a>效率：</h2><p>​        经过测试，用此算法，遍历一个有四千多万（40, 000, 000多）个面的数据模型，只需要耗费时间约<code>6s</code>，比我自己先前写的一个思路，耗时效率要高得多</p><p>//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p><h2 id="更新："><a href="#更新：" class="headerlink" title="更新："></a>更新：</h2><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong> 2019-7-9 17:35:43</font></p><p><font color=#D0087E size=4 face="幼圆"><strong>更新内容：</strong> </font>增加有分割后的多个模型导出的代码分享</p><p>将下面的<code>mesh</code>替换成分割之后的pMesh,分割成为多个的时候，建议使用<code>Vector&lt;pMesh&gt; v</code>来存储，然后使用1行里面的代码替换掉<code>mesh</code>为<code>v[i]</code>即可；</p><p><strong>提示：</strong> 因为上面代码已经将模型做了区分，然后使用for循环，直接按照标记所属于的，直接输出；亦可以即可将各自的点、面、半边、纹理等属性赋值给一个新的<code>pMesh</code>即可；</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OpenMesh<span class="token operator">::</span>IO<span class="token operator">::</span><span class="token function">write_mesh</span><span class="token punctuation">(</span>mesh<span class="token punctuation">,</span> <span class="token string">"output.off"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Cannot write mesh to file 'output.off'"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p><strong>本博文同步到csdn博客：</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/93505922#comments">OpenMesh模型分割：区域增长实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - OpenMesh </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenMesh入门，安装，运行示例Hello World</title>
      <link href="posts/8b2d5fcb/"/>
      <url>posts/8b2d5fcb/</url>
      
        <content type="html"><![CDATA[<p><strong>简述：</strong>  了解OpenMesh，学会安装，尝试在c++里面使用OpenMesh，书写一个简单地例子。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        了解OpenMesh，学会安装，尝试在c++里面使用OpenMesh，书写一个简单地例子。</p><p><strong>编程环境：</strong>Win10 x64 专业版</p><p><strong>编程软件：</strong> visual studio 2015</p><h2 id="下载OpenMesh库："><a href="#下载OpenMesh库：" class="headerlink" title="下载OpenMesh库："></a>下载OpenMesh库：</h2><p>进入OpenMesh官网<a href="http://www.openmesh.org/"><strong>OpenMesh官网</strong></a>，下载下面的文件：</p><p>备用github直接下载：<a href="https://github.com/xmuli/openMesh/blob/master/software/OpenMesh-8.0-VS2015-64-Bit-no-apps.exe"><strong>OpenMesh-8.0-VS2015-64-Bit-no-apps.exe</strong></a></p><h2 id="配置OpenMesh运行环境："><a href="#配置OpenMesh运行环境：" class="headerlink" title="配置OpenMesh运行环境："></a>配置OpenMesh运行环境：</h2><h3 id="安装OpenMesh程序："><a href="#安装OpenMesh程序：" class="headerlink" title="安装OpenMesh程序："></a>安装OpenMesh程序：</h3><p>安装OpenMesh-8.0-VS2015-64-Bit-no-apps.exe程序</p><p>标准安装：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621135333.png" loading="lazy"></p><h3 id="创建工程："><a href="#创建工程：" class="headerlink" title="创建工程："></a>创建工程：</h3><p>创建一个新的（空的 项目工程）解决方案：比如项目名称叫<code>TestOpenMesh</code><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561096684097.png" loading="lazy"></p><h3 id="配置OpenMesh的运行环境"><a href="#配置OpenMesh的运行环境" class="headerlink" title="配置OpenMesh的运行环境:"></a>配置OpenMesh的运行环境:</h3><p><strong>在Debug模式 选择x64:</strong></p><ul><li><strong>配置<include>头文件：</strong></li></ul><p>打开<code>项目属性-VC++目录-包含目录</code>，添加包含目录<code>C:\Program Files\OpenMesh 8.0\include</code>如下：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561097612511.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621165309.png" loading="lazy"></p><ul><li><strong>配置库<lib>文件：</strong></li></ul><p>打开<code>项目属性-链接器-常规-附加依赖库目录</code>，添加附加库目录<code>C:\Program Files\OpenMesh 8.0\lib</code>如下：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621141706.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621141801.png" loading="lazy"></p><ul><li><em><em>配置附加依赖项</em>.lib文件：</em>*</li></ul><p>打开<code>项目属性-链接器-输入-附加依赖项</code>，添加附加库目录<code>OpenMeshCored.lib </code>和 <code>OpenMeshToolsd.lib</code>如下：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561098167619.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621165622.png" loading="lazy"></p><ul><li><strong>配置预处理器添加宏</strong></li></ul><p>(可能有的第三方库需要，有的第三方库不需要这一步操作)：</p><p>打开<code>项目属性-V/c++-预处理器</code>，添加附加宏<code>_USE_MATH_DEFINES</code></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561098274278.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621142613.png" loading="lazy"></p><p>一共经过这三步骤，就全部配置好了，接下来就是添加具体的代码了。</p><h2 id="添加示例程序："><a href="#添加示例程序：" class="headerlink" title="添加示例程序："></a>添加示例程序：</h2><p>添加如下代码到创建的<code>TestOpenMesh.cpp</code>下面：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;&#x2F;&#x2F; -------------------- OpenMesh#include &lt;OpenMesh\&#x2F;Core&#x2F;IO&#x2F;MeshIO.hh&gt;#include &lt;OpenMesh&#x2F;Core&#x2F;Mesh&#x2F;PolyMesh_ArrayKernelT.hh&gt;using namespace std; typedef OpenMesh::PolyMesh_ArrayKernelT&lt;&gt;  MyMesh;int main()&#123;MyMesh mesh;MyMesh::VertexHandle vhandle[8];vhandle[0] &#x3D; mesh.add_vertex(MyMesh::Point(-1, -1, 1));vhandle[1] &#x3D; mesh.add_vertex(MyMesh::Point(1, -1, 1));vhandle[2] &#x3D; mesh.add_vertex(MyMesh::Point(1, 1, 1));vhandle[3] &#x3D; mesh.add_vertex(MyMesh::Point(-1, 1, 1));vhandle[4] &#x3D; mesh.add_vertex(MyMesh::Point(-1, -1, -1));vhandle[5] &#x3D; mesh.add_vertex(MyMesh::Point(1, -1, -1));vhandle[6] &#x3D; mesh.add_vertex(MyMesh::Point(1, 1, -1));vhandle[7] &#x3D; mesh.add_vertex(MyMesh::Point(-1, 1, -1));&#x2F;&#x2F; generate (quadrilateral) facesstd::vector&lt;MyMesh::VertexHandle&gt;  face_vhandles;face_vhandles.clear();face_vhandles.push_back(vhandle[0]);face_vhandles.push_back(vhandle[1]);face_vhandles.push_back(vhandle[2]);face_vhandles.push_back(vhandle[3]);mesh.add_face(face_vhandles); face_vhandles.clear();face_vhandles.push_back(vhandle[7]);face_vhandles.push_back(vhandle[6]);face_vhandles.push_back(vhandle[5]);face_vhandles.push_back(vhandle[4]);mesh.add_face(face_vhandles); face_vhandles.clear();face_vhandles.push_back(vhandle[1]);face_vhandles.push_back(vhandle[0]);face_vhandles.push_back(vhandle[4]);face_vhandles.push_back(vhandle[5]);mesh.add_face(face_vhandles); face_vhandles.clear();face_vhandles.push_back(vhandle[2]);face_vhandles.push_back(vhandle[1]);face_vhandles.push_back(vhandle[5]);face_vhandles.push_back(vhandle[6]);mesh.add_face(face_vhandles); face_vhandles.clear();face_vhandles.push_back(vhandle[3]);face_vhandles.push_back(vhandle[2]);face_vhandles.push_back(vhandle[6]);face_vhandles.push_back(vhandle[7]);mesh.add_face(face_vhandles); face_vhandles.clear();face_vhandles.push_back(vhandle[0]);face_vhandles.push_back(vhandle[3]);face_vhandles.push_back(vhandle[7]);face_vhandles.push_back(vhandle[4]);mesh.add_face(face_vhandles); &#x2F;&#x2F; write mesh to output.objtry&#123;if (!OpenMesh::IO::write_mesh(mesh, &quot;output.off&quot;))&#123;std::cerr &lt;&lt; &quot;Cannot write mesh to file &#39;output.off&#39;&quot; &lt;&lt; std::endl;return 1;&#125;&#125;catch (std::exception&amp; x)&#123;std::cerr &lt;&lt; x.what() &lt;&lt; std::endl;return 1;&#125;return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行该项目："><a href="#运行该项目：" class="headerlink" title="运行该项目："></a>运行该项目：</h2><p>在vs 2015 里面按下<code>Ctrl + F5</code>，运行该项目</p><p>看到运行成功：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621143426.png" loading="lazy"></p><h2 id="验证成功："><a href="#验证成功：" class="headerlink" title="验证成功："></a>验证成功：</h2><p>打开<code>D:\programming\OpenMesh\TestOpenMesh\TestOpenMesh</code>目录下，查看是否生成<code>output.off</code>文件</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621143552.png" loading="lazy"></p><p>使用MeshLab打开这个<code>output.off</code>文件，看看时候加载之后，显示是否成功</p><p>MeshLab官网下载地址：<a href="http://www.meshlab.net/#download">MeshLab官网</a></p><p>备用github直接下载：<a href="https://github.com/touwoyimuli/2019_06_OpenMesh/blob/master/software/MeshLab2016.12.exe"><strong>MeshLab2016.12.exe</strong></a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621144002.png" loading="lazy"></p><p>选中该<code>output.off</code>文件，打开：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621144405.png" loading="lazy"></p><p>发现运行成功：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621144507.png" loading="lazy"></p><h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><p>源码：<a href="https://github.com/xmuli/openMesh/tree/master/TestOpenMesh"><strong>TestOpenMesh源码</strong></a></p><h2 id="心得："><a href="#心得：" class="headerlink" title="心得："></a>心得：</h2><p>OpenMesh的网上教程感觉都是十分的少，唯一比较全面的话，可能就是相关的英文文档，然鹅，里面涉及的概念很多，且在现在工作了发现都是直接上手，根本不会让你去系统的学习OpenMesh的相关知识，时间仓促，且系统学习，所耗费的时间和精力，也容易使得人比较倦怠。故此好的解决方法就是，就是直接在项目中直接上手；</p><p>可以按照如下步骤实现：</p><ol><li>-&gt;从了解OpenMesh</li><li>-&gt;你所需要的项目需求的实现</li><li>-&gt;需要完成的什么任务</li><li>-&gt;百度、谷歌、Bing轮着搜索怎么实现</li><li>-&gt;查找函数或者迭代器的或者属性实例的使用</li><li>-&gt;自己项目移植尝试</li><li>-&gt;多次尝试</li><li>-&gt;还是有问题，向<del>大佬</del>（划掉，巨佬）们求助</li><li>-&gt;仍然无果;歇一天再按照上面的步骤尝试</li><li>-&gt;仍然无果;建议放弃，学习其他。或者日后有机会在学</li></ol><h2 id="资源："><a href="#资源：" class="headerlink" title="资源："></a>资源：</h2><p>提供一个良好的中文入门手册：<a href="https://github.com/txmuli/openMesh/tree/master/docORpdf"><strong>OpenMesh入门文档.pdf</strong></a> （可以帮助弄清楚OpenMesh基本概念，值得一读）</p><p><strong>参考博文：</strong><a href="https://blog.csdn.net/chaojiwudixiaofeixia/article/details/50460887">OpenMesh学习笔记1 安装 配置 入门示例</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - C/C++ </category>
          
          <category> 学习 - OpenMesh </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XMind 8 Update 8 Pro 激活教程（亲测可用） 国外官网下载 破解教程（带离线安装包）</title>
      <link href="posts/be0af7c/"/>
      <url>posts/be0af7c/</url>
      
        <content type="html"><![CDATA[<p>​        提供 XMind 8 Update 8 Pro的破解教程，以及相关资源下载。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><font color=#D0087E size=4 face="幼圆"><strong>更新时间：</strong>  2019-7-4 13:42:46</font></p><p><strong>更新内容：</strong>  发现以前的破解连接失效了，于是乎重新上传一份，链接已经更新</p><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        提供 XMind 8 Update 8 Pro的破解教程，以及相关资源下载。</p><p>转载自ifKing的 <a href="http://ifking.com/posts/xmind/">http://ifking.com/posts/xmind/</a></p><p>PS.这个是真的靠谱的……（不像很多博主，转发个破解方法连破解包都不上传。。。。）</p><p>xmind8 破解激活教程（亲测可用）国外官网下载 破解教程xmind8 破解激活教程（亲测可用） 外国官网下载 破解教程</p><p>这里以windows为例来演示，其它操作系统需根据情况修改相应步骤。</p><h2 id="下载安装包："><a href="#下载安装包：" class="headerlink" title="下载安装包："></a>下载安装包：</h2><p>首先去xmind国外官网下载对应操作系统的安装包，国内官网的那个是有残缺的，不支持破解。</p><ul><li><a href="https://www.xmind.cn/download/">xmind国外官网</a></li></ul><p>下载破解补丁</p><ul><li><del>下载地址：<a href="https://stormxing.oss-cn-beijing.aliyuncs.com/files/XMindCrack.jar">点击打开链接</a>     <a href="https://stormxing.oss-cn-beijing.aliyuncs.com/files/XMindCrack.jar%EF%BC%88%E5%B7%B2%E7%BB%8F%E5%A4%B1%E6%95%88%EF%BC%89">https://stormxing.oss-cn-beijing.aliyuncs.com/files/XMindCrack.jar（已经失效）</a></del></li></ul><p><strong>官网安装包带破解文件下载地址，一起打包了。</strong></p><p>百度云盘下载地址：    <a href="https://pan.baidu.com/s/1y8orgC1xAjafNTKz-vrNlQ">【破解】xmind-8-update8-windows.zip</a>  提取码: sit4</p><p>正版官网链是这个样子的，请大家区别于国内的某代理的假官网（这里匿名批评某代理流氓公司）</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704134533.png" loading="lazy"></p><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>若是无特殊说明，链接一般都是为百度云链接，且这些分享的软件，都是经过我自己重度使用过了的，亲测有效，且最少都是使用了好几个月了的，亲测有效。若是链接失效，可以评论留言，我会更新该链接。</p><h2 id="下载工具推荐："><a href="#下载工具推荐：" class="headerlink" title="下载工具推荐："></a>下载工具推荐：</h2><p>推荐使用<code>PanDownload</code>和<code>速盘</code>，前者我都是使用了快一年了，感觉一会都很稳定，后者听说也不错，不过本人没有尝试过。</p><ul><li><p>pandownload网页版正式发布，一款完全免费且支持全平台免登录、免安装的下载工具。<br>  地址1： <a href="https://www.baiduwp.com/">https://www.baiduwp.com</a><br>  地址2： <a href="https://baiduwangpan.com/">https://baiduwangpan.com</a> </p></li><li><p>在分享链接的baidu后面加上wp可以快速跳转到网页版，例如：<br>  分享链接： <a href="https://pan.baidu.com/s/1N6MvdFv8amDjRKzKCioz7Q">https://pan.baidu.com/s/1N6MvdFv8amDjRKzKCioz7Q</a><br>  网页版链接： <a href="https://pan.baiduwp.com/s/1N6MvdFv8amDjRKzKCioz7Q">https://pan.baiduwp.com/s/1N6MvdFv8amDjRKzKCioz7Q</a><br>  注意：网页版限制了单个IP每天的下载次数，防止滥用。请不要使用IDM或迅雷等多线程下载器下载！ </p></li></ul><ul><li>PanDownload分为windows、安卓、和网页版本。效果相当于破解的百度云，不限速，有专人的维护。</li></ul><p>客户端下载：<a href="http://pandownload.com/">PanDownload官网</a></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190704140103.png" loading="lazy"></p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>安装过程:略 (疯狂点击下一步：Next)</p><h2 id="激活xmind："><a href="#激活xmind：" class="headerlink" title="激活xmind："></a>激活xmind：</h2><ul><li><p>找到 XMind 安装目录, 如: <code>C:\Program Files (x86)\XMind</code>，将下载的破解补丁复制到这个目录中。</p></li><li><p>以文本格式打开安装目录中 <code>XMind.ini</code></p></li><li><p>在 <code>XMind.ini</code> 最后追加一个字段<code>-javaagent</code>，然后加上<code>XMindCrack.jar</code>的绝对路径。<br>例如:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">-javaagent:C:\Program Files (x86)\XMind\XMindCrack.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开 XMind, 点击<code>帮助</code>——<code>序列号</code>，然后输入以下序列号 ，邮箱随便填，可以填自己的。</p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBXRENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO3CSQFNB7VVIY123456789012345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>完整图示：</strong></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/1561089679881.png" loading="lazy"></p><h2 id="破解成功："><a href="#破解成功：" class="headerlink" title="破解成功："></a>破解成功：</h2><p>最后可以看到：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621113541.png" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190621113302.png" loading="lazy"></p><p>激活成功✿✿ヽ(°▽°)ノ✿</p><p>另外：如果出现了激活完出现还需要订阅的弹窗，重新启动xmind就好了</p><p><strong>对应csdn文章地址:</strong> <a href="https://blog.csdn.net/qq_33154343/article/details/81867774"><strong>XMind 8 Update 8 Pro 破解激活教程（亲测可用） 国外官网下载 破解教程</strong></a></p><h2 id="版权声明："><a href="#版权声明：" class="headerlink" title="版权声明："></a>版权声明：</h2><p><font color=#D0087E size=4 face="幼圆">本文仅用于学习、研究和交流目的，欢迎非商业性质转载。但请注明博客来源</font></p><ul><li><p><font color=#FF0101 size=3 face="幼圆">文章内容部分来源于互联网，不代表本人的任何立场；涉及到的软件来源于互联网，仅供个人下载使用，请勿用于商业用途，版权归软件开发者所有，下载后请于24小时内删除，如有真实需要请支持正版！因下载本站任何资源造成的损失，全部责任由使用者本人承担！如果你是版权方，认为本文内容对您的权益有所侵犯，<font color=#2B4FB0 size=3 face="幼圆"><a href="https://touwoyimuli.github.io/about/">请联系博主的QQ</a>，附上添加好友理由</font>，且应该提交相应的证明材料，待博主进行严格地审查和背景调查后，情况属实的将在最快时间(三~五天)内将本文删除或修正。</font></p></li><li><p><font color=#FF0101 size=3 face="幼圆">附:二○○二年一月一日《计算机软件保护条例》第十七条规定：为了学习和研究软件内含的设计思想和原理，通过安装、显示、传输或者存储软件等方式使用软件的，可以不经软件著作权人许可，不向其支付报酬!</font></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 资源 - 破解软件(常用，稀缺) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统下搭建Shadowsocks服务器教程</title>
      <link href="posts/296d8846/"/>
      <url>posts/296d8846/</url>
      
        <content type="html"><![CDATA[<p>​        在Linux服务器上面，搭建Shadowsocks梯子。可以使用Google等查阅文献资料等</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        在Linux服务器上面，搭建Shadowsocks梯子。可以使用Google等查阅文献资料等</p><p>Google云新用户注册可以免费领取$300一年期使用权，如果你用的是其他云服务商，教程通用，这里只是以Google云为例，操作系统推荐大家用CentOS6（就没蓝底那个窗口了），也可以使用debian9(推荐）使用debian9 可以只用从第5步开始（当然sudo -i 这一步还是要的）只需2步就可以搭建好。不用装BBR加速器 速度也非常的快 直接破百兆！</p><p>Google云地址：<a href="http://cloud.google.com/">http://cloud.google.com</a></p><h3 id="Google云创建虚拟机"><a href="#Google云创建虚拟机" class="headerlink" title="Google云创建虚拟机"></a>Google云创建虚拟机</h3><p>首先创建好一台VM实例(位置在Google云 Compute Engin-VM实例)</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616022126.png" loading="lazy"></p><p>创建一个实例，地区一定要选择台湾，为了更快：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616022147.png" loading="lazy"></p><p>创建好之后ping测试一下，如果延迟在100ms以内就可以，否则就销毁重建：</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616022716.png" loading="lazy"></p><h3 id="开始搭建Shadowsocks"><a href="#开始搭建Shadowsocks" class="headerlink" title="开始搭建Shadowsocks"></a><font color=#CFB5DE  face="gray">开始搭建Shadowsocks</font></h3><p><font color=#FF0000 face="gray">1-4是安装BBR 加速器部分 5-6 是酸酸乳部分</font></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">sudo -i(最前面显示root@xxxx)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">wget <span class="token operator">-</span><span class="token constant">N</span> <span class="token operator">--</span>no<span class="token operator">-</span>check<span class="token operator">-</span>certificate https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>FunctionClub<span class="token operator">/</span>YankeeBBR<span class="token operator">/</span>master<span class="token operator">/</span>bbr<span class="token punctuation">.</span>sh <span class="token operator">&amp;&amp;</span> bash bbr<span class="token punctuation">.</span>sh install蓝底窗口按<span class="token constant">TAB</span>键选<span class="token constant">NO</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择重启 Y</p><p>这里会断开连接，大家可以关掉窗口再重新打开或几秒钟后在界面随便按几个字母 便会提示重新连接。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">sudo -i (最前面显示root@xxxx)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">bash bbr.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">wget <span class="token operator">--</span>no<span class="token operator">-</span>check<span class="token operator">-</span>certificate https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>teddysun<span class="token operator">/</span>shadowsocks_install<span class="token operator">/</span>master<span class="token operator">/</span>shadowsocksR<span class="token punctuation">.</span>sh <span class="token operator">&amp;&amp;</span> chmod <span class="token operator">+</span>x shadowsocksR<span class="token punctuation">.</span>sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">./shadowsocksR.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入shadowsocks 密码</p><p>输入端口号</p><p>其他一路回车（也可自行选择混淆 协议），大约需要等个十来分钟…</p><p>在最后出现红底数据以后，就是Shadowsocks服务端配置信息，在你的Shadowsocks客户端配置上即可。</p><h3 id="谷歌云防火墙规则添加-（位置在谷歌云-VPC网络-防火墙）"><a href="#谷歌云防火墙规则添加-（位置在谷歌云-VPC网络-防火墙）" class="headerlink" title="谷歌云防火墙规则添加 （位置在谷歌云 VPC网络-防火墙）"></a><font color=#CFB5DE  face="gray">谷歌云防火墙规则添加 （位置在谷歌云 VPC网络-防火墙）</font></h3><p>点击添加新规则，然后按照一下这个设置好。这样 SSR 设置任何端口都可以使用。并且后续不需要再来防火墙规则做设置了。<br><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616022916.png" loading="lazy"></p><p>其他云服务商的你也得检查一下你的网络防火墙设置。</p><p><strong>转载于：<a href="https://masuit.com/1303/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%90%AD%E5%BB%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B">Linux系统下搭建Shadowsocks服务器教程</a>     懒得勤快</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 科学上网vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下搭建v2ray服务器飞机场教程，畅享YouTube 4k体验</title>
      <link href="posts/cf91d5a0/"/>
      <url>posts/cf91d5a0/</url>
      
        <content type="html"><![CDATA[<p>​        在Linux服务器上面，搭建v2ray梯子。可以畅享看YouTu 4K视频无压力</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>​        在Linux服务器上面，搭建v2ray梯子。可以畅享看YouTu 4K视频无压力</p><p>好道是规则是用来打破的，王道是用来颠覆的！之前给大家分享过搭建Shadowsocks服务器教程，为了将来的保险起见，这次给大家带来v2ray服务器的搭建教程。</p><p>首先，同样你得拥有一台不限带宽的云主机，搬瓦工、vultr、谷歌云、Azure之类的不限带宽服务商，所以，新用户还是推荐你用外币信用卡去申请一年期免费的GoogleCloud，申请地址：<a href="http://cloud.google.com/">http://cloud.google.com</a>。搭建过程也挺简单的，两步就好。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>v2ray的优势：v2ray支持的传输方式有很多，包括：普通TCP、HTTP伪装、WebSocket流量、普通mKCP、mKCP伪装FaceTime通话、mKCP伪装BT下载流量、mKCP伪装微信视频流量，不同的传输方式其效果会不同，有可能会遇到意想不到的效果哦！当然国内不同的地区、不同的网络环境，效果也会不同，所以具体可以自己进行测试。现在v2ray客户端也很多了，有windows、MAC、linux和安卓版。</p><p>推荐使用centos7服务器，博主之前用debian系统似乎没有搭建成功。</p><p>如果想搭建ss/ssr，可以参考 <a href="https://masuit.com/s/Shadowsocks">自建ss/ssr服务器教程</a></p><p>注意：搭建ss/ssr脚本和搭建v2ray脚本不要在同一台vps上使用，以免互相干扰！如果ss/ssr和v2ray都想搭建，可以用两台vps，一台搭建ss/ssr，另外一台搭建v2ray。</p><p>好了，教程正式开始。</p><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><p><strong>第一步：</strong></p><p>云服务控制台创建一台虚拟主机，配置不需要太高，够用就好。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616020553.png" loading="lazy"></p><p>地区推荐香港或台湾，创建好之后建议先测试一下延迟。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616020650.png" loading="lazy"></p><p>温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，这与中国电信、中国联通、中国移动国际出口带宽和线路不同有关，所以以实测为准。可以先选定一个服务器位置来按照教程进行搭建，熟悉搭建方法，当账号搭建完成并进行了bbr加速后，测试下速度自己是否满意，如果满意那就用这个服务器位置的服务器。如果速度不太满意，就一次性开几台不同的服务器位置的服务器，然后按照同样的方法来进行搭建并测试，选择最优的，之后把其它的服务器删掉，按小时计费测试成本可以忽略。</p><p><strong>第二步：</strong></p><p>开始搭建v2ray，你可以用xshell或者云服务控制台自带的shell窗口进行远程连接。</p><p>连接成功后，会出现如图所示，之后就可以复制粘贴代码部署了。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616020717.png" loading="lazy"></p><p>脚本开源地址：<a href="https://github.com/Jrohy/multi-v2ray">https://github.com/Jrohy/multi-v2ray</a></p><p>安装脚本命令：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">sudo -isource &lt;(curl -sL https://git.io/fNgqx)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>卸载脚本命令：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">sudo -isource &lt;(curl -sL https://git.io/fNgqx) --remove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>复制上面的代码到VPS服务器里，接着按回车键，脚本会自动安装，</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616024205.png" loading="lazy"></p><p>以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：v2ray</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616020821.png" loading="lazy"></p><p>安装好以后，程序生成客户端代码（<font color=green size=5 face="黑体"><strong>绿色部分</strong></font>），复制下来。</p><p><strong>第三步</strong>：</p><p>你可以自定义配置v2ray服务端，选择3更改v2ray配置。</p><p>你可以自定义v2ray的端口、加密方式、传输方式、广告屏蔽等，传输方式推荐TCP方式。</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190616020908.png" loading="lazy"></p><h3 id="简单解释一下ssr与VPN的区别："><a href="#简单解释一下ssr与VPN的区别：" class="headerlink" title="简单解释一下ssr与VPN的区别："></a>简单解释一下ssr与VPN的区别：</h3><p>VPN的开发目的是给企业内网直接传输加密数据，最重要的就是安全性。</p><p>VPN目前就科学上网方面来讲，PPTP大部分地区已死，L2TP大部分地区已经出现干扰和断开连接情况，Openvpn一封一个准。而anyconnect大多数都是企业用的，所以墙不敢乱封，IKEv1/IKEv2需要注意证书中间人攻击问题。<br>所以，在VPN科学上网这方面，一些地区已经根据VPN的流量特征做出了相应的匹配策略，可以有效封杀VPN了。<br>Shadowsocks的开发目的就是穿透防火墙，最重要的是增加墙的匹配流量效率封杀成本和难度，也就是混淆隐秘性。<br>Shadowsocks是更注重流量混淆隐秘，VPN则是更注重加密安全性。如果你需要安全你可能需要 VPN 或者 Shadowsocks+TOR匿名 ，否则就抗干扰能力来说Shadowsocks更适合拿来科学上网，VPN中的Opnevpn是最安全的VPN协议之一，然而第一个被墙宣布效率检测、封杀！</p><h3 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h3><p>Windows客户端下载地址：<a href="https://github.com/2dust/v2rayN/releases">https://github.com/2dust/v2rayN/releases</a></p><p>其他平台客户端：<a href="https://www.v2ray.com/">https://www.v2ray.com</a></p><p><strong>转载于：   <a href="https://masuit.com/1409">Linux下搭建v2ray服务器飞机场教程，畅享YouTube 4k体验</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - 科学上网vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初次上班的感觉</title>
      <link href="posts/dad5df92/"/>
      <url>posts/dad5df92/</url>
      
        <content type="html"><![CDATA[<p>​    上班两月余，身体已虚，非她，而是代码，可悲乎？</p><p>​    如今，时长得思考一下，倘若离开公司，自己有那些收获？学到了什么？</p><p>2019-07-19更新</p><p>不是觉得累，要有学习的前进方向。</p><p>2019-09-25 更新：</p><p>或许有了对比，才愈加感觉之前那家公司，其实并不是自己所喜欢的方向，当初辞职愈发觉得不遗憾</p>]]></content>
      
      
      <categories>
          
          <category> 生活 - 生活趣闻闲谈 </category>
          
          <category> 生活 - 工作相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-博客-博客视频内容分类</title>
      <link href="posts/1df9a2bb/"/>
      <url>posts/1df9a2bb/</url>
      
        <content type="html"><![CDATA[<p>简单整理一下自己的博客分类，也为以后更好地分类</p><p>其中的大概分类应该是如下样子的吧</p><p><img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190615161736.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的Hexo搭建，主题maupassant</title>
      <link href="posts/8472d771/"/>
      <url>posts/8472d771/</url>
      
        <content type="html"><![CDATA[<p>​        搭建自己个个人博客，基于Hexo的，主题采用maupassant</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>​        搭建自己个个人博客，基于Hexo的，主题采用maupassant</p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​        之前一直都是使用的csdn上面编写自己的博文比较多一些的，但是对于有一些的博文的，因为一些技术帖子或者破解资源帖子原因，即使发了的话，也还是会被秒删的，亦或是限制成为了不可公开帖子。。。。<br>这就是在别的的平台下的一些限制吧，额。不符合互联网精神（开源    免费    互相互惠），所以老早就有想自己的自己博客平台的想法了的，不然总是觉得在他人的规则下，总是有一种束手束脚的感觉。无法放飞自我</p><p>​        也可以写一些自己的东西，自己的地盘，一切都是可以自定义，看着永远的是那么的舒服，实现简约的博客，就是这么开心。</p><p>​        数一下，自己的搭建这个博客所遇见的一些“奇奇怪怪的事情”，称之为心态的变化的分享：</p><h2 id="搭建博客的变化："><a href="#搭建博客的变化：" class="headerlink" title="搭建博客的变化："></a>搭建博客的变化：</h2><ol><li><p><strong>自己手写一份代码</strong></p><p>​        因为个人主要是学习c/c++方向，但是对于前端的那些html5+JavaScript+CSS的那一套，只是有一个基本的了解，会一些皮毛。到后来学了半个月的c#，用asp.net写了一个简单的<a href="%5Bhttps://github.com/touwoyimuli/2018_01_website/tree/master/01_ASP.NET_%E5%A4%A7%E5%AD%A6bbs%E8%AE%BA%E5%9D%9B%5D(https://github.com/touwoyimuli/2018_01_website/tree/master/01_ASP.NET_%E5%A4%A7%E5%AD%A6bbs%E8%AE%BA%E5%9D%9B)">大学的bbs论坛</a>然后后面就有一些膨胀了，什么都想着写一个网站，锻炼一下自己，但是把，前端的那些静态页面的绚丽效果，真的是需要耗费大量的时间去学习，坑，于是乎，长久的拖了下来，后面意识到不应该放那么多的时间在其他方向，还是术业有专攻，横向发展就不必深究学习（论懒惰者的自我修养），还是壮哉我的c/c++之路吧（不多说，首先要能够自己混一口饭吃吃），在来有后续若是有能力的话必将为其添砖加瓦</p></li><li><p><strong>使用现成的网站模板搭建动态网站</strong></p><p>​        经过后面2-3个月的思想发酵，就像一开始只有一个病毒进入一样，后面越来越多，思想也越来越坚定，我干什么不自己使用现成的模板呢？简便又快捷，在草草的看了几篇的文章之后，然后选择了这个<a href="https://wordpress.org/download/">WordPress</a>网站，花费了两天时间，可算是在自己的那一台Linux的（CentOS7 x64）上免搭建好了，但是经过几天的体检下来，发觉免费的网速访问很慢，效果不佳，亦有可能是自己的VPS的主机的配置不是那么的高。玩了两天，就给销毁了。</p><p>​        这里放一张图，自行会感受一下：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/IMG_5412.GIF" loading="lazy"></p></li><li><p><strong>无意之间发现的一个模板，简洁高效的博客</strong></p><p>​        简洁的美丽，突然一下子去就俘获了我的心灵   <a href="https://www.haomwei.com/">屠城</a>，其网站示意如下<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190525162438.png" loading="lazy"><br>​        嗷嗷嗷~啊，我一个boy，怎么可以有这种主题，在我眼里第一眼看到就简直就是小鹿扑通扑通的乱撞的好不好。</p><p>​        该hexo的模板主题，大佬也已经分享出来了，<a href="https://www.haomwei.com/technology/maupassant-hexo.html">大道至简——Hexo简洁主题推荐</a>，推荐围观，且还有很多平台的博客都有移植的，嗷嗷嗷啊~， 欢腾的我叫了起来。</p></li></ol><h2 id="搭建自己的平博客："><a href="#搭建自己的平博客：" class="headerlink" title="搭建自己的平博客："></a>搭建自己的平博客：</h2><p>​        如下一段各个博客平台优缺点的介绍，参考邮编，给自自己也备份一下<a href="http://www.blog.jiangxinlingdu.com/thought/2018/09/01/lingdu.html">搭建个人博客- 匠心零度博客</a></p><h3 id="选择博客平台类型："><a href="#选择博客平台类型：" class="headerlink" title="选择博客平台类型："></a>选择博客平台类型：</h3><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><p><a href="http://hexo.io/docs/">官方网站</a> <strong>类型：</strong>静态网页</p><p><strong>特点：</strong>：速度快、部署简单、免费、结合github pages、支持markdown、内容布局自定义功能强</p><p>Hexo是一款基于node.js开发的博客程序，拥有简单的服务器，可用作简单的动态博客使用。也有生成器，生成的静态文件可以一键部署到Github Pages上，也可以部署到任意静态文件服务器上。它相当简约，并且可使用Markdown来编写文章！我的个人博客就是基于hexo生成的。很多网友对hexo的最深刻印象就是速度快和部署简单了。一个个人博客最核心的功能支持的非常好，你可以专心的写一些技术文章部署到上面了。</p><h4 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h4><p><a href="http://jekyll.bootcss.com/">官方网站</a></p><p><strong>类型：</strong>静态网页</p><p><strong>特点：</strong>Jekyll 是一种基于Ruby开发的、适用于博客的静态网站生成引擎。使用一个模板目录作为网站布局的基础框架，提供了模板、变量、插件等功能，最终生成一个完整的静态Web站点。即只要安装Jekyll的规范和结构，不需写html，便可生成网站。和hexo差不多，部署起来也很简单，和github结合的很好。使用人数也很多。不过界面自定义上我还是更加喜欢hexo的主题，切换起来很方便。</p><h4 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h4><p><a href="http://octopress.org/docs/">官方网站</a></p><p><strong>类型：</strong>静态网页</p><p><strong>特点：</strong>也是一个静态网页，是Jekyll的再开发，不过好像最近也没更新，也没有github这样的大力支持。个人不太喜欢。而且据说速度也是静态博客里面算慢的。</p><h4 id="farbox"><a href="#farbox" class="headerlink" title="farbox"></a>farbox</h4><p><a href="https://www.farbox.com/">官方网站</a></p><p><strong>类型：</strong>动态网页</p><p><strong>特点：</strong>一个极简，极简单，支持markdown的博客平台，收费</p><p>说明：让用户不去牵挂如何部署、如何布局博客。回归博客最真实的意义，keep blogging!保持写作。当然如果你会代码，它也提供了丰富的API，让你随心所欲的打造自己的个性化博客。虽然是一个收费的博客平台，但是价格也尚能接受。文件数500, 月流量2GB， ￥65每年。如果能让你养成持续写东西的习惯，我觉得这个价格是能接受的。不得不说当我看了官网的介绍，我是蠢蠢欲动想把博客迁移到那里了，哈哈。</p><h4 id="ghost"><a href="#ghost" class="headerlink" title="ghost"></a>ghost</h4><p><a href="http://www.ghostchina.com/">官方网站</a></p><p><strong>类型：</strong>动态网页</p><p><strong>特点：</strong>不支持markdown但是语法接近，在线编辑发文章，免费，基于node.js开发。</p><p>说明：是wordpress的另一个变种吧，可以这么理解。</p><h4 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h4><p><a href="http://cn.wordpress.org/">官方网站</a></p><p><strong>类型：</strong>动态网页</p><p><strong>特点：</strong>功能强悍、专业、收费</p><p>说明：不像一个博客了，可以理解成用来建一个网站了。名气也是十分的大。但是因为其比较臃肿，所以速度自然是不行的。如果想专心只是为了写点文章的，还是不太推荐</p><p>每一种都可以，根据自己选择</p><h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><p>​        因为自己是有一台国外的VPS，装的CentOS7 X64，一直想着折腾（搞事？ 还是学习Linux命令？？），然后花费了好一些两天才成功的搭建好了。</p><p>​        但是自己又是主要是使用WIn10， 用XShell来远程CentOS7m,在上边开始写自己博文，然后同步到github上面，想了两天，发现我不是一个有点湿了智商吧。果断弃，在自己的win10上面，重新搭建一下，直接推送到自己的github上面，岂不是美滋滋，</p><p>​        因为有一点坑，所以在下面单独发两篇博客，关于在CnetOS7 x64和Windows x64上面搭建Hexo博客平台。<strong>（因为我自己最后选择的是Hexo平台）</strong></p><h3 id="选择编写博客软件"><a href="#选择编写博客软件" class="headerlink" title="选择编写博客软件"></a>选择编写博客软件</h3><p>​        个人需求：能够离线工作，入门门槛低，界面美观</p><p>​        网上一致是推荐的<a href="https://www.typora.io/">typora</a>工具，我的需求是就这样子被轻易的满足了，这个是真的符合这个需求，其优点执行百度</p><h3 id="搭建自己的床图"><a href="#搭建自己的床图" class="headerlink" title="搭建自己的床图"></a>搭建自己的床图</h3><p>​        个人需求：自己的VPS的搭建个人床图，界面简单，没有复杂的骚操作</p><p>​        再次<a href="https://www.google.com/">google</a>，<a href="https://www.baidu.com/">百度</a>和<a href="https://cn.bing.com/?mkt=zh-CN&FORM=BEHPTB">Bing必应</a>一梭子关键词“床图”下来，纷纷推荐的是<a href="https://github.com/Molunerfinn/PicGo">PicGo的GitHub官网</a>，<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E9%A2%84%E8%A7%88">其如何配置的床图参考资料如下</a>，优点也是自行百度</p><h3 id="后续的安心完善自己小窝"><a href="#后续的安心完善自己小窝" class="headerlink" title="后续的安心完善自己小窝"></a>后续的安心完善自己小窝</h3><p>​        个人小窝:<a href="https://touwoyimuli.github.io/">投我以木李的小窝</a></p><p>​        来一个创建之初的小窝图片，看看以后会变成啥样，2019-05-25<a href="https://touwoyimuli.github.io/">刚搭建好的博客小窝</a>，当它还只是一个毛坯房的样子：<img src="https://raw.githubusercontent.com/touwoyimuli/FigureBed/master/img/20190525170515.png" loading="lazy"></p><p>到这里，我的博客基本就是搭建成功了，后续就是许许多的自定义的一些内容了，算是一个刚起步吧，</p>]]></content>
      
      
      <categories>
          
          <category> 学习 - Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
