<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>偕臧</title>
  
  
  <link href="https://ifmet.cn/atom.xml" rel="self"/>
  
  <link href="https://ifmet.cn/"/>
  <updated>2021-06-26T23:45:15.000Z</updated>
  <id>https://ifmet.cn/</id>
  
  <author>
    <name>偕臧</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt4和Qt5的信号和槽的使用差异</title>
    <link href="https://ifmet.cn/posts/4b6d9382/"/>
    <id>https://ifmet.cn/posts/4b6d9382/</id>
    <published>2021-06-26T23:45:15.000Z</published>
    <updated>2021-06-26T23:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>Qt4</code> 和 <code>Qt5</code> 的信号和槽的连接 <code>connect</code> 与断开 <code>disconnect</code> 区别</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210629231342.png" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="信号和槽的-connect"><a href="#信号和槽的-connect" class="headerlink" title="信号和槽的 connect"></a>信号和槽的 connect</h2><h3 id="Qt4-方式-宏"><a href="#Qt4-方式-宏" class="headerlink" title="Qt4 方式: 宏"></a>Qt4 方式: 宏</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Qt4: 宏</span><span class="token comment">/*式1*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">,</span> Qt<span class="token operator">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token operator">::</span>AutoConnection<span class="token punctuation">)</span><span class="token comment">/*式2*/</span>         QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">,</span> Qt<span class="token operator">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token operator">::</span>AutoConnection<span class="token punctuation">)</span> <span class="token keyword">const</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="Qt5-方式-函数指针"><a href="#Qt5-方式-函数指针" class="headerlink" title="Qt5 方式: 函数指针"></a>Qt5 方式: 函数指针</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Qt5: 函数指针</span><span class="token comment">/*式3*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> PointerToMemberFunction method<span class="token punctuation">,</span> Qt<span class="token operator">::</span>ConnectionType type <span class="token operator">=</span> Qt<span class="token operator">::</span>AutoConnection<span class="token punctuation">)</span><span class="token comment">/*式4*/</span>  <span class="token keyword">static</span> QMetaObject<span class="token operator">::</span>Connection <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> Functor functor<span class="token punctuation">)</span>   <span class="token comment">/*式5*/</span>  <span class="token keyword">static</span> QMetaObject <span class="token operator">::</span> Connection <span class="token class-name">QObject</span> <span class="token operator">::</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span> sender， <span class="token keyword">const</span> QMetaMethod＆signal，<span class="token keyword">const</span> QObject <span class="token operator">*</span> receiver， <span class="token keyword">const</span> QMetaMethod＆ method，Qt <span class="token operator">::</span> ConnectionType type <span class="token operator">=</span> Qt <span class="token operator">::</span> AutoConnection）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="connect-第五个参数"><a href="#connect-第五个参数" class="headerlink" title="connect 第五个参数"></a>connect 第五个参数</h3><p>type：用于指明信号和槽的关联方式，它决定了信号是立即传送到一个槽还是在稍后时间排队等待传送。关联方式使用枚举 Qt::ConnectionType 进行描述，下表为其取值及意义</p><table><thead><tr><th>枚举</th><th>值</th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Qt::AutoConnection</td><td>0</td><td><strong>（自动关联，默认值）。</strong>若接收者驻留在发射信号的线程中(即信号和槽在同一线程中)，则使用 Qt::DirectConnection，否则，使用 Qt::QueuedConnection。当信号发射时确定使用哪种关联类型。</td></tr><tr><td>Qt::DirectConnection</td><td>1</td><td>直接关联。当信号发射后，立即调用槽。在槽执行完之后，才会执行发射信号之后的代码(即 emit 关键字之后的代码)。该槽在信号线程中执行。</td></tr><tr><td>Qt::QueuedConnection</td><td>2</td><td>队列关联。<strong>当控制权返回到接收者线程的事件循环后，槽才会被调用</strong> ，也就是说 emit 关键字后面的代码将立即执行，槽将在稍后执行，该槽在接收者的线程中执行。</td></tr><tr><td>Qt::BlockingQueuedConnection</td><td>3</td><td>阻塞队列关联。和 Qt::QueuedConnection 一样，只是信号线程会一直阻塞，直到槽返回。如果接收者驻留在信号线程中，则不能使用此连接，否则应用程序将会死锁。</td></tr><tr><td>Qt::UniqueConnection</td><td>0x80</td><td>唯一关联。这是一个标志，可使用按位或与上述任何连接类型组合。当设置 Qt::UniqueConnection 时，则只有在不重复的情况下才会进行连接，如果已经存在重复连接(即，相同的信号指同一对象上的完全相同的槽)，则连接将失败，此时将返回无效的 QMetaObject::Connection</td></tr></tbody></table><br><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 式1</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 式2</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> mb<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 式3</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token operator">::</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token operator">::</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 式4</span>A ma<span class="token punctuation">;</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token operator">::</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token operator">::</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// void x(int i)是类 B 中定义的静态槽</span><span class="token comment">// 式5</span>A ma<span class="token punctuation">;</span> B mb<span class="token punctuation">;</span><span class="token keyword">int</span> indexSig <span class="token operator">=</span> ma<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">indexOfSignal</span><span class="token punctuation">(</span><span class="token string">"clicked(bool)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> indexSlot <span class="token operator">=</span> mb<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">indexOfSlot</span><span class="token punctuation">(</span><span class="token string">"close()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ma<span class="token punctuation">,</span> ma<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span>indexSig<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>mb<span class="token punctuation">,</span> mb<span class="token punctuation">.</span><span class="token function">metaObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">method</span><span class="token punctuation">(</span>indexSlot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><strong>补充：</strong></p><ul><li>形式 3 的槽函数可以不使用 <code>slots</code> 关键字声明，任意的成员函数都可以是槽函数。形式 1 的槽函数必须使用 <code>slots</code> 修饰</li><li>形式 1 的槽函数不受 <code>private</code> 的限制，也就是说即使槽是 <code>private</code> 的，仍可通过信号调用该槽函数，而形式 3 则在使用 <code>connect</code> 时就会发生错误。</li></ul><br><h2 id="信号和槽的-disconnect"><a href="#信号和槽的-disconnect" class="headerlink" title="信号和槽的 disconnect"></a>信号和槽的 disconnect</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*式1*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method<span class="token punctuation">)</span><span class="token comment">/*式2*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QMetaObject<span class="token operator">::</span>Connection <span class="token operator">&amp;</span>connection<span class="token punctuation">)</span><span class="token comment">/*式3*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> PointerToMemberFunction signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject<span class="token operator">*</span>receiver<span class="token punctuation">,</span> PointerToMemberFunction method<span class="token punctuation">)</span><span class="token comment">/*式4*/</span>  <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> QMetaMethod <span class="token operator">&amp;</span>signal<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject<span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> QMetaMethod <span class="token operator">&amp;</span>method<span class="token punctuation">)</span><span class="token comment">/*式5*/</span>         <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>signal <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token comment">/*式6*/</span>         <span class="token keyword">bool</span> <span class="token class-name">QObject</span><span class="token operator">::</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token keyword">const</span> QObject <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>method <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span> <span class="token keyword">const</span>                                                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>补充：</strong></p><ul><li><p>形式 3 的槽函数可以不使用 slots 关键字声明，任意的成员函数都可以是槽函数。形式 1 的槽函数必须使用 slots 修饰</p></li><li><p>形式 1 的槽函数不受 private 的限制，也就是说即使槽是 private 的，仍可通过信号调用该槽函数，而形式 3 则在使用 connect 时就会发生错误。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　&lt;code&gt;Qt4&lt;/code&gt; 和 &lt;code&gt;Qt5&lt;/code&gt; 的信号和槽的连接 &lt;code&gt;connect&lt;/code&gt; 与断开 &lt;code&gt;disconnect&lt;/code&gt; 区别&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210629231342.png&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>WPS 的缩写含义</title>
    <link href="https://ifmet.cn/posts/3564a0da/"/>
    <id>https://ifmet.cn/posts/3564a0da/</id>
    <published>2021-06-26T22:31:26.000Z</published>
    <updated>2021-06-26T22:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>WPS</code> 的这几个的含义缩写是？有时候会想一下，就如之始好奇 <code>DTK</code> 的含义一样；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/24b61ef9b2f671a2f8d0e0600aca8576.png" width="50%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>​    以前总以为一些耳熟能详的 LOGO 的含义是由特殊含义的缩写，不会被改变，但是现在这个认知在这次的培训中发生了转变；</p><p>WPS 最早的含义是 <strong>Word Processing System</strong> (文字处理系统）；而现在被赋予了新的含义 <strong>WorkSpace Platform Service</strong> 。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_5064(20210626-224838).JPG" width="50%"/ loading="lazy"><br><p>然后另一个是 DTK，比较早的含义是 <strong>Deepin Tool Kit</strong> ；现在也被赋予了新的含义 <strong>Development Tool Kit</strong> 。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210626224801.png" width="70%"/ loading="lazy"><br><p>​        时间在流逝，一切都在发展变化，大家也都为其带来了新的寓意和寄托。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　&lt;code&gt;WPS&lt;/code&gt; 的这几个的含义缩写是？有时候会想一下，就如之始好奇 &lt;code&gt;DTK&lt;/code&gt; 的含义一样；&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/24b61ef9b2f671a2f8d0e0600aca8576.png&quot; width=&quot;50%&quot;/&gt;</summary>
    
    
    
    <category term="生活 - 生活趣闻闲谈" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="WPS" scheme="https://ifmet.cn/tags/WPS/"/>
    
  </entry>
  
  <entry>
    <title>上班两年干了些啥？该思考人生</title>
    <link href="https://ifmet.cn/posts/f5f1bb34/"/>
    <id>https://ifmet.cn/posts/f5f1bb34/</id>
    <published>2021-05-24T19:35:44.000Z</published>
    <updated>2021-05-24T19:35:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>  第一次上班，第一份工作，工作了两年，回想一下这两年我都干了些啥？学到了一些啥？以及思考一下以后我想干啥？略困惑，需要思考下人生</p><p><strong>1. 我是谁？</strong></p><p><strong>2. 我想做什么？</strong></p><p><strong>3. 我在做什么？</strong></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/065fb0ef38cb2a733ec131e239889c2b.gif" width="60%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="缘分"><a href="#缘分" class="headerlink" title="缘分"></a>缘分</h3><p>​        七月份的武汉，酷暑难耐，刚出象牙塔，手持简历，四处奔走。可能第一次的记忆都会比较深刻？那是一次愉快的面试，依稀记得面试房间空调很凉快，面试官的手指修长且很白，长相清秀，看着比我大一两载，过程很聊得来，有一种所学前面有所相似，很开心，就这样巧合进到 <code>Deepin</code> （武汉深之度）了。</p><br><h3 id="初始"><a href="#初始" class="headerlink" title="初始"></a>初始</h3><p>​        入职第一天，老大即是面试官 zccrs，意外的惊喜。初次接触商业代码，但是却没有什么文档，甚是辛苦大佬搬个小板凳，坐在我旁边，手把手教我，刚开始一周代码都是他写的帮我提交的，于是提交了；老大也是大佬，却很是主动和热情（如同夏日的一丝凉风，带来记忆中的凉爽）；一同进来的几个上小伙伴，也都互相一起学习，纷纷想自己所会的部分主动教予他们，互相学习，氛围很棒，也很舒适。</p><p>​        当第一眼看到 <code>Deepin v15</code> 时候，甚至惊艳，界面竟然如此美观，尤其是磨砂、透明、任务栏、右侧控制中心、全屏启动器、以及锁屏样式，就是惊艳至极。<strong>很多美好的事物可能就是初次看到，然后以感觉惊艳以至记忆深刻吧。</strong> 这里好好夸夸我们大设计师 shule1987  老师，且还可以安装 <code>QQ</code> 和 微信等（当时来消息盯着这个任务栏摇头晃脑看了好久），甚至很多其他软件都可以直接在应用商店中安装；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Untitled.gif" width="50%"/ loading="lazy"><p>​            </p><p>​            之前在校只浅浅用过 Ubuntu，未深入接触过 Linux 其它发行版，也未曾听说过 Deepin，后来才知原来在此领域早已经有名气。<br>​            <strong>番外：</strong> 工作一个月后，恰好回答过一篇知乎，无意成了首答 <a href="https://www.zhihu.com/question/344339517/answer/817025546">zhihu.com</a> ，</p><br><h3 id="完成-List"><a href="#完成-List" class="headerlink" title="完成 List"></a>完成 List</h3><h4 id="工作的收获"><a href="#工作的收获" class="headerlink" title="工作的收获"></a>工作的收获</h4><p>已经完成 List：</p><ol><li><p>✅  维护和开发 DTK 库</p></li><li><p>✅  实现社区用户渴望的小功能</p></li><li><p>✅  维护和更新仓库对外部开源事宜</p></li><li><p>✅  额外参与开源社区和 GitHub 项目</p></li><li><p>✅  开发自己的小软件：网速插件、截图等</p></li><li><p>✅  软件商家到 Deepin 社区商店、Spark Store</p></li><li><p>✅  推进和打通外部贡献者给内部贡献代码的渠道</p></li><li><p>✅  在 BBS 和 TG 上为国际用户解决困惑</p></li><li><p>✅  搭建和完善 DTK 官网文档</p></li><li><p>✅  主持演讲 “技术分享会”</p></li><li><p>✅  技术文章收到了稿费</p></li><li><p>✅  个人 Qt / C++ 系列文章完善</p></li><li><p>✅  纂写专利底稿，且是专利的第一作者是自己名字</p></li><li><p>✅  和群友划水、吹牛（这个也算）</p></li></ol><br><p>​        本职工作大致分为两个阶段，前期维护和开发 DTK 这个核心库，是 Deepin / UOS 全家桶软件的核心基石；对 Qt 的源码看的比较多、尤其是原生控件的绘画实现、和使用了解的比较多，深度专一发展。后期巧合下成了全职负责社区相关，极大地丰富了广度和各接触面，也满足了对于开源社区的在运作方式好奇心、开源协议相关的知识、接触开源这个圈子相关；也为后面推动、打通外部贡献者在 GitHub 直接提交贡献到内部代码审查平台上的渠道种下了种子。</p><p>​        恰好那会有用工具统计过，参与 <code>DTK</code> 核心库的开发与维护，大约贡献 <a href="https://github.com/linuxdeepin/qt5integration">qt5integration</a>  10% 的代码、以及百分之几的 <a href="https://github.com/linuxdeepin/dtkwidget">dtkwidget</a> 的代码。当然现在现在这个比例随着规模在逐渐扩大，后面会越来越小，甚至略有后来者多多提交，有所期待。当熟悉写好了 Qt 的控件时候，就对社区用户的一些愿望，就有相帮他们实现。比如审美的个体差异：大圆角。既然大佬们没事时间，而我恰好又有空，那么就我来吧；后主导和开发 “圆角自定义”功能，在社区版 Deepin 上设置了 UI 修改开关、以及可用命令的方式。为了商业版也可以修改，我也给给留了一个可命令修改的方式，后面产品如果可以有想法的话。只需要去掉一行 if 代码即可；对于如何修改，则可以参考 <a href="https://xmuli.blog.csdn.net/article/details/109232878">此文</a>。</p><p>​        空闲的晚上，有开发两款网速插件，1️⃣一个简版 <a href="https://github.com/xmuli/lfxSpeed">lfxSpeed</a>  作为 DDE-DOCK 的插件实现，用的 DTK 开发，精简功能且单一，我用这就觉着挺好，也已经上架 Deepin 和星火商店。2️⃣再后来感觉希望能够支持其它桌面环境，甚至支持 Win 和 Mac，于是全部重构，重新设计，设计成了桌面悬浮模式和同时支持任务栏模式，开发了 <a href="https://github.com/xmuli/NetSpeed">NetSpeed</a>  。最后时间时间空闲，越写越大，不可收拾，想通了不应该有万能的程序，功能过于复杂，容易吃力不讨好，且代码量指数级上升。随后精简和砍掉了冗余功能，做成了 Linux 下所有桌面都可通用的，哪位有空可以直接帮我打包到其他发行版中，可以直接过的。3️⃣另外还开发了一个小的本地截图软件 <a href="https://github.com/xmuli/ShotX">ShotX</a>，哈哈哈哈， logo 继承了 Deepin 的风格，找的某设计的小姐姐帮忙实现的，一直觉得挺好看的。最核心的截图功能（支持多屏）已经实现，基本功能实现了，只是没打包，后面有空再整🕊🕊🕊~~~ 咕咕咕咕。</p><p>​        投稿《UNIONTECH 源码 • 2期》，收到了人生的第一笔稿费，和印有自己文章的实体书。</p><p>为了降低后来者上手 <code>DTK</code> 的门槛，书写了一些文档和搭建了一些网站（此处感谢亦感谢部署中的小伙伴帮助）</p><ul><li><code>DTK</code> 的个人积累系列文章，也包含 Qt 控件的使用： <a href="https://github.com/xmuli/QtExamples">QtExamples</a> </li><li>搭建 <code>Deepin / DTK</code> 的官方文档：<a href="https://docs.deepin.org/">docs.deepin.org</a> </li><li>制作 DTK 的相关 PPT 和会议分享：<a href="https://github.com/linuxdeepin/docs/tree/master/Resources/DTK">《DTK 框架分享.pptx 》等</a> </li><li>分享会 DDE 如何移植到其他 Linux 发行版：<a href="https://ifmet.cn/posts/78cd25f3/">DDE移植Arch流程</a> </li><li>制作虚包 deepin-sdk 和，方便安装 DTK 的开发环境：</li><li>DTK 的中文 API 文档能在本地 Qt 助手直接无缝查看：<a href="https://ifmet.cn/posts/3f6b9501/">DTK 文档嵌入 Qt  Assistants</a></li></ul><br><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3572.JPG" width="100%"/ loading="lazy"><p>​        其中重点感谢帮助我搭建和推动过程的一些大佬们的协助，和热情的帮助，得以使得有些东西能够被顺利完成。</p><br><h4 id="技术的学习"><a href="#技术的学习" class="headerlink" title="技术的学习"></a>技术的学习</h4><p>已经完成 List：</p><ol><li>✅  CMake 的学习</li><li>✅  为 Qt 提交 PATH</li><li>✅  完善博客搭建和部署</li><li>✅  了解：Linux 的发行版区别、自由软件和免费软件、开源协议之间的关系</li><li>✅  了解：制作 <code>dde-dock</code> 的插件、安装配置文件（用户级和系统级）、国际化翻译的切换和处理</li><li>✅  学习： <code>Qt</code> 的控件绘画和使用；<code>Linux</code> 系统学习之 ❶基础编程 ❷系统编程 ❸网络编程</li><li>✅  体验：Mac、Window、Linux（UOS、Deepin、Ubuntu、Arch）之间反复横跳、体验各自的优缺点。</li></ol><p>​        嗷嗷~，记得一开始当时有重绘好些控件，Code View 时比较严格，且设计师要精确到像素（5K 🍎 🖥看，开发用的 1080 分辨率，唉，当时好想也用高分屏开发）；不过最后效果就是，普通屏开发，但在高分屏上看 DDE 依旧很清晰，奶思；要求严格是非常值得的。</p><br><h4 id="生活的体验"><a href="#生活的体验" class="headerlink" title="生活的体验"></a>生活的体验</h4><p>已经完成 List：</p><ol><li>✅  看书</li><li>✅  拿驾照</li><li>✅  烹饪炒菜</li><li>✅  美食探店：藕汤</li><li>✅  自替换 iPhone 电池</li><li>✅  补番少年时动漫和 TVB </li><li>✅  手游 CFM 苹果区等级同安卓</li><li>✅  购买 4K 27 寸显示器、MBP 13 、音响购买</li></ol><br><p>​        得益于公司的 965 的不加班，以及遇到很好的一个房东，能够每个月不足十分一的工资用来租房；且还有很多的时间，可以用来看一些哲学书籍📚（尤其当技术书籍看疲倦时），甚是思想甚是满足。驾照在在大学就考了科一、科三，后遇教练跳槽、再被开了的奇葩遭遇。后没时间，三年过期遇上疫情，被延期了半年，出乎意料外的幸运，重新拿钱单学一科二，赶在时间过期的前半个月，拿到驾照小本；考前练车被毕恭毕敬称之为董教练、遇科二共十八人全一把过，就称为老董🤣🤣，对于萌新第一次开车上路的感觉可以参见 <a href="https://xmuli.blog.csdn.net/article/details/115049769">此说说</a>。</p><p>​        人不挑食，可柑橘附近的饭菜一言难尽，于是逼得我自行买锅，点亮我的烹饪技能树，现如今家常小炒基本 OK，，氪氪氪，本是不想学这的，娜娜的无奈🤷🏻‍♀️，em，当然也有偶尔翻车的时候，含着泪，好吃好吃好吃。不知是离家许久了，还是思家了。尽然偶时会回忆小小时候奶奶煲的藕汤、发疯了到处探寻武汉的藕塘店，几乎武汉所有的藕汤店都去过了，清一色的粉藕，汤都是好喝；可我还是想找一家脆的藕汤、无它、喜欢罢了。也有朋友带我去各个大家的店铺去吃，初次去吃此烤肉时候，就一个感觉：爽~~ 这才是吃烤肉应该打开的方式。</p><p>​        第一次尝试做西餐，我的这个七分熟，咋样？ 然后炒菜凉菜和炒菜等都有尝试一番过。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_43942.JPG" width="50%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4395.JPG" width="45%"/ loading="lazy"></p><p>​        对于炒饭这种，我是很有好奇的，感觉我有时候可以炒的很好看。对于煎锅的使用，当然，有时候使用也会翻车成了下图的🥟，，大概是强行将煮饺尝试做煎饺，嗷呜~~~，没错，是哒，我当时就是炒鸡想吃煎饺。对于吃饭我向来是比较不挑食的，哪怕是朴素一餐也可以接受，但是倘若老婆饼里面没有老婆，哪则是不可的。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4397.JPG" width="45%"/ loading="lazy"> <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4401.JPG" width="48%"/ loading="lazy"></p><p>​        练车时候，手机🔋很快就没了，加上偶尔也会折腾下电子产品，想着自行拆机换一下新电池，就说干就干，心里还有点小预期，拆坏了就换 12，可看来是想让 8P 再战一年。另一方面，常用电脑，对于操作系统 Linux、Window、Mac 这三者之间用哪一个？总是反复横跳，喜欢它们各自的优点、爱不释手，但是各自的缺点又略有难以忍受，最后的解决方案是“小孩子才做选择题”，买了心心念念的 🍎 MBP 和 HUAWEI (Mate Book pr ) 只有这款支持 4 K，醉了醉了，也知道自己最适合的就是一个 27 寸的 4K 屏幕即可，使用最舒服的姿势。对于 PC 游戏一直不感兴趣、大概是小学时候去过了，长大了反而没兴趣？？？手游也只有一个 CFM 从内测玩到现在，腾讯的氪金游戏硬生生的完成了打卡得装备的游戏。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/1111223.gif" width="70%"/ loading="lazy"><br><h4 id="额外相遇"><a href="#额外相遇" class="headerlink" title="额外相遇"></a>额外相遇</h4><p>期间已遇到 List （见证）：</p><p>​        自我上班起，恰好经历（遇到）的如下：</p><ul><li>参与 Deepin V15 开发 V20 版本，UI 等样式全新大改版</li><li>更换 LOGO 为 UOS（后同时保持 Deepin ）</li><li>恢复断更新九个月的开源代码在 <a href="https://github.com/linuxdeepin">GitHub</a> 上（开心😄）</li><li>武汉深之度被融资，成立更大规模的公司统信软件</li><li>背后的某股票猛涨了 10 倍（虽然至今都没玩这东西，从我入职那天就开始涨，涨到了年底）</li><li>公司搬迁到更大的一个地方，更多的楼层</li><li>公司人数由 200 一年多涨到 2000+ 人规模</li><li>然后在全国各地开设置子公司，规模急速扩张</li></ul><br><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>​        遇到带我的架构老大（大佬 zzcrs），学习了很多技能和为人品质，很是感激。</p><p>​        遇到 Hualet ，得见原来总监大佬的温文尔雅和和善，也有多被照顾，很是感激。</p><p>​        遇到舒老师，原来设计大佬可以这么帅还有艺术感，生活的 volg 给人美感和温暖，很是感激。</p><p>​        遇到每天开心的竹子 ，主动亦热情，知识广度丰富带我接触更多，很是感激。        </p><p>​        遇到产品 megnni，性格可是我所缺少的那一面，既向往，也舒畅，很是感激。</p><p>​        遇到 WP 教会我生活，遇到 LQ 带我们去吃烤肉，遇到 CK 的认真负责，遇到 SJ 陪我聊天灌水，分享生活经历和人情，很是感激。</p><p>​        遇到还有很多很多的小伙伴和大佬们，每一笔都很珍贵，很珍惜，在此一并感谢。</p><br><h3 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h3><p>​        2021.04 初递交了离职报告，离开 “统信软件（亦 Deepin）”、，虽有不舍亦不后悔。来的匆匆，走的也匆匆。氛围很好的一家公司，也可以学习到很多知识，有很多的空闲时间去思考一些人生，想要去推进的事情，大佬也会很支持和提供资源，同事之间的氛围也很棒，设计的舒老师又帅又好说话、设计的妹子人美声甜，产品的大姐姐们也奶思，甚至还可以带薪撩拨测试的小妹子，大佬对于开源社区这方面也是很支持，亦是很适合新人推荐的，虽离开，但给予我一段很好的回忆。 也有想去完成一些它的事情，记录曾经的我的桌子布局，留以纪念这两年。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_2393%202.JPG" width="45%"/ loading="lazy">   <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_1447%202.JPG" width="45%"/ loading="lazy"></p><br><h3 id="新相遇"><a href="#新相遇" class="headerlink" title="新相遇"></a>新相遇</h3><p>​        睡过一觉，又是新的一天，新的一天也是元气满满的一天，迎接今日份的新开始，认识新的朋友，新的经历，新的懵懂与无知，新的公司，新的进步，新的相遇。邂逅，<strong>看到本文也是缘分，若是想来我呆过这两家之一，均可帮忙内推这两家。</strong></p><p>​        再见，统信（Deepin），感谢相逢。</p><p>​        你好，金山，有幸能为 WPS 贡献代码。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4404.JPG" width="50%"/ loading="lazy">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;  第一次上班，第一份工作，工作了两年，回想一下这两年我都干了些啥？学到了一些啥？以及思考一下以后我想干啥？略困惑，需要思考下人生&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 我是谁？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 我想做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 我在做什么？&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/065fb0ef38cb2a733ec131e239889c2b.gif&quot; width=&quot;60%&quot;/&gt;</summary>
    
    
    
    <category term="生活 - 生活趣闻闲谈" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB%E9%97%B2%E8%B0%88/"/>
    
    
    <category term="Deepin" scheme="https://ifmet.cn/tags/Deepin/"/>
    
    <category term="WPS" scheme="https://ifmet.cn/tags/WPS/"/>
    
  </entry>
  
  <entry>
    <title>上海之旅，再让键盘长几天草</title>
    <link href="https://ifmet.cn/posts/31c5b72/"/>
    <id>https://ifmet.cn/posts/31c5b72/</id>
    <published>2021-05-24T18:22:28.000Z</published>
    <updated>2021-05-24T18:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　出游，✈️✈️✈️，上海、迪士尼，芜湖~~</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526224520.png" width="80%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>​        上海作为大城市，心慕已久。前往，欣欣然，顺道前往迪士尼，见识一番。</p><br><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><h4 id="上海迪士尼"><a href="#上海迪士尼" class="headerlink" title="上海迪士尼"></a>上海迪士尼</h4><p>​        ✈️✈️✈️，芜湖~，看看窗外的☁️，到达，乘车车，到达上海迪士尼。丢书包与酒店，再乘坐专线车送到门口。</p><p>​        步入大门，就是一侧就是巨大唐老鸭在水里面游着，下意识的就是这个 <strong>冲鸭</strong>。入园，又是一道大门，还需行李安检，再往前行，数十步，又是就是下图的最后一道门，可以看到米奇的标志 LOGO；以及确认是真的到了迪士尼，往前一步，就是女生们心心念念的之地（哪个少女不怀 <del>着心思想去一次？</del>）。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526223852.png" width="60%"/ loading="lazy"><br><p>​        <font color=#FE7207  size=4 face="幼圆"><strong>迪士尼的城堡里面又是长什么样子呢？</strong></font> 也是自己好奇了很久的一个问题😄</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526235015.png" width="47%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3714.JPG" width="47%"/ loading="lazy"></p><br><p>​        <font color=#FE7207 size=4 face="幼圆"><strong>想到可能今日（2021.05.20）可能相遇但却不相识？</strong></font> </p><p>​        本次出来玩，是没看日期的，来了才突然发现，遇上了一个好日子 <code>5.20</code>；闲逛着，发现给送了一条消息，易烊千玺也来了，还联名这个五周年的迪士尼米奇，以及刚坐了的这个旋转木马🎠🎠🎠；是不是有擦肩而过过</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4461.JPG" width="50%"/ loading="lazy"><br><p>​        迪士尼的两大活动、以及自定活动各种景点，都需要自行去挖掘发现，去观看，以及去排队</p><p>​    1️⃣ 花车游行，可各种卡通动漫人物一起；看到此舞蹈，👸🏻公主抱，就是花车队伍的开始了，还有幸运观众坐车领队哦~</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526231705.png" width="43%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4463.GIF" width="57%"/ loading="lazy"> </p><p>​    2️⃣ 景区自行游玩，怎么能够不打卡各处，体验一下各个之间风格呢？又以及怎么能够不留几张图片呢？为了这些小可爱们；对了，推荐“加勒比海盗” 和 “飞越地平线” 这两项目，很是震撼。看了都想二刷，不过还是要排队，哪怕是快速通道一样</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4432.JPG" width="60%"/ loading="lazy"><p>​        3️⃣ 夜间大型烟花表演秀；烟花天空的绽放让人心醉，但却只是一瞬，但某平洋保险却能赞助好久，一直放好久的烟火；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526230255.png" width="80%"/ loading="lazy"><br><h4 id="上海城市"><a href="#上海城市" class="headerlink" title="上海城市"></a>上海城市</h4><p>✅  迪士尼</p><p>✅  豫园</p><p>✅  外滩</p><p>✅  南京路步行街</p><p>✅  上海自然博物馆</p><p>✅  思南公馆</p><p>✅  城隍喵（划，庙）</p><p>✅  启瓶器（环球金融）</p><p>✅  ,,,</p><p>去了城隍庙，发现月老和财神爷是隔壁家的关系，一炷香，许两个愿望，还行？合成一个实现也行：饿，饭饭，小富婆</p><blockquote><p>上香： 姻缘 + 财神  = 我的一个愿望</p></blockquote><p>至于外滩，一侧是钟楼（某银行）？另一侧则是江岸边，总有着很多的人，除了容易看到外国新娘👰🏻，还可以来学英语，真真的友人实景教学；登高楼，俯视整个陆家嘴以及黄浦江，上海夜景尽收眼底，灯火绚丽，向往；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4430.JPG" width="80%"/ loading="lazy"><br><h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>​        来一地方，自然需要品一方美食，上海作为大城市，有个熟悉的地道的上海人带我去尝尝本地菜，嘿嘿~。去了大茶壶的那个最老的店铺，特色生煎，各种口味仅此店才有，哈哈哈哈哈哈哈哈哈😁~~~，这就炒鸡开心了；然后还有着逸桂禾的阳春面，清淡，汤也好喝。想吃这种面很久了，今日得以一见。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4431.JPG" width="60%"/ loading="lazy"><p>​        再然后其也尝了尝其它地方的美食，咋感觉像是，感觉上海早餐以这种生煎、甜品之类的为多，菜系也多为偏甜。当然了，作为初来乍到的异地人，基本全部带有偏甜的，略有吃不习惯。晚上附近一个人找了家地道的川菜馆，阿西，阿西，阿西，当然还是无辣不欢🌶🌶🌶；特意点的中辣、中麻；夹了第一筷子🥢，放下了，然后喝了一口水。心情复杂，心情复杂，心情复杂，真的是心情复杂；</p><p>​        这是吃饭吃了很久的一次，一筷子一筷子的漫不经心。前天问了问撩拨了前台的两个小姐姐。</p><p>你是本地上海人嘛？</p><p>嗯嗯，是哒。</p><p>你觉得你们这们川菜够辣不？</p><p>不辣。</p><p>。。。。  </p><p>我不仅觉得不辣，不麻，甚是还有点甜。</p><p>随后仙女掩面一笑，动人心神。拎包，下班</p><br><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>​        “上海迪士尼酒店” 与 “玩具总动员酒店” 是最靠近上海迪士尼的两个酒店，都充满着可爱的动漫人物😊；入住后的酒店并非想象中的奢华，但细节却甚是干净，已有专门的小车车来接送去迪士尼的侧门，不用去像第一天那样去正门排队入园。</p><p>​        后几日，换了住宿之地，临江而望，东方明珠和环球金融中心即在眼前，略意外的是，感觉那塔没有开灯，或许是太早了，还没到点。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4426.JPG" width="50%"/ loading="lazy"><h3 id="再遇"><a href="#再遇" class="headerlink" title="再遇"></a>再遇</h3><p>​        🛫🛫🛫，回家，此番玩的尽心，品尝了一番甜系的上海菜；回家，继续吃吃习惯的菜品，无辣不欢，解解馋</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_4453.GIF" width="80%"/ loading="lazy"><p><strong>后记：</strong>  千万不要像我一样一个人单独去迪士尼，还巧合是 5.20 这一天，还巧合是易烊千玺也去的一天。不然你会知道那些情侣请你帮她们拍照的时候，当看到你是一个人独行的时候，就很 🐶🐶🐶；后还遇到了单人通道，可惜那天也被关闭了，呜呜呜呜~~~；不像我，只能想，有个妹妹说，不像我，只会心疼一下哥哥。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　出游，✈️✈️✈️，上海、迪士尼，芜湖~~&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210526224520.png&quot; width=&quot;80%&quot;/&gt;</summary>
    
    
    
    <category term="生活 - 旅游" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E6%97%85%E6%B8%B8/"/>
    
    
    <category term="旅游" scheme="https://ifmet.cn/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="上海" scheme="https://ifmet.cn/tags/%E4%B8%8A%E6%B5%B7/"/>
    
  </entry>
  
  <entry>
    <title>编译 LNK1104 无法打开文件“ xxx.dll”</title>
    <link href="https://ifmet.cn/posts/f5f6f078/"/>
    <id>https://ifmet.cn/posts/f5f6f078/</id>
    <published>2021-04-28T22:15:02.000Z</published>
    <updated>2021-04-28T22:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　VS 2019 编译：LNK1104    无法打开文件“E:  xxx.dll”</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​        Win10 使用 VS 2019 编译 C++ 的大型项目，报错如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">严重性代码说明项目文件行禁止显示状态错误LNK1104无法打开文件“E:  xxx.dll”xxxxxxxx<span class="token punctuation">\</span>LINK<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>​        当前 <code>xxx.dll</code> 已经被其他应用程序占用，关掉对应进程（或软件）之后，再编译项目。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　VS 2019 编译：LNK1104    无法打开文件“E:  xxx.dll”&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    
    <category term="Visual Studio" scheme="https://ifmet.cn/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>VS2019调试Qt5时QString显示为内存地址而非字符串</title>
    <link href="https://ifmet.cn/posts/f7939b53/"/>
    <id>https://ifmet.cn/posts/f7939b53/</id>
    <published>2021-04-28T22:14:02.000Z</published>
    <updated>2021-04-28T22:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>VS 2019</code> 调试 <code>Qt5</code> 时 QString  显示为内存地址而非字符串内容。不悦，解决之。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​        用的 Win10 20H2，本机只安装了 VS 2019，没安装 Qt 程序，使用的是 Qt 源码分支编译，以文件夹路径中来调用和使用。结果发现 VS 2019 调试 Qt5 时候，其中 QString 显示内存地址地址，而非字符串内容。</p><br><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>​        点击 <strong>“VS2019-扩展-联机”</strong> ，安装 <code>Qt Visual Studio Tools</code> 之后，重启 VS 即正常显示为文本内容。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210428202203.png" width="80%"/ loading="lazy">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　&lt;code&gt;VS 2019&lt;/code&gt; 调试 &lt;code&gt;Qt5&lt;/code&gt; 时 QString  显示为内存地址而非字符串内容。不悦，解决之。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    
    <category term="Visual Studio" scheme="https://ifmet.cn/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>win10的20H2使用VS2019，拖曳窗口会崩溃</title>
    <link href="https://ifmet.cn/posts/f6612e2a/"/>
    <id>https://ifmet.cn/posts/f6612e2a/</id>
    <published>2021-04-28T22:11:02.000Z</published>
    <updated>2021-04-28T22:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　发现 Win10 的 20H2 的一个 BUG，使用 VS 2013、2015、2017 、2019 的窗口拖曳拆分、合并都会崩溃。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>重装系统 win10，使用最新 20H2 + VS 2019，结果发现拖曳 VS 窗口进行合并或拆分时候，放完成松手完成时候， VS 都会崩溃重启，甚是不爽。详细版本如下：</p><blockquote><p>// Win10 版本</p><p>版本    Windows 10 专业版        版本号    20H2<br>安装日期    ‎2021/‎4/‎16        操作系统内部版本    19042.804<br>体验    Windows Feature Experience Pack 120.2212.551.0</p><p>// VS 版本</p><p>Visual Studio Professional 2019  版本 16.4.12</p></blockquote><br><h3 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h3><p><strong>我的电脑 Win10 无法更新系统，VS 2019 虽然可联网更新，但是升级之后，可能项目会编译不过（进退两难）。</strong></p><blockquote><p>无法连接到更新服务。我们将稍后再试，你也可以立即进行检查。如果问题仍然存在，请确保你已连接到 Internet。</p></blockquote><p>​        很蛋疼的一点是，某种原因，网管把所有电脑把 win10 自动更新的域名断了（一开始还以为是此版本的 BUG，尝试多种方案均链接网络失败）。后灵光一闪，猜是网管掐了。气死了，气死了，气死了，不过电脑不更新了，好像也挺爽。</p><br><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="将就解决方案"><a href="#将就解决方案" class="headerlink" title="将就解决方案"></a>将就解决方案</h4><p>又不是不能用，不拖曳窗口就行，不会弄那就这样将就用</p><br><h4 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h4><p>虽然拖曳窗口会崩溃，但可以鼠标右键 “新建垂直文档组”。也达到目的，不过不够优雅</p><br><h4 id="我的解决方案"><a href="#我的解决方案" class="headerlink" title="我的解决方案"></a>我的解决方案</h4><p>编辑 <code>%InstallRoot%\Common7\IDE\devenv.exe.config</code>  和 <code>%LocalAppData%\Microsoft\VisualStudio\16.0_xxx\devenv.exe.config</code> ，并在AppContextSwitchOverrides 元素的 value 属性的结尾上添加以下代码。（找不到就用 Everything 搜索，修改hi前记得先备份原文件）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span>Switch.System.Windows.Interop.MouseInput.OptOutOfMoveToChromedWindowFix<span class="token operator">=</span>true<span class="token punctuation">;</span>Switch.System.Windows.Interop.MouseInput.DoNotOptOutOfMoveToChromedWindowFix<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 VS 2019，拖曳窗口合并拆分，完美且不会崩溃。</p><br><h4 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h4><ul><li>对于 VS 2013、2015，只需要升级 win10 补丁即可，重启正常。</li><li>对于 2019 、只需升级 VS 到最新版本即可（<a href="https://developercommunity2.visualstudio.com/t/Unexpected-VS-crash-when-docking-or-spli/1323017">Microsoft  已修复</a>）。</li><li>对于 VS 2017，可以试试先升级系统，后升级 VS 。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　发现 Win10 的 20H2 的一个 BUG，使用 VS 2013、2015、2017 、2019 的窗口拖曳拆分、合并都会崩溃。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Windows" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Windows/"/>
    
    
    <category term="Visual Studio" scheme="https://ifmet.cn/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>三亚之旅，让键盘先长几天草</title>
    <link href="https://ifmet.cn/posts/3b6c071c/"/>
    <id>https://ifmet.cn/posts/3b6c071c/</id>
    <published>2021-04-24T20:15:28.000Z</published>
    <updated>2021-04-24T20:15:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　忽翻出了去三亚之旅的照片，一次美好的看海,玩水之旅行。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_8189.JPG" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>​        在一个地方呆久了，总会幻想着有一日去另一个山清水秀之地，畅游一番，看另一方山水、一方人情。迟迟未去的理由也许大概是 <strong>“我也曾想仗剑走天涯，奈何 BUG 太多而没去”</strong> 。此次有了机会和时间，得以出发，增加一点见识、看看山水、享受一下阳光、沙滩、大海、以及…👫🏻</p><br><h3 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h3><p>​        还没来一个地方之前，就对她有着许些期待、一头小鹿四处跳跃在心中。先想着去哪里玩、玩些啥、然后乐呵的美滋滋遐想。</p><p>​        对于旅行，我更倾向于没有规划、走到哪里就玩到那哪里、随走随停，这才是我想的一种旅行。也毕竟一地的打卡景点之多，竟可能的全去，总有路上匆忙之感，丢了旅游的悠然与惬意。</p><p>​        在路上、也认识了一些新朋友，聊得投机，相约同行。且发现是一老司机（字面意），后租一车，想去哪里，我们就去哪里。芜湖~</p><p>​        刚到，就初缝套路深；先去一家路边小店买了一件椰树的游泳裤衩、拖鞋等。后半路遇其她商家、被告知成了肥羊了。略有小气，气不过，返回店家，怒气冲冲😤😤😤，后退还多余现金（多赚可忍，但卖数倍，就气不过了）。不过后面都基本正常，算是一个小插曲。</p><p>​        当然是先去海边拉，光着小脚丫，踩踩👣👣👣</p><br><p>​        记得，有去潜水🤿、去摸摸水底的🐟，给她们喂着一些鱼饲料，可能是来看她们的人多了，也不见怕人、但伸手去摸，依旧会快速的摇着尾部遁走；本以为喂饵的人会很多，不会怎么吃，可是实际发现还是依旧很贪吃，吃的一个快速和惬意；水底实际也是很浑浊的，仅勉强看清周围几十距离，周围漆黑，和📺的水底世界拍照，相差甚远了。</p><p>​        后面还去完了一些划水冲浪的项目，阿西，真的是天黑才停止。真的是摩托艇前面跑，溅起的浪花溅在脸上，感觉真的是又疼又闲又贵又刺激又好玩。</p><p>​        踩着海滩边的柔软细沙，光着脚，很舒服，旁边就是打着沙滩排球的俊男靓女。当然偶尔也会遇到有人趁你不注意，塞张小卡片到你手里。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210423223703.png" width="100%"/ loading="lazy"><br><p>​        最后还去了三亚购物，先去的 Apple 店铺看的，不过比较小，那会 🍎 12 店铺没有了，略扫兴、本有意换个手机的，那就再接着用一年，坐等 IPhone 13 香 <del>（王守义十三香提前加持）</del>。后路过卖🍺的，好可惜，滴酒不沾的我，只是看看，没啥兴趣。</p><p>​        最后，一个男生去逛彩妆店和护肤品店、又能有什么坏心思呢？只不过是去给某个💃送点小礼物罢了。出乎意料之外的是，本以为这里不会有什么男生，结果男生至少占了三成🤦‍♂️，看起来都是买护肤送老婆。赶紧问了下好友里的小姐妹们 ，送小礼物应该送啥、让给出谋划策。每家店铺队伍都还挺长的。只记最后拎着三个大袋子，有一个还袋子压破了；买完才知道，这些不能走托运，得提着上飞机，早知道就，，氪，氪，氪，氪，氪，，，一直到现在都觉着里面的女生买东西太夸张了，现在只记得一些：神仙水、SK-II、雅诗南黛、什么珂、韵、娜、婷、什么红（真的是让人上头）。印象深刻的就是，中文名和英文名我对不上、找个店铺都找了好久，哭晕。</p><br><p>​        后也去让老司机开车车，带我们去兜兜风，还可以看到一些漂亮大姐姐，后视镜的墨镜才发现，车车就不认识了，那会还没拿驾照也不认识。有意思来了，后来另一个车的小姐姐也过来了，好像还竞速了一段距离。优点意思。（老司机你开慢点）</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3564.JPG" width="100%"/ loading="lazy"><br><h3 id="吃饭"><a href="#吃饭" class="headerlink" title="吃饭"></a>吃饭</h3><p>​        作为一个会经常在四处探店的人，寻找好吃的，怎么会放过此处的美味呢？首选就是海鲜，其次就是烧烤，哈哈哈哈哈哈，这东西，真的是出来了也还想吃。路途也遇一个大锅说带我去吃海鲜，知道了还有可以自行选购海鲜食材，店家来烧烤这种方式。哈哈哈哈哈哈哈哈😄😄，对于这个，做了功课的，找到一家叫什么小胡子的店铺，两家店面，在一条街上面对面开的，实际是一家，很值得一去，就是得先在远处停车好。里面海鲜都是活的，都让顾客自行挑选保证新鲜，一家店面选好之后，去另一家等待加工，坐等上菜即可。</p><p>​        记得点了皮皮虾，口感和一般皮皮虾不一般，咬下去的每一口都很清脆、味道中带点🌶感，还有海鲜的湿润、鲜味都尝的出来。还有<strong>清蒸石斑鱼</strong> ，这个真的吹爆它，清淡带着深海的感觉，肉质爽滑且鲜美，生动形象的形象，词穷，让人回味无穷。全场最佳，至今依稀记得其味道（可惜图片没找到了），不吃就错过了一个触动灵魂的美食，就可惜了。且。也有椰子饭，可能是饮食习惯的问题，不佳；还有海胆蒸鸡蛋，吃的没找到肉，问了下老板，说海胆就是壳子内壁薄薄的一层膜，我怀疑我是点了一个纯正的鸽子汤，海胆是啥味道完全没试出来，我都怀疑是没有吃到。。。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3552.JPG" width="100%"/ loading="lazy"><p>​        再后来就是吃了一些其它的店铺，记得点了数十份烤牡蛎，确实味道也好吃，不过感觉怎么价格和武汉差不多？？？然后还记得还去了一家东北菜馆，来了朋友推荐的锅包肉，吃吃喝喝，阔乐。然后走在路边会买一些椰子喝喝，感觉有点甜，遍地的🌴🌴🌴🌴🌴，在路两旁都是，然后有一种冒险岛的图感。</p><br><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>​        游玩一天，夜间自然要睡觉，深入沉睡灵魂，蓄力次日的游玩。这里的自助也是很好的，穿了一个睡袍就下吃火锅🍲、小吃等自助，品种很多。吃的饱饱的、要歇一会再能离开。</p><p>​        还有一个游池，水很清澈、可惜了，我游泳是个半瓢水。然后在面疯狂的拍打着浪花、上午的水都是蓝且透亮的、阳光照射，甚是好看；而下午又太阳，水的颜色会变得深蓝透遂一点，👀看到很漂亮</p><p>​        而依栏杆看海面，甚至心旷神怡，拍的比较喜欢一张图；睡觉的地方，楼层比较高，视线也看开阔，旁边还有一阳台，有数把高椅，可以躺着；室内的风格是偏一点复古，看起来也很不错。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_3566.JPG" width="100%"/ loading="lazy"><br><h3 id="再遇"><a href="#再遇" class="headerlink" title="再遇"></a>再遇</h3><p>​        倘若下次有机会再去，一定要再去吃一下那家店，的那家的清蒸石斑鱼，，是哒，我又馋了，好想再吃一次。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　忽翻出了去三亚之旅的照片，一次美好的看海,玩水之旅行。&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/IMG_8189.JPG&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="生活 - 旅游" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E6%97%85%E6%B8%B8/"/>
    
    
    <category term="旅游" scheme="https://ifmet.cn/tags/%E6%97%85%E6%B8%B8/"/>
    
    <category term="三亚" scheme="https://ifmet.cn/tags/%E4%B8%89%E4%BA%9A/"/>
    
  </entry>
  
  <entry>
    <title>Qt 信号和槽原理分析</title>
    <link href="https://ifmet.cn/posts/a74983e0/"/>
    <id>https://ifmet.cn/posts/a74983e0/</id>
    <published>2021-03-29T17:03:28.000Z</published>
    <updated>2021-03-29T17:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　<code>Qt</code> 的信号和槽原理分析：手写一个 moc 预编译器模拟生成 mo_xxx.cpp 过程</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>　　 最近手工模拟了 Qt 的信号和槽实现原理，用纯 C++ 实现来实现一个 connet 函数。我的 💻 环境为：  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>gcc/g++ 9.0</code> 📎 <code>gdb8.0</code> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"sig1()"</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">"slot1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><pre><code>     Qt 的信号和槽解决了 GUI 开发过程中 “对象间通信和共享数据” 问题。属于 Qt 的一个独创解决思路。关于为啥不用 C++ 的标准智能指针或者其它库呢？？那时候 Boost 和 stl 都没诞生呢。所以代价就是通过 moc 预编译器来扩展 C++ 语法。</code></pre><p>​        模拟  object.h 通过 moc 生成 db_object.cpp 的过程中，要想实现如下的一个 connet 函数，很重要就是解决 <strong>“A 对象的 n 信号，映射关联到 B 对象的 m 槽函数”</strong> 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="object-h"><a href="#object-h" class="headerlink" title="object.h"></a>object.h</h3><p>下图 的<code>object.h</code> 模拟 QObject 类；</p><ul><li>自定义 C++ 之外的关键字 <code>db_signals</code>、<code>db_slots</code>、<code>db_emit</code>；编译器不报错的？添加为宏预定义处理即可。</li><li><code>MetaObject</code> 对象模拟是元对象，用来在 <code>object</code> 中用来存储  <code>db_signals</code> 和  <code>db_slots</code> 标记下面的函数名；对于信号，只需要声明，则不需要定义（通过 moc 自动在db_object.cpp 中生成 ），但是槽函数则需要自己在其它函数中声明和定义</li><li><code>Connection</code> 是做作为 ConnectionMap 的 value 使用的。保存本对象所链接的对象和对应的槽函数</li><li><code>ConnectionMap</code> “对象 + 信号 ——–映射——&gt; 对象 + 槽” 在代码中存储表现形式。</li><li><code>ConnectionMapIt</code> 是 ConnectionMap 遍历的游标。</li><li><code>static MetaObject meta</code> 具体的元对象。</li><li><code>metacall</code> 通过槽的索引 ==&gt; 槽函数，然后调用</li><li><code>static void db_connet()</code> 静态函数设计，可在任何地方都可以使用，连接信号和槽函数</li><li><code>void testSignal()</code> 测试信号函数，看槽函数是否会成功被调用，即 emit signal( )</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">OBJECT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJECT_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_signals</span> <span class="token expression"><span class="token keyword">protected</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_slots</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">db_emit</span></span><span class="token keyword">class</span> <span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">MetaObject</span>              <span class="token comment">// 元对象</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig_names<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot_names<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">active</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Connection</span><span class="token punctuation">&#123;</span>    Object <span class="token operator">*</span>recviver<span class="token punctuation">;</span>    <span class="token keyword">int</span> method<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span> ConnectionMap<span class="token punctuation">;</span><span class="token keyword">typedef</span> multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span><span class="token operator">::</span>iterator ConnectionMapIt<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> MetaObject meta<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">metacall</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db_signals<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    void sig2();</span><span class="token keyword">public</span> db_slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    void slot2();</span><span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">MetaObject</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    ConnectionMap connectionsMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// OBJECT_H</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="object-cpp"><a href="#object-cpp" class="headerlink" title="object.cpp"></a>object.cpp</h3><p>object 类的实现细节</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>subStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str <span class="token operator">||</span> <span class="token operator">!</span>subStr <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sig<span class="token punctuation">,</span> Object <span class="token operator">*</span>receiver<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>slot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sig_idx <span class="token operator">=</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span>sender<span class="token operator">-></span>meta<span class="token punctuation">.</span>sig_names<span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slot_idx <span class="token operator">=</span> <span class="token function">findSignalIndex</span><span class="token punctuation">(</span>receiver<span class="token operator">-></span>meta<span class="token punctuation">.</span>slot_names<span class="token punctuation">,</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sig_idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> slot_idx <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"signal or slot not found!"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        Connection c <span class="token operator">=</span> <span class="token punctuation">&#123;</span>receiver<span class="token punctuation">,</span> slot_idx<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        sender<span class="token operator">-></span>connectionsMap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Connection<span class="token operator">></span><span class="token punctuation">(</span>sig_idx<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// connectionsMap 私有成员</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    db_emit <span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过 sender 的信号 idx ==> 槽函数</span><span class="token keyword">void</span> <span class="token class-name">MetaObject</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span>Object <span class="token operator">*</span>sender<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pair<span class="token operator">&lt;</span>ConnectionMapIt<span class="token punctuation">,</span> ConnectionMapIt<span class="token operator">></span> ret<span class="token punctuation">;</span>    ret <span class="token operator">=</span> sender<span class="token operator">-></span>connectionsMap<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 寻找[idx,  )</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConnectionMapIt it <span class="token operator">=</span> ret<span class="token punctuation">.</span>first<span class="token punctuation">;</span> it <span class="token operator">!=</span> ret<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Connection c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        c<span class="token punctuation">.</span>recviver<span class="token operator">-></span><span class="token function">metacall</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="db-object-cpp"><a href="#db-object-cpp" class="headerlink" title="db_object.cpp"></a>db_object.cpp</h3><p>  object 类通过 moc 生成 db_object.cpp，一些 moc 所执行的代码扩展在 db_object.cpp 里面。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span><span class="token comment">//db_object: 是由 moc 编译器 将 object.cpp 展开的内容(此处手写表示)</span><span class="token keyword">const</span> <span class="token keyword">char</span> sig_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"sig1()"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> slot_names<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"slot1()"</span><span class="token punctuation">;</span>MetaObject Object<span class="token operator">::</span>meta <span class="token operator">=</span> <span class="token punctuation">&#123;</span>sig_names<span class="token punctuation">,</span> slot_names<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">sig1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">MetaObject</span><span class="token operator">::</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-----------> this is slot1()"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 槽的索引==> 槽函数</span><span class="token keyword">void</span> <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">metacall</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"object.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 目的：自行构造 moc 编译器，手动将 object.h --> db_bject.cpp (宏 和 moc 编译器处理的部分)</span><span class="token comment">// 时间：2021-03-26</span><span class="token comment">// 下载：https://github.com/xmuli/QtExamples</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Object <span class="token operator">*</span>obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object <span class="token operator">*</span>obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token operator">::</span><span class="token function">db_connet</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token string">"sig1()"</span><span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token string">"slot1()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj1<span class="token operator">-></span><span class="token function">testSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 终端输出打印：</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token keyword">this</span> is <span class="token function">slot1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文参考 <a href="https://www.cnblogs.com/swarmbees/p/10816139.html">文一</a>、 <a href="https://blog.csdn.net/perfectguyipeng/article/details/78082360">文二</a> ，但实际发现其源码之间有几处错误，实际运行失败，参考思路重写，方便后来者学习，且本文还有改进之处，日后有空改进，修改点如下：</p><ul><li><code>findSignalIndex</code> 函数重写，使得能够识别信号和槽函数的重载函</li><li><code>db_connet</code> 在重构，支持宏方式（Qt4）和 函数指针（Qt5）方式；（当前为使用字符串作为参数）</li><li>构建 xxx_p.h，将成员变量都放在此文件中，加快项目的编译速度。</li></ul><br><h3 id="系列地址"><a href="#系列地址" class="headerlink" title="系列地址"></a>系列地址</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a> 【DbSigSlot】</p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　&lt;code&gt;Qt&lt;/code&gt; 的信号和槽原理分析：手写一个 moc 预编译器模拟生成 mo_xxx.cpp 过程&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>第一次开车车</title>
    <link href="https://ifmet.cn/posts/cfc539c3/"/>
    <id>https://ifmet.cn/posts/cfc539c3/</id>
    <published>2021-03-15T12:22:28.000Z</published>
    <updated>2021-03-15T12:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　第一次开车车上路</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p>​        年前拿到了拖延了三年多的驾照，最近有空试着上了一下路。刚开始找了一个五年老司机在副驾知道指导下</p><br><p>第一天：我柑橘已经开得好快了，已经到 40 Km/h 了，对着副驾五年老司机说</p><p>第二天：路上，暗想，怎么 70Km/h 这么慢</p><p>第三天：上高速了，偶尔有最高 110Km/h，但不知为何副驾多年老湿机要右手紧紧握住把手</p><p>第四天：贴了人生中第一张违停罚单，客服还说能够此处能停的！害，</p><br><p>​        路上听到最多的一句话就是小团团：看看我的大宝贝，你又走错路了!</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210315230711.png" width="25%"/ loading="lazy">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　第一次开车车上路&lt;/p&gt;</summary>
    
    
    
    <category term="生活 - 生活趣闻闲谈" scheme="https://ifmet.cn/categories/%E7%94%9F%E6%B4%BB-%E7%94%9F%E6%B4%BB%E8%B6%A3%E9%97%BB%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>QtCreator 中自定义项目例子置于“欢迎-实例”中</title>
    <link href="https://ifmet.cn/posts/60489bc/"/>
    <id>https://ifmet.cn/posts/60489bc/</id>
    <published>2021-03-12T12:22:28.000Z</published>
    <updated>2021-03-12T12:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　将自定义的代码例子，放置到 <code>Qt Creaor</code> 中的 “欢迎-示例” 中，提供大家学习。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font>　</p></blockquote><br><h3 id="IDE-缺少示例"><a href="#IDE-缺少示例" class="headerlink" title="IDE 缺少示例"></a>IDE 缺少示例</h3><p>​        在 <code>UOS</code> 下，命令安装的 <code>Qt Creator</code> 打开 “欢迎 - 示例” 之后，显示为空，明显 <code>Qt</code> 自带的例子没了。解决方案如下。(<strong>💻：</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>Qt Creator 4.8.2</code> )</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qtbase5-examples qtbase5-doc-html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>qtbase5-examples：</strong> 是 <code>Qt</code> 官方自带的源码例子，默认安装在 <code>/usr/lib/x86_64-linux-gnu/qt5/examples</code> 下。</li><li><strong>qtbase5-doc-html：</strong> 是在 <code>IDE</code> 中的 “欢迎 - 示例” 中，显示预览的小网页窗口，默认是安装在 <code>/usr/share/qt5/doc</code> 下。</li></ul><br><h3 id="自定义源码安装示例"><a href="#自定义源码安装示例" class="headerlink" title="自定义源码安装示例"></a>自定义源码安装示例</h3><p>​        目标是希望将 DTK 一些自带的例子，能够和官方例子一样，直接在 IDE 中打开和预览，进行编译和学习。帮助新手降低入门门槛。</p><p>​        将自己的源码 <a href="https://github.com/xmuli/QtExamples/tree/master/QtMyStyleEx/QtExample01/QtStyleEx">QtStyleEx</a> 下载本地，重命名为 qtmystyle，目录结构如下：</p><pre class="line-numbers language-none"><code class="language-none">└── qtmystyle    ├── main.cpp    ├── qtmystyle.pro    ├── widget.cpp    └── widget.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 qtmystyle 文件夹拷贝到 <code>/usr/lib/x86_64-linux-gnu/qt5/examples/widgets/desktop</code> 下，修改其目录下的 <code>desktop.pro</code> 文件，将 <code>qtmystyle</code> 加入进去。</p><p>再修改 <code>/usr/share/qt5/doc/qtwidgets/examples-manifest.xml</code> 文件，找到如下 Screenshot 的一段</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210429140408.png" width="100%"/ loading="lazy"><p>然后仿写一段放到起下面，重启 Qt Creator，再次打开，即可看到自定义的项目例子。效果图如下：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210312_150922.png" width="90%"/ loading="lazy"><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　将自定义的代码例子，放置到 &lt;code&gt;Qt Creaor&lt;/code&gt; 中的 “欢迎-示例” 中，提供大家学习。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>修改 Doxygen 主题，生成 Qt 风格的文档</title>
    <link href="https://ifmet.cn/posts/af3370a3/"/>
    <id>https://ifmet.cn/posts/af3370a3/</id>
    <published>2021-03-08T17:37:28.000Z</published>
    <updated>2021-03-08T17:37:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　在 <a href="https://xmuli.blog.csdn.net/article/details/114580630">上一篇</a> 中，成功自定义 <code>.qch</code> 文档手册在 <code>Qt Assistants</code> 中查看。但 Doxygen 默认的模板美观度还需提升，<font color=#D0087E size=4 face="STFangsong">这里记录一下修改 doxygen 主题，生成 Qt 风格的的主题样式。</font></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-10 14-52.gif" width="90%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​        系统环境： <code>doxygen 1.8.13</code> &amp;&amp; <code>UOS v20</code> &amp;&amp; <code>Qt Assistants 5.11.3</code></p><br><h3 id="切换-doxygen-主题风格-例子"><a href="#切换-doxygen-主题风格-例子" class="headerlink" title="切换 doxygen 主题风格(例子)"></a>切换 doxygen 主题风格(例子)</h3><p>​        找到一个基于 <code>Qt4</code> 官方文档的样式：<a href="https://github.com/skozlovf/doxygen-qmi-style">doxygen-qmi-style</a> ，克隆之后，放在 <a href="https://github.com/xmuli/QtExamples/tree/master/CustomQch">CustomQch</a> 下，然后修改配置如下，实际例子可以参见：<a href="https://github.com/xmuli/QtExamples/blob/35d524ef6726d502d5da470c7a67270bd7484e2d/CustomQch/Doxyfile#L1166">L1166</a> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">BRIEF_MEMBER_DESC <span class="token operator">=</span> NO                             <span class="token comment"># Project section</span>HTML_HEADER <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/header.html           <span class="token comment"># HTML section</span>HTML_FOOTER <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/footer.htmlHTML_STYLESHEET <span class="token operator">=</span> <span class="token variable">$&#123;path_to_qmi&#125;</span>/qmi.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        再次执行 <code>doxygen</code> 生成一遍，本例子 CustomQch 文件夹新主题效果如下：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210309_165602.png" width="70%"/ loading="lazy"><br><h3 id="开源项目提交（实战）"><a href="#开源项目提交（实战）" class="headerlink" title="开源项目提交（实战）"></a>开源项目提交（实战）</h3><p>​        在实战中学习，将 <code>DTK</code> 的开发手册集成到本地机器的 <code>Qt Assistants</code> 中，修改皮肤样式的提交如下：</p><ol><li><a href="https://github.com/linuxdeepin/dtk/commit/77d8402878515ba2a59ac9782059fddf3e49a8ca"># 77d8402</a> ： 添加 <code>Qt</code> 风格文档主题</li><li><a href="https://github.com/linuxdeepin/dtk/commit/ab94ca8f79fe31768165740cd4c486605c99e5dc"># ab94ca8f</a> ：修改 <code>Doxygen</code> 配置文件，使用 <code>Qt</code> 文档主题</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#################################################################################</span><span class="token comment">##  2020-03-10 配置 Doxygen 生成 html + latex + .qhp + .qch 四种格式（DTK 项目）   ##</span><span class="token comment">#################################################################################</span>PROJECT_NAME           <span class="token operator">=</span> <span class="token string">"Deepin Tool Kit"</span>  <span class="token comment"># 生成文档的名称</span>PROJECT_NUMBER         <span class="token operator">=</span> <span class="token number">2021.03</span>            <span class="token comment"># 项目文档的版本号码</span>PROJECT_BRIEF          <span class="token operator">=</span> <span class="token string">"Deepin Tool Kit is the toolkit used to built deepin style Apps"</span> <span class="token comment">#一行简短的描述</span>OUTPUT_DIRECTORY       <span class="token operator">=</span> ./doc              <span class="token comment"># 输出存放文档的路径 </span>OUTPUT_LANGUAGE        <span class="token operator">=</span> Chinese            <span class="token comment"># 生成文档为中/英文 English</span>BRIEF_MEMBER_DESC      <span class="token operator">=</span> YES                <span class="token comment"># 在 file 和 class 文档里面会有简短的描述</span>SHORT_NAMES            <span class="token operator">=</span> YES                <span class="token comment"># 生成更短的文件名</span>ALIASES                <span class="token operator">=</span> <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\a">\a</span>nchor"</span>   <span class="token comment"># 略困惑的一个参数</span>ALIASES               <span class="token operator">+=</span> <span class="token assign-left variable">section1</span><span class="token operator">=</span><span class="token string">"\section"</span>ALIASES               <span class="token operator">+=</span> l<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\r">\r</span>ef <span class="token entity" title="\1">\1</span>"</span>ALIASES               <span class="token operator">+=</span> b<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\b">\b</span> <span class="token entity" title="\1">\1</span>"</span>ALIASES               <span class="token operator">+=</span> color<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"&lt;span style='border: 1px solid black; width:10px; height:10px; background-color:<span class="token entity" title="\1">\1</span>; display:inline-block;'>&lt;/span> <span class="token entity" title="\2">\2</span>"</span>ALIASES               <span class="token operator">+=</span> href<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token string">"&lt;a href='<span class="token entity" title="\1">\1</span>'><span class="token entity" title="\2">\2</span>&lt;/a>"</span>EXTENSION_MAPPING      <span class="token operator">=</span> .h <span class="token operator">=</span>C++            <span class="token comment"># 覆盖或者扩展这个内置的语言映射</span>CPP_CLI_SUPPORT        <span class="token operator">=</span> YES                <span class="token comment"># 微软 C++/CLI 语言开启</span>CASE_SENSE_NAMES       <span class="token operator">=</span> YES                <span class="token comment"># No，只解析小写字母的文件; true 解析可以大写字母文件</span>INPUT                  <span class="token operator">=</span> ./dtkwidget/ <span class="token punctuation">\</span>     <span class="token comment"># 包含指定文件或者目录</span>                         ./dtkcore/ <span class="token punctuation">\</span>             ./dtkgui/ <span class="token punctuation">\</span>             ./qt5integration/             RECURSIVE              <span class="token operator">=</span> YES                <span class="token comment"># 文件递归,包括子文件也要输出为文档</span>EXCLUDE                <span class="token operator">=</span>  ./dtkcore/tool <span class="token punctuation">\</span>  <span class="token comment"># 不解析如下文件或者目录</span>                          ./dtkcore/tools <span class="token punctuation">\</span>                          ./dtkcore/tests <span class="token punctuation">\</span>                          ./dtkwidget/examples <span class="token punctuation">\</span>                          ./dtkwidget/src/widgets/privateEXCLUDE_SYMBOLS        <span class="token operator">=</span>                    <span class="token comment"># 排除一些文件, namespace, clas, fun 等</span>IMAGE_PATH             <span class="token operator">=</span> dtkwidget/doc/images <span class="token punctuation">\</span>   <span class="token comment"># 文档里面插入图片的存放路径</span>                         dtkcore/doc/images                         SOURCE_BROWSER         <span class="token operator">=</span> YES                 <span class="token comment"># true 文档和源码交叉引用</span>HTML_HEADER            <span class="token operator">=</span> ./doxygen-qmi-style/header.html    <span class="token comment"># doxygen 主题头部网页</span>HTML_FOOTER            <span class="token operator">=</span> ./doxygen-qmi-style/footer.html    <span class="token comment"># doxygen 主题底部网页</span>HTML_STYLESHEET        <span class="token operator">=</span> ./doxygen-qmi-style/qmi.css        <span class="token comment"># doxygen 主题网页样式表 CSS</span>HTML_TIMESTAMP         <span class="token operator">=</span> YES                <span class="token comment"># 生成的 html 底部页面生成的日期和时间</span>GENERATE_QHP           <span class="token operator">=</span> YES                <span class="token comment"># 使用命名空间、生成 .qch ，此必须开启</span>QCH_FILE               <span class="token operator">=</span> <span class="token punctuation">..</span>/dtk.qch         <span class="token comment"># 通过 html 生成的 qch 路径</span>QHP_NAMESPACE          <span class="token operator">=</span> <span class="token string">"com.deepin.dtk.5.4"</span>  <span class="token comment"># 命名空间要是唯一的，才能在 Qt 助手里面显示</span>QHP_CUST_FILTER_NAME   <span class="token operator">=</span> YES                <span class="token comment"># 指定一个自定义的过滤器添加</span>QHG_LOCATION           <span class="token operator">=</span> qhelpgenerator     <span class="token comment"># 使用 qhelpgenerator 工具将 qhp 转换为 qch</span>GENERATE_TREEVIEW      <span class="token operator">=</span> YES                <span class="token comment"># 使用树状的索引应生成结构来显示层次信息</span>GENERATE_LATEX         <span class="token operator">=</span> YES                <span class="token comment"># 输出 LaTeX 文件</span>MACRO_EXPANSION        <span class="token operator">=</span> YES                <span class="token comment"># 展开所有的宏名</span>   INCLUDE_PATH           <span class="token operator">=</span> dtkcore <span class="token punctuation">\</span>          <span class="token comment"># 预处器会处的文件夹</span>                         dtkwidget <span class="token punctuation">\</span>  dtkgui <span class="token punctuation">\</span>  qt5integration  PREDEFINED             <span class="token operator">=</span> <span class="token string">"DTK_NAMESPACE=Dtk"</span> <span class="token punctuation">\</span>                <span class="token comment"># 指定一个或多个宏名称</span>                         <span class="token string">"DTK_BEGIN_NAMESPACE=namespace Dtk &#123;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_END_NAMESPACE=&#125;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_USE_NAMESPACE=using namespace Dtk;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_NAMESPACE=Core"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_CORE_NAMESPACE=Dtk::Core"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_BEGIN_NAMESPACE=namespace Dtk &#123; namespace Core &#123;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_END_NAMESPACE=&#125;&#125;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DCORE_USE_NAMESPACE=using namespace Dtk::Core;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_NAMESPACE=Widget"</span> <span class="token punctuation">\</span>                         <span class="token string">"DTK_WIDGET_NAMESPACE=Dtk::Widget"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_BEGIN_NAMESPACE=namespace Dtk &#123; namespace Widget &#123;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_END_NAMESPACE=&#125;&#125;"</span> <span class="token punctuation">\</span>                         <span class="token string">"DWIDGET_USE_NAMESPACE=using namespace Dtk::Widget;"</span>                         EXPAND_AS_DEFINED      <span class="token operator">=</span> YES                 <span class="token comment"># 指定应扩展的宏名称列表</span>TAGFILES               <span class="token operator">=</span> tags/qtcore.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ <span class="token punctuation">\</span>  <span class="token comment"># 添加外部文档的位置</span>  tags/qtgui.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/ <span class="token punctuation">\</span>  tags/qtwidgets.tags<span class="token operator">=</span>https://doc.qt.io/qt-5/   DOT_PATH               <span class="token operator">=</span> /usr/local/bin      <span class="token comment"># 安装 graphviz，此路径确保可以找到 dot 工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p>​        附，是真的少，这里推荐几个样式表，想要略佳的 <code>CSS</code> 样式表，最完美的大概率的得自己写鸭（逃跑，，，</p><ul><li><a href="https://github.com/Velron/doxygen-bootstrapped">doxygen-bootstrapped</a> ：效果见 <a href="https://biogearsengine.com/documentation/index.html">预览</a>  </li><li><a href="https://github.com/skozlovf/doxygen-qmi-style">doxygen-qmi-style</a> ：效果见 <a href="http://skozlovf.github.io/doxygen-qmi-style/libxmlpp/classxmlpp_1_1CommentNode.html">预览1</a>  和 <a href="http://skozlovf.github.io/doxygen-qmi-style/qwt/">预览2</a></li><li><a href="https://github.com/Tencent/rapidjson/tree/master/doc/misc">rapidjson</a> ：效果见 <a href="http://rapidjson.org/">预览</a> </li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  【CustomQch】</p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p><p>​        </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　在 &lt;a href=&quot;https://xmuli.blog.csdn.net/article/details/114580630&quot;&gt;上一篇&lt;/a&gt; 中，成功自定义 &lt;code&gt;.qch&lt;/code&gt; 文档手册在 &lt;code&gt;Qt Assistants&lt;/code&gt; 中查看。但 Doxygen 默认的模板美观度还需提升，&lt;font color=#D0087E size=4 face=&quot;STFangsong&quot;&gt;这里记录一下修改 doxygen 主题，生成 Qt 风格的的主题样式。&lt;/font&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-10 14-52.gif&quot; width=&quot;90%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="学习 - Doxygen" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Doxygen/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt 项目用 doxygen 生成 .qch，嵌入文档到 Assistants</title>
    <link href="https://ifmet.cn/posts/3f6b9501/"/>
    <id>https://ifmet.cn/posts/3f6b9501/</id>
    <published>2021-03-08T16:21:28.000Z</published>
    <updated>2021-03-08T16:21:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　想着，将项目 <code>API</code> 的文档，能够生成离线版嵌入 <code>Qt</code> 助手  那样就方便很多，或者直接在 <code>Qt Creator</code> 里面点击帮助查看。</p><p>​        本文讲述如何将 <code>Qt / C++</code> 代码函数注释，解析生成 <code>html</code> 网页，生成 <code>.qhp</code> 后转换为 <code>.qch</code>，然后注册到  <code>Qt Assistants</code>  里面查看。<font color=#D0087E size=4 face="STFangsong">附上集成 DTK 开发手册到 Qt Assistants 的操作。</font></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-03-09%2013-08.gif" width="100%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="集成-DTK-开发手册到-Qt-Assistants"><a href="#集成-DTK-开发手册到-Qt-Assistants" class="headerlink" title="集成 DTK 开发手册到 Qt Assistants"></a>集成 DTK 开发手册到 Qt Assistants</h3><p>​        哈哈哈哈哈哈哈哈，如何将 <code>DTK</code> 开发手册集成到 <code>Qt Assistants</code>，命名执行完成后，效果就是文章最上面的预览图，且已自动切换了新皮肤，也会是 <code>Qt</code> 风格的，感兴趣可参见 <a href="https://ifmet.cn/posts/af3370a3/">此文</a>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> doxygen graphviz                           <span class="token comment"># 安装准备软件</span><span class="token function">git</span> clone --recursive https://github.com/linuxdeepin/dtk.git --depth<span class="token operator">=</span><span class="token number">1</span> <span class="token comment"># 克隆代码</span><span class="token builtin class-name">cd</span> dtk                                                      <span class="token comment"># 进入项目文件夹</span>doxygen                                                     <span class="token comment"># 生成 html +  .qhp 和 .qch</span><span class="token function">sudo</span> <span class="token function">cp</span> doc/dtk.qch /usr/share/qt5/doc                      <span class="token comment"># 与 Qt 文档存放在一起</span>assistant -register /usr/share/qt5/doc/dtk.qch              <span class="token comment"># 注册集成到 Qt 助手</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>涉及到生成自定义离线文档，定制过程中用到 <code>qhp</code>，<code>qch</code>，<code>qhcp</code>，<code>qhc</code> 四种不同格式的文件：</p><table><thead><tr><th>中文</th><th>全称</th><th>后缀</th><th>含义</th></tr></thead><tbody><tr><td><a href="https://doc.qt.io/archives/qt-4.8/qthelpproject.html">Qt帮助项目</a></td><td>Qt Help Project</td><td>.qhp</td><td>帮助生成器的输入文件，包括目录、索引和对实际文档文件的引用(*.html)；它还为文档定义了一个独特的命名空间。</td></tr><tr><td>Qt压缩帮助</td><td>Qt Compressed Help</td><td>.qch</td><td>帮助生成器的输出文件。这个二进制文件包含了帮助项目文件中指定的所有信息，以及所有压缩的文档文件。</td></tr><tr><td><a href="https://doc.qt.io/archives/qt-4.8/qthelp-framework.html#qt-help-collection-project">Qt帮助收集项目</a></td><td>Qt Help Collection Project</td><td>.qhcp</td><td>帮助集合生成器的输入文件。它包含了应该包含在帮助集合中的压缩帮助文件的引用；它也可能包含了其他用于定制Qt助手的信息。</td></tr><tr><td>Qt帮助集合</td><td>Qt Help Collection</td><td>.qhc</td><td>帮助收集生成器的输出文件。这是QHelpEngine操作的文件。它包含对任何数量的压缩帮助文件的引用，以及附加信息，如自定义过滤器。</td></tr></tbody></table><br><p>大致分成如下两类：</p><ul><li><p><strong>qhp 通过 qhelpgenerator 生成  qch。</strong> qhp文件负责组织实际用到的帮助文件（通常为HTML 文件，即需要在Qt Assistant中浏览的文件），然后通过 qhelpgenerator 是命令生成压缩的qch文件。qch文件是Qt Assistant能够识别的文档最小单元，可以通过 Qt Assistant-&gt;编辑-&gt;首选项-&gt;文档标签页-&gt;添加/移除  操作来注册或者注销一个qch文件。也可以通过命令 “assistant -register doc.qch” 来注册qch文件。注册后，即可在Assistant界面中浏览帮助文档。</p></li><li><p><strong>qhcp 通过 qcollectiongenerator 生成 qhc。</strong> qhcp 其主要作用是将qch二进制文件组织成为一个collection，定制客户化的Assistant；而 qhc 则是通过 qcollectiongenerator 命令生成的二进制文件，启动 Assistant 时需要指定 collection 参数，即 qhc 文件。qhc 文件中是 qch 文件的集合，打开 Assistant 时，通过指定当前collection 即可注册多个帮助文档。</p></li></ul><br><h3 id="简洁流程"><a href="#简洁流程" class="headerlink" title="简洁流程"></a>简洁流程</h3><ol><li>对一个 <code>C++ / Qt</code> 项目添加 <code>API</code> 函数的注释，是 <code>doxygen</code> 风格</li><li>使用 <code>doxygen</code> 修改默认生成模板</li><li>解析得到 <code>html</code> 和 <code>.qhp</code> 的两类文件</li><li>运行 <code>qhelpgenerator</code> 将 <code>.qhp</code> 转换为 .<code>qch</code> 格式</li><li>注册 <code>.qch</code> 到 <code>Qt Assistants</code> ，然后打开观看效果</li></ol><br><h3 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h3><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p>​        <code>doxygen 1.8.13</code> &amp;&amp; <code>UOS v20</code> &amp;&amp; <code>Qt Assistants 5.11.3</code></p><br><h4 id="书写注释"><a href="#书写注释" class="headerlink" title="书写注释"></a>书写注释</h4><p>​        对需要的项目，按照 <code>doxygen</code> 风格写入注释。doxygen 的用法可参考 <a href="https://xmuli.blog.csdn.net/article/details/102809157">此文</a> 。推荐如下风格</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*! * \brief main 所有函数的入口 * \param argc 参数个数 * \param argv 参数地址（二维） * \return 程序运行状态 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    IfmetWindow w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="设置-doxygen-参数"><a href="#设置-doxygen-参数" class="headerlink" title="设置 doxygen 参数"></a>设置 doxygen 参数</h4><p>执行 <code>doxygen -g</code> 生成详细注释的 Doxyfile 文件，然后修改如下地方参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#---------------生成 .html 文件---------------</span>PROJECT_NAME           <span class="token operator">=</span> <span class="token string">"My CustomQch"</span>            <span class="token comment"># 生成文档的名称</span>PROJECT_NUMBER         <span class="token operator">=</span> <span class="token number">1.0</span>.0                     <span class="token comment"># 项目文档的版本号码</span>OUTPUT_DIRECTORY       <span class="token operator">=</span> ./doc                     <span class="token comment"># 输出存放文档的路径</span>OUTPUT_LANGUAGE        <span class="token operator">=</span> Chinese                   <span class="token comment"># 生成文档为中/英文 English</span>RECURSIVE              <span class="token operator">=</span> YES                       <span class="token comment"># 文件递归，包括子文件也要输出为文档</span>IMAGE_PATH             <span class="token operator">=</span> ./doc/images              <span class="token comment"># 文档里面插入图片的存放路径</span>DOT_PATH               <span class="token operator">=</span> /usr/local/bin            <span class="token comment"># 安装 graphviz ，在此可找到 dot</span><span class="token comment">#---------------生成 .qhp 文件---------------</span>SHORT_NAMES            <span class="token operator">=</span> YES                       <span class="token comment"># 生成更短的文件名</span>GENERATE_QHP           <span class="token operator">=</span> YES                       <span class="token comment"># 使用命名空间、生成 .qch ，此必须开启</span>QCH_FILE               <span class="token operator">=</span> ./doc/my_custom_qch.qch   <span class="token comment"># 通过 html 生成的 qch 路径</span>QHP_NAMESPACE          <span class="token operator">=</span> ifmet.cn                  <span class="token comment"># 命名空间要是唯一的，才能显示</span>QHP_CUST_FILTER_NAME   <span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意:　如果没有把Qt bin的路径加到 path中, 则 QHG_LOCATION 需要指定 qhelpgenerator 的全路径</p><br><h4 id="生成-html-qhp"><a href="#生成-html-qhp" class="headerlink" title="生成 html + qhp"></a>生成 html + qhp</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">doxygen Doxyfile   <span class="token comment"># 简写为 doxygen</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        执行上面命令生成 <code>.html</code> 网页和 <code>.qhp</code> 文件。若报生成 <code>dot</code>  转换 <code>png</code> 失败，则需要安装  <code>graphviz</code> 包，其安装路径为  <code>/usr/local/bin</code></p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210308162516247.png" width="100%"/ loading="lazy"><p>一般会直接生成 <code>index.html</code> 、 <code>index.qhp</code>；如参数配置对了，会直接生成 <code>my_custom_qch.qch</code> 文件，若是没有，也可执行生成</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  CustomQch <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  qhelpgenerator ./doc/html/index.qhp -o ./doc/index.qch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210308173339.png" width="70%"/ loading="lazy"><br><h4 id="注册-qch"><a href="#注册-qch" class="headerlink" title="注册 .qch"></a>注册 .qch</h4><p>注册执行成功会如下，点击查看如图。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">☁  doc <span class="token punctuation">[</span>master<span class="token punctuation">]</span> ⚡  assistant -register my_custom_qch.qchDocumentation successfully registered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/image-20210308165123417.png" width="90%"/ loading="lazy"><br><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://doc.qt.io/archives/qt-4.8/qthelp-framework.html">The Qt Help Framework</a></li><li><a href="http://shouce.jb51.net/qt-beginning/52.html">定制Qt帮助系统</a> </li><li><a href="https://www.geek-share.com/detail/2515064905.html">利用qt制作帮助文档</a></li><li><a href="https://stackoverflow.com/questions/7951776/sh-dot-command-not-found-doxygen-lion">sh: dot: command not found + doxygen + Lion</a> </li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  【CustomQch】，所有步骤直接查看对应 commit 的哈希即可。</p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　想着，将项目 &lt;code&gt;API&lt;/code&gt; 的文档，能够生成离线版嵌入 &lt;code&gt;Qt&lt;/code&gt; 助手  那样就方便很多，或者直接在 &lt;code&gt;Qt Creator&lt;/code&gt; 里面点击帮助查看。&lt;/p&gt;
&lt;p&gt;​        本文讲述如何将 &lt;code&gt;Qt / C++&lt;/code&gt; 代码函数注释，解析生成 &lt;code&gt;html&lt;/code&gt; 网页，生成 &lt;code&gt;.qhp&lt;/code&gt; 后转换为 &lt;code&gt;.qch&lt;/code&gt;，然后注册到  &lt;code&gt;Qt Assistants&lt;/code&gt;  里面查看。&lt;font color=#D0087E size=4 face=&quot;STFangsong&quot;&gt;附上集成 DTK 开发手册到 Qt Assistants 的操作。&lt;/font&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek%202021-03-09%2013-08.gif&quot; width=&quot;100%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="学习 - Doxygen" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Doxygen/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 部署 valine 评论的 leancloud 设置</title>
    <link href="https://ifmet.cn/posts/f8ca040f/"/>
    <id>https://ifmet.cn/posts/f8ca040f/</id>
    <published>2021-03-08T16:05:28.000Z</published>
    <updated>2021-05-09T21:18:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　很久之前，就是使用的 <code>valine</code> 的评论系统，实际是在 <code>leancloud</code> 平台进行部署的。也算是之前文章今发。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>一开始建议选择 <strong>国际版</strong>，后面绑定域名可以无需备案。点击 <code>存储</code> - <code>创建 Class</code>；名称为 Counter 后点击确认。</p><p>在 <code>设置</code> - <code>应用 Keys</code> 中记录对应的 <strong>AppID</strong> 、<strong>AppKey</strong>  即可；然后填写进 yun 主题的 .yml 文件 （ 实际是 <code>hexo/source/_data/yun.yml</code>，由 yun 主题约定的） ； 参见 <a href="https://hexo-theme-yun.vercel.app/guide/third-party-support.html#valine">yun - valine</a> 、<a href="https://valine.js.org/quickstart.html#%E8%8E%B7%E5%8F%96APP-ID-%E5%92%8C-APP-Key">valine.js.org</a>  配置说明</p><br><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>点击 <code>云引擎</code> -  <code>-WEB</code> - <code>部署</code> - <code>部署项目</code>  - <code>-o- Git部署</code>，点击 <code>配置 Git</code> 后，输入后，点击刷新。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/zhaojun1998/Valine-Admin.git   <span class="token comment"># 新版，推荐，邮件通知很棒</span>设置教程：https://github.com/zhaojun1998/Valine-Admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>PS: <del><code>https://github.com/DesertsP/Valine-Admin.git</code>  # 旧版，v1.4.0 后没有自带邮件功能，不推荐</del></p><p>再次进入到部署，如下图点击 <code>部署</code>， 略加等待，即可部署成功。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150154.png" width="80%"/ loading="lazy"><br><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>点击 <code>设置</code> - <code>域名绑定</code> - <code>绑定新域名</code>，选择如下，随后按照提示，去阿里云配置 DNS 解析。</p><p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150753.png" width="45%"/ loading="lazy">  <img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306150831.png" width="45%"/ loading="lazy"></p><p>随后等待即可成功。如果选取 自动 SSL 证书管理，第一次显示失败（我就遇到了），那么只需要再重新尝试配置一遍 DNS 解析，它也会成功。</p><br><h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><p>点击 <code>云引擎</code> -  <code>-WEB</code> - <code>设置</code> - <strong>添加</strong>， 添加一些如下变量， 可以用来自定义一些邮件通知、通知模板、消息回复等个性化的设置。 详细参考 <a href="https://deserts.io/valine-admin-document/">Valine Admin 配置手册</a> </p><table><thead><tr><th>变量</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>Deserts</td><td>[必填]博客名称</td></tr><tr><td>SITE_URL</td><td><a href="https://panjunwen.com/">https://panjunwen.com</a></td><td>[必填]首页地址</td></tr><tr><td><strong>SMTP_SERVICE</strong></td><td>QQ</td><td>[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services">更多</a></td></tr><tr><td>SMTP_USER</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]SMTP登录用户</td></tr><tr><td>SMTP_PASS</td><td>ccxxxxxxxxch</td><td>[必填]SMTP登录密码（QQ邮箱需要获取独立密码）</td></tr><tr><td>SENDER_NAME</td><td>Deserts</td><td>[必填]发件人</td></tr><tr><td>SENDER_EMAIL</td><td><a href="mailto:xxxxxx@qq.com">xxxxxx@qq.com</a></td><td>[必填]发件邮箱</td></tr><tr><td>ADMIN_URL</td><td><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td>[建议]Web主机二级域名（云引擎域名），用于自动唤醒</td></tr><tr><td>BLOGGER_EMAIL</td><td><a href="mailto:xxxxx@gmail.com">xxxxx@gmail.com</a></td><td>[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td>AKISMET_KEY</td><td>xxxxxxxx</td><td>[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr></tbody></table><p><font color=#D0087E size=4 face="幼圆">然后点击重启部署，即可生效。</font> </p><br><h3 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h3><p>看到运行中，输入浏览器输入 <code>https://云引擎域名/sign-up</code> 对应我的就是 <code>https://valine.ifmet.cn/sign-up </code>，第一次登录输入是让注册管理员登录信息</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306154824.png" width="50%"/ loading="lazy"><p> 输入完成之后，它会自动跳转到  <code>https://云引擎域名</code> 网站让登录，输入用户名，刚才的密码，即可登录成功。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306154958.png" width="50%"/ loading="lazy"><br><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>​        免费的 leancloud 是会自动休眠的，这里设置一下。注意国际版使用UTC-0时间，注意与国内时间对应。我的配置如下：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306160110.png" width="90%"/ loading="lazy"><br><h3 id="邮件通知模板"><a href="#邮件通知模板" class="headerlink" title="邮件通知模板"></a>邮件通知模板</h3><p>在 云引擎里面，是可以修改自定义的参数的，从而修改邮件模板的样式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　很久之前，就是使用的 &lt;code&gt;valine&lt;/code&gt; 的评论系统，实际是在 &lt;code&gt;leancloud&lt;/code&gt; 平台进行部署的。也算是之前文章今发。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Hexo" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 开启双线程解析部署到 GitHub + aliyun</title>
    <link href="https://ifmet.cn/posts/e5b4e435/"/>
    <id>https://ifmet.cn/posts/e5b4e435/</id>
    <published>2021-03-06T00:57:28.000Z</published>
    <updated>2021-03-06T00:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>  本站 <a href="https://ifmet.cn/">ifmet.cn</a> 迁移一份到国内服务器后，分享一下我当前的博客运行设计方案实行，以及我如何利用 <code>GitHub</code> 的 <code>Action</code> 设置脚本，进行双解析：<code>阿里云服务器</code> + <code>GitHub Pages</code>。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306.png" width="90%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h3 id="部署原理"><a href="#部署原理" class="headerlink" title="部署原理"></a>部署原理</h3><p>​        当前博客的部署原理如上图，解决了之前在国内访问略慢的遗憾。现在这套方案，非常的满足我的个人所需。</p><p><strong>图解注释：</strong><br>本电脑 M：主力编程机器，也可以是任意一台设备<br>服务器 A：GitHub 仓库 xmuliMark，存放源文件（*.md），只使用 master 分支<br>服务器 B：GitHub 仓库 xmuli.github.io，存放解析后网页（*. html），使用 master 分支 (非默认分支)<br>服务器 C：国内阿里云的轻量级服务器，存放解析后网页（*. html），使用 master 分支</p><p><strong>优点如下：</strong></p><ul><li><font color=#D0087E size=4 face="幼圆">任意电脑写 <code>Markdown</code> 文章，然后推送到 A 仓库即可（不用配置关心环境）</font></li><li>不需本地解析，都是远程服务器解析，在部署到另外两台远程服务器</li><li>国内 IP 访问，解析到阿里云服务器</li><li>国外 IP 访问，解析到 <code>GitHub</code> 的服务器</li><li>仅一份源文件，两份部署后的解析文件，各自部署</li><li>源文件仅自己可访问，提高安全（将源文件与解析后的网页文件分开）</li><li>全程自己搭建，学习动手部署，甚是快乐</li><li>费用极低（阿里云服务器 + 域名费用）</li><li>自己的服务器又部署一个服务，感觉惬意</li></ul><br><h3 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h3><p><strong>关于如何部署，详细可以参考这两篇</strong></p><ul><li><a href="https://ifmet.cn/posts/5490ca44/">阿里云服务器部署 Hexo 博客</a> </li><li><a href="https://ifmet.cn/posts/70a6b02f/">阿里云服务器 nginx 上部署 SSL 证书实现 https 访问</a> </li></ul><p>再之前的，可以参考 <a href="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-hexo/">此系列</a> ，记录着我搭建博客的一些记录</p><br><h3 id="配置-GitHub-Action："><a href="#配置-GitHub-Action：" class="headerlink" title="配置 GitHub Action："></a>配置 GitHub Action：</h3><p>​        部署中的一个痛点：A 仓库存放 markdown 文件，然后可以利用 GitHub 的 Action 服务，自动解析为一份 html 网页文件，但是如何使用一个 .yml 部署到 阿里云服务器 + GitHub Pages 呢？</p><p>​        附上我比较优雅的解决方案，其中 A 仓库的 .yml 如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 工作流程的名称</span><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Deploy GitHub Page + Aliyun<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">20.04</span>        <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2.3.4          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js environment      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v2.1.5      <span class="token key atrule">with</span><span class="token punctuation">:</span>         <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"14.x"</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo deploy      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token key atrule">HEXO_DEPLOY_KEY</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.HEXO_DEPLOY_KEY <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>              <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        mkdir -p ~/.ssh/        echo "$HEXO_DEPLOY_KEY" > ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com >> ~/.ssh/known_hosts        ssh-keyscan ifmet.cn >> ~/.ssh/known_hosts        git config --global user.name "xmuli"        git config --global user.email "xmulitech@gmail.com"        npm i -g hexo-cli        npm i        hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其中 <code>HEXO_DEPLOY_KEY</code> 是本地机器秘钥，也是 A 仓库中的 <strong>“Settings-secrets”</strong> ，而 C 服务器有着对应的公钥，且设置了免密登录，而其中末尾的 run: | 中则下面两行是关键，同时部署两个服务器的重点</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ssh<span class="token punctuation">-</span>keyscan github.com <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hostsssh<span class="token punctuation">-</span>keyscan ifmet.cn <span class="token punctuation">></span><span class="token punctuation">></span> ~/.ssh/known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;  本站 &lt;a href=&quot;https://ifmet.cn/&quot;&gt;ifmet.cn&lt;/a&gt; 迁移一份到国内服务器后，分享一下我当前的博客运行设计方案实行，以及我如何利用 &lt;code&gt;GitHub&lt;/code&gt; 的 &lt;code&gt;Action&lt;/code&gt; 设置脚本，进行双解析：&lt;code&gt;阿里云服务器&lt;/code&gt; + &lt;code&gt;GitHub Pages&lt;/code&gt;。&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210306.png&quot; width=&quot;90%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Hexo" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt 项目(Cmake)设置国际化支持</title>
    <link href="https://ifmet.cn/posts/9644ed82/"/>
    <id>https://ifmet.cn/posts/9644ed82/</id>
    <published>2021-03-05T16:13:14.000Z</published>
    <updated>2021-03-05T16:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　准备将我写的悬浮网速窗口上面支持国际化（多语言）；记录一下通过 <code>CMake</code> + <code>Qt</code> 来对项目设置国际化。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-05 17-58.gif" width="80%"/ loading="lazy"><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><p><strong>编程环境：</strong> 　<strong>💻</strong>  <code>uos20 amd64</code> 📎 <code>Qt 5.11.3</code> 📎 <code>cmake 3.13.4</code> 📎 <code>gdb8.0</code> </p><br><h3 id="国际化原理"><a href="#国际化原理" class="headerlink" title="国际化原理"></a>国际化原理</h3><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/image-20210305165840537.png" width="90%"/ loading="lazy"><p>​        <code>Qt</code> 实现多语言的关键原理如图，先扫描所有的源码文件 <code>.cpp</code>、<code>.ui</code> 文件，找到被 <code>tr()</code> 包裹的字符串（多国语言混合也可），然后人使用到 <code>Qt5 Lingust</code> 程序来对每一个 <code>.ts</code> 文件进行翻译，再次编译生成所需的 <code>.qm</code> 文件。</p><br><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>​        因为要对自己的程序完成国际化，先在 <code>CMakeLists.txt</code> 添加如下代码，标明使用 <code>LinguistTools</code> 来生成 <code>*.ts</code> 文件</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span>TS_FILES        ./translations/zh_CN.ts        ./translations/zh_TW.ts<span class="token punctuation">)</span><span class="token keyword">find_package</span><span class="token punctuation">(</span>Qt<span class="token punctuation">$&#123;</span><span class="token variable">QT_VERSION</span><span class="token punctuation">&#125;</span> COMPONENTS <span class="token punctuation">$&#123;</span>REQUIRED_LIBS<span class="token punctuation">&#125;</span> LinguistTools REQUIRED<span class="token punctuation">)</span><span class="token function">qt5_create_translation</span><span class="token punctuation">(</span>QM_FILES <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>TS_FILES<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        后对项目执行 <code>CMake</code>、编译后，会根据 <code>.cpp</code> 和 <code>.ui</code> 文件里面字符串扫描（字符串可以同时为几国语言混合，但必须使用 <code>tr()</code> 包裹）；  会在源码路径的 <code>./translations/</code> 下生成两个 <code>zh_CN.ts、zh_TW.ts</code> 文件；使用 <code>Qt5 Lingust</code> ，手工对源文件翻译本国语言保存。</p><br><p>​        再次编译一遍，在 <code>build-xxx</code> 文件夹中得到 <code>*.qm</code> 文件，一般而言，然后在源码里面加上如下，即完成。若是没生效的话，则可能没执行 <code>ui-&gt;retranslateUi(this);</code> 函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QTranslator trans<span class="token punctuation">;</span>trans<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> <span class="token function">QLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".qm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">installTranslator</span><span class="token punctuation">(</span>m_trans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><p>但实际其中最后一步要修改一下，结合实际项目，将多语言按钮写在 <code>QComboBox</code> 控件中；在其中添加</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QStringList listLang<span class="token punctuation">;</span>QStringList listData<span class="token punctuation">;</span>listLang <span class="token operator">&lt;&lt;</span> <span class="token string">"English"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"简体中文"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"繁體中文(台湾)"</span><span class="token punctuation">;</span>listData <span class="token operator">&lt;&lt;</span> <span class="token string">"es_US"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"zh_CN"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"zh_TW"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> listLang<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    ui<span class="token operator">-></span>comboBoxLanguage<span class="token operator">-></span><span class="token function">addItem</span><span class="token punctuation">(</span>listLang<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> listData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对该控件添加对应的槽函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">WinSetting</span><span class="token operator">::</span><span class="token function">onComboBoxLanguage</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QString <span class="token function">language</span><span class="token punctuation">(</span><span class="token string">"zh_CN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    language <span class="token operator">=</span> ui<span class="token operator">-></span>comboBoxLanguage<span class="token operator">-></span><span class="token function">itemData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> ok <span class="token operator">=</span> m_trans<span class="token operator">-></span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./"</span> <span class="token operator">+</span> language <span class="token operator">+</span> <span class="token string">".qm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"---------@1--->"</span> <span class="token operator">&lt;&lt;</span> language <span class="token operator">&lt;&lt;</span> ok<span class="token punctuation">;</span>    <span class="token class-name">QCoreApplication</span><span class="token operator">::</span><span class="token function">installTranslator</span><span class="token punctuation">(</span>m_trans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color=#D0087E size=4 face="幼圆">其中每次运行 <code>installTranslator()</code> 的时候，都会触发 <code>QEvent::LanguageChange</code> 事件信号；故需要在事件过滤器中，添加对应的处理，响应更新界面更新文字。<strong>还要在该 QcomboBox 控件中安装此事件过滤器；</strong>  此时就已经完成了，可以不关闭程序切换多语言了。</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token class-name">WinSetting</span><span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>QObject <span class="token operator">*</span>watched<span class="token punctuation">,</span> QEvent <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>watched <span class="token operator">==</span> ui<span class="token operator">-></span>comboBoxLanguage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> QEvent<span class="token operator">::</span>LanguageChange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ui<span class="token operator">-></span><span class="token function">retranslateUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token class-name">QWidget</span><span class="token operator">::</span><span class="token function">eventFilter</span><span class="token punctuation">(</span>watched<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>若在 <code>QtCreator</code> 中，点击 “清理”，会删除 <code>/translations</code> 下的所有 <code>.ts</code> 文件，再次编译后的生成是空的未翻译的 <code>.ts</code> 文件；坑坑坑！！！</p></li><li><p><font color=#FE7207  size=4 face="幼圆">一般使用设计器来设计的界面 UI，也就是程序源码中我们看到的 *.ui文件，在载入翻译器后，我们应该调用 ui-&gt;retranslateUi() ，这个函数实际上就是把 界面 控件的text重新载入一遍，可以在 ui_*.cpp  中看到该函数的实现。</font></p></li><li><p>当语言进行切换时，需要调用 <code>ui-&gt;retranslateUi(this);</code> 更新主窗口。 如果非主窗口，则这个 <code>installTranslator</code> 函数会触发<code>void changeEvent(QEvent *e)</code> 事件。</p><p>原因如下：系统调用完 <code>installTranslator</code> 函数之后，系统会自动给程序中所有的 <code>QWidget</code> 以及其子类发送  <code>QEvent::LanguageChange()</code> 信号，并告知<code>changeEvent</code>槽 <code>event</code> 产生。所以，在要切换语言的每个窗体中都要重写接受 <code>QEvent::LanguageChange()</code> 信号的 <code>changeEvent</code> 函数，从而实现了语言的动态切换。</p><p>注意：加载主程序与子插件程序翻译文件时的别名或者路径不要相同，否则子插件程序翻译有可能不生效。</p></li></ul><br><h3 id="项目提交"><a href="#项目提交" class="headerlink" title="项目提交"></a>项目提交</h3><p>在 <a href="https://github.com/xmuli/lfxNet">lfxNet</a> 的实时网速程序中，实际提交代码可提供大家参考</p><ol><li>在 <code>Cmake</code> 添加调用 <code>LinguistTools</code> 的代码： <a href="https://github.com/xmuli/lfxNet/commit/948522d8bf0e4bfd90b6befa5b6f59f76561aac4">#948522d8b</a> </li><li>更新翻译 <code>.ts</code> 文件: <a href="https://github.com/xmuli/lfxNet/commit/9602aa3e365b0c43510b6812c4c5209c8f0f8ba1">#9602aa3e3</a> 和 <a href="https://github.com/xmuli/lfxNet/commit/4e659fe139ecc56ee8c2e449dac25ab3512baa19">#4e659fe13</a> </li><li>设置多语言切换： <a href="https://github.com/xmuli/lfxNet/commit/31b2561bd2de8bc036a1a836b267f4310d226e3e">#31b2561bd</a> </li></ol><br><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://shouce.jb51.net/qt-beginning/51.html">国际化</a> </li><li><a href="https://www.cnblogs.com/apocelipes/p/14355460.html">配置CLion管理Qt项目国际化支持</a> </li><li><a href="https://blog.csdn.net/hebbely/article/details/69388763">Qt 多国语言国际化</a> </li><li><a href="https://blog.csdn.net/u011857683/article/details/78042102">Qt多语言实现和动态切换（国际化）</a> </li></ul><br><h3 id="系列地址："><a href="#系列地址：" class="headerlink" title="系列地址："></a>系列地址：</h3><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a>  </p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 <code>QT / DTK</code> 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　准备将我写的悬浮网速窗口上面支持国际化（多语言）；记录一下通过 &lt;code&gt;CMake&lt;/code&gt; + &lt;code&gt;Qt&lt;/code&gt; 来对项目设置国际化。&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/Peek 2021-03-05 17-58.gif&quot; width=&quot;80%&quot;/&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</title>
    <link href="https://ifmet.cn/posts/8b05b275/"/>
    <id>https://ifmet.cn/posts/8b05b275/</id>
    <published>2021-03-01T11:11:13.000Z</published>
    <updated>2021-03-01T11:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　在 <code>Mac</code> 上编译 <code>qt 5.15</code> 源码，<code>debug</code> 和 <code>release</code> 版本。感觉每一个学 <code>C++/Qt</code> 的人，大概都会早晚都会这么一个念头，去编译一下 Qt 源码，只是有去尝试或者没有尝试过罢了。本文提供一个详细的编译全程和原文翻译。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​        下载最新的 <code>Qt</code>  源码(5.15.2)来编译一下，编译一个 release 和 debug 的最新代码；当然，也可以只编译所有源码其中的一些子模块；或者直接下载子模块代码；和再编译一下 QtCreator ；源码官方的<a href="https://download.qt.io/official_releases/qt/">下载地址</a> 。<br>​        这里将 qt-everywhere 和 qtbase 的源码都编译一下；且分别编译一下</p><p>首先可以参考对应的官方编译说明：</p><ul><li>英文原文： <a href="https://ifmet.cn/posts/59cc7a9d/">HOW TO BUILD QT5（5.15）</a> </li><li>中文译文：<a href="https://ifmet.cn/posts/df7f9a4d/">如何构建 QT5（5.15）</a> </li><li>再结合本篇文章实践，实际过程和其原文略有差异，文章标注注意点。</li></ul><br><p><strong><a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz">README</a> 上说：</strong></p><ul><li><p>Perl 5.8或更高版本</p></li><li><p>Python 2.7或更高版本</p></li><li><p>支持C++11标准的C++编译器</p></li></ul><br><p><strong>实际本机环境：</strong> <code>MacOS 10.14.6</code> 📎 <code>Command_Line_Tools_for_Xcode_11.3.1</code> 📎 <code>Perl v5.32.1</code> 📎<code>Python 3.9.2</code> 📎 <code>支持 c++11 标准</code> </p><p><strong>处理器：</strong> 2.3 GHz 四核 Intel Core i5 （后面提供编译耗时参考）</p><br><h2 id="编译-QtEveryWhere-源码"><a href="#编译-QtEveryWhere-源码" class="headerlink" title="编译 QtEveryWhere 源码"></a>编译 QtEveryWhere 源码</h2><h3 id="编译-Release-版本"><a href="#编译-Release-版本" class="headerlink" title="编译 Release 版本"></a>编译 Release 版本</h3><p>下载 qt 全部源码： <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf qt-everywhere-src-5.15.2.tar.xz<span class="token builtin class-name">cd</span> qt-everywhere-src-5.15.2./configure -prefix ~/Qt/qteverywhere5.15.2 -release -opensource -nomake tests<span class="token function">make</span> -j8                                   <span class="token comment"># 耗时 52 min</span><span class="token function">make</span> <span class="token function">install</span>                               <span class="token comment"># 安装到 ~/Qt/qteverywhere5.15.2 下，共 689.7 MB </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p><font color=#D0087E size=4 face="幼圆"><strong>注意：</strong></font> </p><p>执行 <code>./configure</code> 脚本时（第 3 行）： <code>~/Qt/qteverywhere5.15.2</code> 为执行 <code>make install</code> 的安装路径；然后执行命令脚本，生成的临时文件都在 <code>.obj/release/</code> 下</p><p><strong>若是编译 <code>release</code> 版本加  <code> -nomake example</code>会失败，应去掉；若是编译 <code>debug</code> 版本可加  <code> -nomake example</code>，可顺利编译成功；</strong> ，遇到如下选择，按下 y 后回车；确认使用开源许可证即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Type <span class="token string">'L'</span> to view the GNU Lesser General Public License version <span class="token number">3</span> <span class="token punctuation">(</span>LGPLv3<span class="token punctuation">)</span>.Type <span class="token string">'G'</span> to view the GNU General Public License version <span class="token number">2</span> <span class="token punctuation">(</span>GPLv2<span class="token punctuation">)</span>.Type <span class="token string">'y'</span> to accept this license offer.Type <span class="token string">'n'</span> to decline this license offer. Do you accept the terms of either license? y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>执行 <code>make -j8</code> 时候，看到如下，即表示编译成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/Library/Developer/CommandLineTools/usr/bin/clang++ -stdlib<span class="token operator">=</span>libc++ -headerpad_max_install_names  -arch x86_64 -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk -mmacosx-version-min<span class="token operator">=</span><span class="token number">10.13</span> -Wl,-rpath,@executable_path/<span class="token punctuation">..</span>/Frameworks -Wl,-rpath,@loader_path/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib -o minibrowser.app/Contents/MacOS/minibrowser .obj/main.o .obj/qrc_qml.o   -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtdeclarative/lib -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtwebview/lib -F/Users/xmuli/project/qt-build/qt-everywhere-src-5.15.2/qtbase/lib -framework QtQuick -framework QtWebView -framework QtGui -framework AppKit -framework Metal -framework QtQmlModels -framework QtQml -framework QtNetwork -framework QtCore -framework DiskArbitration -framework IOKit -framework OpenGL -framework AGL <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="验证-Qt-编译成功"><a href="#验证-Qt-编译成功" class="headerlink" title="验证 Qt 编译成功"></a>验证 Qt 编译成功</h3><p>下载 mac 版本的 <a href="https://download.qt.io/official_releases/qtcreator/4.14/4.14.0/qt-creator-opensource-mac-x86_64-4.14.0.dmg">qtcreator4.14.0</a> ，安装后打开。选中 <strong>“首选项-Kits-Qt Versions”</strong> ，将我们安装好的路径拷贝进去，保存 OK；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_160844.png" width="90%"/ loading="lazy"><br>然后切换到 **“首选项-Kits-Kits”** ，选中 Desktop 64bit 那一个，然后在其中 Qt version 中下拉，选取我们刚才的设置的 Qt 版本，保存；<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_160925.png" width="90%"/ loading="lazy"><br>再创建一个默认的 test 空的 qwidget 空测试项目，其中编译套件选中我们刚才所选；<img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_161021.png" width="70%"/ loading="lazy"><br><p>点击 IDE 的编译，运行，即可成功</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222_161107.png" width="100%"/ loading="lazy"><br><h2 id="编译-QtBase-源码"><a href="#编译-QtBase-源码" class="headerlink" title="编译 QtBase 源码"></a>编译 <code>QtBase</code> 源码</h2><h3 id="编译-Release-版本-1"><a href="#编译-Release-版本-1" class="headerlink" title="编译 Release 版本"></a>编译 Release 版本</h3><p>下载 qtbase 源码：<a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/submodules/qtbase-everywhere-src-5.15.2.tar.xz">qtbase-everywhere-src-5.15.2.tar.xz</a> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf qtbase-everywhere-src-5.15.2.tar.xz<span class="token builtin class-name">cd</span> qtbase-everywhere-src-5.15.2/./configure -prefix ~/Qt/qtbase5.15.2 -release -opensource -nomake tests<span class="token function">make</span> -j8                                        <span class="token comment"># 14:44</span><span class="token function">make</span> installs                                   <span class="token comment"># 安装到 ~/Qt/qtbase5.15.2 下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PS：</strong> 第三行中：</p><p>编译成功，查看到 <code>~/Qt/qtbase5.15.2</code>  有很多新文件夹；</p><br><h3 id="编译-Debug-版本"><a href="#编译-Debug-版本" class="headerlink" title="编译 Debug 版本"></a>编译 Debug 版本</h3><blockquote><p>ERROR: debug-only framework builds are not supported. Configure with -no-framework if you want a pure debug build.</p></blockquote><p>由于上面提示，framework 模块不支持 debug 模式，故编译命名改为如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf qtbase-everywhere-src-5.15.2.tar.xz<span class="token builtin class-name">cd</span> qtbase-everywhere-src-5.15.2./configure -prefix ~/Qt/qtbase5.15.2.debug -debug -opensource -nomake tests -nomake examples -no-framework<span class="token function">make</span> -j8                                   <span class="token comment"># 耗时约 8 min </span><span class="token function">make</span> <span class="token function">install</span>                               <span class="token comment"># 安装到 ~/Qt/qtbase5.15.2.debug 下，共 159.8 MB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译成功，查看到 <code>~/Qt/qtbase5.15.2.debug</code>  有很多新文件夹，欲想验证 qtbase 编译成功否，可参考如上。</p><br><h2 id="截图成功"><a href="#截图成功" class="headerlink" title="截图成功"></a>截图成功</h2><p>很棒，编译的几个版本全部都过了，来一张全家福纪念一下；后面会再重新编译一下 Qt Creator 的源码；虽然上面两个有⚠️符号，但是一样可以编译项目通过</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210222172355.png" width="60%"/ loading="lazy"><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210301110418.png" width="100%"/ loading="lazy"><br><h2 id="若遇报错注意："><a href="#若遇报错注意：" class="headerlink" title="若遇报错注意："></a>若遇报错注意：</h2><p>若遇报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -debug-and-release</span>clang: error: no such <span class="token function">file</span> or directory: <span class="token string">'/Users/xmuli/project/qt-build/qtbase-everywhere-src-5.15.2/lib/libqtpcre2_debug.a'</span>make<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib/QtCore.framework/QtCore_debug<span class="token punctuation">]</span> Error <span class="token number">1</span>make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>debug-release-install<span class="token punctuation">]</span> Error <span class="token number">2</span>make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>sub-corelib-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>make: *** <span class="token punctuation">[</span>sub-src-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span><span class="token comment"># -release</span>clang: **error:** no such <span class="token function">file</span> or directory: <span class="token string">'/Users/xmuli/project/qt-build/qtbase-everywhere-src-5.15.2/lib/libqtpcre2.a'</span>make<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span><span class="token punctuation">..</span>/<span class="token punctuation">..</span>/lib/QtCore.framework/QtCore<span class="token punctuation">]</span> Error <span class="token number">1</span>make<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>sub-corelib-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span>make: *** <span class="token punctuation">[</span>sub-src-install_subtargets<span class="token punctuation">]</span> Error <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因:</strong>  执行了<code>make install -j8</code> ，一边编译，一边安装，造成了依赖关系顺序的问题，就会报错如上</p><p>make -j4 qt-everywhere 需要 1h 30 min，博主亲测；建议买个好的 CPU，人生时间不应浪费在等待上，莫要如我</p><br><h2 id="系列："><a href="#系列：" class="headerlink" title="系列："></a>系列：</h2><p><a href="https://github.com/xmuli/QtExamples">QtExamples</a></p><p>欢迎 <code>star</code> 和 <code>fork</code> 这个系列的 QT / DTK 学习，附学习由浅入深的目录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　在 &lt;code&gt;Mac&lt;/code&gt; 上编译 &lt;code&gt;qt 5.15&lt;/code&gt; 源码，&lt;code&gt;debug&lt;/code&gt; 和 &lt;code&gt;release&lt;/code&gt; 版本。感觉每一个学 &lt;code&gt;C++/Qt&lt;/code&gt; 的人，大概都会早晚都会这么一个念头，去编译一下 Qt 源码，只是有去尝试或者没有尝试过罢了。本文提供一个详细的编译全程和原文翻译。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - MacOS" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-MacOS/"/>
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>如何构建 QT5（5.15）</title>
    <link href="https://ifmet.cn/posts/df7f9a4d/"/>
    <id>https://ifmet.cn/posts/df7f9a4d/</id>
    <published>2021-03-01T10:14:28.000Z</published>
    <updated>2021-03-01T10:14:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong> 本文是 <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 中的 <code>README</code> 的中文版本翻译（自译），其英文原文可见：<a href="https://ifmet.cn/posts/59cc7a9d/">HOW TO BUILD QT5</a>。然后根据此中步骤，成功在 Mac Mojave 中成功编译和运行，其中具体的实战编译参考原文：<a href="https://ifmet.cn/posts/8b05b275/">在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</a> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 id="如何构建QT5"><a href="#如何构建QT5" class="headerlink" title="如何构建QT5"></a>如何构建QT5</h1><h1 id="简介"><a href="#简介" class="headerlink" title=" 简介"></a> 简介</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="   系统要求"></a>   系统要求</h2><pre><code>- Perl 5.8或更高版本- Python 2.7或更高版本- 支持C++11标准的C++编译器 对于其他平台的具体要求。 请参阅 &quot;设置您的机器 &quot;部分。 http://wiki.qt.io/Get_The_Source</code></pre><h2 id="许可证："><a href="#许可证：" class="headerlink" title="   许可证："></a>   许可证：</h2><pre><code>Opensource users:    &lt;license&gt;        = -opensourceCommercial users:    &lt;license&gt;        = -commercial</code></pre><h2 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="   Linux, Mac:"></a>   Linux, Mac:</h2><pre><code>cd &lt;path&gt;/&lt;source_package&gt; ./configure -prefix $PWD/qtbase &lt;license&gt; -nomake tests make -j 4</code></pre><h2 id="Windows"><a href="#Windows" class="headerlink" title="   Windows:"></a>   Windows:</h2><pre><code> 打开一个命令提示符。 确认路径中是否有以下工具。 * 支持的编译器（Visual Studio 2012或更新版本。    MinGW-builds gcc 4.9或更高版本) * Perl 5.12或更高版本[http://www.activestate.com/activeperl/] * Python 2.7或更高版本[http://www.activestate.com/activepython/] * Ruby 1.9.3或更高版本[http://rubyinstaller.org/] cd &lt;path&gt;\&lt;source_package&gt; configure -prefix %CD%\qtbase &lt;license&gt; -nomake tests nmake // jom // mingw32-make 为了加速使用MSVC的qmake的引导，可能需要通过 &quot;-make-tool jom &quot;在configure命令行。如果你不使用jom。 在CL环境变量中添加&quot;/MP &quot;是个好主意。</code></pre><p> 更多细节请见下文。</p><h1 id="Build"><a href="#Build" class="headerlink" title=" Build!"></a> Build!</h1><p> 使用典型的 “configure; make “构建过程。</p><p> 一些相关的配置选项(参见configure -help)。</p><p> -release 编译并连接Qt，同时关闭调试功能。<br> -debug 编译并连接Qt，同时开启调试功能。<br> -nomake tests 禁用测试以加快编译速度。<br> -nomake examples 禁用例子以加快编译速度。<br> -confirm-license 自动确认LGPL 2.1授权。</p><p> 例子为发布版构建。<br> (根据你的系统调整”-jN “参数)</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4</p><p> 开发者构建的例子。<br> (启用更多的自动测试，构建调试版的库，…)</p><p>   ./configure -developer-build <license><br>   make -j4</p><p> 请参阅`./configure -help’的输出，了解各种选项的文档。<br> 配置。</p><p> 上面的例子将构建任何已被启用的Qt5模块，并通过<br> 构建系统中的默认值。</p><p> 可以通过以下方式来构建选定的模块及其依赖关系。<br> `make module-<foo>‘。 例如，只建立qtdeclarative。<br> 以及它所依赖的模块。</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4 module-qtdeclarative</p><p> 如果你只对Qt5的一个子集感兴趣，这可以节省很多时间。</p><h1 id="提示"><a href="#提示" class="headerlink" title=" 提示"></a> 提示</h1><p> 子模块仓库qtrepotools包含了一些有用的脚本，这些脚本用于<br> 开发者和发布工程师。考虑添加qtrepotools/bin<br> 到你的PATH环境变量来访问它们。</p><p> qtrepotools中的qt5_tool有一些更多的功能，可能会让你感兴趣。<br> 试试`qt5_tool –help’。</p><h1 id="从-git-构建-Qt5"><a href="#从-git-构建-Qt5" class="headerlink" title=" 从 git 构建 Qt5"></a> 从 git 构建 Qt5</h1><p> 参见<a href="http://wiki.qt.io/Building_Qt_5_from_Git">http://wiki.qt.io/Building_Qt_5_from_Git</a> 和 README.git<br> 更多信息。<br> 参见<a href="http://wiki.qt.io/Qt_5%EF%BC%8C%E4%BA%86%E8%A7%A3%E5%8F%82%E8%80%83%E5%B9%B3%E5%8F%B0%E3%80%82">http://wiki.qt.io/Qt_5，了解参考平台。</a></p><h1 id="文件资料"><a href="#文件资料" class="headerlink" title=" 文件资料"></a> 文件资料</h1><p> 在配置和编译Qt后，可以通过运行下面的命令来构建文档。<br> “make docs”.</p><p> 在建立了文档之后，你需要用以下方法安装它。<br> 命令。</p><pre><code>make install_docs</code></pre><p> 文档的安装路径设置为$QT_INSTALL_DOCS。<br> 运行 “qmake -query “将列出QT_INSTALL_DOCS的值。</p><p> 关于Qt 5的文档信息位于qtbase/doc/README<br> 或在以下网页：<a href="http://wiki.qt.io/Qt5DocumentationProject">http://wiki.qt.io/Qt5DocumentationProject</a></p><p> 注：构建文档只在桌面平台上测试。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt; 本文是 &lt;a href=&quot;https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz&quot;&gt;qt-everywhere-src-5.15.2.tar.xz&lt;/a&gt; 中的 &lt;code&gt;README&lt;/code&gt; 的中文版本翻译（自译），其英文原文可见：&lt;a href=&quot;https://ifmet.cn/posts/59cc7a9d/&quot;&gt;HOW TO BUILD QT5&lt;/a&gt;。然后根据此中步骤，成功在 Mac Mojave 中成功编译和运行，其中具体的实战编译参考原文：&lt;a href=&quot;https://ifmet.cn/posts/8b05b275/&quot;&gt;在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - 编码规范，辅助技巧" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%8C%E8%BE%85%E5%8A%A9%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>HOW TO BUILD QT5（5.15）</title>
    <link href="https://ifmet.cn/posts/59cc7a9d/"/>
    <id>https://ifmet.cn/posts/59cc7a9d/</id>
    <published>2021-03-01T10:08:28.000Z</published>
    <updated>2021-03-01T10:08:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　本文是 <a href="https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz">qt-everywhere-src-5.15.2.tar.xz</a> 解压后的英文原文的 <code>README</code> 译文，其中文译文可见：<a href="https://ifmet.cn/posts/df7f9a4d/">如何构建 QT5（5.15）</a>。然后根据此中步骤，成功在 <code>Mac Mojave</code> 中成功编译和运行，其中具体的实战编译参考原文：<a href="https://ifmet.cn/posts/8b05b275/">在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本</a> </p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=5 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h1 id="HOW-TO-BUILD-QT5"><a href="#HOW-TO-BUILD-QT5" class="headerlink" title="HOW TO BUILD QT5"></a>HOW TO BUILD QT5</h1><h1 id="Synopsis"><a href="#Synopsis" class="headerlink" title=" Synopsis"></a> Synopsis</h1><h2 id="System-requirements"><a href="#System-requirements" class="headerlink" title="   System requirements"></a>   System requirements</h2><pre><code>- Perl 5.8 or later- Python 2.7 or later- C++ compiler supporting the C++11 standard For other platform specific requirements, please see section &quot;Setting up your machine&quot; on: http://wiki.qt.io/Get_The_Source</code></pre><h2 id="Licensing"><a href="#Licensing" class="headerlink" title="   Licensing:"></a>   Licensing:</h2><pre><code>Opensource users:    &lt;license&gt;        = -opensourceCommercial users:    &lt;license&gt;        = -commercial</code></pre><h2 id="Linux-Mac"><a href="#Linux-Mac" class="headerlink" title="   Linux, Mac:"></a>   Linux, Mac:</h2><pre><code> cd &lt;path&gt;/&lt;source_package&gt; ./configure -prefix $PWD/qtbase &lt;license&gt; -nomake tests make -j 4</code></pre><h2 id="Windows"><a href="#Windows" class="headerlink" title="   Windows:"></a>   Windows:</h2><pre><code> Open a command prompt. Ensure that the following tools can be found in the path: * Supported compiler (Visual Studio 2012 or later,    MinGW-builds gcc 4.9 or later) * Perl version 5.12 or later   [http://www.activestate.com/activeperl/] * Python version 2.7 or later  [http://www.activestate.com/activepython/] * Ruby version 1.9.3 or later  [http://rubyinstaller.org/] cd &lt;path&gt;\&lt;source_package&gt; configure -prefix %CD%\qtbase &lt;license&gt; -nomake tests nmake // jom // mingw32-make To accelerate the bootstrap of qmake with MSVC, it may be useful to pass &quot;-make-tool jom&quot; on the configure command line. If you do not use jom, adding &quot;/MP&quot; to the CL environment variable is a good idea.</code></pre><p> More details follow.</p><h1 id="Build"><a href="#Build" class="headerlink" title=" Build!"></a> Build!</h1><p> A typical `configure; make’ build process is used.</p><p> Some relevant configure options (see configure -help):</p><p> -release              Compile and link Qt with debugging turned off.<br> -debug                Compile and link Qt with debugging turned on.<br> -nomake tests         Disable building of tests to speed up compilation<br> -nomake examples      Disable building of examples to speed up compilation<br> -confirm-license      Automatically acknowledge the LGPL 2.1 license.</p><p> Example for a release build:<br> (adjust the `-jN’ parameter as appropriate for your system)</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4</p><p> Example for a developer build:<br> (enables more autotests, builds debug version of libraries, …)</p><p>   ./configure -developer-build <license><br>   make -j4</p><p> See output of `./configure -help’ for documentation on various options to<br> configure.</p><p> The above examples will build whatever Qt5 modules have been enabled by<br> default in the build system.</p><p> It is possible to build selected modules with their dependencies by doing<br> a `make module-<foo>‘.  For example, to build only qtdeclarative,<br> and the modules it depends on:</p><p>   ./configure -prefix $PWD/qtbase <license><br>   make -j4 module-qtdeclarative</p><p> This can save a lot of time if you are only interested in a subset of Qt5.</p><h1 id="Hints"><a href="#Hints" class="headerlink" title=" Hints"></a> Hints</h1><p> The submodule repository qtrepotools contains useful scripts for<br> developers and release engineers. Consider adding qtrepotools/bin<br> to your PATH environment variable to access them.</p><p> The qt5_tool in qtrepotools has some more features which may be of interest.<br> Try `qt5_tool –help’.</p><h1 id="Building-Qt5-from-git"><a href="#Building-Qt5-from-git" class="headerlink" title=" Building Qt5 from git"></a> Building Qt5 from git</h1><p> See <a href="http://wiki.qt.io/Building_Qt_5_from_Git">http://wiki.qt.io/Building_Qt_5_from_Git</a> and README.git<br> for more information.<br> See <a href="http://wiki.qt.io/Qt_5">http://wiki.qt.io/Qt_5</a> for the reference platforms.</p><h1 id="Documentation"><a href="#Documentation" class="headerlink" title=" Documentation"></a> Documentation</h1><p> After configuring and compiling Qt, building the documentation is possible by running<br> “make docs”.</p><p> After having built the documentation, you need to install it with the following<br> command:</p><pre><code>make install_docs</code></pre><p> The documentation is installed in the path set to $QT_INSTALL_DOCS.<br> Running “qmake -query” will list the value of QT_INSTALL_DOCS.</p><p> Information about Qt 5’s documentation is located in qtbase/doc/README<br> or in the following page: <a href="http://wiki.qt.io/Qt5DocumentationProject">http://wiki.qt.io/Qt5DocumentationProject</a></p><p> Note: Building the documentation is only tested on desktop platforms.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　本文是 &lt;a href=&quot;https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz&quot;&gt;qt-everywhere-src-5.15.2.tar.xz&lt;/a&gt; 解压后的英文原文的 &lt;code&gt;README&lt;/code&gt; 译文，其中文译文可见：&lt;a href=&quot;https://ifmet.cn/posts/df7f9a4d/&quot;&gt;如何构建 QT5（5.15）&lt;/a&gt;。然后根据此中步骤，成功在 &lt;code&gt;Mac Mojave&lt;/code&gt; 中成功编译和运行，其中具体的实战编译参考原文：&lt;a href=&quot;https://ifmet.cn/posts/8b05b275/&quot;&gt;在 Mac 编译成功运行 qt5.15 源码：debug 和 release 版本&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Qt" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Qt/"/>
    
    <category term="专栏 - Qt推倒重学系列" scheme="https://ifmet.cn/categories/%E4%B8%93%E6%A0%8F-Qt%E6%8E%A8%E5%80%92%E9%87%8D%E5%AD%A6%E7%B3%BB%E5%88%97/"/>
    
    <category term="学习 - 编码规范，辅助技巧" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%EF%BC%8C%E8%BE%85%E5%8A%A9%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Qt" scheme="https://ifmet.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>阿里云服务器 nginx 上部署 SSL 证书实现 https 访问</title>
    <link href="https://ifmet.cn/posts/70a6b02f/"/>
    <id>https://ifmet.cn/posts/70a6b02f/</id>
    <published>2021-02-21T12:22:28.000Z</published>
    <updated>2021-02-21T12:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>简  述：</strong>　上一篇在远程服务器上部署了 <code>Hexo</code> 之后，这是其后续一篇，设置部署 <code>https</code> 证书（<code>SSL</code>），记录申请证书、配置相关 <code>nginx</code> 服务，其远程服务器为 <code>Ubuntu 20.04</code>。</p><span id="more"></span><p>[TOC]</p><br><blockquote><p><font color=#D0087E size=4 face="STFangsong">本文初发于 <strong>“偕臧的小站”</strong>  <a href="https://ifmet.cn/">ifmet.cn</a>，同步转载于此。</font></p></blockquote><br><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>自己的阿里云主机相关环境：</p><ul><li><code>Ubuntu 20.04 focal </code>  </li><li><code>Kernel: x86_64 Linux 5.4.0-47-generic</code></li><li><code>nginx version: nginx/1.18.0 (Ubuntu)</code> </li></ul><br><h2 id="申请-SSL"><a href="#申请-SSL" class="headerlink" title="申请 SSL"></a>申请 SSL</h2><p>​    一年前，在阿里云申请过一次免费的 ssl ：<a href="https://blog.csdn.net/qq_33154343/article/details/104727225">刚买的域名怎么绑定自己博客？再白嫖一年的SSL，使用https访问博客</a> ，但是每次最长时间仅一年，顿感入口隐藏只深；</p><p>​    现在再次需要申请阿里云免费 ssl，发现入口比之前更深了，方法也比之前复杂多了；<del>是互相在比下限嘛</del> 。</p><br><p>登录阿里云，左侧选择 <strong>“SSL 证书-证书资源包”</strong> 里面购买免费的 ssl 证书资源包，一年最多 20 个，每个时间依旧一年；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223_174815.png" width="90%"/ loading="lazy"><p>​    点击证书申请，在 <strong>“状态”</strong> 一栏    按照如下步骤，依次填写对应的，其中设置解析记录选择自动即可：</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223210828.png" width="100%"/ loading="lazy"><p>当到最后一步骤（此时 <strong>“状态”</strong>  一栏也会变成“已签发”）。</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223202950.png" width="25%"/ loading="lazy"><p>​    点击下载对应的 nginx 的证书，下载后解压会得到两个文件 <code>5222721_ifmet.cn.key</code> 和 <code>5222721_ifmet.cn.pem</code> 文件；</p><img src="https://cdn.jsdelivr.net/gh/xmuli/xmuliPic@pic/2021/20210223_174830.png" width="60%"/ loading="lazy"><br><h2 id="部署-SSL"><a href="#部署-SSL" class="headerlink" title="部署 SSL"></a>部署 SSL</h2><h3 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h3><p>​    通过 scp 将上面证书的的两个文件上传到远程服务器的家目录下；然后登陆到远程服务器，<font color=#FF0000  size=4 face="幼圆">将证书文件移动到 <code>/usr/share/nginx/cert</code> 路径下，注意不是 <code>/etc/nginx/nginx.conf</code> 路径</font>；直接 scp 到此目标路径下，会报权限拒绝，故此周转一下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> 5222721_ifmet.cn.* xmuli@20.21.1.11:~/  <span class="token comment"># 上传文件</span>登陆到远程服务器，创建好 cert/文件夹<span class="token function">sudo</span> <span class="token function">mv</span> 5222721_ifmet.cn.* /usr/share/nginx/cert/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h3 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h3><p>修改 nginx 配置文件，修改之前先记得备份</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup<span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到如下地方，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Default server configuration</span>server <span class="token punctuation">&#123;</span>listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将其修改为：将原先的一个 server 拆分为两个 server；<code>listen 80</code> 表示 http 协议，访问会 return ；强制改为跳转为 https: 协议访问（<code>listen 443</code>）；不然就会可同时访问 http 和 https 两个，而默认浏览器输入 <code>ifmet.cn</code> 顶级域名，默认是选择 http 这个，会有警告小锁提示。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Default server configuration</span>server <span class="token punctuation">&#123;</span>        listen <span class="token number">80</span> default_server<span class="token punctuation">;</span>        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:80 default_server<span class="token punctuation">;</span>        server_name ifmet.cn www.ifmet.cn<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>server <span class="token punctuation">&#123;</span>        <span class="token comment"># SSL configuration</span>        <span class="token comment">#</span>        listen <span class="token number">443</span> ssl default_server<span class="token punctuation">;</span>        listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:443 ssl default_server<span class="token punctuation">;</span>        ssl_certificate      /usr/share/nginx/cert/5222721_ifmet.cn.pem<span class="token punctuation">;</span>        ssl_certificate_key  /usr/share/nginx/cert/5222721_ifmet.cn.key<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h3 id="检测配置-nginx-成功"><a href="#检测配置-nginx-成功" class="headerlink" title="检测配置 nginx 成功"></a>检测配置 nginx 成功</h3><p>执行命令，检测配置 nginx 知否正确，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置成功也会输出如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is oknginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token builtin class-name">test</span> is successful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><p>重启服务器后（也可重启服务器），</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h3 id="访问成功"><a href="#访问成功" class="headerlink" title="访问成功"></a>访问成功</h3><p>再次在 <code>chrome</code> 中输入域名；即可看到安装的小锁，开启 https 访问成功。</p><br><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>若是遇到中途遇到页面访问报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">400</span> Bad RequestThe plain HTTP request was sent to HTTPS portnginx/1.18.0 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则通常是将配置下面两行的时候，多加了一行 <code>ssl on;</code>，将其删掉、或注释掉、或者改写为  <code>ssl off;</code> 即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssl on<span class="token punctuation">;</span>ssl_certificate      /usr/share/nginx/cert/5222721_ifmet.cn.pem<span class="token punctuation">;</span>ssl_certificate_key  /usr/share/nginx/cert/5222721_ifmet.cn.key<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/mangrandi/article/details/80427863">阿里云+Ubuntu+nginx+https的证书申请与配置</a> </li><li><a href="https://blog.csdn.net/henryhu712/article/details/85217371">Ubuntu 下配置 Nginx 服务器的 SSL 证书</a> </li><li><a href="https://blog.csdn.net/palmer_kai/article/details/89668053">nginx 配置 http, https可以同时访问（报错： The plain HTTP request was sent to HTTPS port）</a> </li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;简  述：&lt;/strong&gt;　上一篇在远程服务器上部署了 &lt;code&gt;Hexo&lt;/code&gt; 之后，这是其后续一篇，设置部署 &lt;code&gt;https&lt;/code&gt; 证书（&lt;code&gt;SSL&lt;/code&gt;），记录申请证书、配置相关 &lt;code&gt;nginx&lt;/code&gt; 服务，其远程服务器为 &lt;code&gt;Ubuntu 20.04&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="学习 - Linux" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Linux/"/>
    
    <category term="学习 - Hexo" scheme="https://ifmet.cn/categories/%E5%AD%A6%E4%B9%A0-Hexo/"/>
    
    
  </entry>
  
</feed>
